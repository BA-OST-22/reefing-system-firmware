
reefing-system-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011398  0800c000  0800c000  0001c000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  0801d398  0801d398  0002d398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801df30  0801df30  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  0801df30  0801df30  0002df30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801df38  0801df38  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801df38  0801df38  0002df38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801df3c  0801df3c  0002df3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0801df40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008350  2000022c  0801e16c  0003022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000857c  0801e16c  0003857c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00054537  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008774  00000000  00000000  00084793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f50  00000000  00000000  0008cf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002c28  00000000  00000000  0008fe58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022559  00000000  00000000  00092a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000355a8  00000000  00000000  000b4fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4c49  00000000  00000000  000ea581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019f1ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cb48  00000000  00000000  0019f220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	2000022c 	.word	0x2000022c
 800c01c:	00000000 	.word	0x00000000
 800c020:	0801d380 	.word	0x0801d380

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000230 	.word	0x20000230
 800c03c:	0801d380 	.word	0x0801d380

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <memchr>:
 800c050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c054:	2a10      	cmp	r2, #16
 800c056:	db2b      	blt.n	800c0b0 <memchr+0x60>
 800c058:	f010 0f07 	tst.w	r0, #7
 800c05c:	d008      	beq.n	800c070 <memchr+0x20>
 800c05e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c062:	3a01      	subs	r2, #1
 800c064:	428b      	cmp	r3, r1
 800c066:	d02d      	beq.n	800c0c4 <memchr+0x74>
 800c068:	f010 0f07 	tst.w	r0, #7
 800c06c:	b342      	cbz	r2, 800c0c0 <memchr+0x70>
 800c06e:	d1f6      	bne.n	800c05e <memchr+0xe>
 800c070:	b4f0      	push	{r4, r5, r6, r7}
 800c072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800c076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800c07a:	f022 0407 	bic.w	r4, r2, #7
 800c07e:	f07f 0700 	mvns.w	r7, #0
 800c082:	2300      	movs	r3, #0
 800c084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800c088:	3c08      	subs	r4, #8
 800c08a:	ea85 0501 	eor.w	r5, r5, r1
 800c08e:	ea86 0601 	eor.w	r6, r6, r1
 800c092:	fa85 f547 	uadd8	r5, r5, r7
 800c096:	faa3 f587 	sel	r5, r3, r7
 800c09a:	fa86 f647 	uadd8	r6, r6, r7
 800c09e:	faa5 f687 	sel	r6, r5, r7
 800c0a2:	b98e      	cbnz	r6, 800c0c8 <memchr+0x78>
 800c0a4:	d1ee      	bne.n	800c084 <memchr+0x34>
 800c0a6:	bcf0      	pop	{r4, r5, r6, r7}
 800c0a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c0ac:	f002 0207 	and.w	r2, r2, #7
 800c0b0:	b132      	cbz	r2, 800c0c0 <memchr+0x70>
 800c0b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0b6:	3a01      	subs	r2, #1
 800c0b8:	ea83 0301 	eor.w	r3, r3, r1
 800c0bc:	b113      	cbz	r3, 800c0c4 <memchr+0x74>
 800c0be:	d1f8      	bne.n	800c0b2 <memchr+0x62>
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	4770      	bx	lr
 800c0c4:	3801      	subs	r0, #1
 800c0c6:	4770      	bx	lr
 800c0c8:	2d00      	cmp	r5, #0
 800c0ca:	bf06      	itte	eq
 800c0cc:	4635      	moveq	r5, r6
 800c0ce:	3803      	subeq	r0, #3
 800c0d0:	3807      	subne	r0, #7
 800c0d2:	f015 0f01 	tst.w	r5, #1
 800c0d6:	d107      	bne.n	800c0e8 <memchr+0x98>
 800c0d8:	3001      	adds	r0, #1
 800c0da:	f415 7f80 	tst.w	r5, #256	; 0x100
 800c0de:	bf02      	ittt	eq
 800c0e0:	3001      	addeq	r0, #1
 800c0e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800c0e6:	3001      	addeq	r0, #1
 800c0e8:	bcf0      	pop	{r4, r5, r6, r7}
 800c0ea:	3801      	subs	r0, #1
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop

0800c0f0 <__aeabi_uldivmod>:
 800c0f0:	b953      	cbnz	r3, 800c108 <__aeabi_uldivmod+0x18>
 800c0f2:	b94a      	cbnz	r2, 800c108 <__aeabi_uldivmod+0x18>
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	bf08      	it	eq
 800c0f8:	2800      	cmpeq	r0, #0
 800c0fa:	bf1c      	itt	ne
 800c0fc:	f04f 31ff 	movne.w	r1, #4294967295
 800c100:	f04f 30ff 	movne.w	r0, #4294967295
 800c104:	f000 b96e 	b.w	800c3e4 <__aeabi_idiv0>
 800c108:	f1ad 0c08 	sub.w	ip, sp, #8
 800c10c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c110:	f000 f806 	bl	800c120 <__udivmoddi4>
 800c114:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c11c:	b004      	add	sp, #16
 800c11e:	4770      	bx	lr

0800c120 <__udivmoddi4>:
 800c120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	9d08      	ldr	r5, [sp, #32]
 800c126:	4604      	mov	r4, r0
 800c128:	468c      	mov	ip, r1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f040 8083 	bne.w	800c236 <__udivmoddi4+0x116>
 800c130:	428a      	cmp	r2, r1
 800c132:	4617      	mov	r7, r2
 800c134:	d947      	bls.n	800c1c6 <__udivmoddi4+0xa6>
 800c136:	fab2 f282 	clz	r2, r2
 800c13a:	b142      	cbz	r2, 800c14e <__udivmoddi4+0x2e>
 800c13c:	f1c2 0020 	rsb	r0, r2, #32
 800c140:	fa24 f000 	lsr.w	r0, r4, r0
 800c144:	4091      	lsls	r1, r2
 800c146:	4097      	lsls	r7, r2
 800c148:	ea40 0c01 	orr.w	ip, r0, r1
 800c14c:	4094      	lsls	r4, r2
 800c14e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c152:	0c23      	lsrs	r3, r4, #16
 800c154:	fbbc f6f8 	udiv	r6, ip, r8
 800c158:	fa1f fe87 	uxth.w	lr, r7
 800c15c:	fb08 c116 	mls	r1, r8, r6, ip
 800c160:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c164:	fb06 f10e 	mul.w	r1, r6, lr
 800c168:	4299      	cmp	r1, r3
 800c16a:	d909      	bls.n	800c180 <__udivmoddi4+0x60>
 800c16c:	18fb      	adds	r3, r7, r3
 800c16e:	f106 30ff 	add.w	r0, r6, #4294967295
 800c172:	f080 8119 	bcs.w	800c3a8 <__udivmoddi4+0x288>
 800c176:	4299      	cmp	r1, r3
 800c178:	f240 8116 	bls.w	800c3a8 <__udivmoddi4+0x288>
 800c17c:	3e02      	subs	r6, #2
 800c17e:	443b      	add	r3, r7
 800c180:	1a5b      	subs	r3, r3, r1
 800c182:	b2a4      	uxth	r4, r4
 800c184:	fbb3 f0f8 	udiv	r0, r3, r8
 800c188:	fb08 3310 	mls	r3, r8, r0, r3
 800c18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c190:	fb00 fe0e 	mul.w	lr, r0, lr
 800c194:	45a6      	cmp	lr, r4
 800c196:	d909      	bls.n	800c1ac <__udivmoddi4+0x8c>
 800c198:	193c      	adds	r4, r7, r4
 800c19a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c19e:	f080 8105 	bcs.w	800c3ac <__udivmoddi4+0x28c>
 800c1a2:	45a6      	cmp	lr, r4
 800c1a4:	f240 8102 	bls.w	800c3ac <__udivmoddi4+0x28c>
 800c1a8:	3802      	subs	r0, #2
 800c1aa:	443c      	add	r4, r7
 800c1ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c1b0:	eba4 040e 	sub.w	r4, r4, lr
 800c1b4:	2600      	movs	r6, #0
 800c1b6:	b11d      	cbz	r5, 800c1c0 <__udivmoddi4+0xa0>
 800c1b8:	40d4      	lsrs	r4, r2
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e9c5 4300 	strd	r4, r3, [r5]
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c6:	b902      	cbnz	r2, 800c1ca <__udivmoddi4+0xaa>
 800c1c8:	deff      	udf	#255	; 0xff
 800c1ca:	fab2 f282 	clz	r2, r2
 800c1ce:	2a00      	cmp	r2, #0
 800c1d0:	d150      	bne.n	800c274 <__udivmoddi4+0x154>
 800c1d2:	1bcb      	subs	r3, r1, r7
 800c1d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1d8:	fa1f f887 	uxth.w	r8, r7
 800c1dc:	2601      	movs	r6, #1
 800c1de:	fbb3 fcfe 	udiv	ip, r3, lr
 800c1e2:	0c21      	lsrs	r1, r4, #16
 800c1e4:	fb0e 331c 	mls	r3, lr, ip, r3
 800c1e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c1ec:	fb08 f30c 	mul.w	r3, r8, ip
 800c1f0:	428b      	cmp	r3, r1
 800c1f2:	d907      	bls.n	800c204 <__udivmoddi4+0xe4>
 800c1f4:	1879      	adds	r1, r7, r1
 800c1f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c1fa:	d202      	bcs.n	800c202 <__udivmoddi4+0xe2>
 800c1fc:	428b      	cmp	r3, r1
 800c1fe:	f200 80e9 	bhi.w	800c3d4 <__udivmoddi4+0x2b4>
 800c202:	4684      	mov	ip, r0
 800c204:	1ac9      	subs	r1, r1, r3
 800c206:	b2a3      	uxth	r3, r4
 800c208:	fbb1 f0fe 	udiv	r0, r1, lr
 800c20c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c210:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c214:	fb08 f800 	mul.w	r8, r8, r0
 800c218:	45a0      	cmp	r8, r4
 800c21a:	d907      	bls.n	800c22c <__udivmoddi4+0x10c>
 800c21c:	193c      	adds	r4, r7, r4
 800c21e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c222:	d202      	bcs.n	800c22a <__udivmoddi4+0x10a>
 800c224:	45a0      	cmp	r8, r4
 800c226:	f200 80d9 	bhi.w	800c3dc <__udivmoddi4+0x2bc>
 800c22a:	4618      	mov	r0, r3
 800c22c:	eba4 0408 	sub.w	r4, r4, r8
 800c230:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c234:	e7bf      	b.n	800c1b6 <__udivmoddi4+0x96>
 800c236:	428b      	cmp	r3, r1
 800c238:	d909      	bls.n	800c24e <__udivmoddi4+0x12e>
 800c23a:	2d00      	cmp	r5, #0
 800c23c:	f000 80b1 	beq.w	800c3a2 <__udivmoddi4+0x282>
 800c240:	2600      	movs	r6, #0
 800c242:	e9c5 0100 	strd	r0, r1, [r5]
 800c246:	4630      	mov	r0, r6
 800c248:	4631      	mov	r1, r6
 800c24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c24e:	fab3 f683 	clz	r6, r3
 800c252:	2e00      	cmp	r6, #0
 800c254:	d14a      	bne.n	800c2ec <__udivmoddi4+0x1cc>
 800c256:	428b      	cmp	r3, r1
 800c258:	d302      	bcc.n	800c260 <__udivmoddi4+0x140>
 800c25a:	4282      	cmp	r2, r0
 800c25c:	f200 80b8 	bhi.w	800c3d0 <__udivmoddi4+0x2b0>
 800c260:	1a84      	subs	r4, r0, r2
 800c262:	eb61 0103 	sbc.w	r1, r1, r3
 800c266:	2001      	movs	r0, #1
 800c268:	468c      	mov	ip, r1
 800c26a:	2d00      	cmp	r5, #0
 800c26c:	d0a8      	beq.n	800c1c0 <__udivmoddi4+0xa0>
 800c26e:	e9c5 4c00 	strd	r4, ip, [r5]
 800c272:	e7a5      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c274:	f1c2 0320 	rsb	r3, r2, #32
 800c278:	fa20 f603 	lsr.w	r6, r0, r3
 800c27c:	4097      	lsls	r7, r2
 800c27e:	fa01 f002 	lsl.w	r0, r1, r2
 800c282:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c286:	40d9      	lsrs	r1, r3
 800c288:	4330      	orrs	r0, r6
 800c28a:	0c03      	lsrs	r3, r0, #16
 800c28c:	fbb1 f6fe 	udiv	r6, r1, lr
 800c290:	fa1f f887 	uxth.w	r8, r7
 800c294:	fb0e 1116 	mls	r1, lr, r6, r1
 800c298:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c29c:	fb06 f108 	mul.w	r1, r6, r8
 800c2a0:	4299      	cmp	r1, r3
 800c2a2:	fa04 f402 	lsl.w	r4, r4, r2
 800c2a6:	d909      	bls.n	800c2bc <__udivmoddi4+0x19c>
 800c2a8:	18fb      	adds	r3, r7, r3
 800c2aa:	f106 3cff 	add.w	ip, r6, #4294967295
 800c2ae:	f080 808d 	bcs.w	800c3cc <__udivmoddi4+0x2ac>
 800c2b2:	4299      	cmp	r1, r3
 800c2b4:	f240 808a 	bls.w	800c3cc <__udivmoddi4+0x2ac>
 800c2b8:	3e02      	subs	r6, #2
 800c2ba:	443b      	add	r3, r7
 800c2bc:	1a5b      	subs	r3, r3, r1
 800c2be:	b281      	uxth	r1, r0
 800c2c0:	fbb3 f0fe 	udiv	r0, r3, lr
 800c2c4:	fb0e 3310 	mls	r3, lr, r0, r3
 800c2c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c2cc:	fb00 f308 	mul.w	r3, r0, r8
 800c2d0:	428b      	cmp	r3, r1
 800c2d2:	d907      	bls.n	800c2e4 <__udivmoddi4+0x1c4>
 800c2d4:	1879      	adds	r1, r7, r1
 800c2d6:	f100 3cff 	add.w	ip, r0, #4294967295
 800c2da:	d273      	bcs.n	800c3c4 <__udivmoddi4+0x2a4>
 800c2dc:	428b      	cmp	r3, r1
 800c2de:	d971      	bls.n	800c3c4 <__udivmoddi4+0x2a4>
 800c2e0:	3802      	subs	r0, #2
 800c2e2:	4439      	add	r1, r7
 800c2e4:	1acb      	subs	r3, r1, r3
 800c2e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c2ea:	e778      	b.n	800c1de <__udivmoddi4+0xbe>
 800c2ec:	f1c6 0c20 	rsb	ip, r6, #32
 800c2f0:	fa03 f406 	lsl.w	r4, r3, r6
 800c2f4:	fa22 f30c 	lsr.w	r3, r2, ip
 800c2f8:	431c      	orrs	r4, r3
 800c2fa:	fa20 f70c 	lsr.w	r7, r0, ip
 800c2fe:	fa01 f306 	lsl.w	r3, r1, r6
 800c302:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c306:	fa21 f10c 	lsr.w	r1, r1, ip
 800c30a:	431f      	orrs	r7, r3
 800c30c:	0c3b      	lsrs	r3, r7, #16
 800c30e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c312:	fa1f f884 	uxth.w	r8, r4
 800c316:	fb0e 1119 	mls	r1, lr, r9, r1
 800c31a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c31e:	fb09 fa08 	mul.w	sl, r9, r8
 800c322:	458a      	cmp	sl, r1
 800c324:	fa02 f206 	lsl.w	r2, r2, r6
 800c328:	fa00 f306 	lsl.w	r3, r0, r6
 800c32c:	d908      	bls.n	800c340 <__udivmoddi4+0x220>
 800c32e:	1861      	adds	r1, r4, r1
 800c330:	f109 30ff 	add.w	r0, r9, #4294967295
 800c334:	d248      	bcs.n	800c3c8 <__udivmoddi4+0x2a8>
 800c336:	458a      	cmp	sl, r1
 800c338:	d946      	bls.n	800c3c8 <__udivmoddi4+0x2a8>
 800c33a:	f1a9 0902 	sub.w	r9, r9, #2
 800c33e:	4421      	add	r1, r4
 800c340:	eba1 010a 	sub.w	r1, r1, sl
 800c344:	b2bf      	uxth	r7, r7
 800c346:	fbb1 f0fe 	udiv	r0, r1, lr
 800c34a:	fb0e 1110 	mls	r1, lr, r0, r1
 800c34e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c352:	fb00 f808 	mul.w	r8, r0, r8
 800c356:	45b8      	cmp	r8, r7
 800c358:	d907      	bls.n	800c36a <__udivmoddi4+0x24a>
 800c35a:	19e7      	adds	r7, r4, r7
 800c35c:	f100 31ff 	add.w	r1, r0, #4294967295
 800c360:	d22e      	bcs.n	800c3c0 <__udivmoddi4+0x2a0>
 800c362:	45b8      	cmp	r8, r7
 800c364:	d92c      	bls.n	800c3c0 <__udivmoddi4+0x2a0>
 800c366:	3802      	subs	r0, #2
 800c368:	4427      	add	r7, r4
 800c36a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c36e:	eba7 0708 	sub.w	r7, r7, r8
 800c372:	fba0 8902 	umull	r8, r9, r0, r2
 800c376:	454f      	cmp	r7, r9
 800c378:	46c6      	mov	lr, r8
 800c37a:	4649      	mov	r1, r9
 800c37c:	d31a      	bcc.n	800c3b4 <__udivmoddi4+0x294>
 800c37e:	d017      	beq.n	800c3b0 <__udivmoddi4+0x290>
 800c380:	b15d      	cbz	r5, 800c39a <__udivmoddi4+0x27a>
 800c382:	ebb3 020e 	subs.w	r2, r3, lr
 800c386:	eb67 0701 	sbc.w	r7, r7, r1
 800c38a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c38e:	40f2      	lsrs	r2, r6
 800c390:	ea4c 0202 	orr.w	r2, ip, r2
 800c394:	40f7      	lsrs	r7, r6
 800c396:	e9c5 2700 	strd	r2, r7, [r5]
 800c39a:	2600      	movs	r6, #0
 800c39c:	4631      	mov	r1, r6
 800c39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a2:	462e      	mov	r6, r5
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	e70b      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c3a8:	4606      	mov	r6, r0
 800c3aa:	e6e9      	b.n	800c180 <__udivmoddi4+0x60>
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	e6fd      	b.n	800c1ac <__udivmoddi4+0x8c>
 800c3b0:	4543      	cmp	r3, r8
 800c3b2:	d2e5      	bcs.n	800c380 <__udivmoddi4+0x260>
 800c3b4:	ebb8 0e02 	subs.w	lr, r8, r2
 800c3b8:	eb69 0104 	sbc.w	r1, r9, r4
 800c3bc:	3801      	subs	r0, #1
 800c3be:	e7df      	b.n	800c380 <__udivmoddi4+0x260>
 800c3c0:	4608      	mov	r0, r1
 800c3c2:	e7d2      	b.n	800c36a <__udivmoddi4+0x24a>
 800c3c4:	4660      	mov	r0, ip
 800c3c6:	e78d      	b.n	800c2e4 <__udivmoddi4+0x1c4>
 800c3c8:	4681      	mov	r9, r0
 800c3ca:	e7b9      	b.n	800c340 <__udivmoddi4+0x220>
 800c3cc:	4666      	mov	r6, ip
 800c3ce:	e775      	b.n	800c2bc <__udivmoddi4+0x19c>
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	e74a      	b.n	800c26a <__udivmoddi4+0x14a>
 800c3d4:	f1ac 0c02 	sub.w	ip, ip, #2
 800c3d8:	4439      	add	r1, r7
 800c3da:	e713      	b.n	800c204 <__udivmoddi4+0xe4>
 800c3dc:	3802      	subs	r0, #2
 800c3de:	443c      	add	r4, r7
 800c3e0:	e724      	b.n	800c22c <__udivmoddi4+0x10c>
 800c3e2:	bf00      	nop

0800c3e4 <__aeabi_idiv0>:
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop

0800c3e8 <is_empty>:
static fifo_t *cli_out;

static void cli_print_error_va(const char *cmdName, const char *format, va_list va);
static void cli_print_error(const char *cmdName, const char *format, ...) __attribute__((format(printf, 2, 3)));

bool is_empty(const char *string) { return (string == NULL || *string == '\0') ? true : false; }
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d003      	beq.n	800c3fe <is_empty+0x16>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <is_empty+0x1a>
 800c3fe:	2301      	movs	r3, #1
 800c400:	e000      	b.n	800c404 <is_empty+0x1c>
 800c402:	2300      	movs	r3, #0
 800c404:	f003 0301 	and.w	r3, r3, #1
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	4618      	mov	r0, r3
 800c40c:	370c      	adds	r7, #12
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <get_min_max>:

void get_min_max(const cli_value_t *var, int *min, int *max) {
 800c416:	b480      	push	{r7}
 800c418:	b085      	sub	sp, #20
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	60b9      	str	r1, [r7, #8]
 800c420:	607a      	str	r2, [r7, #4]
  switch (var->type & VALUE_TYPE_MASK) {
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	791b      	ldrb	r3, [r3, #4]
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <get_min_max+0x1c>
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d10e      	bne.n	800c450 <get_min_max+0x3a>
    case VAR_UINT8:
    case VAR_UINT16:
      *min = var->config.minmax_unsigned.min;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c438:	b29b      	uxth	r3, r3
 800c43a:	461a      	mov	r2, r3
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	601a      	str	r2, [r3, #0]
      *max = var->config.minmax_unsigned.max;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c446:	b29b      	uxth	r3, r3
 800c448:	461a      	mov	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	601a      	str	r2, [r3, #0]

      break;
 800c44e:	e00e      	b.n	800c46e <get_min_max+0x58>
    default:
      *min = var->config.minmax.min;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800c456:	b21b      	sxth	r3, r3
 800c458:	461a      	mov	r2, r3
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	601a      	str	r2, [r3, #0]
      *max = var->config.minmax.max;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 800c464:	b21b      	sxth	r3, r3
 800c466:	461a      	mov	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	601a      	str	r2, [r3, #0]

      break;
 800c46c:	bf00      	nop
  }
}
 800c46e:	bf00      	nop
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
	...

0800c47c <cli_print>:

void cli_print(const char *str) { fifo_write_str(cli_out, str); }
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	4b04      	ldr	r3, [pc, #16]	; (800c498 <cli_print+0x1c>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	6879      	ldr	r1, [r7, #4]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f003 fc60 	bl	800fd50 <fifo_write_str>
 800c490:	bf00      	nop
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	20000350 	.word	0x20000350

0800c49c <cli_prompt>:

static void cli_prompt(void) { cli_printf("\r\n^._.^:>"); }
 800c49c:	b580      	push	{r7, lr}
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	4802      	ldr	r0, [pc, #8]	; (800c4ac <cli_prompt+0x10>)
 800c4a2:	f000 f851 	bl	800c548 <cli_printf>
 800c4a6:	bf00      	nop
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	0801d398 	.word	0x0801d398

0800c4b0 <cli_print_linefeed>:

void cli_print_linefeed(void) { cli_print("\r\n"); }
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	4802      	ldr	r0, [pc, #8]	; (800c4c0 <cli_print_linefeed+0x10>)
 800c4b6:	f7ff ffe1 	bl	800c47c <cli_print>
 800c4ba:	bf00      	nop
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	0801d3a4 	.word	0x0801d3a4

0800c4c4 <cli_print_line>:

void cli_print_line(const char *str) {
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  cli_print(str);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7ff ffd5 	bl	800c47c <cli_print>
  cli_print_linefeed();
 800c4d2:	f7ff ffed 	bl	800c4b0 <cli_print_linefeed>
}
 800c4d6:	bf00      	nop
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
	...

0800c4e0 <cli_printf_va>:

static void cli_printf_va(const char *format, va_list va) {
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  static char buffer[CLI_OUT_BUFFER_SIZE];
  vsnprintf(buffer, CLI_OUT_BUFFER_SIZE, format, va);
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c4f2:	4805      	ldr	r0, [pc, #20]	; (800c508 <cli_printf_va+0x28>)
 800c4f4:	f010 fb36 	bl	801cb64 <vsniprintf>
  cli_print(buffer);
 800c4f8:	4803      	ldr	r0, [pc, #12]	; (800c508 <cli_printf_va+0x28>)
 800c4fa:	f7ff ffbf 	bl	800c47c <cli_print>
}
 800c4fe:	bf00      	nop
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20000354 	.word	0x20000354

0800c50c <cli_write>:

static void cli_write(uint8_t ch) {
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	4603      	mov	r3, r0
 800c514:	71fb      	strb	r3, [r7, #7]
  while (fifo_write(cli_out, ch) == false) osDelay(3);
 800c516:	e002      	b.n	800c51e <cli_write+0x12>
 800c518:	2003      	movs	r0, #3
 800c51a:	f00b fd87 	bl	801802c <osDelay>
 800c51e:	4b09      	ldr	r3, [pc, #36]	; (800c544 <cli_write+0x38>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	79fa      	ldrb	r2, [r7, #7]
 800c524:	4611      	mov	r1, r2
 800c526:	4618      	mov	r0, r3
 800c528:	f003 faf7 	bl	800fb1a <fifo_write>
 800c52c:	4603      	mov	r3, r0
 800c52e:	f083 0301 	eor.w	r3, r3, #1
 800c532:	b2db      	uxtb	r3, r3
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1ef      	bne.n	800c518 <cli_write+0xc>
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	20000350 	.word	0x20000350

0800c548 <cli_printf>:

void cli_printf(const char *format, ...) {
 800c548:	b40f      	push	{r0, r1, r2, r3}
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b082      	sub	sp, #8
 800c54e:	af00      	add	r7, sp, #0
  va_list va;
  va_start(va, format);
 800c550:	f107 0314 	add.w	r3, r7, #20
 800c554:	607b      	str	r3, [r7, #4]
  cli_printf_va(format, va);
 800c556:	6879      	ldr	r1, [r7, #4]
 800c558:	6938      	ldr	r0, [r7, #16]
 800c55a:	f7ff ffc1 	bl	800c4e0 <cli_printf_va>
  va_end(va);
}
 800c55e:	bf00      	nop
 800c560:	3708      	adds	r7, #8
 800c562:	46bd      	mov	sp, r7
 800c564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c568:	b004      	add	sp, #16
 800c56a:	4770      	bx	lr

0800c56c <cli_print_linef>:

void cli_print_linef(const char *format, ...) {
 800c56c:	b40f      	push	{r0, r1, r2, r3}
 800c56e:	b580      	push	{r7, lr}
 800c570:	b082      	sub	sp, #8
 800c572:	af00      	add	r7, sp, #0
  va_list va;
  va_start(va, format);
 800c574:	f107 0314 	add.w	r3, r7, #20
 800c578:	607b      	str	r3, [r7, #4]
  cli_printf_va(format, va);
 800c57a:	6879      	ldr	r1, [r7, #4]
 800c57c:	6938      	ldr	r0, [r7, #16]
 800c57e:	f7ff ffaf 	bl	800c4e0 <cli_printf_va>
  va_end(va);
  cli_print_linefeed();
 800c582:	f7ff ff95 	bl	800c4b0 <cli_print_linefeed>
}
 800c586:	bf00      	nop
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c590:	b004      	add	sp, #16
 800c592:	4770      	bx	lr

0800c594 <cli_print_error_va>:

static void cli_print_error_va(const char *cmdName, const char *format, va_list va) {
 800c594:	b580      	push	{r7, lr}
 800c596:	b0c4      	sub	sp, #272	; 0x110
 800c598:	af00      	add	r7, sp, #0
 800c59a:	f107 030c 	add.w	r3, r7, #12
 800c59e:	6018      	str	r0, [r3, #0]
 800c5a0:	f107 0308 	add.w	r3, r7, #8
 800c5a4:	6019      	str	r1, [r3, #0]
 800c5a6:	1d3b      	adds	r3, r7, #4
 800c5a8:	601a      	str	r2, [r3, #0]
  cli_print("ERROR IN ");
 800c5aa:	4811      	ldr	r0, [pc, #68]	; (800c5f0 <cli_print_error_va+0x5c>)
 800c5ac:	f7ff ff66 	bl	800c47c <cli_print>
  cli_print(cmdName);
 800c5b0:	f107 030c 	add.w	r3, r7, #12
 800c5b4:	6818      	ldr	r0, [r3, #0]
 800c5b6:	f7ff ff61 	bl	800c47c <cli_print>
  cli_print(": ");
 800c5ba:	480e      	ldr	r0, [pc, #56]	; (800c5f4 <cli_print_error_va+0x60>)
 800c5bc:	f7ff ff5e 	bl	800c47c <cli_print>
  char buffer[CLI_OUT_BUFFER_SIZE];
  vsnprintf(buffer, CLI_OUT_BUFFER_SIZE, format, va);
 800c5c0:	1d3b      	adds	r3, r7, #4
 800c5c2:	f107 0208 	add.w	r2, r7, #8
 800c5c6:	f107 0010 	add.w	r0, r7, #16
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6812      	ldr	r2, [r2, #0]
 800c5ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c5d2:	f010 fac7 	bl	801cb64 <vsniprintf>
  cli_print(buffer);
 800c5d6:	f107 0310 	add.w	r3, r7, #16
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7ff ff4e 	bl	800c47c <cli_print>
  cli_print(": ");
 800c5e0:	4804      	ldr	r0, [pc, #16]	; (800c5f4 <cli_print_error_va+0x60>)
 800c5e2:	f7ff ff4b 	bl	800c47c <cli_print>
  va_end(va);
}
 800c5e6:	bf00      	nop
 800c5e8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	0801d3a8 	.word	0x0801d3a8
 800c5f4:	0801d3b4 	.word	0x0801d3b4

0800c5f8 <cli_print_error>:

static void cli_print_error(const char *cmdName, const char *format, ...) {
 800c5f8:	b40e      	push	{r1, r2, r3}
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b085      	sub	sp, #20
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800c602:	f107 0320 	add.w	r3, r7, #32
 800c606:	60fb      	str	r3, [r7, #12]
  cli_print_error_va(cmdName, format, va);
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	69f9      	ldr	r1, [r7, #28]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f7ff ffc1 	bl	800c594 <cli_print_error_va>
}
 800c612:	bf00      	nop
 800c614:	3714      	adds	r7, #20
 800c616:	46bd      	mov	sp, r7
 800c618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c61c:	b003      	add	sp, #12
 800c61e:	4770      	bx	lr

0800c620 <cli_print_error_linef>:

void cli_print_error_linef(const char *cmdName, const char *format, ...) {
 800c620:	b40e      	push	{r1, r2, r3}
 800c622:	b580      	push	{r7, lr}
 800c624:	b085      	sub	sp, #20
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800c62a:	f107 0320 	add.w	r3, r7, #32
 800c62e:	60fb      	str	r3, [r7, #12]
  cli_print_error_va(cmdName, format, va);
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	69f9      	ldr	r1, [r7, #28]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7ff ffad 	bl	800c594 <cli_print_error_va>
  cli_print("\r\n");
 800c63a:	4805      	ldr	r0, [pc, #20]	; (800c650 <cli_print_error_linef+0x30>)
 800c63c:	f7ff ff1e 	bl	800c47c <cli_print>
}
 800c640:	bf00      	nop
 800c642:	3714      	adds	r7, #20
 800c644:	46bd      	mov	sp, r7
 800c646:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c64a:	b003      	add	sp, #12
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	0801d3a4 	.word	0x0801d3a4

0800c654 <skip_space>:

char *skip_space(char *buffer) {
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  while (*(buffer) == ' ') {
 800c65c:	e002      	b.n	800c664 <skip_space+0x10>
    buffer++;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	3301      	adds	r3, #1
 800c662:	607b      	str	r3, [r7, #4]
  while (*(buffer) == ' ') {
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b20      	cmp	r3, #32
 800c66a:	d0f8      	beq.n	800c65e <skip_space+0xa>
  }
  return buffer;
 800c66c:	687b      	ldr	r3, [r7, #4]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	370c      	adds	r7, #12
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr
	...

0800c67c <check_command>:

static char *check_command(char *cmdline, const char *command) {
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  if (!strncasecmp(cmdline, command, strlen(command))  // command names match
 800c686:	6838      	ldr	r0, [r7, #0]
 800c688:	f7ff fcda 	bl	800c040 <strlen>
 800c68c:	4603      	mov	r3, r0
 800c68e:	461a      	mov	r2, r3
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f010 f8da 	bl	801c84c <strncasecmp>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d123      	bne.n	800c6e6 <check_command+0x6a>
      && (isspace((unsigned)cmdline[strlen(command)]) || cmdline[strlen(command)] == 0)) {
 800c69e:	6838      	ldr	r0, [r7, #0]
 800c6a0:	f7ff fcce 	bl	800c040 <strlen>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	4a10      	ldr	r2, [pc, #64]	; (800c6f0 <check_command+0x74>)
 800c6b0:	4413      	add	r3, r2
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	f003 0308 	and.w	r3, r3, #8
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d108      	bne.n	800c6ce <check_command+0x52>
 800c6bc:	6838      	ldr	r0, [r7, #0]
 800c6be:	f7ff fcbf 	bl	800c040 <strlen>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d10b      	bne.n	800c6e6 <check_command+0x6a>
    return skip_space(cmdline + strlen(command) + 1);
 800c6ce:	6838      	ldr	r0, [r7, #0]
 800c6d0:	f7ff fcb6 	bl	800c040 <strlen>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	4413      	add	r3, r2
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7ff ffb9 	bl	800c654 <skip_space>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	e000      	b.n	800c6e8 <check_command+0x6c>
  } else {
    return NULL;
 800c6e6:	2300      	movs	r3, #0
  }
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3708      	adds	r7, #8
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	0801ddfa 	.word	0x0801ddfa

0800c6f4 <process_character>:

static void process_character(const char c) {
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	71fb      	strb	r3, [r7, #7]
  if (buffer_index && (c == '\n' || c == '\r')) {
 800c6fe:	4b4b      	ldr	r3, [pc, #300]	; (800c82c <process_character+0x138>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d070      	beq.n	800c7e8 <process_character+0xf4>
 800c706:	79fb      	ldrb	r3, [r7, #7]
 800c708:	2b0a      	cmp	r3, #10
 800c70a:	d002      	beq.n	800c712 <process_character+0x1e>
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	2b0d      	cmp	r3, #13
 800c710:	d16a      	bne.n	800c7e8 <process_character+0xf4>
    // enter pressed
    cli_print_linefeed();
 800c712:	f7ff fecd 	bl	800c4b0 <cli_print_linefeed>

    // Strip comment starting with # from line
    char *p = cli_buffer;
 800c716:	4b46      	ldr	r3, [pc, #280]	; (800c830 <process_character+0x13c>)
 800c718:	60fb      	str	r3, [r7, #12]
    p = strchr(p, '#');
 800c71a:	2123      	movs	r1, #35	; 0x23
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f010 f887 	bl	801c830 <strchr>
 800c722:	60f8      	str	r0, [r7, #12]
    if (NULL != p) {
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00b      	beq.n	800c742 <process_character+0x4e>
      buffer_index = (uint32_t)(p - cli_buffer);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	4a40      	ldr	r2, [pc, #256]	; (800c830 <process_character+0x13c>)
 800c72e:	1a9b      	subs	r3, r3, r2
 800c730:	461a      	mov	r2, r3
 800c732:	4b3e      	ldr	r3, [pc, #248]	; (800c82c <process_character+0x138>)
 800c734:	601a      	str	r2, [r3, #0]
    }
    // Strip trailing whitespace
    while (buffer_index > 0 && cli_buffer[buffer_index - 1] == ' ') {
 800c736:	e004      	b.n	800c742 <process_character+0x4e>
      buffer_index--;
 800c738:	4b3c      	ldr	r3, [pc, #240]	; (800c82c <process_character+0x138>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3b01      	subs	r3, #1
 800c73e:	4a3b      	ldr	r2, [pc, #236]	; (800c82c <process_character+0x138>)
 800c740:	6013      	str	r3, [r2, #0]
    while (buffer_index > 0 && cli_buffer[buffer_index - 1] == ' ') {
 800c742:	4b3a      	ldr	r3, [pc, #232]	; (800c82c <process_character+0x138>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d006      	beq.n	800c758 <process_character+0x64>
 800c74a:	4b38      	ldr	r3, [pc, #224]	; (800c82c <process_character+0x138>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	3b01      	subs	r3, #1
 800c750:	4a37      	ldr	r2, [pc, #220]	; (800c830 <process_character+0x13c>)
 800c752:	5cd3      	ldrb	r3, [r2, r3]
 800c754:	2b20      	cmp	r3, #32
 800c756:	d0ef      	beq.n	800c738 <process_character+0x44>
    }

    // Process non-empty lines
    if (buffer_index > 0) {
 800c758:	4b34      	ldr	r3, [pc, #208]	; (800c82c <process_character+0x138>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d036      	beq.n	800c7ce <process_character+0xda>
      cli_buffer[buffer_index] = 0;  // null terminate
 800c760:	4b32      	ldr	r3, [pc, #200]	; (800c82c <process_character+0x138>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a32      	ldr	r2, [pc, #200]	; (800c830 <process_character+0x13c>)
 800c766:	2100      	movs	r1, #0
 800c768:	54d1      	strb	r1, [r2, r3]

      const clicmd_t *cmd;
      char *options = NULL;
 800c76a:	2300      	movs	r3, #0
 800c76c:	613b      	str	r3, [r7, #16]
      for (cmd = cmd_table; cmd < cmd_table + NUM_CLI_COMMANDS; cmd++) {
 800c76e:	4b31      	ldr	r3, [pc, #196]	; (800c834 <process_character+0x140>)
 800c770:	617b      	str	r3, [r7, #20]
 800c772:	e00c      	b.n	800c78e <process_character+0x9a>
        options = check_command(cli_buffer, cmd->name);
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4619      	mov	r1, r3
 800c77a:	482d      	ldr	r0, [pc, #180]	; (800c830 <process_character+0x13c>)
 800c77c:	f7ff ff7e 	bl	800c67c <check_command>
 800c780:	6138      	str	r0, [r7, #16]
        if (options) break;
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d10b      	bne.n	800c7a0 <process_character+0xac>
      for (cmd = cmd_table; cmd < cmd_table + NUM_CLI_COMMANDS; cmd++) {
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	3310      	adds	r3, #16
 800c78c:	617b      	str	r3, [r7, #20]
 800c78e:	4b2a      	ldr	r3, [pc, #168]	; (800c838 <process_character+0x144>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	011b      	lsls	r3, r3, #4
 800c794:	4a27      	ldr	r2, [pc, #156]	; (800c834 <process_character+0x140>)
 800c796:	4413      	add	r3, r2
 800c798:	697a      	ldr	r2, [r7, #20]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d3ea      	bcc.n	800c774 <process_character+0x80>
 800c79e:	e000      	b.n	800c7a2 <process_character+0xae>
        if (options) break;
 800c7a0:	bf00      	nop
      }
      if (cmd < cmd_table + NUM_CLI_COMMANDS) {
 800c7a2:	4b25      	ldr	r3, [pc, #148]	; (800c838 <process_character+0x144>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	011b      	lsls	r3, r3, #4
 800c7a8:	4a22      	ldr	r2, [pc, #136]	; (800c834 <process_character+0x140>)
 800c7aa:	4413      	add	r3, r2
 800c7ac:	697a      	ldr	r2, [r7, #20]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d207      	bcs.n	800c7c2 <process_character+0xce>
        cmd->cli_command(cmd->name, options);
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	6812      	ldr	r2, [r2, #0]
 800c7ba:	6939      	ldr	r1, [r7, #16]
 800c7bc:	4610      	mov	r0, r2
 800c7be:	4798      	blx	r3
 800c7c0:	e002      	b.n	800c7c8 <process_character+0xd4>
      } else {
        cli_print_line("UNKNOWN COMMAND, TRY 'HELP'");
 800c7c2:	481e      	ldr	r0, [pc, #120]	; (800c83c <process_character+0x148>)
 800c7c4:	f7ff fe7e 	bl	800c4c4 <cli_print_line>
      }
      buffer_index = 0;
 800c7c8:	4b18      	ldr	r3, [pc, #96]	; (800c82c <process_character+0x138>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
    }
    strncpy(old_cli_buffer, cli_buffer, sizeof(cli_buffer));
 800c7ce:	2280      	movs	r2, #128	; 0x80
 800c7d0:	4917      	ldr	r1, [pc, #92]	; (800c830 <process_character+0x13c>)
 800c7d2:	481b      	ldr	r0, [pc, #108]	; (800c840 <process_character+0x14c>)
 800c7d4:	f010 f85c 	bl	801c890 <strncpy>
    memset(cli_buffer, 0, sizeof(cli_buffer));
 800c7d8:	2280      	movs	r2, #128	; 0x80
 800c7da:	2100      	movs	r1, #0
 800c7dc:	4814      	ldr	r0, [pc, #80]	; (800c830 <process_character+0x13c>)
 800c7de:	f00f ffcf 	bl	801c780 <memset>
    cli_prompt();
 800c7e2:	f7ff fe5b 	bl	800c49c <cli_prompt>
  if (buffer_index && (c == '\n' || c == '\r')) {
 800c7e6:	e01e      	b.n	800c826 <process_character+0x132>

    // 'exit' will reset this flag, so we don't need to print prompt again

  } else if (buffer_index < sizeof(cli_buffer) && c >= 32 && c <= 126) {
 800c7e8:	4b10      	ldr	r3, [pc, #64]	; (800c82c <process_character+0x138>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b7f      	cmp	r3, #127	; 0x7f
 800c7ee:	d81a      	bhi.n	800c826 <process_character+0x132>
 800c7f0:	79fb      	ldrb	r3, [r7, #7]
 800c7f2:	2b1f      	cmp	r3, #31
 800c7f4:	d917      	bls.n	800c826 <process_character+0x132>
 800c7f6:	79fb      	ldrb	r3, [r7, #7]
 800c7f8:	2b7e      	cmp	r3, #126	; 0x7e
 800c7fa:	d814      	bhi.n	800c826 <process_character+0x132>
    if (!buffer_index && c == ' ') return;  // Ignore leading spaces
 800c7fc:	4b0b      	ldr	r3, [pc, #44]	; (800c82c <process_character+0x138>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d102      	bne.n	800c80a <process_character+0x116>
 800c804:	79fb      	ldrb	r3, [r7, #7]
 800c806:	2b20      	cmp	r3, #32
 800c808:	d00c      	beq.n	800c824 <process_character+0x130>
    cli_buffer[buffer_index++] = c;
 800c80a:	4b08      	ldr	r3, [pc, #32]	; (800c82c <process_character+0x138>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	1c5a      	adds	r2, r3, #1
 800c810:	4906      	ldr	r1, [pc, #24]	; (800c82c <process_character+0x138>)
 800c812:	600a      	str	r2, [r1, #0]
 800c814:	4906      	ldr	r1, [pc, #24]	; (800c830 <process_character+0x13c>)
 800c816:	79fa      	ldrb	r2, [r7, #7]
 800c818:	54ca      	strb	r2, [r1, r3]
    cli_write(c);
 800c81a:	79fb      	ldrb	r3, [r7, #7]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7ff fe75 	bl	800c50c <cli_write>
 800c822:	e000      	b.n	800c826 <process_character+0x132>
    if (!buffer_index && c == ' ') return;  // Ignore leading spaces
 800c824:	bf00      	nop
  }
}
 800c826:	3718      	adds	r7, #24
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	20000248 	.word	0x20000248
 800c830:	2000024c 	.word	0x2000024c
 800c834:	0801db3c 	.word	0x0801db3c
 800c838:	0801dbdc 	.word	0x0801dbdc
 800c83c:	0801d3b8 	.word	0x0801d3b8
 800c840:	200002cc 	.word	0x200002cc

0800c844 <process_character_interactive>:

static void process_character_interactive(const char c) {
 800c844:	b580      	push	{r7, lr}
 800c846:	b088      	sub	sp, #32
 800c848:	af00      	add	r7, sp, #0
 800c84a:	4603      	mov	r3, r0
 800c84c:	71fb      	strb	r3, [r7, #7]
  // We ignore a few characters, this is only used for the up arrow
  static uint16_t ignore = 0;
  if (ignore) {
 800c84e:	4b89      	ldr	r3, [pc, #548]	; (800ca74 <process_character_interactive+0x230>)
 800c850:	881b      	ldrh	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d006      	beq.n	800c864 <process_character_interactive+0x20>
    ignore--;
 800c856:	4b87      	ldr	r3, [pc, #540]	; (800ca74 <process_character_interactive+0x230>)
 800c858:	881b      	ldrh	r3, [r3, #0]
 800c85a:	3b01      	subs	r3, #1
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	4b85      	ldr	r3, [pc, #532]	; (800ca74 <process_character_interactive+0x230>)
 800c860:	801a      	strh	r2, [r3, #0]
    return;
 800c862:	e104      	b.n	800ca6e <process_character_interactive+0x22a>
  }
  if (c == '\t' || c == '?') {
 800c864:	79fb      	ldrb	r3, [r7, #7]
 800c866:	2b09      	cmp	r3, #9
 800c868:	d003      	beq.n	800c872 <process_character_interactive+0x2e>
 800c86a:	79fb      	ldrb	r3, [r7, #7]
 800c86c:	2b3f      	cmp	r3, #63	; 0x3f
 800c86e:	f040 809b 	bne.w	800c9a8 <process_character_interactive+0x164>
    // do tab completion
    const clicmd_t *cmd, *pstart = NULL, *pend = NULL;
 800c872:	2300      	movs	r3, #0
 800c874:	61bb      	str	r3, [r7, #24]
 800c876:	2300      	movs	r3, #0
 800c878:	617b      	str	r3, [r7, #20]
    uint32_t i = buffer_index;
 800c87a:	4b7f      	ldr	r3, [pc, #508]	; (800ca78 <process_character_interactive+0x234>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	613b      	str	r3, [r7, #16]
    for (cmd = cmd_table; cmd < cmd_table + NUM_CLI_COMMANDS; cmd++) {
 800c880:	4b7e      	ldr	r3, [pc, #504]	; (800ca7c <process_character_interactive+0x238>)
 800c882:	61fb      	str	r3, [r7, #28]
 800c884:	e01a      	b.n	800c8bc <process_character_interactive+0x78>
      if (buffer_index && (strncasecmp(cli_buffer, cmd->name, buffer_index) != 0)) {
 800c886:	4b7c      	ldr	r3, [pc, #496]	; (800ca78 <process_character_interactive+0x234>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00a      	beq.n	800c8a4 <process_character_interactive+0x60>
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a79      	ldr	r2, [pc, #484]	; (800ca78 <process_character_interactive+0x234>)
 800c894:	6812      	ldr	r2, [r2, #0]
 800c896:	4619      	mov	r1, r3
 800c898:	4879      	ldr	r0, [pc, #484]	; (800ca80 <process_character_interactive+0x23c>)
 800c89a:	f00f ffd7 	bl	801c84c <strncasecmp>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d107      	bne.n	800c8b4 <process_character_interactive+0x70>
        continue;
      }
      if (!pstart) {
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d101      	bne.n	800c8ae <process_character_interactive+0x6a>
        pstart = cmd;
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	61bb      	str	r3, [r7, #24]
      }
      pend = cmd;
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	617b      	str	r3, [r7, #20]
 800c8b2:	e000      	b.n	800c8b6 <process_character_interactive+0x72>
        continue;
 800c8b4:	bf00      	nop
    for (cmd = cmd_table; cmd < cmd_table + NUM_CLI_COMMANDS; cmd++) {
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	3310      	adds	r3, #16
 800c8ba:	61fb      	str	r3, [r7, #28]
 800c8bc:	4b71      	ldr	r3, [pc, #452]	; (800ca84 <process_character_interactive+0x240>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	011b      	lsls	r3, r3, #4
 800c8c2:	4a6e      	ldr	r2, [pc, #440]	; (800ca7c <process_character_interactive+0x238>)
 800c8c4:	4413      	add	r3, r2
 800c8c6:	69fa      	ldr	r2, [r7, #28]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d3dc      	bcc.n	800c886 <process_character_interactive+0x42>
    }
    if (pstart) { /* Buffer matches one or more commands */
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d038      	beq.n	800c944 <process_character_interactive+0x100>
      for (;; buffer_index++) {
        if (pstart->name[buffer_index] != pend->name[buffer_index]) break;
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	4b68      	ldr	r3, [pc, #416]	; (800ca78 <process_character_interactive+0x234>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4413      	add	r3, r2
 800c8dc:	781a      	ldrb	r2, [r3, #0]
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	6819      	ldr	r1, [r3, #0]
 800c8e2:	4b65      	ldr	r3, [pc, #404]	; (800ca78 <process_character_interactive+0x234>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	440b      	add	r3, r1
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d129      	bne.n	800c942 <process_character_interactive+0xfe>
        if (!pstart->name[buffer_index] && buffer_index < sizeof(cli_buffer) - 2) {
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	4b61      	ldr	r3, [pc, #388]	; (800ca78 <process_character_interactive+0x234>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4413      	add	r3, r2
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d111      	bne.n	800c922 <process_character_interactive+0xde>
 800c8fe:	4b5e      	ldr	r3, [pc, #376]	; (800ca78 <process_character_interactive+0x234>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2b7d      	cmp	r3, #125	; 0x7d
 800c904:	d80d      	bhi.n	800c922 <process_character_interactive+0xde>
          /* Unambiguous -- append a space */
          cli_buffer[buffer_index++] = ' ';
 800c906:	4b5c      	ldr	r3, [pc, #368]	; (800ca78 <process_character_interactive+0x234>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	1c5a      	adds	r2, r3, #1
 800c90c:	495a      	ldr	r1, [pc, #360]	; (800ca78 <process_character_interactive+0x234>)
 800c90e:	600a      	str	r2, [r1, #0]
 800c910:	4a5b      	ldr	r2, [pc, #364]	; (800ca80 <process_character_interactive+0x23c>)
 800c912:	2120      	movs	r1, #32
 800c914:	54d1      	strb	r1, [r2, r3]
          cli_buffer[buffer_index] = '\0';
 800c916:	4b58      	ldr	r3, [pc, #352]	; (800ca78 <process_character_interactive+0x234>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a59      	ldr	r2, [pc, #356]	; (800ca80 <process_character_interactive+0x23c>)
 800c91c:	2100      	movs	r1, #0
 800c91e:	54d1      	strb	r1, [r2, r3]
          break;
 800c920:	e010      	b.n	800c944 <process_character_interactive+0x100>
        }
        cli_buffer[buffer_index] = pstart->name[buffer_index];
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	4b54      	ldr	r3, [pc, #336]	; (800ca78 <process_character_interactive+0x234>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	441a      	add	r2, r3
 800c92c:	4b52      	ldr	r3, [pc, #328]	; (800ca78 <process_character_interactive+0x234>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	7811      	ldrb	r1, [r2, #0]
 800c932:	4a53      	ldr	r2, [pc, #332]	; (800ca80 <process_character_interactive+0x23c>)
 800c934:	54d1      	strb	r1, [r2, r3]
      for (;; buffer_index++) {
 800c936:	4b50      	ldr	r3, [pc, #320]	; (800ca78 <process_character_interactive+0x234>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	3301      	adds	r3, #1
 800c93c:	4a4e      	ldr	r2, [pc, #312]	; (800ca78 <process_character_interactive+0x234>)
 800c93e:	6013      	str	r3, [r2, #0]
        if (pstart->name[buffer_index] != pend->name[buffer_index]) break;
 800c940:	e7c7      	b.n	800c8d2 <process_character_interactive+0x8e>
 800c942:	bf00      	nop
      }
    }
    if (!buffer_index || pstart != pend) {
 800c944:	4b4c      	ldr	r3, [pc, #304]	; (800ca78 <process_character_interactive+0x234>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d003      	beq.n	800c954 <process_character_interactive+0x110>
 800c94c:	69ba      	ldr	r2, [r7, #24]
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	429a      	cmp	r2, r3
 800c952:	d023      	beq.n	800c99c <process_character_interactive+0x158>
      /* Print list of ambiguous matches */
      cli_print("\r\n\033[K");
 800c954:	484c      	ldr	r0, [pc, #304]	; (800ca88 <process_character_interactive+0x244>)
 800c956:	f7ff fd91 	bl	800c47c <cli_print>
      for (cmd = pstart; cmd <= pend; cmd++) {
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	61fb      	str	r3, [r7, #28]
 800c95e:	e00a      	b.n	800c976 <process_character_interactive+0x132>
        cli_print(cmd->name);
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4618      	mov	r0, r3
 800c966:	f7ff fd89 	bl	800c47c <cli_print>
        cli_write('\t');
 800c96a:	2009      	movs	r0, #9
 800c96c:	f7ff fdce 	bl	800c50c <cli_write>
      for (cmd = pstart; cmd <= pend; cmd++) {
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	3310      	adds	r3, #16
 800c974:	61fb      	str	r3, [r7, #28]
 800c976:	69fa      	ldr	r2, [r7, #28]
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d9f0      	bls.n	800c960 <process_character_interactive+0x11c>
      }
      cli_prompt();
 800c97e:	f7ff fd8d 	bl	800c49c <cli_prompt>
      i = 0; /* Redraw prompt */
 800c982:	2300      	movs	r3, #0
 800c984:	613b      	str	r3, [r7, #16]
    }
    for (; i < buffer_index; i++) cli_write(cli_buffer[i]);
 800c986:	e009      	b.n	800c99c <process_character_interactive+0x158>
 800c988:	4a3d      	ldr	r2, [pc, #244]	; (800ca80 <process_character_interactive+0x23c>)
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	4413      	add	r3, r2
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	4618      	mov	r0, r3
 800c992:	f7ff fdbb 	bl	800c50c <cli_write>
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	3301      	adds	r3, #1
 800c99a:	613b      	str	r3, [r7, #16]
 800c99c:	4b36      	ldr	r3, [pc, #216]	; (800ca78 <process_character_interactive+0x234>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d3f0      	bcc.n	800c988 <process_character_interactive+0x144>
  if (c == '\t' || c == '?') {
 800c9a6:	e062      	b.n	800ca6e <process_character_interactive+0x22a>
  } else if (c == 4) {
 800c9a8:	79fb      	ldrb	r3, [r7, #7]
 800c9aa:	2b04      	cmp	r3, #4
 800c9ac:	d105      	bne.n	800c9ba <process_character_interactive+0x176>
    // CTRL-D - clear screen
    cli_print("\033[2J\033[1;1H");
 800c9ae:	4837      	ldr	r0, [pc, #220]	; (800ca8c <process_character_interactive+0x248>)
 800c9b0:	f7ff fd64 	bl	800c47c <cli_print>
    cli_prompt();
 800c9b4:	f7ff fd72 	bl	800c49c <cli_prompt>
 800c9b8:	e059      	b.n	800ca6e <process_character_interactive+0x22a>
  } else if (c == 12) {  // CTRL-L - toggle logging
 800c9ba:	79fb      	ldrb	r3, [r7, #7]
 800c9bc:	2b0c      	cmp	r3, #12
 800c9be:	d10c      	bne.n	800c9da <process_character_interactive+0x196>
    if (log_is_enabled()) {
 800c9c0:	f003 fa16 	bl	800fdf0 <log_is_enabled>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d004      	beq.n	800c9d4 <process_character_interactive+0x190>
      log_disable();
 800c9ca:	f003 fa05 	bl	800fdd8 <log_disable>
      cli_prompt();
 800c9ce:	f7ff fd65 	bl	800c49c <cli_prompt>
 800c9d2:	e04c      	b.n	800ca6e <process_character_interactive+0x22a>
    } else {
      log_enable();
 800c9d4:	f003 f9f4 	bl	800fdc0 <log_enable>
 800c9d8:	e049      	b.n	800ca6e <process_character_interactive+0x22a>
    }
  } else if (c == '\b') {
 800c9da:	79fb      	ldrb	r3, [r7, #7]
 800c9dc:	2b08      	cmp	r3, #8
 800c9de:	d111      	bne.n	800ca04 <process_character_interactive+0x1c0>
    // backspace
    if (buffer_index) {
 800c9e0:	4b25      	ldr	r3, [pc, #148]	; (800ca78 <process_character_interactive+0x234>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d042      	beq.n	800ca6e <process_character_interactive+0x22a>
      cli_buffer[--buffer_index] = 0;
 800c9e8:	4b23      	ldr	r3, [pc, #140]	; (800ca78 <process_character_interactive+0x234>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	4a22      	ldr	r2, [pc, #136]	; (800ca78 <process_character_interactive+0x234>)
 800c9f0:	6013      	str	r3, [r2, #0]
 800c9f2:	4b21      	ldr	r3, [pc, #132]	; (800ca78 <process_character_interactive+0x234>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a22      	ldr	r2, [pc, #136]	; (800ca80 <process_character_interactive+0x23c>)
 800c9f8:	2100      	movs	r1, #0
 800c9fa:	54d1      	strb	r1, [r2, r3]
      cli_print("\010 \010");
 800c9fc:	4824      	ldr	r0, [pc, #144]	; (800ca90 <process_character_interactive+0x24c>)
 800c9fe:	f7ff fd3d 	bl	800c47c <cli_print>
 800ca02:	e034      	b.n	800ca6e <process_character_interactive+0x22a>
    }
  } else if (c == 27) {  // ESC character is called from the up arrow, we only look at the first of 3 characters
 800ca04:	79fb      	ldrb	r3, [r7, #7]
 800ca06:	2b1b      	cmp	r3, #27
 800ca08:	d12d      	bne.n	800ca66 <process_character_interactive+0x222>
    // up arrow
    while (buffer_index) {
 800ca0a:	e00c      	b.n	800ca26 <process_character_interactive+0x1e2>
      cli_buffer[--buffer_index] = 0;
 800ca0c:	4b1a      	ldr	r3, [pc, #104]	; (800ca78 <process_character_interactive+0x234>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	4a19      	ldr	r2, [pc, #100]	; (800ca78 <process_character_interactive+0x234>)
 800ca14:	6013      	str	r3, [r2, #0]
 800ca16:	4b18      	ldr	r3, [pc, #96]	; (800ca78 <process_character_interactive+0x234>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a19      	ldr	r2, [pc, #100]	; (800ca80 <process_character_interactive+0x23c>)
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	54d1      	strb	r1, [r2, r3]
      cli_print("\010 \010");
 800ca20:	481b      	ldr	r0, [pc, #108]	; (800ca90 <process_character_interactive+0x24c>)
 800ca22:	f7ff fd2b 	bl	800c47c <cli_print>
    while (buffer_index) {
 800ca26:	4b14      	ldr	r3, [pc, #80]	; (800ca78 <process_character_interactive+0x234>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1ee      	bne.n	800ca0c <process_character_interactive+0x1c8>
    }
    for (int i = 0; i < sizeof(old_cli_buffer); i++) {
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60fb      	str	r3, [r7, #12]
 800ca32:	e00f      	b.n	800ca54 <process_character_interactive+0x210>
      if (old_cli_buffer[i] == 0) break;
 800ca34:	4a17      	ldr	r2, [pc, #92]	; (800ca94 <process_character_interactive+0x250>)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	4413      	add	r3, r2
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00d      	beq.n	800ca5c <process_character_interactive+0x218>
      process_character(old_cli_buffer[i]);
 800ca40:	4a14      	ldr	r2, [pc, #80]	; (800ca94 <process_character_interactive+0x250>)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	4413      	add	r3, r2
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7ff fe53 	bl	800c6f4 <process_character>
    for (int i = 0; i < sizeof(old_cli_buffer); i++) {
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3301      	adds	r3, #1
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2b7f      	cmp	r3, #127	; 0x7f
 800ca58:	d9ec      	bls.n	800ca34 <process_character_interactive+0x1f0>
 800ca5a:	e000      	b.n	800ca5e <process_character_interactive+0x21a>
      if (old_cli_buffer[i] == 0) break;
 800ca5c:	bf00      	nop
    }
    // Ignore the following characters
    ignore = 2;
 800ca5e:	4b05      	ldr	r3, [pc, #20]	; (800ca74 <process_character_interactive+0x230>)
 800ca60:	2202      	movs	r2, #2
 800ca62:	801a      	strh	r2, [r3, #0]
 800ca64:	e003      	b.n	800ca6e <process_character_interactive+0x22a>
  } else {
    process_character(c);
 800ca66:	79fb      	ldrb	r3, [r7, #7]
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7ff fe43 	bl	800c6f4 <process_character>
  }
}
 800ca6e:	3720      	adds	r7, #32
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	20000454 	.word	0x20000454
 800ca78:	20000248 	.word	0x20000248
 800ca7c:	0801db3c 	.word	0x0801db3c
 800ca80:	2000024c 	.word	0x2000024c
 800ca84:	0801dbdc 	.word	0x0801dbdc
 800ca88:	0801d3d4 	.word	0x0801d3d4
 800ca8c:	0801d3dc 	.word	0x0801d3dc
 800ca90:	0801d3e8 	.word	0x0801d3e8
 800ca94:	200002cc 	.word	0x200002cc

0800ca98 <cli_process>:

void cli_process(void) {
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	af00      	add	r7, sp, #0
  while (fifo_get_length(cli_in) > 0) {
 800ca9c:	e008      	b.n	800cab0 <cli_process+0x18>
    process_character_interactive(fifo_read(cli_in));
 800ca9e:	4b0a      	ldr	r3, [pc, #40]	; (800cac8 <cli_process+0x30>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f002 fffd 	bl	800faa2 <fifo_read>
 800caa8:	4603      	mov	r3, r0
 800caaa:	4618      	mov	r0, r3
 800caac:	f7ff feca 	bl	800c844 <process_character_interactive>
  while (fifo_get_length(cli_in) > 0) {
 800cab0:	4b05      	ldr	r3, [pc, #20]	; (800cac8 <cli_process+0x30>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f002 ffe8 	bl	800fa8a <fifo_get_length>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1ee      	bne.n	800ca9e <cli_process+0x6>
  }
}
 800cac0:	bf00      	nop
 800cac2:	bf00      	nop
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	2000034c 	.word	0x2000034c

0800cacc <cli_enter>:

void cli_enter(fifo_t *in, fifo_t *out) {
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  cli_in = in;
 800cad6:	4a06      	ldr	r2, [pc, #24]	; (800caf0 <cli_enter+0x24>)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6013      	str	r3, [r2, #0]
  cli_out = out;
 800cadc:	4a05      	ldr	r2, [pc, #20]	; (800caf4 <cli_enter+0x28>)
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	6013      	str	r3, [r2, #0]
  cli_prompt();
 800cae2:	f7ff fcdb 	bl	800c49c <cli_prompt>
}
 800cae6:	bf00      	nop
 800cae8:	3708      	adds	r7, #8
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	2000034c 	.word	0x2000034c
 800caf4:	20000350 	.word	0x20000350

0800caf8 <print_value_pointer>:

static void print_value_pointer(const char *cmdName, const cli_value_t *var, const void *valuePointer, bool full) {
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b08a      	sub	sp, #40	; 0x28
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
 800cb04:	70fb      	strb	r3, [r7, #3]
  if ((var->type & VALUE_MODE_MASK) == MODE_ARRAY) {
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	791b      	ldrb	r3, [r3, #4]
 800cb0a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800cb0e:	2b40      	cmp	r3, #64	; 0x40
 800cb10:	d159      	bne.n	800cbc6 <print_value_pointer+0xce>
    for (int i = 0; i < var->config.array.length; i++) {
 800cb12:	2300      	movs	r3, #0
 800cb14:	627b      	str	r3, [r7, #36]	; 0x24
 800cb16:	e04f      	b.n	800cbb8 <print_value_pointer+0xc0>
      switch (var->type & VALUE_TYPE_MASK) {
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	791b      	ldrb	r3, [r3, #4]
 800cb1c:	f003 0307 	and.w	r3, r3, #7
 800cb20:	3b01      	subs	r3, #1
 800cb22:	2b03      	cmp	r3, #3
 800cb24:	d80a      	bhi.n	800cb3c <print_value_pointer+0x44>
 800cb26:	a201      	add	r2, pc, #4	; (adr r2, 800cb2c <print_value_pointer+0x34>)
 800cb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2c:	0800cb4f 	.word	0x0800cb4f
 800cb30:	0800cb63 	.word	0x0800cb63
 800cb34:	0800cb77 	.word	0x0800cb77
 800cb38:	0800cb8d 	.word	0x0800cb8d
        default:
        case VAR_UINT8:
          // uint8_t array
          cli_printf("%d", ((uint8_t *)valuePointer)[i]);
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	4413      	add	r3, r2
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	4619      	mov	r1, r3
 800cb46:	4884      	ldr	r0, [pc, #528]	; (800cd58 <print_value_pointer+0x260>)
 800cb48:	f7ff fcfe 	bl	800c548 <cli_printf>
          break;
 800cb4c:	e028      	b.n	800cba0 <print_value_pointer+0xa8>

        case VAR_INT8:
          // int8_t array
          cli_printf("%d", ((int8_t *)valuePointer)[i]);
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	4413      	add	r3, r2
 800cb54:	f993 3000 	ldrsb.w	r3, [r3]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	487f      	ldr	r0, [pc, #508]	; (800cd58 <print_value_pointer+0x260>)
 800cb5c:	f7ff fcf4 	bl	800c548 <cli_printf>
          break;
 800cb60:	e01e      	b.n	800cba0 <print_value_pointer+0xa8>

        case VAR_UINT16:
          // uin16_t array
          cli_printf("%d", ((uint16_t *)valuePointer)[i]);
 800cb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	4413      	add	r3, r2
 800cb6a:	881b      	ldrh	r3, [r3, #0]
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	487a      	ldr	r0, [pc, #488]	; (800cd58 <print_value_pointer+0x260>)
 800cb70:	f7ff fcea 	bl	800c548 <cli_printf>
          break;
 800cb74:	e014      	b.n	800cba0 <print_value_pointer+0xa8>

        case VAR_INT16:
          // int16_t array
          cli_printf("%d", ((int16_t *)valuePointer)[i]);
 800cb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb78:	005b      	lsls	r3, r3, #1
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb82:	4619      	mov	r1, r3
 800cb84:	4874      	ldr	r0, [pc, #464]	; (800cd58 <print_value_pointer+0x260>)
 800cb86:	f7ff fcdf 	bl	800c548 <cli_printf>
          break;
 800cb8a:	e009      	b.n	800cba0 <print_value_pointer+0xa8>

        case VAR_UINT32:
          // uin32_t array
          cli_printf("%lu", ((uint32_t *)valuePointer)[i]);
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	4413      	add	r3, r2
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4619      	mov	r1, r3
 800cb98:	4870      	ldr	r0, [pc, #448]	; (800cd5c <print_value_pointer+0x264>)
 800cb9a:	f7ff fcd5 	bl	800c548 <cli_printf>
          break;
 800cb9e:	bf00      	nop
      }

      if (i < var->config.array.length - 1) {
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	795b      	ldrb	r3, [r3, #5]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	da02      	bge.n	800cbb2 <print_value_pointer+0xba>
        cli_print(",");
 800cbac:	486c      	ldr	r0, [pc, #432]	; (800cd60 <print_value_pointer+0x268>)
 800cbae:	f7ff fc65 	bl	800c47c <cli_print>
    for (int i = 0; i < var->config.array.length; i++) {
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	627b      	str	r3, [r7, #36]	; 0x24
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	795b      	ldrb	r3, [r3, #5]
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	dba9      	blt.n	800cb18 <print_value_pointer+0x20>
    if (value_is_corrupted) {
      cli_print_linefeed();
      cli_print_error(cmdName, "CORRUPTED CONFIG: %s = %d", var->name, value);
    }
  }
}
 800cbc4:	e0c3      	b.n	800cd4e <print_value_pointer+0x256>
    int value = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	623b      	str	r3, [r7, #32]
    switch (var->type & VALUE_TYPE_MASK) {
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	791b      	ldrb	r3, [r3, #4]
 800cbce:	f003 0307 	and.w	r3, r3, #7
 800cbd2:	2b04      	cmp	r3, #4
 800cbd4:	d822      	bhi.n	800cc1c <print_value_pointer+0x124>
 800cbd6:	a201      	add	r2, pc, #4	; (adr r2, 800cbdc <print_value_pointer+0xe4>)
 800cbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbdc:	0800cbf1 	.word	0x0800cbf1
 800cbe0:	0800cbf9 	.word	0x0800cbf9
 800cbe4:	0800cc03 	.word	0x0800cc03
 800cbe8:	0800cc0b 	.word	0x0800cc0b
 800cbec:	0800cc15 	.word	0x0800cc15
        value = *(uint8_t *)valuePointer;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	623b      	str	r3, [r7, #32]
        break;
 800cbf6:	e011      	b.n	800cc1c <print_value_pointer+0x124>
        value = *(int8_t *)valuePointer;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f993 3000 	ldrsb.w	r3, [r3]
 800cbfe:	623b      	str	r3, [r7, #32]
        break;
 800cc00:	e00c      	b.n	800cc1c <print_value_pointer+0x124>
        value = *(uint16_t *)valuePointer;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	881b      	ldrh	r3, [r3, #0]
 800cc06:	623b      	str	r3, [r7, #32]
        break;
 800cc08:	e008      	b.n	800cc1c <print_value_pointer+0x124>
        value = *(int16_t *)valuePointer;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc10:	623b      	str	r3, [r7, #32]
        break;
 800cc12:	e003      	b.n	800cc1c <print_value_pointer+0x124>
        value = *(uint32_t *)valuePointer;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	623b      	str	r3, [r7, #32]
        break;
 800cc1a:	bf00      	nop
    bool value_is_corrupted = false;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	77fb      	strb	r3, [r7, #31]
    switch (var->type & VALUE_MODE_MASK) {
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	791b      	ldrb	r3, [r3, #4]
 800cc24:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800cc28:	2b80      	cmp	r3, #128	; 0x80
 800cc2a:	d077      	beq.n	800cd1c <print_value_pointer+0x224>
 800cc2c:	2b80      	cmp	r3, #128	; 0x80
 800cc2e:	f300 8082 	bgt.w	800cd36 <print_value_pointer+0x23e>
 800cc32:	2b60      	cmp	r3, #96	; 0x60
 800cc34:	d061      	beq.n	800ccfa <print_value_pointer+0x202>
 800cc36:	2b60      	cmp	r3, #96	; 0x60
 800cc38:	dc7d      	bgt.n	800cd36 <print_value_pointer+0x23e>
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d002      	beq.n	800cc44 <print_value_pointer+0x14c>
 800cc3e:	2b20      	cmp	r3, #32
 800cc40:	d040      	beq.n	800ccc4 <print_value_pointer+0x1cc>
 800cc42:	e078      	b.n	800cd36 <print_value_pointer+0x23e>
        if ((var->type & VALUE_TYPE_MASK) == VAR_UINT32) {
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	791b      	ldrb	r3, [r3, #4]
 800cc48:	f003 0307 	and.w	r3, r3, #7
 800cc4c:	2b04      	cmp	r3, #4
 800cc4e:	d118      	bne.n	800cc82 <print_value_pointer+0x18a>
          cli_printf("%lu", (uint32_t)value);
 800cc50:	6a3b      	ldr	r3, [r7, #32]
 800cc52:	4619      	mov	r1, r3
 800cc54:	4841      	ldr	r0, [pc, #260]	; (800cd5c <print_value_pointer+0x264>)
 800cc56:	f7ff fc77 	bl	800c548 <cli_printf>
          if ((uint32_t)value > var->config.u32_max) {
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800cc60:	6a3b      	ldr	r3, [r7, #32]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d202      	bcs.n	800cc6c <print_value_pointer+0x174>
            value_is_corrupted = true;
 800cc66:	2301      	movs	r3, #1
 800cc68:	77fb      	strb	r3, [r7, #31]
        break;
 800cc6a:	e063      	b.n	800cd34 <print_value_pointer+0x23c>
          } else if (full) {
 800cc6c:	78fb      	ldrb	r3, [r7, #3]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d060      	beq.n	800cd34 <print_value_pointer+0x23c>
            cli_printf(" 0 %lu", var->config.u32_max);
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800cc78:	4619      	mov	r1, r3
 800cc7a:	483a      	ldr	r0, [pc, #232]	; (800cd64 <print_value_pointer+0x26c>)
 800cc7c:	f7ff fc64 	bl	800c548 <cli_printf>
        break;
 800cc80:	e058      	b.n	800cd34 <print_value_pointer+0x23c>
          get_min_max(var, &min, &max);
 800cc82:	f107 0214 	add.w	r2, r7, #20
 800cc86:	f107 0318 	add.w	r3, r7, #24
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	68b8      	ldr	r0, [r7, #8]
 800cc8e:	f7ff fbc2 	bl	800c416 <get_min_max>
          cli_printf("%d", value);
 800cc92:	6a39      	ldr	r1, [r7, #32]
 800cc94:	4830      	ldr	r0, [pc, #192]	; (800cd58 <print_value_pointer+0x260>)
 800cc96:	f7ff fc57 	bl	800c548 <cli_printf>
          if ((value < min) || (value > max)) {
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	6a3a      	ldr	r2, [r7, #32]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	db03      	blt.n	800ccaa <print_value_pointer+0x1b2>
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	6a3a      	ldr	r2, [r7, #32]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	dd02      	ble.n	800ccb0 <print_value_pointer+0x1b8>
            value_is_corrupted = true;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	77fb      	strb	r3, [r7, #31]
        break;
 800ccae:	e041      	b.n	800cd34 <print_value_pointer+0x23c>
          } else if (full) {
 800ccb0:	78fb      	ldrb	r3, [r7, #3]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d03e      	beq.n	800cd34 <print_value_pointer+0x23c>
            cli_printf(" %d %d", min, max);
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	697a      	ldr	r2, [r7, #20]
 800ccba:	4619      	mov	r1, r3
 800ccbc:	482a      	ldr	r0, [pc, #168]	; (800cd68 <print_value_pointer+0x270>)
 800ccbe:	f7ff fc43 	bl	800c548 <cli_printf>
        break;
 800ccc2:	e037      	b.n	800cd34 <print_value_pointer+0x23c>
        if (value < lookup_tables[var->config.lookup.table_index].value_count) {
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	795b      	ldrb	r3, [r3, #5]
 800ccc8:	4a28      	ldr	r2, [pc, #160]	; (800cd6c <print_value_pointer+0x274>)
 800ccca:	00db      	lsls	r3, r3, #3
 800cccc:	4413      	add	r3, r2
 800ccce:	791b      	ldrb	r3, [r3, #4]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	6a3b      	ldr	r3, [r7, #32]
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	da0d      	bge.n	800ccf4 <print_value_pointer+0x1fc>
          cli_print(lookup_tables[var->config.lookup.table_index].values[value]);
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	795b      	ldrb	r3, [r3, #5]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	4b23      	ldr	r3, [pc, #140]	; (800cd6c <print_value_pointer+0x274>)
 800cce0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800cce4:	6a3b      	ldr	r3, [r7, #32]
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4413      	add	r3, r2
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff fbc5 	bl	800c47c <cli_print>
        break;
 800ccf2:	e020      	b.n	800cd36 <print_value_pointer+0x23e>
          value_is_corrupted = true;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	77fb      	strb	r3, [r7, #31]
        break;
 800ccf8:	e01d      	b.n	800cd36 <print_value_pointer+0x23e>
        if (value & 1 << var->config.bitpos) {
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	795b      	ldrb	r3, [r3, #5]
 800ccfe:	461a      	mov	r2, r3
 800cd00:	6a3b      	ldr	r3, [r7, #32]
 800cd02:	4113      	asrs	r3, r2
 800cd04:	f003 0301 	and.w	r3, r3, #1
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d003      	beq.n	800cd14 <print_value_pointer+0x21c>
          cli_printf("ON");
 800cd0c:	4818      	ldr	r0, [pc, #96]	; (800cd70 <print_value_pointer+0x278>)
 800cd0e:	f7ff fc1b 	bl	800c548 <cli_printf>
        break;
 800cd12:	e010      	b.n	800cd36 <print_value_pointer+0x23e>
          cli_printf("OFF");
 800cd14:	4817      	ldr	r0, [pc, #92]	; (800cd74 <print_value_pointer+0x27c>)
 800cd16:	f7ff fc17 	bl	800c548 <cli_printf>
        break;
 800cd1a:	e00c      	b.n	800cd36 <print_value_pointer+0x23e>
        cli_printf("%s", (strlen((char *)valuePointer) == 0) ? "-" : (char *)valuePointer);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <print_value_pointer+0x230>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	e000      	b.n	800cd2a <print_value_pointer+0x232>
 800cd28:	4b13      	ldr	r3, [pc, #76]	; (800cd78 <print_value_pointer+0x280>)
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	4813      	ldr	r0, [pc, #76]	; (800cd7c <print_value_pointer+0x284>)
 800cd2e:	f7ff fc0b 	bl	800c548 <cli_printf>
        break;
 800cd32:	e000      	b.n	800cd36 <print_value_pointer+0x23e>
        break;
 800cd34:	bf00      	nop
    if (value_is_corrupted) {
 800cd36:	7ffb      	ldrb	r3, [r7, #31]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d008      	beq.n	800cd4e <print_value_pointer+0x256>
      cli_print_linefeed();
 800cd3c:	f7ff fbb8 	bl	800c4b0 <cli_print_linefeed>
      cli_print_error(cmdName, "CORRUPTED CONFIG: %s = %d", var->name, value);
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	6a3b      	ldr	r3, [r7, #32]
 800cd46:	490e      	ldr	r1, [pc, #56]	; (800cd80 <print_value_pointer+0x288>)
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f7ff fc55 	bl	800c5f8 <cli_print_error>
}
 800cd4e:	bf00      	nop
 800cd50:	3728      	adds	r7, #40	; 0x28
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	0801d3ec 	.word	0x0801d3ec
 800cd5c:	0801d3f0 	.word	0x0801d3f0
 800cd60:	0801d3f4 	.word	0x0801d3f4
 800cd64:	0801d3f8 	.word	0x0801d3f8
 800cd68:	0801d400 	.word	0x0801d400
 800cd6c:	0801dc60 	.word	0x0801dc60
 800cd70:	0801d408 	.word	0x0801d408
 800cd74:	0801d40c 	.word	0x0801d40c
 800cd78:	0801d410 	.word	0x0801d410
 800cd7c:	0801d414 	.word	0x0801d414
 800cd80:	0801d418 	.word	0x0801d418

0800cd84 <cli_print_var>:

void cli_print_var(const char *cmdName, const cli_value_t *var, bool full) {
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b086      	sub	sp, #24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	71fb      	strb	r3, [r7, #7]
  const void *ptr = var->pdata;
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800cd98:	617b      	str	r3, [r7, #20]

  print_value_pointer(cmdName, var, ptr, full);
 800cd9a:	79fb      	ldrb	r3, [r7, #7]
 800cd9c:	697a      	ldr	r2, [r7, #20]
 800cd9e:	68b9      	ldr	r1, [r7, #8]
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f7ff fea9 	bl	800caf8 <print_value_pointer>
}
 800cda6:	bf00      	nop
 800cda8:	3718      	adds	r7, #24
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <get_word_length>:

uint8_t get_word_length(char *bufBegin, char *bufEnd) {
 800cdae:	b480      	push	{r7}
 800cdb0:	b083      	sub	sp, #12
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	6039      	str	r1, [r7, #0]
  while (*(bufEnd - 1) == ' ') {
 800cdb8:	e002      	b.n	800cdc0 <get_word_length+0x12>
    bufEnd--;
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	603b      	str	r3, [r7, #0]
  while (*(bufEnd - 1) == ' ') {
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	2b20      	cmp	r3, #32
 800cdc8:	d0f7      	beq.n	800cdba <get_word_length+0xc>
  }

  return bufEnd - bufBegin;
 800cdca:	683a      	ldr	r2, [r7, #0]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	1ad3      	subs	r3, r2, r3
 800cdd0:	b2db      	uxtb	r3, r3
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
	...

0800cde0 <cli_get_setting_index>:

uint16_t cli_get_setting_index(char *name, uint8_t length) {
 800cde0:	b590      	push	{r4, r7, lr}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	70fb      	strb	r3, [r7, #3]
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800cdec:	2300      	movs	r3, #0
 800cdee:	60fb      	str	r3, [r7, #12]
 800cdf0:	e020      	b.n	800ce34 <cli_get_setting_index+0x54>
    const char *setting_name = value_table[i].name;
 800cdf2:	4916      	ldr	r1, [pc, #88]	; (800ce4c <cli_get_setting_index+0x6c>)
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	011b      	lsls	r3, r3, #4
 800cdfa:	4413      	add	r3, r2
 800cdfc:	440b      	add	r3, r1
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	60bb      	str	r3, [r7, #8]

    // ensure exact match when setting to prevent setting variables with shorter names
    if (strncasecmp(name, setting_name, strlen(setting_name)) == 0 && length == strlen(setting_name)) {
 800ce02:	68b8      	ldr	r0, [r7, #8]
 800ce04:	f7ff f91c 	bl	800c040 <strlen>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	68b9      	ldr	r1, [r7, #8]
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f00f fd1c 	bl	801c84c <strncasecmp>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d109      	bne.n	800ce2e <cli_get_setting_index+0x4e>
 800ce1a:	78fc      	ldrb	r4, [r7, #3]
 800ce1c:	68b8      	ldr	r0, [r7, #8]
 800ce1e:	f7ff f90f 	bl	800c040 <strlen>
 800ce22:	4603      	mov	r3, r0
 800ce24:	429c      	cmp	r4, r3
 800ce26:	d102      	bne.n	800ce2e <cli_get_setting_index+0x4e>
      return i;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	e00a      	b.n	800ce44 <cli_get_setting_index+0x64>
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	3301      	adds	r3, #1
 800ce32:	60fb      	str	r3, [r7, #12]
 800ce34:	4b06      	ldr	r3, [pc, #24]	; (800ce50 <cli_get_setting_index+0x70>)
 800ce36:	881b      	ldrh	r3, [r3, #0]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d3d8      	bcc.n	800cdf2 <cli_get_setting_index+0x12>
    }
  }
  return value_table_entry_count;
 800ce40:	4b03      	ldr	r3, [pc, #12]	; (800ce50 <cli_get_setting_index+0x70>)
 800ce42:	881b      	ldrh	r3, [r3, #0]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd90      	pop	{r4, r7, pc}
 800ce4c:	0801dc78 	.word	0x0801dc78
 800ce50:	0801dc9a 	.word	0x0801dc9a

0800ce54 <cli_print_var_range>:
    ptr++;
  }
  return ptr;
}

void cli_print_var_range(const cli_value_t *var) {
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  switch (var->type & VALUE_MODE_MASK) {
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	791b      	ldrb	r3, [r3, #4]
 800ce60:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ce64:	2b80      	cmp	r3, #128	; 0x80
 800ce66:	f000 8083 	beq.w	800cf70 <cli_print_var_range+0x11c>
 800ce6a:	2b80      	cmp	r3, #128	; 0x80
 800ce6c:	f300 808e 	bgt.w	800cf8c <cli_print_var_range+0x138>
 800ce70:	2b60      	cmp	r3, #96	; 0x60
 800ce72:	f000 8087 	beq.w	800cf84 <cli_print_var_range+0x130>
 800ce76:	2b60      	cmp	r3, #96	; 0x60
 800ce78:	f300 8088 	bgt.w	800cf8c <cli_print_var_range+0x138>
 800ce7c:	2b40      	cmp	r3, #64	; 0x40
 800ce7e:	d070      	beq.n	800cf62 <cli_print_var_range+0x10e>
 800ce80:	2b40      	cmp	r3, #64	; 0x40
 800ce82:	f300 8083 	bgt.w	800cf8c <cli_print_var_range+0x138>
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d002      	beq.n	800ce90 <cli_print_var_range+0x3c>
 800ce8a:	2b20      	cmp	r3, #32
 800ce8c:	d032      	beq.n	800cef4 <cli_print_var_range+0xa0>
    } break;
    case (MODE_BITSET): {
      cli_print_linef("Allowed values: OFF, ON");
    } break;
  }
}
 800ce8e:	e07d      	b.n	800cf8c <cli_print_var_range+0x138>
      switch (var->type & VALUE_TYPE_MASK) {
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	791b      	ldrb	r3, [r3, #4]
 800ce94:	f003 0307 	and.w	r3, r3, #7
 800ce98:	2b04      	cmp	r3, #4
 800ce9a:	d006      	beq.n	800ceaa <cli_print_var_range+0x56>
 800ce9c:	2b04      	cmp	r3, #4
 800ce9e:	dc1a      	bgt.n	800ced6 <cli_print_var_range+0x82>
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00a      	beq.n	800ceba <cli_print_var_range+0x66>
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d008      	beq.n	800ceba <cli_print_var_range+0x66>
 800cea8:	e015      	b.n	800ced6 <cli_print_var_range+0x82>
          cli_print_linef("Allowed range: 0 - %lu", var->config.u32_max);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4838      	ldr	r0, [pc, #224]	; (800cf94 <cli_print_var_range+0x140>)
 800ceb4:	f7ff fb5a 	bl	800c56c <cli_print_linef>
          break;
 800ceb8:	e01b      	b.n	800cef2 <cli_print_var_range+0x9e>
          cli_print_linef("Allowed range: %d - %d", var->config.minmax_unsigned.min, var->config.minmax_unsigned.max);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	4619      	mov	r1, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	461a      	mov	r2, r3
 800cece:	4832      	ldr	r0, [pc, #200]	; (800cf98 <cli_print_var_range+0x144>)
 800ced0:	f7ff fb4c 	bl	800c56c <cli_print_linef>
          break;
 800ced4:	e00d      	b.n	800cef2 <cli_print_var_range+0x9e>
          cli_print_linef("Allowed range: %d - %d", var->config.minmax.min, var->config.minmax.max);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800cedc:	b21b      	sxth	r3, r3
 800cede:	4619      	mov	r1, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 800cee6:	b21b      	sxth	r3, r3
 800cee8:	461a      	mov	r2, r3
 800ceea:	482b      	ldr	r0, [pc, #172]	; (800cf98 <cli_print_var_range+0x144>)
 800ceec:	f7ff fb3e 	bl	800c56c <cli_print_linef>
          break;
 800cef0:	bf00      	nop
    } break;
 800cef2:	e04b      	b.n	800cf8c <cli_print_var_range+0x138>
      const lookup_table_entry_t *tableEntry = &lookup_tables[var->config.lookup.table_index];
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	795b      	ldrb	r3, [r3, #5]
 800cef8:	00db      	lsls	r3, r3, #3
 800cefa:	4a28      	ldr	r2, [pc, #160]	; (800cf9c <cli_print_var_range+0x148>)
 800cefc:	4413      	add	r3, r2
 800cefe:	60fb      	str	r3, [r7, #12]
      cli_print("Allowed values: ");
 800cf00:	4827      	ldr	r0, [pc, #156]	; (800cfa0 <cli_print_var_range+0x14c>)
 800cf02:	f7ff fabb 	bl	800c47c <cli_print>
      bool first_entry = true;
 800cf06:	2301      	movs	r3, #1
 800cf08:	75fb      	strb	r3, [r7, #23]
      for (unsigned i = 0; i < tableEntry->value_count; i++) {
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	613b      	str	r3, [r7, #16]
 800cf0e:	e01f      	b.n	800cf50 <cli_print_var_range+0xfc>
        if (tableEntry->values[i]) {
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	4413      	add	r3, r2
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d014      	beq.n	800cf4a <cli_print_var_range+0xf6>
          if (!first_entry) {
 800cf20:	7dfb      	ldrb	r3, [r7, #23]
 800cf22:	f083 0301 	eor.w	r3, r3, #1
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d002      	beq.n	800cf32 <cli_print_var_range+0xde>
            cli_print(", ");
 800cf2c:	481d      	ldr	r0, [pc, #116]	; (800cfa4 <cli_print_var_range+0x150>)
 800cf2e:	f7ff faa5 	bl	800c47c <cli_print>
          cli_printf("%s", tableEntry->values[i]);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	4413      	add	r3, r2
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	4819      	ldr	r0, [pc, #100]	; (800cfa8 <cli_print_var_range+0x154>)
 800cf42:	f7ff fb01 	bl	800c548 <cli_printf>
          first_entry = false;
 800cf46:	2300      	movs	r3, #0
 800cf48:	75fb      	strb	r3, [r7, #23]
      for (unsigned i = 0; i < tableEntry->value_count; i++) {
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	613b      	str	r3, [r7, #16]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	791b      	ldrb	r3, [r3, #4]
 800cf54:	461a      	mov	r2, r3
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d3d9      	bcc.n	800cf10 <cli_print_var_range+0xbc>
      cli_print_linefeed();
 800cf5c:	f7ff faa8 	bl	800c4b0 <cli_print_linefeed>
    } break;
 800cf60:	e014      	b.n	800cf8c <cli_print_var_range+0x138>
      cli_print_linef("Array length: %d", var->config.array.length);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	795b      	ldrb	r3, [r3, #5]
 800cf66:	4619      	mov	r1, r3
 800cf68:	4810      	ldr	r0, [pc, #64]	; (800cfac <cli_print_var_range+0x158>)
 800cf6a:	f7ff faff 	bl	800c56c <cli_print_linef>
    } break;
 800cf6e:	e00d      	b.n	800cf8c <cli_print_var_range+0x138>
      cli_print_linef("String length: %d - %d", var->config.string.min_length, var->config.string.max_length);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	795b      	ldrb	r3, [r3, #5]
 800cf74:	4619      	mov	r1, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	799b      	ldrb	r3, [r3, #6]
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	480c      	ldr	r0, [pc, #48]	; (800cfb0 <cli_print_var_range+0x15c>)
 800cf7e:	f7ff faf5 	bl	800c56c <cli_print_linef>
    } break;
 800cf82:	e003      	b.n	800cf8c <cli_print_var_range+0x138>
      cli_print_linef("Allowed values: OFF, ON");
 800cf84:	480b      	ldr	r0, [pc, #44]	; (800cfb4 <cli_print_var_range+0x160>)
 800cf86:	f7ff faf1 	bl	800c56c <cli_print_linef>
    } break;
 800cf8a:	bf00      	nop
}
 800cf8c:	bf00      	nop
 800cf8e:	3718      	adds	r7, #24
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	0801d434 	.word	0x0801d434
 800cf98:	0801d44c 	.word	0x0801d44c
 800cf9c:	0801dc60 	.word	0x0801dc60
 800cfa0:	0801d464 	.word	0x0801d464
 800cfa4:	0801d478 	.word	0x0801d478
 800cfa8:	0801d414 	.word	0x0801d414
 800cfac:	0801d47c 	.word	0x0801d47c
 800cfb0:	0801d490 	.word	0x0801d490
 800cfb4:	0801d4a8 	.word	0x0801d4a8

0800cfb8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cfbc:	f3bf 8f4f 	dsb	sy
}
 800cfc0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cfc2:	4b06      	ldr	r3, [pc, #24]	; (800cfdc <__NVIC_SystemReset+0x24>)
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cfca:	4904      	ldr	r1, [pc, #16]	; (800cfdc <__NVIC_SystemReset+0x24>)
 800cfcc:	4b04      	ldr	r3, [pc, #16]	; (800cfe0 <__NVIC_SystemReset+0x28>)
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cfd2:	f3bf 8f4f 	dsb	sy
}
 800cfd6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cfd8:	bf00      	nop
 800cfda:	e7fd      	b.n	800cfd8 <__NVIC_SystemReset+0x20>
 800cfdc:	e000ed00 	.word	0xe000ed00
 800cfe0:	05fa0004 	.word	0x05fa0004

0800cfe4 <cli_cmd_help>:

static void fill_buf(uint8_t *buf, size_t buf_sz);

/** CLI command function definitions **/

static void cli_cmd_help(const char *cmd_name, char *args) {
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  bool any_matches = false;
 800cfee:	2300      	movs	r3, #0
 800cff0:	75fb      	strb	r3, [r7, #23]

  for (uint32_t i = 0; i < ARRAYLEN(cmd_table); i++) {
 800cff2:	2300      	movs	r3, #0
 800cff4:	613b      	str	r3, [r7, #16]
 800cff6:	e05b      	b.n	800d0b0 <cli_cmd_help+0xcc>
    bool print_entry = false;
 800cff8:	2300      	movs	r3, #0
 800cffa:	73fb      	strb	r3, [r7, #15]
    if (is_empty(args)) {
 800cffc:	6838      	ldr	r0, [r7, #0]
 800cffe:	f7ff f9f3 	bl	800c3e8 <is_empty>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d002      	beq.n	800d00e <cli_cmd_help+0x2a>
      print_entry = true;
 800d008:	2301      	movs	r3, #1
 800d00a:	73fb      	strb	r3, [r7, #15]
 800d00c:	e01a      	b.n	800d044 <cli_cmd_help+0x60>
    } else {
      if (strstr(cmd_table[i].name, args) || strstr(cmd_table[i].description, args)) {
 800d00e:	4a36      	ldr	r2, [pc, #216]	; (800d0e8 <cli_cmd_help+0x104>)
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	011b      	lsls	r3, r3, #4
 800d014:	4413      	add	r3, r2
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f00f fc4b 	bl	801c8b6 <strstr>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10c      	bne.n	800d040 <cli_cmd_help+0x5c>
 800d026:	4a30      	ldr	r2, [pc, #192]	; (800d0e8 <cli_cmd_help+0x104>)
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	011b      	lsls	r3, r3, #4
 800d02c:	4413      	add	r3, r2
 800d02e:	3304      	adds	r3, #4
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	4618      	mov	r0, r3
 800d036:	f00f fc3e 	bl	801c8b6 <strstr>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <cli_cmd_help+0x60>
        print_entry = true;
 800d040:	2301      	movs	r3, #1
 800d042:	73fb      	strb	r3, [r7, #15]
      }
    }

    if (print_entry) {
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d02f      	beq.n	800d0aa <cli_cmd_help+0xc6>
      any_matches = true;
 800d04a:	2301      	movs	r3, #1
 800d04c:	75fb      	strb	r3, [r7, #23]
      cli_print(cmd_table[i].name);
 800d04e:	4a26      	ldr	r2, [pc, #152]	; (800d0e8 <cli_cmd_help+0x104>)
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	011b      	lsls	r3, r3, #4
 800d054:	4413      	add	r3, r2
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4618      	mov	r0, r3
 800d05a:	f7ff fa0f 	bl	800c47c <cli_print>
      if (cmd_table[i].description) {
 800d05e:	4a22      	ldr	r2, [pc, #136]	; (800d0e8 <cli_cmd_help+0x104>)
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	011b      	lsls	r3, r3, #4
 800d064:	4413      	add	r3, r2
 800d066:	3304      	adds	r3, #4
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d009      	beq.n	800d082 <cli_cmd_help+0x9e>
        cli_printf(" - %s", cmd_table[i].description);
 800d06e:	4a1e      	ldr	r2, [pc, #120]	; (800d0e8 <cli_cmd_help+0x104>)
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	011b      	lsls	r3, r3, #4
 800d074:	4413      	add	r3, r2
 800d076:	3304      	adds	r3, #4
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4619      	mov	r1, r3
 800d07c:	481b      	ldr	r0, [pc, #108]	; (800d0ec <cli_cmd_help+0x108>)
 800d07e:	f7ff fa63 	bl	800c548 <cli_printf>
      }
      if (cmd_table[i].args) {
 800d082:	4a19      	ldr	r2, [pc, #100]	; (800d0e8 <cli_cmd_help+0x104>)
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	011b      	lsls	r3, r3, #4
 800d088:	4413      	add	r3, r2
 800d08a:	3308      	adds	r3, #8
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d009      	beq.n	800d0a6 <cli_cmd_help+0xc2>
        cli_printf("\r\n\t%s", cmd_table[i].args);
 800d092:	4a15      	ldr	r2, [pc, #84]	; (800d0e8 <cli_cmd_help+0x104>)
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	011b      	lsls	r3, r3, #4
 800d098:	4413      	add	r3, r2
 800d09a:	3308      	adds	r3, #8
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4619      	mov	r1, r3
 800d0a0:	4813      	ldr	r0, [pc, #76]	; (800d0f0 <cli_cmd_help+0x10c>)
 800d0a2:	f7ff fa51 	bl	800c548 <cli_printf>
      }
      cli_print_linefeed();
 800d0a6:	f7ff fa03 	bl	800c4b0 <cli_print_linefeed>
  for (uint32_t i = 0; i < ARRAYLEN(cmd_table); i++) {
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	613b      	str	r3, [r7, #16]
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	2b09      	cmp	r3, #9
 800d0b4:	d9a0      	bls.n	800cff8 <cli_cmd_help+0x14>
    }
  }
  if (!is_empty(args) && !any_matches) {
 800d0b6:	6838      	ldr	r0, [r7, #0]
 800d0b8:	f7ff f996 	bl	800c3e8 <is_empty>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	f083 0301 	eor.w	r3, r3, #1
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00a      	beq.n	800d0de <cli_cmd_help+0xfa>
 800d0c8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ca:	f083 0301 	eor.w	r3, r3, #1
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d004      	beq.n	800d0de <cli_cmd_help+0xfa>
    cli_print_error_linef(cmd_name, "NO MATCHES FOR '%s'", args);
 800d0d4:	683a      	ldr	r2, [r7, #0]
 800d0d6:	4907      	ldr	r1, [pc, #28]	; (800d0f4 <cli_cmd_help+0x110>)
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7ff faa1 	bl	800c620 <cli_print_error_linef>
  }
}
 800d0de:	bf00      	nop
 800d0e0:	3718      	adds	r7, #24
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	0801db3c 	.word	0x0801db3c
 800d0ec:	0801d618 	.word	0x0801d618
 800d0f0:	0801d620 	.word	0x0801d620
 800d0f4:	0801d628 	.word	0x0801d628

0800d0f8 <cli_cmd_reboot>:

static void cli_cmd_reboot(const char *cmd_name, char *args) { NVIC_SystemReset(); }
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
 800d102:	f7ff ff59 	bl	800cfb8 <__NVIC_SystemReset>
	...

0800d108 <cli_cmd_save>:

static void cli_cmd_save(const char *cmd_name, char *args) {
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  if (config_save() == false) {
 800d112:	f000 fbb5 	bl	800d880 <config_save>
 800d116:	4603      	mov	r3, r0
 800d118:	f083 0301 	eor.w	r3, r3, #1
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00e      	beq.n	800d140 <cli_cmd_save+0x38>
    cli_print_line("Saving unsuccessful, trying force save...");
 800d122:	480d      	ldr	r0, [pc, #52]	; (800d158 <cli_cmd_save+0x50>)
 800d124:	f7ff f9ce 	bl	800c4c4 <cli_print_line>
    if (config_save() == false) {
 800d128:	f000 fbaa 	bl	800d880 <config_save>
 800d12c:	4603      	mov	r3, r0
 800d12e:	f083 0301 	eor.w	r3, r3, #1
 800d132:	b2db      	uxtb	r3, r3
 800d134:	2b00      	cmp	r3, #0
 800d136:	d003      	beq.n	800d140 <cli_cmd_save+0x38>
      cli_print_line("Force save failed!");
 800d138:	4808      	ldr	r0, [pc, #32]	; (800d15c <cli_cmd_save+0x54>)
 800d13a:	f7ff f9c3 	bl	800c4c4 <cli_print_line>
      return;
 800d13e:	e008      	b.n	800d152 <cli_cmd_save+0x4a>
    }
  }
  cli_print_line("Successfully written to flash");
 800d140:	4807      	ldr	r0, [pc, #28]	; (800d160 <cli_cmd_save+0x58>)
 800d142:	f7ff f9bf 	bl	800c4c4 <cli_print_line>
  osEventFlagsSet(buzzer_event_id, BEEP_OK);
 800d146:	4b07      	ldr	r3, [pc, #28]	; (800d164 <cli_cmd_save+0x5c>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2101      	movs	r1, #1
 800d14c:	4618      	mov	r0, r3
 800d14e:	f00a fff5 	bl	801813c <osEventFlagsSet>
}
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	0801d63c 	.word	0x0801d63c
 800d15c:	0801d668 	.word	0x0801d668
 800d160:	0801d67c 	.word	0x0801d67c
 800d164:	200053a8 	.word	0x200053a8

0800d168 <cli_cmd_get>:

static void cli_cmd_get(const char *cmd_name, char *args) {
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  const cli_value_t *val;
  int matched_commands = 0;
 800d172:	2300      	movs	r3, #0
 800d174:	617b      	str	r3, [r7, #20]

  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d176:	2300      	movs	r3, #0
 800d178:	613b      	str	r3, [r7, #16]
 800d17a:	e034      	b.n	800d1e6 <cli_cmd_get+0x7e>
    if (strstr(value_table[i].name, args)) {
 800d17c:	4922      	ldr	r1, [pc, #136]	; (800d208 <cli_cmd_get+0xa0>)
 800d17e:	693a      	ldr	r2, [r7, #16]
 800d180:	4613      	mov	r3, r2
 800d182:	011b      	lsls	r3, r3, #4
 800d184:	4413      	add	r3, r2
 800d186:	440b      	add	r3, r1
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	6839      	ldr	r1, [r7, #0]
 800d18c:	4618      	mov	r0, r3
 800d18e:	f00f fb92 	bl	801c8b6 <strstr>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d023      	beq.n	800d1e0 <cli_cmd_get+0x78>
      val = &value_table[i];
 800d198:	693a      	ldr	r2, [r7, #16]
 800d19a:	4613      	mov	r3, r2
 800d19c:	011b      	lsls	r3, r3, #4
 800d19e:	4413      	add	r3, r2
 800d1a0:	4a19      	ldr	r2, [pc, #100]	; (800d208 <cli_cmd_get+0xa0>)
 800d1a2:	4413      	add	r3, r2
 800d1a4:	60fb      	str	r3, [r7, #12]
      if (matched_commands > 0) {
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	dd01      	ble.n	800d1b0 <cli_cmd_get+0x48>
        cli_print_linefeed();
 800d1ac:	f7ff f980 	bl	800c4b0 <cli_print_linefeed>
      }
      cli_printf("%s = ", value_table[i].name);
 800d1b0:	4915      	ldr	r1, [pc, #84]	; (800d208 <cli_cmd_get+0xa0>)
 800d1b2:	693a      	ldr	r2, [r7, #16]
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	011b      	lsls	r3, r3, #4
 800d1b8:	4413      	add	r3, r2
 800d1ba:	440b      	add	r3, r1
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4619      	mov	r1, r3
 800d1c0:	4812      	ldr	r0, [pc, #72]	; (800d20c <cli_cmd_get+0xa4>)
 800d1c2:	f7ff f9c1 	bl	800c548 <cli_printf>
      cli_print_var(cmd_name, val, 0);
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	68f9      	ldr	r1, [r7, #12]
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff fdda 	bl	800cd84 <cli_print_var>
      cli_print_linefeed();
 800d1d0:	f7ff f96e 	bl	800c4b0 <cli_print_linefeed>
      cli_print_var_range(val);
 800d1d4:	68f8      	ldr	r0, [r7, #12]
 800d1d6:	f7ff fe3d 	bl	800ce54 <cli_print_var_range>
      // cliPrintVarDefault(cmd_name, val);

      matched_commands++;
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	613b      	str	r3, [r7, #16]
 800d1e6:	4b0a      	ldr	r3, [pc, #40]	; (800d210 <cli_cmd_get+0xa8>)
 800d1e8:	881b      	ldrh	r3, [r3, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d3c4      	bcc.n	800d17c <cli_cmd_get+0x14>
    }
  }

  if (!matched_commands) {
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d103      	bne.n	800d200 <cli_cmd_get+0x98>
    cli_print_error_linef(cmd_name, "INVALID NAME");
 800d1f8:	4906      	ldr	r1, [pc, #24]	; (800d214 <cli_cmd_get+0xac>)
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7ff fa10 	bl	800c620 <cli_print_error_linef>
  }
}
 800d200:	bf00      	nop
 800d202:	3718      	adds	r7, #24
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	0801dc78 	.word	0x0801dc78
 800d20c:	0801d69c 	.word	0x0801d69c
 800d210:	0801dc9a 	.word	0x0801dc9a
 800d214:	0801d6a4 	.word	0x0801d6a4

0800d218 <cli_cmd_set>:

static void cli_cmd_set(const char *cmd_name, char *args) {
 800d218:	b580      	push	{r7, lr}
 800d21a:	b09a      	sub	sp, #104	; 0x68
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  const uint32_t len = strlen(args);
 800d222:	6838      	ldr	r0, [r7, #0]
 800d224:	f7fe ff0c 	bl	800c040 <strlen>
 800d228:	64b8      	str	r0, [r7, #72]	; 0x48
  char *eqptr;

  if (len == 0 || (len == 1 && args[0] == '*')) {
 800d22a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d006      	beq.n	800d23e <cli_cmd_set+0x26>
 800d230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d232:	2b01      	cmp	r3, #1
 800d234:	d132      	bne.n	800d29c <cli_cmd_set+0x84>
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	2b2a      	cmp	r3, #42	; 0x2a
 800d23c:	d12e      	bne.n	800d29c <cli_cmd_set+0x84>
    cli_print_line("Current settings: ");
 800d23e:	48b0      	ldr	r0, [pc, #704]	; (800d500 <cli_cmd_set+0x2e8>)
 800d240:	f7ff f940 	bl	800c4c4 <cli_print_line>

    for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d244:	2300      	movs	r3, #0
 800d246:	667b      	str	r3, [r7, #100]	; 0x64
 800d248:	e021      	b.n	800d28e <cli_cmd_set+0x76>
      const cli_value_t *val = &value_table[i];
 800d24a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d24c:	4613      	mov	r3, r2
 800d24e:	011b      	lsls	r3, r3, #4
 800d250:	4413      	add	r3, r2
 800d252:	4aac      	ldr	r2, [pc, #688]	; (800d504 <cli_cmd_set+0x2ec>)
 800d254:	4413      	add	r3, r2
 800d256:	617b      	str	r3, [r7, #20]
      cli_printf("%s = ", value_table[i].name);
 800d258:	49aa      	ldr	r1, [pc, #680]	; (800d504 <cli_cmd_set+0x2ec>)
 800d25a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d25c:	4613      	mov	r3, r2
 800d25e:	011b      	lsls	r3, r3, #4
 800d260:	4413      	add	r3, r2
 800d262:	440b      	add	r3, r1
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4619      	mov	r1, r3
 800d268:	48a7      	ldr	r0, [pc, #668]	; (800d508 <cli_cmd_set+0x2f0>)
 800d26a:	f7ff f96d 	bl	800c548 <cli_printf>
      // when len is 1 (when * is passed as argument), it will print min/max values as well, for gui
      cli_print_var(cmd_name, val, len);
 800d26e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d270:	2b00      	cmp	r3, #0
 800d272:	bf14      	ite	ne
 800d274:	2301      	movne	r3, #1
 800d276:	2300      	moveq	r3, #0
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	461a      	mov	r2, r3
 800d27c:	6979      	ldr	r1, [r7, #20]
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f7ff fd80 	bl	800cd84 <cli_print_var>
      cli_print_linefeed();
 800d284:	f7ff f914 	bl	800c4b0 <cli_print_linefeed>
    for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d28a:	3301      	adds	r3, #1
 800d28c:	667b      	str	r3, [r7, #100]	; 0x64
 800d28e:	4b9f      	ldr	r3, [pc, #636]	; (800d50c <cli_cmd_set+0x2f4>)
 800d290:	881b      	ldrh	r3, [r3, #0]
 800d292:	461a      	mov	r2, r3
 800d294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d296:	4293      	cmp	r3, r2
 800d298:	d3d7      	bcc.n	800d24a <cli_cmd_set+0x32>
 800d29a:	e18e      	b.n	800d5ba <cli_cmd_set+0x3a2>
    }
  } else if ((eqptr = strstr(args, "=")) != NULL) {
 800d29c:	213d      	movs	r1, #61	; 0x3d
 800d29e:	6838      	ldr	r0, [r7, #0]
 800d2a0:	f00f fac6 	bl	801c830 <strchr>
 800d2a4:	6478      	str	r0, [r7, #68]	; 0x44
 800d2a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f000 8180 	beq.w	800d5ae <cli_cmd_set+0x396>
    // has equals

    uint8_t variable_name_length = get_word_length(args, eqptr);
 800d2ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2b0:	6838      	ldr	r0, [r7, #0]
 800d2b2:	f7ff fd7c 	bl	800cdae <get_word_length>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    // skip the '=' and any ' ' characters
    eqptr++;
 800d2bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2be:	3301      	adds	r3, #1
 800d2c0:	647b      	str	r3, [r7, #68]	; 0x44
    eqptr = skip_space(eqptr);
 800d2c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d2c4:	f7ff f9c6 	bl	800c654 <skip_space>
 800d2c8:	6478      	str	r0, [r7, #68]	; 0x44

    const uint16_t index = cli_get_setting_index(args, variable_name_length);
 800d2ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	6838      	ldr	r0, [r7, #0]
 800d2d2:	f7ff fd85 	bl	800cde0 <cli_get_setting_index>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if (index >= value_table_entry_count) {
 800d2dc:	4b8b      	ldr	r3, [pc, #556]	; (800d50c <cli_cmd_set+0x2f4>)
 800d2de:	881b      	ldrh	r3, [r3, #0]
 800d2e0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d304      	bcc.n	800d2f2 <cli_cmd_set+0xda>
      cli_print_error_linef(cmd_name, "INVALID NAME");
 800d2e8:	4989      	ldr	r1, [pc, #548]	; (800d510 <cli_cmd_set+0x2f8>)
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7ff f998 	bl	800c620 <cli_print_error_linef>
      return;
 800d2f0:	e163      	b.n	800d5ba <cli_cmd_set+0x3a2>
    }
    const cli_value_t *val = &value_table[index];
 800d2f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	011b      	lsls	r3, r3, #4
 800d2fa:	4413      	add	r3, r2
 800d2fc:	4a81      	ldr	r2, [pc, #516]	; (800d504 <cli_cmd_set+0x2ec>)
 800d2fe:	4413      	add	r3, r2
 800d300:	63fb      	str	r3, [r7, #60]	; 0x3c

    bool value_changed = false;
 800d302:	2300      	movs	r3, #0
 800d304:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

    switch (val->type & VALUE_MODE_MASK) {
 800d308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d30a:	791b      	ldrb	r3, [r3, #4]
 800d30c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d310:	2b60      	cmp	r3, #96	; 0x60
 800d312:	d047      	beq.n	800d3a4 <cli_cmd_set+0x18c>
 800d314:	2b60      	cmp	r3, #96	; 0x60
 800d316:	f300 8128 	bgt.w	800d56a <cli_cmd_set+0x352>
 800d31a:	2b40      	cmp	r3, #64	; 0x40
 800d31c:	f000 8096 	beq.w	800d44c <cli_cmd_set+0x234>
 800d320:	2b40      	cmp	r3, #64	; 0x40
 800d322:	f300 8122 	bgt.w	800d56a <cli_cmd_set+0x352>
 800d326:	2b00      	cmp	r3, #0
 800d328:	d002      	beq.n	800d330 <cli_cmd_set+0x118>
 800d32a:	2b20      	cmp	r3, #32
 800d32c:	d03a      	beq.n	800d3a4 <cli_cmd_set+0x18c>
 800d32e:	e11c      	b.n	800d56a <cli_cmd_set+0x352>
      case MODE_DIRECT: {
        if ((val->type & VALUE_TYPE_MASK) == VAR_UINT32) {
 800d330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d332:	791b      	ldrb	r3, [r3, #4]
 800d334:	f003 0307 	and.w	r3, r3, #7
 800d338:	2b04      	cmp	r3, #4
 800d33a:	d114      	bne.n	800d366 <cli_cmd_set+0x14e>
          uint32_t value = strtoul(eqptr, NULL, 10);
 800d33c:	220a      	movs	r2, #10
 800d33e:	2100      	movs	r1, #0
 800d340:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d342:	f00f fbd9 	bl	801caf8 <strtoul>
 800d346:	61b8      	str	r0, [r7, #24]

          if (value <= val->config.u32_max) {
 800d348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d34a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800d34e:	69ba      	ldr	r2, [r7, #24]
 800d350:	429a      	cmp	r2, r3
 800d352:	f200 8107 	bhi.w	800d564 <cli_cmd_set+0x34c>
            cli_set_var(val, value);
 800d356:	69b9      	ldr	r1, [r7, #24]
 800d358:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d35a:	f000 f9cb 	bl	800d6f4 <cli_set_var>
            value_changed = true;
 800d35e:	2301      	movs	r3, #1
 800d360:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            value_changed = true;
          }
        }
      }

      break;
 800d364:	e0fe      	b.n	800d564 <cli_cmd_set+0x34c>
          int value = atoi(eqptr);
 800d366:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d368:	f00f f9ce 	bl	801c708 <atoi>
 800d36c:	61f8      	str	r0, [r7, #28]
          get_min_max(val, &min, &max);
 800d36e:	f107 020c 	add.w	r2, r7, #12
 800d372:	f107 0310 	add.w	r3, r7, #16
 800d376:	4619      	mov	r1, r3
 800d378:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d37a:	f7ff f84c 	bl	800c416 <get_min_max>
          if (value >= min && value <= max) {
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	69fa      	ldr	r2, [r7, #28]
 800d382:	429a      	cmp	r2, r3
 800d384:	f2c0 80ee 	blt.w	800d564 <cli_cmd_set+0x34c>
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	69fa      	ldr	r2, [r7, #28]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	f300 80e9 	bgt.w	800d564 <cli_cmd_set+0x34c>
            cli_set_var(val, value);
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	4619      	mov	r1, r3
 800d396:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d398:	f000 f9ac 	bl	800d6f4 <cli_set_var>
            value_changed = true;
 800d39c:	2301      	movs	r3, #1
 800d39e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      break;
 800d3a2:	e0df      	b.n	800d564 <cli_cmd_set+0x34c>
      case MODE_LOOKUP:
      case MODE_BITSET: {
        int tableIndex;
        if ((val->type & VALUE_MODE_MASK) == MODE_BITSET) {
 800d3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3a6:	791b      	ldrb	r3, [r3, #4]
 800d3a8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d3ac:	2b60      	cmp	r3, #96	; 0x60
 800d3ae:	d102      	bne.n	800d3b6 <cli_cmd_set+0x19e>
          tableIndex = TABLE_BOOTSTATE;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3b4:	e002      	b.n	800d3bc <cli_cmd_set+0x1a4>
        } else {
          tableIndex = val->config.lookup.table_index;
 800d3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3b8:	795b      	ldrb	r3, [r3, #5]
 800d3ba:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        const lookup_table_entry_t *tableEntry = &lookup_tables[tableIndex];
 800d3bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3be:	00db      	lsls	r3, r3, #3
 800d3c0:	4a54      	ldr	r2, [pc, #336]	; (800d514 <cli_cmd_set+0x2fc>)
 800d3c2:	4413      	add	r3, r2
 800d3c4:	623b      	str	r3, [r7, #32]
        bool matched = false;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        for (uint32_t tableValueIndex = 0; tableValueIndex < tableEntry->value_count && !matched; tableValueIndex++) {
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	657b      	str	r3, [r7, #84]	; 0x54
 800d3d0:	e02d      	b.n	800d42e <cli_cmd_set+0x216>
          matched = tableEntry->values[tableValueIndex] && strcasecmp(tableEntry->values[tableValueIndex], eqptr) == 0;
 800d3d2:	6a3b      	ldr	r3, [r7, #32]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3d8:	009b      	lsls	r3, r3, #2
 800d3da:	4413      	add	r3, r2
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00e      	beq.n	800d400 <cli_cmd_set+0x1e8>
 800d3e2:	6a3b      	ldr	r3, [r7, #32]
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	4413      	add	r3, r2
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f00f fa01 	bl	801c7f8 <strcasecmp>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d101      	bne.n	800d400 <cli_cmd_set+0x1e8>
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	e000      	b.n	800d402 <cli_cmd_set+0x1ea>
 800d400:	2300      	movs	r3, #0
 800d402:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800d406:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d40a:	f003 0301 	and.w	r3, r3, #1
 800d40e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

          if (matched) {
 800d412:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d416:	2b00      	cmp	r3, #0
 800d418:	d006      	beq.n	800d428 <cli_cmd_set+0x210>
            cli_set_var(val, tableValueIndex);
 800d41a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d41c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d41e:	f000 f969 	bl	800d6f4 <cli_set_var>
            value_changed = true;
 800d422:	2301      	movs	r3, #1
 800d424:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        for (uint32_t tableValueIndex = 0; tableValueIndex < tableEntry->value_count && !matched; tableValueIndex++) {
 800d428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d42a:	3301      	adds	r3, #1
 800d42c:	657b      	str	r3, [r7, #84]	; 0x54
 800d42e:	6a3b      	ldr	r3, [r7, #32]
 800d430:	791b      	ldrb	r3, [r3, #4]
 800d432:	461a      	mov	r2, r3
 800d434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d436:	4293      	cmp	r3, r2
 800d438:	f080 8096 	bcs.w	800d568 <cli_cmd_set+0x350>
 800d43c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d440:	f083 0301 	eor.w	r3, r3, #1
 800d444:	b2db      	uxtb	r3, r3
 800d446:	2b00      	cmp	r3, #0
 800d448:	d1c3      	bne.n	800d3d2 <cli_cmd_set+0x1ba>
          }
        }
      } break;
 800d44a:	e08d      	b.n	800d568 <cli_cmd_set+0x350>
      case MODE_ARRAY: {
        const uint8_t array_length = val->config.array.length;
 800d44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d44e:	795b      	ldrb	r3, [r3, #5]
 800d450:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        char *valPtr = eqptr;
 800d454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d456:	653b      	str	r3, [r7, #80]	; 0x50

        int i = 0;
 800d458:	2300      	movs	r3, #0
 800d45a:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (i < array_length && valPtr != NULL) {
 800d45c:	e076      	b.n	800d54c <cli_cmd_set+0x334>
          // skip spaces
          valPtr = skip_space(valPtr);
 800d45e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d460:	f7ff f8f8 	bl	800c654 <skip_space>
 800d464:	6538      	str	r0, [r7, #80]	; 0x50

          // process substring starting at valPtr
          // note: no need to copy substrings for atoi()
          //       it stops at the first character that cannot be converted...
          switch (val->type & VALUE_TYPE_MASK) {
 800d466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d468:	791b      	ldrb	r3, [r3, #4]
 800d46a:	f003 0307 	and.w	r3, r3, #7
 800d46e:	3b01      	subs	r3, #1
 800d470:	2b03      	cmp	r3, #3
 800d472:	d80b      	bhi.n	800d48c <cli_cmd_set+0x274>
 800d474:	a201      	add	r2, pc, #4	; (adr r2, 800d47c <cli_cmd_set+0x264>)
 800d476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d47a:	bf00      	nop
 800d47c:	0800d4a9 	.word	0x0800d4a9
 800d480:	0800d4c5 	.word	0x0800d4c5
 800d484:	0800d4e3 	.word	0x0800d4e3
 800d488:	0800d519 	.word	0x0800d519
            default:
            case VAR_UINT8: {
              // fetch data pointer
              uint8_t *data = (uint8_t *)val->pdata + i;
 800d48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d48e:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d494:	4413      	add	r3, r2
 800d496:	627b      	str	r3, [r7, #36]	; 0x24
              // store value
              *data = (uint8_t)atoi((const char *)valPtr);
 800d498:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d49a:	f00f f935 	bl	801c708 <atoi>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	b2da      	uxtb	r2, r3
 800d4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a4:	701a      	strb	r2, [r3, #0]
            }

            break;
 800d4a6:	e047      	b.n	800d538 <cli_cmd_set+0x320>
            case VAR_INT8: {
              // fetch data pointer
              int8_t *data = (int8_t *)val->pdata + i;
 800d4a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4aa:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d4ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4b0:	4413      	add	r3, r2
 800d4b2:	62bb      	str	r3, [r7, #40]	; 0x28
              // store value
              *data = (int8_t)atoi((const char *)valPtr);
 800d4b4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d4b6:	f00f f927 	bl	801c708 <atoi>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	b25a      	sxtb	r2, r3
 800d4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c0:	701a      	strb	r2, [r3, #0]
            }

            break;
 800d4c2:	e039      	b.n	800d538 <cli_cmd_set+0x320>
            case VAR_UINT16: {
              // fetch data pointer
              uint16_t *data = (uint16_t *)val->pdata + i;
 800d4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c6:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d4ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4cc:	005b      	lsls	r3, r3, #1
 800d4ce:	4413      	add	r3, r2
 800d4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
              // store value
              *data = (uint16_t)atoi((const char *)valPtr);
 800d4d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d4d4:	f00f f918 	bl	801c708 <atoi>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	b29a      	uxth	r2, r3
 800d4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4de:	801a      	strh	r2, [r3, #0]
            }

            break;
 800d4e0:	e02a      	b.n	800d538 <cli_cmd_set+0x320>
            case VAR_INT16: {
              // fetch data pointer
              int16_t *data = (int16_t *)val->pdata + i;
 800d4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4e4:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	4413      	add	r3, r2
 800d4ee:	633b      	str	r3, [r7, #48]	; 0x30
              // store value
              *data = (int16_t)atoi((const char *)valPtr);
 800d4f0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d4f2:	f00f f909 	bl	801c708 <atoi>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	b21a      	sxth	r2, r3
 800d4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fc:	801a      	strh	r2, [r3, #0]
            }

            break;
 800d4fe:	e01b      	b.n	800d538 <cli_cmd_set+0x320>
 800d500:	0801d6b4 	.word	0x0801d6b4
 800d504:	0801dc78 	.word	0x0801dc78
 800d508:	0801d69c 	.word	0x0801d69c
 800d50c:	0801dc9a 	.word	0x0801dc9a
 800d510:	0801d6a4 	.word	0x0801d6a4
 800d514:	0801dc60 	.word	0x0801dc60
            case VAR_UINT32: {
              // fetch data pointer
              uint32_t *data = (uint32_t *)val->pdata + i;
 800d518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d51a:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d51e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	4413      	add	r3, r2
 800d524:	637b      	str	r3, [r7, #52]	; 0x34
              // store value
              *data = (uint32_t)strtoul((const char *)valPtr, NULL, 10);
 800d526:	220a      	movs	r2, #10
 800d528:	2100      	movs	r1, #0
 800d52a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d52c:	f00f fae4 	bl	801caf8 <strtoul>
 800d530:	4602      	mov	r2, r0
 800d532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d534:	601a      	str	r2, [r3, #0]
            }

            break;
 800d536:	bf00      	nop
          }

          // find next comma (or end of string)
          valPtr = strchr(valPtr, ',') + 1;
 800d538:	212c      	movs	r1, #44	; 0x2c
 800d53a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d53c:	f00f f978 	bl	801c830 <strchr>
 800d540:	4603      	mov	r3, r0
 800d542:	3301      	adds	r3, #1
 800d544:	653b      	str	r3, [r7, #80]	; 0x50

          i++;
 800d546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d548:	3301      	adds	r3, #1
 800d54a:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (i < array_length && valPtr != NULL) {
 800d54c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d550:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d552:	429a      	cmp	r2, r3
 800d554:	da02      	bge.n	800d55c <cli_cmd_set+0x344>
 800d556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d180      	bne.n	800d45e <cli_cmd_set+0x246>
        }
      }
        // mark as changed
        value_changed = true;
 800d55c:	2301      	movs	r3, #1
 800d55e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

        break;
 800d562:	e002      	b.n	800d56a <cli_cmd_set+0x352>
      break;
 800d564:	bf00      	nop
 800d566:	e000      	b.n	800d56a <cli_cmd_set+0x352>
      } break;
 800d568:	bf00      	nop
    }

    if (value_changed) {
 800d56a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d015      	beq.n	800d59e <cli_cmd_set+0x386>
      cli_printf("%s set to ", val->name);
 800d572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4619      	mov	r1, r3
 800d578:	4811      	ldr	r0, [pc, #68]	; (800d5c0 <cli_cmd_set+0x3a8>)
 800d57a:	f7fe ffe5 	bl	800c548 <cli_printf>
      cli_print_var(cmd_name, val, 0);
 800d57e:	2200      	movs	r2, #0
 800d580:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f7ff fbfe 	bl	800cd84 <cli_print_var>
      if (val->cb != NULL) {
 800d588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d58a:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d012      	beq.n	800d5b8 <cli_cmd_set+0x3a0>
        val->cb(val);
 800d592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d594:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800d598:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d59a:	4798      	blx	r3
    } else {
      cli_print_error_linef(cmd_name, "INVALID VALUE");
      cli_print_var_range(val);
    }

    return;
 800d59c:	e00c      	b.n	800d5b8 <cli_cmd_set+0x3a0>
      cli_print_error_linef(cmd_name, "INVALID VALUE");
 800d59e:	4909      	ldr	r1, [pc, #36]	; (800d5c4 <cli_cmd_set+0x3ac>)
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f7ff f83d 	bl	800c620 <cli_print_error_linef>
      cli_print_var_range(val);
 800d5a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d5a8:	f7ff fc54 	bl	800ce54 <cli_print_var_range>
    return;
 800d5ac:	e004      	b.n	800d5b8 <cli_cmd_set+0x3a0>
  } else {
    // no equals, check for matching variables.
    cli_cmd_get(cmd_name, args);
 800d5ae:	6839      	ldr	r1, [r7, #0]
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7ff fdd9 	bl	800d168 <cli_cmd_get>
 800d5b6:	e000      	b.n	800d5ba <cli_cmd_set+0x3a2>
    return;
 800d5b8:	bf00      	nop
  }
}
 800d5ba:	3768      	adds	r7, #104	; 0x68
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	0801d6c8 	.word	0x0801d6c8
 800d5c4:	0801d6d4 	.word	0x0801d6d4

0800d5c8 <cli_cmd_defaults>:


static void cli_cmd_defaults(const char *cmd_name, char *args) {
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  config_defaults();
 800d5d2:	f000 f939 	bl	800d848 <config_defaults>
  cli_print_line("Reset to default values");
 800d5d6:	4803      	ldr	r0, [pc, #12]	; (800d5e4 <cli_cmd_defaults+0x1c>)
 800d5d8:	f7fe ff74 	bl	800c4c4 <cli_print_line>
}
 800d5dc:	bf00      	nop
 800d5de:	3708      	adds	r7, #8
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	0801d6e4 	.word	0x0801d6e4

0800d5e8 <cli_cmd_dump>:

static void cli_cmd_dump(const char *cmd_name, char *args) {
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b086      	sub	sp, #24
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
  const uint32_t len = strlen(args);
 800d5f2:	6838      	ldr	r0, [r7, #0]
 800d5f4:	f7fe fd24 	bl	800c040 <strlen>
 800d5f8:	6138      	str	r0, [r7, #16]
  cli_printf("#Configuration dump");
 800d5fa:	481b      	ldr	r0, [pc, #108]	; (800d668 <cli_cmd_dump+0x80>)
 800d5fc:	f7fe ffa4 	bl	800c548 <cli_printf>
  cli_print_linefeed();
 800d600:	f7fe ff56 	bl	800c4b0 <cli_print_linefeed>
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d604:	2300      	movs	r3, #0
 800d606:	617b      	str	r3, [r7, #20]
 800d608:	e021      	b.n	800d64e <cli_cmd_dump+0x66>
    const cli_value_t *val = &value_table[i];
 800d60a:	697a      	ldr	r2, [r7, #20]
 800d60c:	4613      	mov	r3, r2
 800d60e:	011b      	lsls	r3, r3, #4
 800d610:	4413      	add	r3, r2
 800d612:	4a16      	ldr	r2, [pc, #88]	; (800d66c <cli_cmd_dump+0x84>)
 800d614:	4413      	add	r3, r2
 800d616:	60fb      	str	r3, [r7, #12]
    cli_printf("set %s = ", value_table[i].name);
 800d618:	4914      	ldr	r1, [pc, #80]	; (800d66c <cli_cmd_dump+0x84>)
 800d61a:	697a      	ldr	r2, [r7, #20]
 800d61c:	4613      	mov	r3, r2
 800d61e:	011b      	lsls	r3, r3, #4
 800d620:	4413      	add	r3, r2
 800d622:	440b      	add	r3, r1
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4619      	mov	r1, r3
 800d628:	4811      	ldr	r0, [pc, #68]	; (800d670 <cli_cmd_dump+0x88>)
 800d62a:	f7fe ff8d 	bl	800c548 <cli_printf>
    // when len is 1 (when * is passed as argument), it will print min/max values as well
    cli_print_var(cmd_name, val, len);
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	2b00      	cmp	r3, #0
 800d632:	bf14      	ite	ne
 800d634:	2301      	movne	r3, #1
 800d636:	2300      	moveq	r3, #0
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	461a      	mov	r2, r3
 800d63c:	68f9      	ldr	r1, [r7, #12]
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7ff fba0 	bl	800cd84 <cli_print_var>
    cli_print_linefeed();
 800d644:	f7fe ff34 	bl	800c4b0 <cli_print_linefeed>
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	3301      	adds	r3, #1
 800d64c:	617b      	str	r3, [r7, #20]
 800d64e:	4b09      	ldr	r3, [pc, #36]	; (800d674 <cli_cmd_dump+0x8c>)
 800d650:	881b      	ldrh	r3, [r3, #0]
 800d652:	461a      	mov	r2, r3
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	4293      	cmp	r3, r2
 800d658:	d3d7      	bcc.n	800d60a <cli_cmd_dump+0x22>
  }
  cli_printf("#End of configuration dump");
 800d65a:	4807      	ldr	r0, [pc, #28]	; (800d678 <cli_cmd_dump+0x90>)
 800d65c:	f7fe ff74 	bl	800c548 <cli_printf>
}
 800d660:	bf00      	nop
 800d662:	3718      	adds	r7, #24
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	0801d6fc 	.word	0x0801d6fc
 800d66c:	0801dc78 	.word	0x0801dc78
 800d670:	0801d710 	.word	0x0801d710
 800d674:	0801dc9a 	.word	0x0801dc9a
 800d678:	0801d71c 	.word	0x0801d71c

0800d67c <cli_cmd_status>:

static void cli_cmd_status(const char *cmd_name, char *args) {
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  //const lookup_table_entry_t *p_boot_table = &lookup_tables[TABLE_BOOTSTATE];
  //const lookup_table_entry_t *p_event_table = &lookup_tables[TABLE_EVENTS];
  cli_printf("System time: %lu ticks\n", osKernelGetTickCount());
 800d686:	f00a fc21 	bl	8017ecc <osKernelGetTickCount>
 800d68a:	4603      	mov	r3, r0
 800d68c:	4619      	mov	r1, r3
 800d68e:	4803      	ldr	r0, [pc, #12]	; (800d69c <cli_cmd_status+0x20>)
 800d690:	f7fe ff5a 	bl	800c548 <cli_printf>
}
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	0801d738 	.word	0x0801d738

0800d6a0 <cli_cmd_version>:

static void cli_cmd_version(const char *cmd_name, char *args) {
 800d6a0:	b590      	push	{r4, r7, lr}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  /* TODO: Store the board name somewhere else. */
  cli_printf("Board: %s\n", "Reefing System");
 800d6aa:	4909      	ldr	r1, [pc, #36]	; (800d6d0 <cli_cmd_version+0x30>)
 800d6ac:	4809      	ldr	r0, [pc, #36]	; (800d6d4 <cli_cmd_version+0x34>)
 800d6ae:	f7fe ff4b 	bl	800c548 <cli_printf>
  cli_printf("CPU ID: 0x%lx, Revision: 0x%lx\n", HAL_GetDEVID(), HAL_GetREVID());
 800d6b2:	f002 fccf 	bl	8010054 <HAL_GetDEVID>
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	f002 fcc0 	bl	801003c <HAL_GetREVID>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	461a      	mov	r2, r3
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	4805      	ldr	r0, [pc, #20]	; (800d6d8 <cli_cmd_version+0x38>)
 800d6c4:	f7fe ff40 	bl	800c548 <cli_printf>
}
 800d6c8:	bf00      	nop
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd90      	pop	{r4, r7, pc}
 800d6d0:	0801d750 	.word	0x0801d750
 800d6d4:	0801d760 	.word	0x0801d760
 800d6d8:	0801d76c 	.word	0x0801d76c

0800d6dc <cli_cmd_log_enable>:

static void cli_cmd_log_enable(const char *cmd_name, char *args) { log_enable(); }
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
 800d6e6:	f002 fb6b 	bl	800fdc0 <log_enable>
 800d6ea:	bf00      	nop
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
	...

0800d6f4 <cli_set_var>:


static void cli_set_var(const cli_value_t *var, const uint32_t value) {
 800d6f4:	b480      	push	{r7}
 800d6f6:	b087      	sub	sp, #28
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
  void *ptr = var->pdata;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d704:	613b      	str	r3, [r7, #16]
  uint32_t work_value;
  uint32_t mask;

  if ((var->type & VALUE_MODE_MASK) == MODE_BITSET) {
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	791b      	ldrb	r3, [r3, #4]
 800d70a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d70e:	2b60      	cmp	r3, #96	; 0x60
 800d710:	d160      	bne.n	800d7d4 <cli_set_var+0xe0>
    switch (var->type & VALUE_TYPE_MASK) {
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	791b      	ldrb	r3, [r3, #4]
 800d716:	f003 0307 	and.w	r3, r3, #7
 800d71a:	2b04      	cmp	r3, #4
 800d71c:	d041      	beq.n	800d7a2 <cli_set_var+0xae>
 800d71e:	2b04      	cmp	r3, #4
 800d720:	f300 8084 	bgt.w	800d82c <cli_set_var+0x138>
 800d724:	2b00      	cmp	r3, #0
 800d726:	d002      	beq.n	800d72e <cli_set_var+0x3a>
 800d728:	2b02      	cmp	r3, #2
 800d72a:	d01d      	beq.n	800d768 <cli_set_var+0x74>
      case VAR_UINT32:
        *(uint32_t *)ptr = value;
        break;
    }
  }
}
 800d72c:	e07e      	b.n	800d82c <cli_set_var+0x138>
        mask = (1 << var->config.bitpos) & 0xff;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	795b      	ldrb	r3, [r3, #5]
 800d732:	461a      	mov	r2, r3
 800d734:	2301      	movs	r3, #1
 800d736:	4093      	lsls	r3, r2
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	60fb      	str	r3, [r7, #12]
        if (value) {
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d006      	beq.n	800d750 <cli_set_var+0x5c>
          work_value = *(uint8_t *)ptr | mask;
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	461a      	mov	r2, r3
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	4313      	orrs	r3, r2
 800d74c:	617b      	str	r3, [r7, #20]
 800d74e:	e006      	b.n	800d75e <cli_set_var+0x6a>
          work_value = *(uint8_t *)ptr & ~mask;
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	461a      	mov	r2, r3
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	43db      	mvns	r3, r3
 800d75a:	4013      	ands	r3, r2
 800d75c:	617b      	str	r3, [r7, #20]
        *(uint8_t *)ptr = work_value;
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	b2da      	uxtb	r2, r3
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	701a      	strb	r2, [r3, #0]
        break;
 800d766:	e061      	b.n	800d82c <cli_set_var+0x138>
        mask = (1 << var->config.bitpos) & 0xffff;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	795b      	ldrb	r3, [r3, #5]
 800d76c:	461a      	mov	r2, r3
 800d76e:	2301      	movs	r3, #1
 800d770:	4093      	lsls	r3, r2
 800d772:	b29b      	uxth	r3, r3
 800d774:	60fb      	str	r3, [r7, #12]
        if (value) {
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d006      	beq.n	800d78a <cli_set_var+0x96>
          work_value = *(uint16_t *)ptr | mask;
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	461a      	mov	r2, r3
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	4313      	orrs	r3, r2
 800d786:	617b      	str	r3, [r7, #20]
 800d788:	e006      	b.n	800d798 <cli_set_var+0xa4>
          work_value = *(uint16_t *)ptr & ~mask;
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	881b      	ldrh	r3, [r3, #0]
 800d78e:	461a      	mov	r2, r3
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	43db      	mvns	r3, r3
 800d794:	4013      	ands	r3, r2
 800d796:	617b      	str	r3, [r7, #20]
        *(uint16_t *)ptr = work_value;
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	801a      	strh	r2, [r3, #0]
        break;
 800d7a0:	e044      	b.n	800d82c <cli_set_var+0x138>
        mask = 1 << var->config.bitpos;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	795b      	ldrb	r3, [r3, #5]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	4093      	lsls	r3, r2
 800d7ac:	60fb      	str	r3, [r7, #12]
        if (value) {
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d005      	beq.n	800d7c0 <cli_set_var+0xcc>
          work_value = *(uint32_t *)ptr | mask;
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	617b      	str	r3, [r7, #20]
 800d7be:	e005      	b.n	800d7cc <cli_set_var+0xd8>
          work_value = *(uint32_t *)ptr & ~mask;
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	43db      	mvns	r3, r3
 800d7c8:	4013      	ands	r3, r2
 800d7ca:	617b      	str	r3, [r7, #20]
        *(uint32_t *)ptr = work_value;
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	697a      	ldr	r2, [r7, #20]
 800d7d0:	601a      	str	r2, [r3, #0]
        break;
 800d7d2:	e02b      	b.n	800d82c <cli_set_var+0x138>
    switch (var->type & VALUE_TYPE_MASK) {
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	791b      	ldrb	r3, [r3, #4]
 800d7d8:	f003 0307 	and.w	r3, r3, #7
 800d7dc:	2b04      	cmp	r3, #4
 800d7de:	d825      	bhi.n	800d82c <cli_set_var+0x138>
 800d7e0:	a201      	add	r2, pc, #4	; (adr r2, 800d7e8 <cli_set_var+0xf4>)
 800d7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e6:	bf00      	nop
 800d7e8:	0800d7fd 	.word	0x0800d7fd
 800d7ec:	0800d807 	.word	0x0800d807
 800d7f0:	0800d811 	.word	0x0800d811
 800d7f4:	0800d81b 	.word	0x0800d81b
 800d7f8:	0800d825 	.word	0x0800d825
        *(uint8_t *)ptr = value;
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	b2da      	uxtb	r2, r3
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	701a      	strb	r2, [r3, #0]
        break;
 800d804:	e012      	b.n	800d82c <cli_set_var+0x138>
        *(int8_t *)ptr = value;
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	b25a      	sxtb	r2, r3
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	701a      	strb	r2, [r3, #0]
        break;
 800d80e:	e00d      	b.n	800d82c <cli_set_var+0x138>
        *(uint16_t *)ptr = value;
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	b29a      	uxth	r2, r3
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	801a      	strh	r2, [r3, #0]
        break;
 800d818:	e008      	b.n	800d82c <cli_set_var+0x138>
        *(int16_t *)ptr = value;
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	b21a      	sxth	r2, r3
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	801a      	strh	r2, [r3, #0]
        break;
 800d822:	e003      	b.n	800d82c <cli_set_var+0x138>
        *(uint32_t *)ptr = value;
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	683a      	ldr	r2, [r7, #0]
 800d828:	601a      	str	r2, [r3, #0]
        break;
 800d82a:	bf00      	nop
}
 800d82c:	bf00      	nop
 800d82e:	371c      	adds	r7, #28
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <config_init>:
									  .config.timer_duration = 0};

config_u global_config = {};


void config_init() {
 800d838:	b480      	push	{r7}
 800d83a:	af00      	add	r7, sp, #0

}
 800d83c:	bf00      	nop
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr
	...

0800d848 <config_defaults>:

void config_defaults() {
 800d848:	b490      	push	{r4, r7}
 800d84a:	af00      	add	r7, sp, #0
	memcpy(&global_config, &DEFAULT_CONFIG, sizeof(global_config));
 800d84c:	4a04      	ldr	r2, [pc, #16]	; (800d860 <config_defaults+0x18>)
 800d84e:	4b05      	ldr	r3, [pc, #20]	; (800d864 <config_defaults+0x1c>)
 800d850:	4614      	mov	r4, r2
 800d852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d858:	bf00      	nop
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bc90      	pop	{r4, r7}
 800d85e:	4770      	bx	lr
 800d860:	20000458 	.word	0x20000458
 800d864:	0801dc9c 	.word	0x0801dc9c

0800d868 <config_load>:

/** persistence functions **/
void config_load() {
 800d868:	b580      	push	{r7, lr}
 800d86a:	af00      	add	r7, sp, #0
  ee_read(0, sizeof(config_t), global_config.config_array);
 800d86c:	4a03      	ldr	r2, [pc, #12]	; (800d87c <config_load+0x14>)
 800d86e:	2110      	movs	r1, #16
 800d870:	2000      	movs	r0, #0
 800d872:	f000 f84d 	bl	800d910 <ee_read>
}
 800d876:	bf00      	nop
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	20000458 	.word	0x20000458

0800d880 <config_save>:


bool config_save() {
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
  bool status = false;
 800d886:	2300      	movs	r3, #0
 800d888:	71fb      	strb	r3, [r7, #7]
  status = ee_format();
 800d88a:	f000 f817 	bl	800d8bc <ee_format>
 800d88e:	4603      	mov	r3, r0
 800d890:	71fb      	strb	r3, [r7, #7]
  if(status == false) return status;
 800d892:	79fb      	ldrb	r3, [r7, #7]
 800d894:	f083 0301 	eor.w	r3, r3, #1
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d001      	beq.n	800d8a2 <config_save+0x22>
 800d89e:	79fb      	ldrb	r3, [r7, #7]
 800d8a0:	e005      	b.n	800d8ae <config_save+0x2e>
  return ee_write(0, sizeof(config_t), global_config.config_array);
 800d8a2:	4a05      	ldr	r2, [pc, #20]	; (800d8b8 <config_save+0x38>)
 800d8a4:	2110      	movs	r1, #16
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	f000 f861 	bl	800d96e <ee_write>
 800d8ac:	4603      	mov	r3, r0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	20000458 	.word	0x20000458

0800d8bc <ee_format>:
bool ee_init(void) {
  return true;
}


bool ee_format() {
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b086      	sub	sp, #24
 800d8c0:	af00      	add	r7, sp, #0
  uint32_t error;
  HAL_FLASH_Unlock();
 800d8c2:	f003 f92f 	bl	8010b24 <HAL_FLASH_Unlock>
  FLASH_EraseInitTypeDef flashErase;

  flashErase.NbSectors = 1;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	60fb      	str	r3, [r7, #12]
  flashErase.Sector =  _EE_USE_FLASH_PAGE_OR_SECTOR;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	60bb      	str	r3, [r7, #8]
  flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	603b      	str	r3, [r7, #0]
  flashErase.Banks = _EE_FLASH_BANK;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	607b      	str	r3, [r7, #4]
  flashErase.VoltageRange = _EE_VOLTAGE_RANGE;
 800d8d6:	2302      	movs	r3, #2
 800d8d8:	613b      	str	r3, [r7, #16]

  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 800d8da:	f107 0214 	add.w	r2, r7, #20
 800d8de:	463b      	mov	r3, r7
 800d8e0:	4611      	mov	r1, r2
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f003 fa90 	bl	8010e08 <HAL_FLASHEx_Erase>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d109      	bne.n	800d902 <ee_format+0x46>
  {
    HAL_FLASH_Lock();
 800d8ee:	f003 f93b 	bl	8010b68 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f8:	d001      	beq.n	800d8fe <ee_format+0x42>
      return false;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	e004      	b.n	800d908 <ee_format+0x4c>
    else
    {
      return true;
 800d8fe:	2301      	movs	r3, #1
 800d900:	e002      	b.n	800d908 <ee_format+0x4c>
    }
  }
  HAL_FLASH_Lock();
 800d902:	f003 f931 	bl	8010b68 <HAL_FLASH_Lock>
  return false;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3718      	adds	r7, #24
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <ee_read>:

bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data) {
 800d910:	b480      	push	{r7}
 800d912:	b087      	sub	sp, #28
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	4413      	add	r3, r2
 800d922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d926:	d901      	bls.n	800d92c <ee_read+0x1c>
    return false;
 800d928:	2300      	movs	r3, #0
 800d92a:	e01a      	b.n	800d962 <ee_read+0x52>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	617b      	str	r3, [r7, #20]
 800d930:	e010      	b.n	800d954 <ee_read+0x44>
  {
    if (data != NULL)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00a      	beq.n	800d94e <ee_read+0x3e>
    {
      *data = (*(uint8_t*) (i + _EE_ADDR_INUSE));
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800d93e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d942:	781a      	ldrb	r2, [r3, #0]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	701a      	strb	r2, [r3, #0]
      data++;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	3301      	adds	r3, #1
 800d94c:	607b      	str	r3, [r7, #4]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	3301      	adds	r3, #1
 800d952:	617b      	str	r3, [r7, #20]
 800d954:	68ba      	ldr	r2, [r7, #8]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	4413      	add	r3, r2
 800d95a:	697a      	ldr	r2, [r7, #20]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d3e8      	bcc.n	800d932 <ee_read+0x22>
    }
  }
  return true;
 800d960:	2301      	movs	r3, #1
}
 800d962:	4618      	mov	r0, r3
 800d964:	371c      	adds	r7, #28
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr

0800d96e <ee_write>:

bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data) {
 800d96e:	b580      	push	{r7, lr}
 800d970:	b086      	sub	sp, #24
 800d972:	af00      	add	r7, sp, #0
 800d974:	60f8      	str	r0, [r7, #12]
 800d976:	60b9      	str	r1, [r7, #8]
 800d978:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	4413      	add	r3, r2
 800d980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d984:	d901      	bls.n	800d98a <ee_write+0x1c>
    return false;
 800d986:	2300      	movs	r3, #0
 800d988:	e02b      	b.n	800d9e2 <ee_write+0x74>
  if (data == NULL)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <ee_write+0x26>
    return false;
 800d990:	2300      	movs	r3, #0
 800d992:	e026      	b.n	800d9e2 <ee_write+0x74>
  HAL_FLASH_Unlock();
 800d994:	f003 f8c6 	bl	8010b24 <HAL_FLASH_Unlock>
  for (uint32_t i = 0; i < len ; i++)
 800d998:	2300      	movs	r3, #0
 800d99a:	617b      	str	r3, [r7, #20]
 800d99c:	e01a      	b.n	800d9d4 <ee_write+0x66>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i])) != HAL_OK)
 800d99e:	697a      	ldr	r2, [r7, #20]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	4413      	add	r3, r2
 800d9a4:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800d9a8:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	f04f 0300 	mov.w	r3, #0
 800d9ba:	2000      	movs	r0, #0
 800d9bc:	f003 f85e 	bl	8010a7c <HAL_FLASH_Program>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d003      	beq.n	800d9ce <ee_write+0x60>
    {
      HAL_FLASH_Lock();
 800d9c6:	f003 f8cf 	bl	8010b68 <HAL_FLASH_Lock>
      return false;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	e009      	b.n	800d9e2 <ee_write+0x74>
  for (uint32_t i = 0; i < len ; i++)
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	617b      	str	r3, [r7, #20]
 800d9d4:	697a      	ldr	r2, [r7, #20]
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d3e0      	bcc.n	800d99e <ee_write+0x30>
    }
  }	
  HAL_FLASH_Lock();
 800d9dc:	f003 f8c4 	bl	8010b68 <HAL_FLASH_Lock>
  return true;
 800d9e0:	2301      	movs	r3, #1
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
	...

0800d9ec <ADC_Select>:

#include "adc.h"

extern ADC_HandleTypeDef hadc1;

void ADC_Select(adc_source_t channel) {
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b086      	sub	sp, #24
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 800d9f6:	f107 0308 	add.w	r3, r7, #8
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	601a      	str	r2, [r3, #0]
 800d9fe:	605a      	str	r2, [r3, #4]
 800da00:	609a      	str	r2, [r3, #8]
 800da02:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = (uint32_t)channel;
 800da04:	79fb      	ldrb	r3, [r7, #7]
 800da06:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800da08:	2301      	movs	r3, #1
 800da0a:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800da0c:	2303      	movs	r3, #3
 800da0e:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 800da10:	f107 0308 	add.w	r3, r7, #8
 800da14:	4619      	mov	r1, r3
 800da16:	4804      	ldr	r0, [pc, #16]	; (800da28 <ADC_Select+0x3c>)
 800da18:	f002 fcee 	bl	80103f8 <HAL_ADC_ConfigChannel>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2b00      	cmp	r3, #0
	return;
	}
}
 800da20:	3718      	adds	r7, #24
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	20005ec4 	.word	0x20005ec4

0800da2c <ADC_Get>:

uint32_t ADC_Get(adc_source_t channel){
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	4603      	mov	r3, r0
 800da34:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	ADC_Select(channel);
 800da36:	79fb      	ldrb	r3, [r7, #7]
 800da38:	4618      	mov	r0, r3
 800da3a:	f7ff ffd7 	bl	800d9ec <ADC_Select>
	HAL_ADC_Start(&hadc1);
 800da3e:	480a      	ldr	r0, [pc, #40]	; (800da68 <ADC_Get+0x3c>)
 800da40:	f002 fb5a 	bl	80100f8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800da44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800da48:	4807      	ldr	r0, [pc, #28]	; (800da68 <ADC_Get+0x3c>)
 800da4a:	f002 fc3c 	bl	80102c6 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(&hadc1);
 800da4e:	4806      	ldr	r0, [pc, #24]	; (800da68 <ADC_Get+0x3c>)
 800da50:	f002 fcc4 	bl	80103dc <HAL_ADC_GetValue>
 800da54:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(&hadc1);
 800da56:	4804      	ldr	r0, [pc, #16]	; (800da68 <ADC_Get+0x3c>)
 800da58:	f002 fc02 	bl	8010260 <HAL_ADC_Stop>
	return value;
 800da5c:	68fb      	ldr	r3, [r7, #12]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3710      	adds	r7, #16
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	20005ec4 	.word	0x20005ec4

0800da6c <buzzer_set_volume>:
  dev->end_time = osKernelGetTickCount() + duration;
  dev->start = 1;
}

// Set the volume between 0 and 100
void buzzer_set_volume(BUZ_DEV *dev, uint16_t volume) {
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b08a      	sub	sp, #40	; 0x28
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	460b      	mov	r3, r1
 800da76:	807b      	strh	r3, [r7, #2]
  if (volume > 100) volume = 100;
 800da78:	887b      	ldrh	r3, [r7, #2]
 800da7a:	2b64      	cmp	r3, #100	; 0x64
 800da7c:	d901      	bls.n	800da82 <buzzer_set_volume+0x16>
 800da7e:	2364      	movs	r3, #100	; 0x64
 800da80:	807b      	strh	r3, [r7, #2]

  TIM_OC_InitTypeDef sConfigOC;
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800da82:	2360      	movs	r3, #96	; 0x60
 800da84:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = (dev->arr / 200) * volume;  // set the pulse duration
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	891b      	ldrh	r3, [r3, #8]
 800da8a:	4a19      	ldr	r2, [pc, #100]	; (800daf0 <buzzer_set_volume+0x84>)
 800da8c:	fba2 2303 	umull	r2, r3, r2, r3
 800da90:	099b      	lsrs	r3, r3, #6
 800da92:	b29b      	uxth	r3, r3
 800da94:	461a      	mov	r2, r3
 800da96:	887b      	ldrh	r3, [r7, #2]
 800da98:	fb03 f302 	mul.w	r3, r3, r2
 800da9c:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800da9e:	2300      	movs	r3, #0
 800daa0:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800daa2:	2300      	movs	r3, #0
 800daa4:	61fb      	str	r3, [r7, #28]
  HAL_TIM_PWM_ConfigChannel(dev->timer, &sConfigOC, dev->channel);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6818      	ldr	r0, [r3, #0]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	685a      	ldr	r2, [r3, #4]
 800daae:	f107 030c 	add.w	r3, r7, #12
 800dab2:	4619      	mov	r1, r3
 800dab4:	f006 fbbe 	bl	8014234 <HAL_TIM_PWM_ConfigChannel>

  // Start the pwm channel again if it should be running
  if (dev->started)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	7a9b      	ldrb	r3, [r3, #10]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d008      	beq.n	800dad2 <buzzer_set_volume+0x66>
    HAL_TIM_PWM_Start(dev->timer, dev->channel);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681a      	ldr	r2, [r3, #0]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	4619      	mov	r1, r3
 800daca:	4610      	mov	r0, r2
 800dacc:	f006 f996 	bl	8013dfc <HAL_TIM_PWM_Start>
 800dad0:	e007      	b.n	800dae2 <buzzer_set_volume+0x76>
  else
    HAL_TIM_PWM_Stop(dev->timer, dev->channel);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	4619      	mov	r1, r3
 800dadc:	4610      	mov	r0, r2
 800dade:	f006 fa3d 	bl	8013f5c <HAL_TIM_PWM_Stop>

  dev->volume = volume;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	887a      	ldrh	r2, [r7, #2]
 800dae6:	819a      	strh	r2, [r3, #12]
}
 800dae8:	bf00      	nop
 800daea:	3728      	adds	r7, #40	; 0x28
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	51eb851f 	.word	0x51eb851f

0800daf4 <buzzer_set_freq>:

// Set buzzer frequency between 200 and 10kHz
void buzzer_set_freq(BUZ_DEV *dev, uint32_t frequency) {
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  // FREQ = CORE_FREQ / ((AAR+1) * (PSC+1))
  uint32_t core_freq = HAL_RCC_GetHCLKFreq();
 800dafe:	f005 fa63 	bl	8012fc8 <HAL_RCC_GetHCLKFreq>
 800db02:	60f8      	str	r0, [r7, #12]
  uint32_t psc = 1;
 800db04:	2301      	movs	r3, #1
 800db06:	60bb      	str	r3, [r7, #8]
  // guards
  if (frequency > 10000)
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	f242 7210 	movw	r2, #10000	; 0x2710
 800db0e:	4293      	cmp	r3, r2
 800db10:	d903      	bls.n	800db1a <buzzer_set_freq+0x26>
    frequency = 10000;
 800db12:	f242 7310 	movw	r3, #10000	; 0x2710
 800db16:	603b      	str	r3, [r7, #0]
 800db18:	e004      	b.n	800db24 <buzzer_set_freq+0x30>
  else if (frequency < 200)
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	2bc7      	cmp	r3, #199	; 0xc7
 800db1e:	d801      	bhi.n	800db24 <buzzer_set_freq+0x30>
    frequency = 200;
 800db20:	23c8      	movs	r3, #200	; 0xc8
 800db22:	603b      	str	r3, [r7, #0]

  dev->arr = (uint16_t)(core_freq / (frequency * psc + frequency)) - 1;
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	3301      	adds	r3, #1
 800db28:	683a      	ldr	r2, [r7, #0]
 800db2a:	fb02 f303 	mul.w	r3, r2, r3
 800db2e:	68fa      	ldr	r2, [r7, #12]
 800db30:	fbb2 f3f3 	udiv	r3, r2, r3
 800db34:	b29b      	uxth	r3, r3
 800db36:	3b01      	subs	r3, #1
 800db38:	b29a      	uxth	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	811a      	strh	r2, [r3, #8]

  // Update timer period
  dev->timer->Init.Period = dev->arr;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	891a      	ldrh	r2, [r3, #8]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	60da      	str	r2, [r3, #12]
  dev->timer->Init.Prescaler = psc;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_Init(dev->timer);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4618      	mov	r0, r3
 800db56:	f006 f901 	bl	8013d5c <HAL_TIM_PWM_Init>

  // Update pulse as the freq changed
  buzzer_set_volume(dev, dev->volume);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	899b      	ldrh	r3, [r3, #12]
 800db5e:	4619      	mov	r1, r3
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff ff83 	bl	800da6c <buzzer_set_volume>
}
 800db66:	bf00      	nop
 800db68:	3710      	adds	r7, #16
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <buzzer_start>:

// Starts pwm timer
void buzzer_start(BUZ_DEV *dev) {
 800db6e:	b580      	push	{r7, lr}
 800db70:	b082      	sub	sp, #8
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
  dev->started = 1;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2201      	movs	r2, #1
 800db7a:	729a      	strb	r2, [r3, #10]
  HAL_TIM_PWM_Start(dev->timer, dev->channel);  // start pwm generation
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	4619      	mov	r1, r3
 800db86:	4610      	mov	r0, r2
 800db88:	f006 f938 	bl	8013dfc <HAL_TIM_PWM_Start>
}
 800db8c:	bf00      	nop
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <buzzer_stop>:

// Stops pwm timer
void buzzer_stop(BUZ_DEV *dev) {
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  dev->started = 0;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2200      	movs	r2, #0
 800dba0:	729a      	strb	r2, [r3, #10]
  HAL_TIM_PWM_Stop(dev->timer, dev->channel);  // stop pwm generation
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	4619      	mov	r1, r3
 800dbac:	4610      	mov	r0, r2
 800dbae:	f006 f9d5 	bl	8013f5c <HAL_TIM_PWM_Stop>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	2140      	movs	r1, #64	; 0x40
 800dbb6:	4803      	ldr	r0, [pc, #12]	; (800dbc4 <buzzer_stop+0x30>)
 800dbb8:	f003 fbe4 	bl	8011384 <HAL_GPIO_WritePin>
}
 800dbbc:	bf00      	nop
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	40020400 	.word	0x40020400

0800dbc8 <go_to_sleep>:
#include "main.h"
#include "sleep.h"

void go_to_sleep(){
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800dbcc:	2201      	movs	r2, #1
 800dbce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dbd2:	480e      	ldr	r0, [pc, #56]	; (800dc0c <go_to_sleep+0x44>)
 800dbd4:	f003 fbd6 	bl	8011384 <HAL_GPIO_WritePin>

	while((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0));
 800dbd8:	bf00      	nop
 800dbda:	2104      	movs	r1, #4
 800dbdc:	480c      	ldr	r0, [pc, #48]	; (800dc10 <go_to_sleep+0x48>)
 800dbde:	f003 fbb9 	bl	8011354 <HAL_GPIO_ReadPin>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d0f8      	beq.n	800dbda <go_to_sleep+0x12>
	HAL_Delay(10);
 800dbe8:	200a      	movs	r0, #10
 800dbea:	f002 fa03 	bl	800fff4 <HAL_Delay>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800dbee:	2008      	movs	r0, #8
 800dbf0:	f002 ff28 	bl	8010a44 <HAL_NVIC_EnableIRQ>
	/* Disable Systick interrupt */
	HAL_SuspendTick();
 800dbf4:	f000 fe54 	bl	800e8a0 <HAL_SuspendTick>

    /* Go to sleep */
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800dbf8:	2101      	movs	r1, #1
 800dbfa:	2001      	movs	r0, #1
 800dbfc:	f004 fd78 	bl	80126f0 <HAL_PWR_EnterSTOPMode>

    /* Return from sleep */
    SystemClock_Config();
 800dc00:	f000 f940 	bl	800de84 <SystemClock_Config>
    HAL_ResumeTick();
 800dc04:	f000 fe5e 	bl	800e8c4 <HAL_ResumeTick>

}
 800dc08:	bf00      	nop
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	40020800 	.word	0x40020800
 800dc10:	40020000 	.word	0x40020000

0800dc14 <wake_up>:

void wake_up(){
 800dc14:	b480      	push	{r7}
 800dc16:	af00      	add	r7, sp, #0
	/* Clear Wake Up Flag */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800dc18:	4b05      	ldr	r3, [pc, #20]	; (800dc30 <wake_up+0x1c>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a04      	ldr	r2, [pc, #16]	; (800dc30 <wake_up+0x1c>)
 800dc1e:	f043 0304 	orr.w	r3, r3, #4
 800dc22:	6013      	str	r3, [r2, #0]
}
 800dc24:	bf00      	nop
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr
 800dc2e:	bf00      	nop
 800dc30:	40007000 	.word	0x40007000

0800dc34 <platform_write>:
                             uint16_t len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	607a      	str	r2, [r7, #4]
 800dc3e:	461a      	mov	r2, r3
 800dc40:	460b      	mov	r3, r1
 800dc42:	72fb      	strb	r3, [r7, #11]
 800dc44:	4613      	mov	r3, r2
 800dc46:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 800dc48:	2200      	movs	r2, #0
 800dc4a:	2104      	movs	r1, #4
 800dc4c:	480c      	ldr	r0, [pc, #48]	; (800dc80 <platform_write+0x4c>)
 800dc4e:	f003 fb99 	bl	8011384 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 2);
 800dc52:	f107 010b 	add.w	r1, r7, #11
 800dc56:	2302      	movs	r3, #2
 800dc58:	2201      	movs	r2, #1
 800dc5a:	68f8      	ldr	r0, [r7, #12]
 800dc5c:	f005 faa3 	bl	80131a6 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 2);
 800dc60:	893a      	ldrh	r2, [r7, #8]
 800dc62:	2302      	movs	r3, #2
 800dc64:	6879      	ldr	r1, [r7, #4]
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f005 fa9d 	bl	80131a6 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	2104      	movs	r1, #4
 800dc70:	4803      	ldr	r0, [pc, #12]	; (800dc80 <platform_write+0x4c>)
 800dc72:	f003 fb87 	bl	8011384 <HAL_GPIO_WritePin>
  return 0;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3710      	adds	r7, #16
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	40020400 	.word	0x40020400

0800dc84 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	607a      	str	r2, [r7, #4]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	460b      	mov	r3, r1
 800dc92:	72fb      	strb	r3, [r7, #11]
 800dc94:	4613      	mov	r3, r2
 800dc96:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 800dc98:	7afb      	ldrb	r3, [r7, #11]
 800dc9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 800dca2:	2200      	movs	r2, #0
 800dca4:	2104      	movs	r1, #4
 800dca6:	480e      	ldr	r0, [pc, #56]	; (800dce0 <platform_read+0x5c>)
 800dca8:	f003 fb6c 	bl	8011384 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800dcac:	f107 010b 	add.w	r1, r7, #11
 800dcb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	68f8      	ldr	r0, [r7, #12]
 800dcb8:	f005 fa75 	bl	80131a6 <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 800dcbc:	893a      	ldrh	r2, [r7, #8]
 800dcbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dcc2:	6879      	ldr	r1, [r7, #4]
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f005 fbaa 	bl	801341e <HAL_SPI_Receive>
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 800dcca:	2201      	movs	r2, #1
 800dccc:	2104      	movs	r1, #4
 800dcce:	4804      	ldr	r0, [pc, #16]	; (800dce0 <platform_read+0x5c>)
 800dcd0:	f003 fb58 	bl	8011384 <HAL_GPIO_WritePin>
  return 0;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3710      	adds	r7, #16
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	40020400 	.word	0x40020400

0800dce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800dcea:	f002 f941 	bl	800ff70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800dcee:	f000 f8c9 	bl	800de84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800dcf2:	f000 fa7f 	bl	800e1f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800dcf6:	f000 f92d 	bl	800df54 <MX_ADC1_Init>
  MX_TIM4_Init();
 800dcfa:	f000 f9f7 	bl	800e0ec <MX_TIM4_Init>
  MX_SPI1_Init();
 800dcfe:	f000 f989 	bl	800e014 <MX_SPI1_Init>
  MX_SPI2_Init();
 800dd02:	f000 f9bd 	bl	800e080 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800dd06:	f000 fa4b 	bl	800e1a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800dd0a:	2008      	movs	r0, #8
 800dd0c:	f002 fea8 	bl	8010a60 <HAL_NVIC_DisableIRQ>



  HAL_GPIO_WritePin(P_EN_CUT_GPIO_Port, P_EN_CUT_Pin, GPIO_PIN_SET);
 800dd10:	2201      	movs	r2, #1
 800dd12:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd16:	4844      	ldr	r0, [pc, #272]	; (800de28 <main+0x144>)
 800dd18:	f003 fb34 	bl	8011384 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CUT_EN_GPIO_Port, CUT_EN_Pin, GPIO_PIN_SET);
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	2120      	movs	r1, #32
 800dd20:	4841      	ldr	r0, [pc, #260]	; (800de28 <main+0x144>)
 800dd22:	f003 fb2f 	bl	8011384 <HAL_GPIO_WritePin>

  dev_ctx.write_reg = platform_write;
 800dd26:	4b41      	ldr	r3, [pc, #260]	; (800de2c <main+0x148>)
 800dd28:	4a41      	ldr	r2, [pc, #260]	; (800de30 <main+0x14c>)
 800dd2a:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 800dd2c:	4b3f      	ldr	r3, [pc, #252]	; (800de2c <main+0x148>)
 800dd2e:	4a41      	ldr	r2, [pc, #260]	; (800de34 <main+0x150>)
 800dd30:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hspi1;
 800dd32:	4b3e      	ldr	r3, [pc, #248]	; (800de2c <main+0x148>)
 800dd34:	4a40      	ldr	r2, [pc, #256]	; (800de38 <main+0x154>)
 800dd36:	609a      	str	r2, [r3, #8]

  uint8_t whoamI;
  lsm6dsr_pin_int1_route_t int1_route;

  lsm6dsr_device_id_get(&dev_ctx, &whoamI);
 800dd38:	1dfb      	adds	r3, r7, #7
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	483b      	ldr	r0, [pc, #236]	; (800de2c <main+0x148>)
 800dd3e:	f001 f9ea 	bl	800f116 <lsm6dsr_device_id_get>

  if (whoamI != LSM6DSR_ID)
 800dd42:	79fb      	ldrb	r3, [r7, #7]
 800dd44:	2b6b      	cmp	r3, #107	; 0x6b
 800dd46:	d000      	beq.n	800dd4a <main+0x66>
      while (1);
 800dd48:	e7fe      	b.n	800dd48 <main+0x64>

  lsm6dsr_reset_set(&dev_ctx, PROPERTY_ENABLE);
 800dd4a:	2101      	movs	r1, #1
 800dd4c:	4837      	ldr	r0, [pc, #220]	; (800de2c <main+0x148>)
 800dd4e:	f001 f9f3 	bl	800f138 <lsm6dsr_reset_set>
  HAL_Delay(10);
 800dd52:	200a      	movs	r0, #10
 800dd54:	f002 f94e 	bl	800fff4 <HAL_Delay>

  /* Disable I3C interface */
  lsm6dsr_i3c_disable_set(&dev_ctx, LSM6DSR_I3C_DISABLE);
 800dd58:	2180      	movs	r1, #128	; 0x80
 800dd5a:	4834      	ldr	r0, [pc, #208]	; (800de2c <main+0x148>)
 800dd5c:	f001 fa38 	bl	800f1d0 <lsm6dsr_i3c_disable_set>

  /* Enable Block Data Update */
  lsm6dsr_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 800dd60:	2101      	movs	r1, #1
 800dd62:	4832      	ldr	r0, [pc, #200]	; (800de2c <main+0x148>)
 800dd64:	f001 f8d2 	bl	800ef0c <lsm6dsr_block_data_update_set>
  /* Set Output Data Rate */
  lsm6dsr_xl_data_rate_set(&dev_ctx, LSM6DSR_XL_ODR_12Hz5);
 800dd68:	2101      	movs	r1, #1
 800dd6a:	4830      	ldr	r0, [pc, #192]	; (800de2c <main+0x148>)
 800dd6c:	f000 feb0 	bl	800ead0 <lsm6dsr_xl_data_rate_set>
  lsm6dsr_gy_data_rate_set(&dev_ctx, LSM6DSR_GY_ODR_12Hz5);
 800dd70:	2101      	movs	r1, #1
 800dd72:	482e      	ldr	r0, [pc, #184]	; (800de2c <main+0x148>)
 800dd74:	f000 ffce 	bl	800ed14 <lsm6dsr_gy_data_rate_set>
  /* Set full scale */
  lsm6dsr_xl_full_scale_set(&dev_ctx, LSM6DSR_16g);
 800dd78:	2101      	movs	r1, #1
 800dd7a:	482c      	ldr	r0, [pc, #176]	; (800de2c <main+0x148>)
 800dd7c:	f000 fe82 	bl	800ea84 <lsm6dsr_xl_full_scale_set>
  lsm6dsr_gy_full_scale_set(&dev_ctx, LSM6DSR_2000dps);
 800dd80:	210c      	movs	r1, #12
 800dd82:	482a      	ldr	r0, [pc, #168]	; (800de2c <main+0x148>)
 800dd84:	f000 ffa0 	bl	800ecc8 <lsm6dsr_gy_full_scale_set>
  */
  //lsm6dsr_xl_hp_path_on_out_set(&dev_ctx, LSM6DSR_LP_ODR_DIV_100);
  //lsm6dsr_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);

  /* Apply high-pass digital filter on Wake-Up function */
  lsm6dsr_xl_hp_path_internal_set(&dev_ctx, LSM6DSR_USE_SLOPE);
 800dd88:	2100      	movs	r1, #0
 800dd8a:	4828      	ldr	r0, [pc, #160]	; (800de2c <main+0x148>)
 800dd8c:	f001 f9fa 	bl	800f184 <lsm6dsr_xl_hp_path_internal_set>
  /* Set Wake-Up threshold: 1 LSb corresponds to FS_XL/2^6 */
  lsm6dsr_wkup_threshold_set(&dev_ctx, 2);
 800dd90:	2102      	movs	r1, #2
 800dd92:	4826      	ldr	r0, [pc, #152]	; (800de2c <main+0x148>)
 800dd94:	f001 fc15 	bl	800f5c2 <lsm6dsr_wkup_threshold_set>

  /* interrupt generation on Wake-Up INT1 pin */
  lsm6dsr_pin_int1_route_get(&dev_ctx, &int1_route);
 800dd98:	463b      	mov	r3, r7
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	4823      	ldr	r0, [pc, #140]	; (800de2c <main+0x148>)
 800dd9e:	f001 fbc3 	bl	800f528 <lsm6dsr_pin_int1_route_get>
  int1_route.md1_cfg.int1_wu = PROPERTY_ENABLE;
 800dda2:	787b      	ldrb	r3, [r7, #1]
 800dda4:	f043 0320 	orr.w	r3, r3, #32
 800dda8:	707b      	strb	r3, [r7, #1]
  lsm6dsr_pin_int1_route_set(&dev_ctx, &int1_route);
 800ddaa:	463b      	mov	r3, r7
 800ddac:	4619      	mov	r1, r3
 800ddae:	481f      	ldr	r0, [pc, #124]	; (800de2c <main+0x148>)
 800ddb0:	f001 fa54 	bl	800f25c <lsm6dsr_pin_int1_route_set>



  fifo_init(&usb_output_fifo, usb_fifo_out_buffer, USB_OUTPUT_BUFFER_SIZE);
 800ddb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ddb8:	4920      	ldr	r1, [pc, #128]	; (800de3c <main+0x158>)
 800ddba:	4821      	ldr	r0, [pc, #132]	; (800de40 <main+0x15c>)
 800ddbc:	f001 fe2e 	bl	800fa1c <fifo_init>
  fifo_init(&usb_input_fifo, usb_fifo_in_buffer, USB_INPUT_BUFFER_SIZE);
 800ddc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ddc4:	491f      	ldr	r1, [pc, #124]	; (800de44 <main+0x160>)
 800ddc6:	4820      	ldr	r0, [pc, #128]	; (800de48 <main+0x164>)
 800ddc8:	f001 fe28 	bl	800fa1c <fifo_init>

  log_enable();
 800ddcc:	f001 fff8 	bl	800fdc0 <log_enable>
  //dcdc_enable();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800ddd0:	f00a f832 	bl	8017e38 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  buzzer_event_id = osEventFlagsNew(NULL);
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	f00a f971 	bl	80180bc <osEventFlagsNew>
 800ddda:	4603      	mov	r3, r0
 800dddc:	4a1b      	ldr	r2, [pc, #108]	; (800de4c <main+0x168>)
 800ddde:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800dde0:	4a1b      	ldr	r2, [pc, #108]	; (800de50 <main+0x16c>)
 800dde2:	2100      	movs	r1, #0
 800dde4:	481b      	ldr	r0, [pc, #108]	; (800de54 <main+0x170>)
 800dde6:	f00a f88f 	bl	8017f08 <osThreadNew>
 800ddea:	4603      	mov	r3, r0
 800ddec:	4a1a      	ldr	r2, [pc, #104]	; (800de58 <main+0x174>)
 800ddee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadNew(task_sensor_read, NULL, &task_sensor_read_attributes);
 800ddf0:	4a1a      	ldr	r2, [pc, #104]	; (800de5c <main+0x178>)
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	481a      	ldr	r0, [pc, #104]	; (800de60 <main+0x17c>)
 800ddf6:	f00a f887 	bl	8017f08 <osThreadNew>
  osThreadNew(task_fsm, NULL, &task_fsm_attributes);
 800ddfa:	4a1a      	ldr	r2, [pc, #104]	; (800de64 <main+0x180>)
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	481a      	ldr	r0, [pc, #104]	; (800de68 <main+0x184>)
 800de00:	f00a f882 	bl	8017f08 <osThreadNew>
  osThreadNew(task_heater, NULL, &task_heater_attributes);
 800de04:	4a19      	ldr	r2, [pc, #100]	; (800de6c <main+0x188>)
 800de06:	2100      	movs	r1, #0
 800de08:	4819      	ldr	r0, [pc, #100]	; (800de70 <main+0x18c>)
 800de0a:	f00a f87d 	bl	8017f08 <osThreadNew>
  osThreadNew(task_state_est, NULL, &task_state_est_attributes);
 800de0e:	4a19      	ldr	r2, [pc, #100]	; (800de74 <main+0x190>)
 800de10:	2100      	movs	r1, #0
 800de12:	4819      	ldr	r0, [pc, #100]	; (800de78 <main+0x194>)
 800de14:	f00a f878 	bl	8017f08 <osThreadNew>
  osThreadNew(task_buzzer, NULL, &task_buzzer_attributes);
 800de18:	4a18      	ldr	r2, [pc, #96]	; (800de7c <main+0x198>)
 800de1a:	2100      	movs	r1, #0
 800de1c:	4818      	ldr	r0, [pc, #96]	; (800de80 <main+0x19c>)
 800de1e:	f00a f873 	bl	8017f08 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800de22:	f00a f82d 	bl	8017e80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800de26:	e7fe      	b.n	800de26 <main+0x142>
 800de28:	40020400 	.word	0x40020400
 800de2c:	20000468 	.word	0x20000468
 800de30:	0800dc35 	.word	0x0800dc35
 800de34:	0800dc85 	.word	0x0800dc85
 800de38:	20007464 	.word	0x20007464
 800de3c:	200053ac 	.word	0x200053ac
 800de40:	200055ac 	.word	0x200055ac
 800de44:	20005190 	.word	0x20005190
 800de48:	20005390 	.word	0x20005390
 800de4c:	200053a8 	.word	0x200053a8
 800de50:	0801dcac 	.word	0x0801dcac
 800de54:	0800e3c5 	.word	0x0800e3c5
 800de58:	200055c4 	.word	0x200055c4
 800de5c:	0801dcd0 	.word	0x0801dcd0
 800de60:	0800f9a5 	.word	0x0800f9a5
 800de64:	0801dcf4 	.word	0x0801dcf4
 800de68:	0800f851 	.word	0x0800f851
 800de6c:	0801dd3c 	.word	0x0801dd3c
 800de70:	0800f931 	.word	0x0800f931
 800de74:	0801dd18 	.word	0x0801dd18
 800de78:	0800f9e1 	.word	0x0800f9e1
 800de7c:	0801dd60 	.word	0x0801dd60
 800de80:	0800f765 	.word	0x0800f765

0800de84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b094      	sub	sp, #80	; 0x50
 800de88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800de8a:	f107 0320 	add.w	r3, r7, #32
 800de8e:	2230      	movs	r2, #48	; 0x30
 800de90:	2100      	movs	r1, #0
 800de92:	4618      	mov	r0, r3
 800de94:	f00e fc74 	bl	801c780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800de98:	f107 030c 	add.w	r3, r7, #12
 800de9c:	2200      	movs	r2, #0
 800de9e:	601a      	str	r2, [r3, #0]
 800dea0:	605a      	str	r2, [r3, #4]
 800dea2:	609a      	str	r2, [r3, #8]
 800dea4:	60da      	str	r2, [r3, #12]
 800dea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800dea8:	2300      	movs	r3, #0
 800deaa:	60bb      	str	r3, [r7, #8]
 800deac:	4b27      	ldr	r3, [pc, #156]	; (800df4c <SystemClock_Config+0xc8>)
 800deae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb0:	4a26      	ldr	r2, [pc, #152]	; (800df4c <SystemClock_Config+0xc8>)
 800deb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800deb6:	6413      	str	r3, [r2, #64]	; 0x40
 800deb8:	4b24      	ldr	r3, [pc, #144]	; (800df4c <SystemClock_Config+0xc8>)
 800deba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800debc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dec0:	60bb      	str	r3, [r7, #8]
 800dec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800dec4:	2300      	movs	r3, #0
 800dec6:	607b      	str	r3, [r7, #4]
 800dec8:	4b21      	ldr	r3, [pc, #132]	; (800df50 <SystemClock_Config+0xcc>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4a20      	ldr	r2, [pc, #128]	; (800df50 <SystemClock_Config+0xcc>)
 800dece:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ded2:	6013      	str	r3, [r2, #0]
 800ded4:	4b1e      	ldr	r3, [pc, #120]	; (800df50 <SystemClock_Config+0xcc>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800dedc:	607b      	str	r3, [r7, #4]
 800dede:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800dee0:	2301      	movs	r3, #1
 800dee2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800dee4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dee8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800deea:	2302      	movs	r3, #2
 800deec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800deee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800def2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800def4:	2304      	movs	r3, #4
 800def6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800def8:	2360      	movs	r3, #96	; 0x60
 800defa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800defc:	2306      	movs	r3, #6
 800defe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800df00:	2304      	movs	r3, #4
 800df02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800df04:	f107 0320 	add.w	r3, r7, #32
 800df08:	4618      	mov	r0, r3
 800df0a:	f004 fc1d 	bl	8012748 <HAL_RCC_OscConfig>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d001      	beq.n	800df18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800df14:	f000 fad4 	bl	800e4c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800df18:	230f      	movs	r3, #15
 800df1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800df1c:	2302      	movs	r3, #2
 800df1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800df20:	2380      	movs	r3, #128	; 0x80
 800df22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800df24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800df2a:	2300      	movs	r3, #0
 800df2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800df2e:	f107 030c 	add.w	r3, r7, #12
 800df32:	2100      	movs	r1, #0
 800df34:	4618      	mov	r0, r3
 800df36:	f004 fe7f 	bl	8012c38 <HAL_RCC_ClockConfig>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d001      	beq.n	800df44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800df40:	f000 fabe 	bl	800e4c0 <Error_Handler>
  }
}
 800df44:	bf00      	nop
 800df46:	3750      	adds	r7, #80	; 0x50
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	40023800 	.word	0x40023800
 800df50:	40007000 	.word	0x40007000

0800df54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800df5a:	463b      	mov	r3, r7
 800df5c:	2200      	movs	r2, #0
 800df5e:	601a      	str	r2, [r3, #0]
 800df60:	605a      	str	r2, [r3, #4]
 800df62:	609a      	str	r2, [r3, #8]
 800df64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800df66:	4b28      	ldr	r3, [pc, #160]	; (800e008 <MX_ADC1_Init+0xb4>)
 800df68:	4a28      	ldr	r2, [pc, #160]	; (800e00c <MX_ADC1_Init+0xb8>)
 800df6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800df6c:	4b26      	ldr	r3, [pc, #152]	; (800e008 <MX_ADC1_Init+0xb4>)
 800df6e:	2200      	movs	r2, #0
 800df70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800df72:	4b25      	ldr	r3, [pc, #148]	; (800e008 <MX_ADC1_Init+0xb4>)
 800df74:	2200      	movs	r2, #0
 800df76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800df78:	4b23      	ldr	r3, [pc, #140]	; (800e008 <MX_ADC1_Init+0xb4>)
 800df7a:	2201      	movs	r2, #1
 800df7c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800df7e:	4b22      	ldr	r3, [pc, #136]	; (800e008 <MX_ADC1_Init+0xb4>)
 800df80:	2201      	movs	r2, #1
 800df82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800df84:	4b20      	ldr	r3, [pc, #128]	; (800e008 <MX_ADC1_Init+0xb4>)
 800df86:	2200      	movs	r2, #0
 800df88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800df8c:	4b1e      	ldr	r3, [pc, #120]	; (800e008 <MX_ADC1_Init+0xb4>)
 800df8e:	2200      	movs	r2, #0
 800df90:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800df92:	4b1d      	ldr	r3, [pc, #116]	; (800e008 <MX_ADC1_Init+0xb4>)
 800df94:	4a1e      	ldr	r2, [pc, #120]	; (800e010 <MX_ADC1_Init+0xbc>)
 800df96:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800df98:	4b1b      	ldr	r3, [pc, #108]	; (800e008 <MX_ADC1_Init+0xb4>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800df9e:	4b1a      	ldr	r3, [pc, #104]	; (800e008 <MX_ADC1_Init+0xb4>)
 800dfa0:	2202      	movs	r2, #2
 800dfa2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800dfa4:	4b18      	ldr	r3, [pc, #96]	; (800e008 <MX_ADC1_Init+0xb4>)
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800dfac:	4b16      	ldr	r3, [pc, #88]	; (800e008 <MX_ADC1_Init+0xb4>)
 800dfae:	2201      	movs	r2, #1
 800dfb0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800dfb2:	4815      	ldr	r0, [pc, #84]	; (800e008 <MX_ADC1_Init+0xb4>)
 800dfb4:	f002 f85c 	bl	8010070 <HAL_ADC_Init>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d001      	beq.n	800dfc2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800dfbe:	f000 fa7f 	bl	800e4c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800dfca:	2303      	movs	r3, #3
 800dfcc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dfce:	463b      	mov	r3, r7
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	480d      	ldr	r0, [pc, #52]	; (800e008 <MX_ADC1_Init+0xb4>)
 800dfd4:	f002 fa10 	bl	80103f8 <HAL_ADC_ConfigChannel>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d001      	beq.n	800dfe2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800dfde:	f000 fa6f 	bl	800e4c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800dfe6:	2302      	movs	r3, #2
 800dfe8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dfea:	463b      	mov	r3, r7
 800dfec:	4619      	mov	r1, r3
 800dfee:	4806      	ldr	r0, [pc, #24]	; (800e008 <MX_ADC1_Init+0xb4>)
 800dff0:	f002 fa02 	bl	80103f8 <HAL_ADC_ConfigChannel>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800dffa:	f000 fa61 	bl	800e4c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800dffe:	bf00      	nop
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	20005ec4 	.word	0x20005ec4
 800e00c:	40012000 	.word	0x40012000
 800e010:	0f000001 	.word	0x0f000001

0800e014 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800e018:	4b17      	ldr	r3, [pc, #92]	; (800e078 <MX_SPI1_Init+0x64>)
 800e01a:	4a18      	ldr	r2, [pc, #96]	; (800e07c <MX_SPI1_Init+0x68>)
 800e01c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800e01e:	4b16      	ldr	r3, [pc, #88]	; (800e078 <MX_SPI1_Init+0x64>)
 800e020:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e024:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800e026:	4b14      	ldr	r3, [pc, #80]	; (800e078 <MX_SPI1_Init+0x64>)
 800e028:	2200      	movs	r2, #0
 800e02a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800e02c:	4b12      	ldr	r3, [pc, #72]	; (800e078 <MX_SPI1_Init+0x64>)
 800e02e:	2200      	movs	r2, #0
 800e030:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e032:	4b11      	ldr	r3, [pc, #68]	; (800e078 <MX_SPI1_Init+0x64>)
 800e034:	2200      	movs	r2, #0
 800e036:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e038:	4b0f      	ldr	r3, [pc, #60]	; (800e078 <MX_SPI1_Init+0x64>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800e03e:	4b0e      	ldr	r3, [pc, #56]	; (800e078 <MX_SPI1_Init+0x64>)
 800e040:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e044:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e046:	4b0c      	ldr	r3, [pc, #48]	; (800e078 <MX_SPI1_Init+0x64>)
 800e048:	2200      	movs	r2, #0
 800e04a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e04c:	4b0a      	ldr	r3, [pc, #40]	; (800e078 <MX_SPI1_Init+0x64>)
 800e04e:	2200      	movs	r2, #0
 800e050:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800e052:	4b09      	ldr	r3, [pc, #36]	; (800e078 <MX_SPI1_Init+0x64>)
 800e054:	2200      	movs	r2, #0
 800e056:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e058:	4b07      	ldr	r3, [pc, #28]	; (800e078 <MX_SPI1_Init+0x64>)
 800e05a:	2200      	movs	r2, #0
 800e05c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800e05e:	4b06      	ldr	r3, [pc, #24]	; (800e078 <MX_SPI1_Init+0x64>)
 800e060:	220a      	movs	r2, #10
 800e062:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800e064:	4804      	ldr	r0, [pc, #16]	; (800e078 <MX_SPI1_Init+0x64>)
 800e066:	f005 f815 	bl	8013094 <HAL_SPI_Init>
 800e06a:	4603      	mov	r3, r0
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d001      	beq.n	800e074 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800e070:	f000 fa26 	bl	800e4c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800e074:	bf00      	nop
 800e076:	bd80      	pop	{r7, pc}
 800e078:	20007464 	.word	0x20007464
 800e07c:	40013000 	.word	0x40013000

0800e080 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800e084:	4b17      	ldr	r3, [pc, #92]	; (800e0e4 <MX_SPI2_Init+0x64>)
 800e086:	4a18      	ldr	r2, [pc, #96]	; (800e0e8 <MX_SPI2_Init+0x68>)
 800e088:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800e08a:	4b16      	ldr	r3, [pc, #88]	; (800e0e4 <MX_SPI2_Init+0x64>)
 800e08c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e090:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800e092:	4b14      	ldr	r3, [pc, #80]	; (800e0e4 <MX_SPI2_Init+0x64>)
 800e094:	2200      	movs	r2, #0
 800e096:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800e098:	4b12      	ldr	r3, [pc, #72]	; (800e0e4 <MX_SPI2_Init+0x64>)
 800e09a:	2200      	movs	r2, #0
 800e09c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e09e:	4b11      	ldr	r3, [pc, #68]	; (800e0e4 <MX_SPI2_Init+0x64>)
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e0a4:	4b0f      	ldr	r3, [pc, #60]	; (800e0e4 <MX_SPI2_Init+0x64>)
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800e0aa:	4b0e      	ldr	r3, [pc, #56]	; (800e0e4 <MX_SPI2_Init+0x64>)
 800e0ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e0b2:	4b0c      	ldr	r3, [pc, #48]	; (800e0e4 <MX_SPI2_Init+0x64>)
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e0b8:	4b0a      	ldr	r3, [pc, #40]	; (800e0e4 <MX_SPI2_Init+0x64>)
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800e0be:	4b09      	ldr	r3, [pc, #36]	; (800e0e4 <MX_SPI2_Init+0x64>)
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e0c4:	4b07      	ldr	r3, [pc, #28]	; (800e0e4 <MX_SPI2_Init+0x64>)
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800e0ca:	4b06      	ldr	r3, [pc, #24]	; (800e0e4 <MX_SPI2_Init+0x64>)
 800e0cc:	220a      	movs	r2, #10
 800e0ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800e0d0:	4804      	ldr	r0, [pc, #16]	; (800e0e4 <MX_SPI2_Init+0x64>)
 800e0d2:	f004 ffdf 	bl	8013094 <HAL_SPI_Init>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d001      	beq.n	800e0e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800e0dc:	f000 f9f0 	bl	800e4c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800e0e0:	bf00      	nop
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	200055c8 	.word	0x200055c8
 800e0e8:	40003800 	.word	0x40003800

0800e0ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b08a      	sub	sp, #40	; 0x28
 800e0f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e0f2:	f107 0320 	add.w	r3, r7, #32
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	601a      	str	r2, [r3, #0]
 800e0fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e0fc:	1d3b      	adds	r3, r7, #4
 800e0fe:	2200      	movs	r2, #0
 800e100:	601a      	str	r2, [r3, #0]
 800e102:	605a      	str	r2, [r3, #4]
 800e104:	609a      	str	r2, [r3, #8]
 800e106:	60da      	str	r2, [r3, #12]
 800e108:	611a      	str	r2, [r3, #16]
 800e10a:	615a      	str	r2, [r3, #20]
 800e10c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800e10e:	4b22      	ldr	r3, [pc, #136]	; (800e198 <MX_TIM4_Init+0xac>)
 800e110:	4a22      	ldr	r2, [pc, #136]	; (800e19c <MX_TIM4_Init+0xb0>)
 800e112:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 800e114:	4b20      	ldr	r3, [pc, #128]	; (800e198 <MX_TIM4_Init+0xac>)
 800e116:	2210      	movs	r2, #16
 800e118:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e11a:	4b1f      	ldr	r3, [pc, #124]	; (800e198 <MX_TIM4_Init+0xac>)
 800e11c:	2200      	movs	r2, #0
 800e11e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 800e120:	4b1d      	ldr	r3, [pc, #116]	; (800e198 <MX_TIM4_Init+0xac>)
 800e122:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e126:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e128:	4b1b      	ldr	r3, [pc, #108]	; (800e198 <MX_TIM4_Init+0xac>)
 800e12a:	2200      	movs	r2, #0
 800e12c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e12e:	4b1a      	ldr	r3, [pc, #104]	; (800e198 <MX_TIM4_Init+0xac>)
 800e130:	2200      	movs	r2, #0
 800e132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800e134:	4818      	ldr	r0, [pc, #96]	; (800e198 <MX_TIM4_Init+0xac>)
 800e136:	f005 fe11 	bl	8013d5c <HAL_TIM_PWM_Init>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800e140:	f000 f9be 	bl	800e4c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e144:	2300      	movs	r3, #0
 800e146:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e148:	2300      	movs	r3, #0
 800e14a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e14c:	f107 0320 	add.w	r3, r7, #32
 800e150:	4619      	mov	r1, r3
 800e152:	4811      	ldr	r0, [pc, #68]	; (800e198 <MX_TIM4_Init+0xac>)
 800e154:	f006 fb8a 	bl	801486c <HAL_TIMEx_MasterConfigSynchronization>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d001      	beq.n	800e162 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800e15e:	f000 f9af 	bl	800e4c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e162:	2360      	movs	r3, #96	; 0x60
 800e164:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 800e166:	23fa      	movs	r3, #250	; 0xfa
 800e168:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e16a:	2300      	movs	r3, #0
 800e16c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e16e:	2300      	movs	r3, #0
 800e170:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e172:	1d3b      	adds	r3, r7, #4
 800e174:	2200      	movs	r2, #0
 800e176:	4619      	mov	r1, r3
 800e178:	4807      	ldr	r0, [pc, #28]	; (800e198 <MX_TIM4_Init+0xac>)
 800e17a:	f006 f85b 	bl	8014234 <HAL_TIM_PWM_ConfigChannel>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800e184:	f000 f99c 	bl	800e4c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800e188:	4803      	ldr	r0, [pc, #12]	; (800e198 <MX_TIM4_Init+0xac>)
 800e18a:	f000 faaf 	bl	800e6ec <HAL_TIM_MspPostInit>

}
 800e18e:	bf00      	nop
 800e190:	3728      	adds	r7, #40	; 0x28
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	20005620 	.word	0x20005620
 800e19c:	40000800 	.word	0x40000800

0800e1a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e1a4:	4b11      	ldr	r3, [pc, #68]	; (800e1ec <MX_USART1_UART_Init+0x4c>)
 800e1a6:	4a12      	ldr	r2, [pc, #72]	; (800e1f0 <MX_USART1_UART_Init+0x50>)
 800e1a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e1aa:	4b10      	ldr	r3, [pc, #64]	; (800e1ec <MX_USART1_UART_Init+0x4c>)
 800e1ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800e1b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e1b2:	4b0e      	ldr	r3, [pc, #56]	; (800e1ec <MX_USART1_UART_Init+0x4c>)
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e1b8:	4b0c      	ldr	r3, [pc, #48]	; (800e1ec <MX_USART1_UART_Init+0x4c>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e1be:	4b0b      	ldr	r3, [pc, #44]	; (800e1ec <MX_USART1_UART_Init+0x4c>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e1c4:	4b09      	ldr	r3, [pc, #36]	; (800e1ec <MX_USART1_UART_Init+0x4c>)
 800e1c6:	220c      	movs	r2, #12
 800e1c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e1ca:	4b08      	ldr	r3, [pc, #32]	; (800e1ec <MX_USART1_UART_Init+0x4c>)
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e1d0:	4b06      	ldr	r3, [pc, #24]	; (800e1ec <MX_USART1_UART_Init+0x4c>)
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e1d6:	4805      	ldr	r0, [pc, #20]	; (800e1ec <MX_USART1_UART_Init+0x4c>)
 800e1d8:	f006 fbca 	bl	8014970 <HAL_UART_Init>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800e1e2:	f000 f96d 	bl	800e4c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e1e6:	bf00      	nop
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	2000670c 	.word	0x2000670c
 800e1f0:	40011000 	.word	0x40011000

0800e1f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b08a      	sub	sp, #40	; 0x28
 800e1f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1fa:	f107 0314 	add.w	r3, r7, #20
 800e1fe:	2200      	movs	r2, #0
 800e200:	601a      	str	r2, [r3, #0]
 800e202:	605a      	str	r2, [r3, #4]
 800e204:	609a      	str	r2, [r3, #8]
 800e206:	60da      	str	r2, [r3, #12]
 800e208:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e20a:	2300      	movs	r3, #0
 800e20c:	613b      	str	r3, [r7, #16]
 800e20e:	4b5d      	ldr	r3, [pc, #372]	; (800e384 <MX_GPIO_Init+0x190>)
 800e210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e212:	4a5c      	ldr	r2, [pc, #368]	; (800e384 <MX_GPIO_Init+0x190>)
 800e214:	f043 0304 	orr.w	r3, r3, #4
 800e218:	6313      	str	r3, [r2, #48]	; 0x30
 800e21a:	4b5a      	ldr	r3, [pc, #360]	; (800e384 <MX_GPIO_Init+0x190>)
 800e21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e21e:	f003 0304 	and.w	r3, r3, #4
 800e222:	613b      	str	r3, [r7, #16]
 800e224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e226:	2300      	movs	r3, #0
 800e228:	60fb      	str	r3, [r7, #12]
 800e22a:	4b56      	ldr	r3, [pc, #344]	; (800e384 <MX_GPIO_Init+0x190>)
 800e22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e22e:	4a55      	ldr	r2, [pc, #340]	; (800e384 <MX_GPIO_Init+0x190>)
 800e230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e234:	6313      	str	r3, [r2, #48]	; 0x30
 800e236:	4b53      	ldr	r3, [pc, #332]	; (800e384 <MX_GPIO_Init+0x190>)
 800e238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e242:	2300      	movs	r3, #0
 800e244:	60bb      	str	r3, [r7, #8]
 800e246:	4b4f      	ldr	r3, [pc, #316]	; (800e384 <MX_GPIO_Init+0x190>)
 800e248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e24a:	4a4e      	ldr	r2, [pc, #312]	; (800e384 <MX_GPIO_Init+0x190>)
 800e24c:	f043 0301 	orr.w	r3, r3, #1
 800e250:	6313      	str	r3, [r2, #48]	; 0x30
 800e252:	4b4c      	ldr	r3, [pc, #304]	; (800e384 <MX_GPIO_Init+0x190>)
 800e254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e256:	f003 0301 	and.w	r3, r3, #1
 800e25a:	60bb      	str	r3, [r7, #8]
 800e25c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e25e:	2300      	movs	r3, #0
 800e260:	607b      	str	r3, [r7, #4]
 800e262:	4b48      	ldr	r3, [pc, #288]	; (800e384 <MX_GPIO_Init+0x190>)
 800e264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e266:	4a47      	ldr	r2, [pc, #284]	; (800e384 <MX_GPIO_Init+0x190>)
 800e268:	f043 0302 	orr.w	r3, r3, #2
 800e26c:	6313      	str	r3, [r2, #48]	; 0x30
 800e26e:	4b45      	ldr	r3, [pc, #276]	; (800e384 <MX_GPIO_Init+0x190>)
 800e270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e272:	f003 0302 	and.w	r3, r3, #2
 800e276:	607b      	str	r3, [r7, #4]
 800e278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800e27a:	2200      	movs	r2, #0
 800e27c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e280:	4841      	ldr	r0, [pc, #260]	; (800e388 <MX_GPIO_Init+0x194>)
 800e282:	f003 f87f 	bl	8011384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TC_CS_Pin|R_CS_Pin, GPIO_PIN_RESET);
 800e286:	2200      	movs	r2, #0
 800e288:	2118      	movs	r1, #24
 800e28a:	4840      	ldr	r0, [pc, #256]	; (800e38c <MX_GPIO_Init+0x198>)
 800e28c:	f003 f87a 	bl	8011384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BARO_CS_Pin|IMU_CS_Pin|DCDC_EN_Pin|CUT_EN_Pin
 800e290:	2200      	movs	r2, #0
 800e292:	f240 31b6 	movw	r1, #950	; 0x3b6
 800e296:	483e      	ldr	r0, [pc, #248]	; (800e390 <MX_GPIO_Init+0x19c>)
 800e298:	f003 f874 	bl	8011384 <HAL_GPIO_WritePin>
                          |P_EN_LIGHT_Pin|P_EN_CUT_Pin|P_EN_RADIO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800e29c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e2a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800e2ae:	f107 0314 	add.w	r3, r7, #20
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	4834      	ldr	r0, [pc, #208]	; (800e388 <MX_GPIO_Init+0x194>)
 800e2b6:	f002 fec9 	bl	801104c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800e2ba:	2304      	movs	r3, #4
 800e2bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e2be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800e2c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800e2c8:	f107 0314 	add.w	r3, r7, #20
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	482f      	ldr	r0, [pc, #188]	; (800e38c <MX_GPIO_Init+0x198>)
 800e2d0:	f002 febc 	bl	801104c <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_CS_Pin R_CS_Pin */
  GPIO_InitStruct.Pin = TC_CS_Pin|R_CS_Pin;
 800e2d4:	2318      	movs	r3, #24
 800e2d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2e4:	f107 0314 	add.w	r3, r7, #20
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	4828      	ldr	r0, [pc, #160]	; (800e38c <MX_GPIO_Init+0x198>)
 800e2ec:	f002 feae 	bl	801104c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_INT_Pin */
  GPIO_InitStruct.Pin = RF_INT_Pin;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_INT_GPIO_Port, &GPIO_InitStruct);
 800e2fc:	f107 0314 	add.w	r3, r7, #20
 800e300:	4619      	mov	r1, r3
 800e302:	4823      	ldr	r0, [pc, #140]	; (800e390 <MX_GPIO_Init+0x19c>)
 800e304:	f002 fea2 	bl	801104c <HAL_GPIO_Init>

  /*Configure GPIO pins : BARO_CS_Pin IMU_CS_Pin DCDC_EN_Pin CUT_EN_Pin
                           P_EN_LIGHT_Pin P_EN_CUT_Pin P_EN_RADIO_Pin */
  GPIO_InitStruct.Pin = BARO_CS_Pin|IMU_CS_Pin|DCDC_EN_Pin|CUT_EN_Pin
 800e308:	f240 33b6 	movw	r3, #950	; 0x3b6
 800e30c:	617b      	str	r3, [r7, #20]
                          |P_EN_LIGHT_Pin|P_EN_CUT_Pin|P_EN_RADIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e30e:	2301      	movs	r3, #1
 800e310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e312:	2300      	movs	r3, #0
 800e314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e316:	2300      	movs	r3, #0
 800e318:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e31a:	f107 0314 	add.w	r3, r7, #20
 800e31e:	4619      	mov	r1, r3
 800e320:	481b      	ldr	r0, [pc, #108]	; (800e390 <MX_GPIO_Init+0x19c>)
 800e322:	f002 fe93 	bl	801104c <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 800e326:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e32a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e32c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800e330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e332:	2300      	movs	r3, #0
 800e334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e336:	f107 0314 	add.w	r3, r7, #20
 800e33a:	4619      	mov	r1, r3
 800e33c:	4814      	ldr	r0, [pc, #80]	; (800e390 <MX_GPIO_Init+0x19c>)
 800e33e:	f002 fe85 	bl	801104c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DET_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = USB_DET_Pin|CHRG_Pin;
 800e342:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800e346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e348:	2300      	movs	r3, #0
 800e34a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e34c:	2300      	movs	r3, #0
 800e34e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e350:	f107 0314 	add.w	r3, r7, #20
 800e354:	4619      	mov	r1, r3
 800e356:	480d      	ldr	r0, [pc, #52]	; (800e38c <MX_GPIO_Init+0x198>)
 800e358:	f002 fe78 	bl	801104c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800e35c:	2200      	movs	r2, #0
 800e35e:	2105      	movs	r1, #5
 800e360:	2008      	movs	r0, #8
 800e362:	f002 fb53 	bl	8010a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800e366:	2008      	movs	r0, #8
 800e368:	f002 fb6c 	bl	8010a44 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800e36c:	2200      	movs	r2, #0
 800e36e:	2105      	movs	r1, #5
 800e370:	2028      	movs	r0, #40	; 0x28
 800e372:	f002 fb4b 	bl	8010a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800e376:	2028      	movs	r0, #40	; 0x28
 800e378:	f002 fb64 	bl	8010a44 <HAL_NVIC_EnableIRQ>

}
 800e37c:	bf00      	nop
 800e37e:	3728      	adds	r7, #40	; 0x28
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	40023800 	.word	0x40023800
 800e388:	40020800 	.word	0x40020800
 800e38c:	40020000 	.word	0x40020000
 800e390:	40020400 	.word	0x40020400

0800e394 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	4603      	mov	r3, r0
 800e39c:	80fb      	strh	r3, [r7, #6]
  wake_up();
 800e39e:	f7ff fc39 	bl	800dc14 <wake_up>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e3a2:	4a06      	ldr	r2, [pc, #24]	; (800e3bc <HAL_GPIO_EXTI_Callback+0x28>)
 800e3a4:	88fb      	ldrh	r3, [r7, #6]
 800e3a6:	6153      	str	r3, [r2, #20]

 lsm6dsr_all_sources_t all_source;
 /* Check if Wake-Up events */
 lsm6dsr_all_sources_get(&dev_ctx, &all_source);
 800e3a8:	f107 0308 	add.w	r3, r7, #8
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	4804      	ldr	r0, [pc, #16]	; (800e3c0 <HAL_GPIO_EXTI_Callback+0x2c>)
 800e3b0:	f000 fdd2 	bl	800ef58 <lsm6dsr_all_sources_get>

 if (all_source.wake_up_src.wu_ia){

 }

}
 800e3b4:	bf00      	nop
 800e3b6:	3710      	adds	r7, #16
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	40013c00 	.word	0x40013c00
 800e3c0:	20000468 	.word	0x20000468

0800e3c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b08c      	sub	sp, #48	; 0x30
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  log_init();
 800e3cc:	f001 fce0 	bl	800fd90 <log_init>
  MX_USB_DEVICE_Init();
 800e3d0:	f00d fbec 	bl	801bbac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  int counter = 0;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Infinite loop */
  for(;;)
  {
	  uint32_t value[2];
	  value[0] = ADC_Get(BATTERY);
 800e3d8:	2000      	movs	r0, #0
 800e3da:	f7ff fb27 	bl	800da2c <ADC_Get>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	627b      	str	r3, [r7, #36]	; 0x24
	  value[1] = ADC_Get(LIGHT);
 800e3e2:	2001      	movs	r0, #1
 800e3e4:	f7ff fb22 	bl	800da2c <ADC_Get>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	62bb      	str	r3, [r7, #40]	; 0x28



	  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0){
 800e3ec:	2104      	movs	r1, #4
 800e3ee:	4823      	ldr	r0, [pc, #140]	; (800e47c <StartDefaultTask+0xb8>)
 800e3f0:	f002 ffb0 	bl	8011354 <HAL_GPIO_ReadPin>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d103      	bne.n	800e402 <StartDefaultTask+0x3e>
		  counter++;
 800e3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e400:	e001      	b.n	800e406 <StartDefaultTask+0x42>
	  } else {
		  counter = 0;
 800e402:	2300      	movs	r3, #0
 800e404:	62fb      	str	r3, [r7, #44]	; 0x2c
	  }

	  if(value[1] > 100){
 800e406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e408:	2b64      	cmp	r3, #100	; 0x64
 800e40a:	d906      	bls.n	800e41a <StartDefaultTask+0x56>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800e40c:	2200      	movs	r2, #0
 800e40e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e412:	481b      	ldr	r0, [pc, #108]	; (800e480 <StartDefaultTask+0xbc>)
 800e414:	f002 ffb6 	bl	8011384 <HAL_GPIO_WritePin>
 800e418:	e005      	b.n	800e426 <StartDefaultTask+0x62>
	  } else {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800e41a:	2201      	movs	r2, #1
 800e41c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e420:	4817      	ldr	r0, [pc, #92]	; (800e480 <StartDefaultTask+0xbc>)
 800e422:	f002 ffaf 	bl	8011384 <HAL_GPIO_WritePin>
	  }
	  if(counter == 30){
 800e426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e428:	2b1e      	cmp	r3, #30
 800e42a:	d101      	bne.n	800e430 <StartDefaultTask+0x6c>
		  go_to_sleep();
 800e42c:	f7ff fbcc 	bl	800dbc8 <go_to_sleep>
	  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
	  int16_t data_raw_acceleration[3];
	  float acceleration_mg[3];
	  int16_t data_raw_angular_rate[3];

	  lsm6dsr_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 800e430:	f107 031c 	add.w	r3, r7, #28
 800e434:	4619      	mov	r1, r3
 800e436:	4813      	ldr	r0, [pc, #76]	; (800e484 <StartDefaultTask+0xc0>)
 800e438:	f000 fdfc 	bl	800f034 <lsm6dsr_acceleration_raw_get>
	  acceleration_mg[0] = lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[0]);
 800e43c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800e440:	4618      	mov	r0, r3
 800e442:	f000 fb07 	bl	800ea54 <lsm6dsr_from_fs16g_to_mg>
 800e446:	eef0 7a40 	vmov.f32	s15, s0
 800e44a:	edc7 7a04 	vstr	s15, [r7, #16]
	  acceleration_mg[1] = lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[1]);
 800e44e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e452:	4618      	mov	r0, r3
 800e454:	f000 fafe 	bl	800ea54 <lsm6dsr_from_fs16g_to_mg>
 800e458:	eef0 7a40 	vmov.f32	s15, s0
 800e45c:	edc7 7a05 	vstr	s15, [r7, #20]
	  acceleration_mg[2] =  lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[2]);
 800e460:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e464:	4618      	mov	r0, r3
 800e466:	f000 faf5 	bl	800ea54 <lsm6dsr_from_fs16g_to_mg>
 800e46a:	eef0 7a40 	vmov.f32	s15, s0
 800e46e:	edc7 7a06 	vstr	s15, [r7, #24]

    osDelay(100);
 800e472:	2064      	movs	r0, #100	; 0x64
 800e474:	f009 fdda 	bl	801802c <osDelay>
  {
 800e478:	e7ae      	b.n	800e3d8 <StartDefaultTask+0x14>
 800e47a:	bf00      	nop
 800e47c:	40020000 	.word	0x40020000
 800e480:	40020800 	.word	0x40020800
 800e484:	20000468 	.word	0x20000468

0800e488 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	4a08      	ldr	r2, [pc, #32]	; (800e4b8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800e496:	4293      	cmp	r3, r2
 800e498:	d102      	bne.n	800e4a0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800e49a:	f001 fd8b 	bl	800ffb4 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM5) {
	  CDC_Transmit_Elapsed();
  }
  /* USER CODE END Callback 1 */
}
 800e49e:	e006      	b.n	800e4ae <HAL_TIM_PeriodElapsedCallback+0x26>
  else if (htim->Instance == TIM5) {
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4a05      	ldr	r2, [pc, #20]	; (800e4bc <HAL_TIM_PeriodElapsedCallback+0x34>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d101      	bne.n	800e4ae <HAL_TIM_PeriodElapsedCallback+0x26>
	  CDC_Transmit_Elapsed();
 800e4aa:	f00d fc9f 	bl	801bdec <CDC_Transmit_Elapsed>
}
 800e4ae:	bf00      	nop
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	40010000 	.word	0x40010000
 800e4bc:	40000c00 	.word	0x40000c00

0800e4c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800e4c4:	b672      	cpsid	i
}
 800e4c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800e4c8:	e7fe      	b.n	800e4c8 <Error_Handler+0x8>
	...

0800e4cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	607b      	str	r3, [r7, #4]
 800e4d6:	4b12      	ldr	r3, [pc, #72]	; (800e520 <HAL_MspInit+0x54>)
 800e4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4da:	4a11      	ldr	r2, [pc, #68]	; (800e520 <HAL_MspInit+0x54>)
 800e4dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e4e0:	6453      	str	r3, [r2, #68]	; 0x44
 800e4e2:	4b0f      	ldr	r3, [pc, #60]	; (800e520 <HAL_MspInit+0x54>)
 800e4e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4ea:	607b      	str	r3, [r7, #4]
 800e4ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	603b      	str	r3, [r7, #0]
 800e4f2:	4b0b      	ldr	r3, [pc, #44]	; (800e520 <HAL_MspInit+0x54>)
 800e4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4f6:	4a0a      	ldr	r2, [pc, #40]	; (800e520 <HAL_MspInit+0x54>)
 800e4f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4fc:	6413      	str	r3, [r2, #64]	; 0x40
 800e4fe:	4b08      	ldr	r3, [pc, #32]	; (800e520 <HAL_MspInit+0x54>)
 800e500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e506:	603b      	str	r3, [r7, #0]
 800e508:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e50a:	2200      	movs	r2, #0
 800e50c:	210f      	movs	r1, #15
 800e50e:	f06f 0001 	mvn.w	r0, #1
 800e512:	f002 fa7b 	bl	8010a0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e516:	bf00      	nop
 800e518:	3708      	adds	r7, #8
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	40023800 	.word	0x40023800

0800e524 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b08a      	sub	sp, #40	; 0x28
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e52c:	f107 0314 	add.w	r3, r7, #20
 800e530:	2200      	movs	r2, #0
 800e532:	601a      	str	r2, [r3, #0]
 800e534:	605a      	str	r2, [r3, #4]
 800e536:	609a      	str	r2, [r3, #8]
 800e538:	60da      	str	r2, [r3, #12]
 800e53a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a17      	ldr	r2, [pc, #92]	; (800e5a0 <HAL_ADC_MspInit+0x7c>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d127      	bne.n	800e596 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e546:	2300      	movs	r3, #0
 800e548:	613b      	str	r3, [r7, #16]
 800e54a:	4b16      	ldr	r3, [pc, #88]	; (800e5a4 <HAL_ADC_MspInit+0x80>)
 800e54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e54e:	4a15      	ldr	r2, [pc, #84]	; (800e5a4 <HAL_ADC_MspInit+0x80>)
 800e550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e554:	6453      	str	r3, [r2, #68]	; 0x44
 800e556:	4b13      	ldr	r3, [pc, #76]	; (800e5a4 <HAL_ADC_MspInit+0x80>)
 800e558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e55a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e55e:	613b      	str	r3, [r7, #16]
 800e560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e562:	2300      	movs	r3, #0
 800e564:	60fb      	str	r3, [r7, #12]
 800e566:	4b0f      	ldr	r3, [pc, #60]	; (800e5a4 <HAL_ADC_MspInit+0x80>)
 800e568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e56a:	4a0e      	ldr	r2, [pc, #56]	; (800e5a4 <HAL_ADC_MspInit+0x80>)
 800e56c:	f043 0301 	orr.w	r3, r3, #1
 800e570:	6313      	str	r3, [r2, #48]	; 0x30
 800e572:	4b0c      	ldr	r3, [pc, #48]	; (800e5a4 <HAL_ADC_MspInit+0x80>)
 800e574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e576:	f003 0301 	and.w	r3, r3, #1
 800e57a:	60fb      	str	r3, [r7, #12]
 800e57c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = V_BAT_Pin|LIGHT_Pin;
 800e57e:	2303      	movs	r3, #3
 800e580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e582:	2303      	movs	r3, #3
 800e584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e586:	2300      	movs	r3, #0
 800e588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e58a:	f107 0314 	add.w	r3, r7, #20
 800e58e:	4619      	mov	r1, r3
 800e590:	4805      	ldr	r0, [pc, #20]	; (800e5a8 <HAL_ADC_MspInit+0x84>)
 800e592:	f002 fd5b 	bl	801104c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e596:	bf00      	nop
 800e598:	3728      	adds	r7, #40	; 0x28
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	40012000 	.word	0x40012000
 800e5a4:	40023800 	.word	0x40023800
 800e5a8:	40020000 	.word	0x40020000

0800e5ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b08c      	sub	sp, #48	; 0x30
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5b4:	f107 031c 	add.w	r3, r7, #28
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	601a      	str	r2, [r3, #0]
 800e5bc:	605a      	str	r2, [r3, #4]
 800e5be:	609a      	str	r2, [r3, #8]
 800e5c0:	60da      	str	r2, [r3, #12]
 800e5c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a32      	ldr	r2, [pc, #200]	; (800e694 <HAL_SPI_MspInit+0xe8>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d12c      	bne.n	800e628 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	61bb      	str	r3, [r7, #24]
 800e5d2:	4b31      	ldr	r3, [pc, #196]	; (800e698 <HAL_SPI_MspInit+0xec>)
 800e5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5d6:	4a30      	ldr	r2, [pc, #192]	; (800e698 <HAL_SPI_MspInit+0xec>)
 800e5d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e5dc:	6453      	str	r3, [r2, #68]	; 0x44
 800e5de:	4b2e      	ldr	r3, [pc, #184]	; (800e698 <HAL_SPI_MspInit+0xec>)
 800e5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e5e6:	61bb      	str	r3, [r7, #24]
 800e5e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	617b      	str	r3, [r7, #20]
 800e5ee:	4b2a      	ldr	r3, [pc, #168]	; (800e698 <HAL_SPI_MspInit+0xec>)
 800e5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5f2:	4a29      	ldr	r2, [pc, #164]	; (800e698 <HAL_SPI_MspInit+0xec>)
 800e5f4:	f043 0301 	orr.w	r3, r3, #1
 800e5f8:	6313      	str	r3, [r2, #48]	; 0x30
 800e5fa:	4b27      	ldr	r3, [pc, #156]	; (800e698 <HAL_SPI_MspInit+0xec>)
 800e5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5fe:	f003 0301 	and.w	r3, r3, #1
 800e602:	617b      	str	r3, [r7, #20]
 800e604:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800e606:	23e0      	movs	r3, #224	; 0xe0
 800e608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e60a:	2302      	movs	r3, #2
 800e60c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e60e:	2300      	movs	r3, #0
 800e610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e612:	2303      	movs	r3, #3
 800e614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e616:	2305      	movs	r3, #5
 800e618:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e61a:	f107 031c 	add.w	r3, r7, #28
 800e61e:	4619      	mov	r1, r3
 800e620:	481e      	ldr	r0, [pc, #120]	; (800e69c <HAL_SPI_MspInit+0xf0>)
 800e622:	f002 fd13 	bl	801104c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800e626:	e031      	b.n	800e68c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4a1c      	ldr	r2, [pc, #112]	; (800e6a0 <HAL_SPI_MspInit+0xf4>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d12c      	bne.n	800e68c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e632:	2300      	movs	r3, #0
 800e634:	613b      	str	r3, [r7, #16]
 800e636:	4b18      	ldr	r3, [pc, #96]	; (800e698 <HAL_SPI_MspInit+0xec>)
 800e638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e63a:	4a17      	ldr	r2, [pc, #92]	; (800e698 <HAL_SPI_MspInit+0xec>)
 800e63c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e640:	6413      	str	r3, [r2, #64]	; 0x40
 800e642:	4b15      	ldr	r3, [pc, #84]	; (800e698 <HAL_SPI_MspInit+0xec>)
 800e644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e64a:	613b      	str	r3, [r7, #16]
 800e64c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e64e:	2300      	movs	r3, #0
 800e650:	60fb      	str	r3, [r7, #12]
 800e652:	4b11      	ldr	r3, [pc, #68]	; (800e698 <HAL_SPI_MspInit+0xec>)
 800e654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e656:	4a10      	ldr	r2, [pc, #64]	; (800e698 <HAL_SPI_MspInit+0xec>)
 800e658:	f043 0302 	orr.w	r3, r3, #2
 800e65c:	6313      	str	r3, [r2, #48]	; 0x30
 800e65e:	4b0e      	ldr	r3, [pc, #56]	; (800e698 <HAL_SPI_MspInit+0xec>)
 800e660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e662:	f003 0302 	and.w	r3, r3, #2
 800e666:	60fb      	str	r3, [r7, #12]
 800e668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800e66a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800e66e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e670:	2302      	movs	r3, #2
 800e672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e674:	2300      	movs	r3, #0
 800e676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e678:	2303      	movs	r3, #3
 800e67a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e67c:	2305      	movs	r3, #5
 800e67e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e680:	f107 031c 	add.w	r3, r7, #28
 800e684:	4619      	mov	r1, r3
 800e686:	4807      	ldr	r0, [pc, #28]	; (800e6a4 <HAL_SPI_MspInit+0xf8>)
 800e688:	f002 fce0 	bl	801104c <HAL_GPIO_Init>
}
 800e68c:	bf00      	nop
 800e68e:	3730      	adds	r7, #48	; 0x30
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}
 800e694:	40013000 	.word	0x40013000
 800e698:	40023800 	.word	0x40023800
 800e69c:	40020000 	.word	0x40020000
 800e6a0:	40003800 	.word	0x40003800
 800e6a4:	40020400 	.word	0x40020400

0800e6a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4a0b      	ldr	r2, [pc, #44]	; (800e6e4 <HAL_TIM_PWM_MspInit+0x3c>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d10d      	bne.n	800e6d6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	60fb      	str	r3, [r7, #12]
 800e6be:	4b0a      	ldr	r3, [pc, #40]	; (800e6e8 <HAL_TIM_PWM_MspInit+0x40>)
 800e6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6c2:	4a09      	ldr	r2, [pc, #36]	; (800e6e8 <HAL_TIM_PWM_MspInit+0x40>)
 800e6c4:	f043 0304 	orr.w	r3, r3, #4
 800e6c8:	6413      	str	r3, [r2, #64]	; 0x40
 800e6ca:	4b07      	ldr	r3, [pc, #28]	; (800e6e8 <HAL_TIM_PWM_MspInit+0x40>)
 800e6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ce:	f003 0304 	and.w	r3, r3, #4
 800e6d2:	60fb      	str	r3, [r7, #12]
 800e6d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800e6d6:	bf00      	nop
 800e6d8:	3714      	adds	r7, #20
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr
 800e6e2:	bf00      	nop
 800e6e4:	40000800 	.word	0x40000800
 800e6e8:	40023800 	.word	0x40023800

0800e6ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b088      	sub	sp, #32
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6f4:	f107 030c 	add.w	r3, r7, #12
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	601a      	str	r2, [r3, #0]
 800e6fc:	605a      	str	r2, [r3, #4]
 800e6fe:	609a      	str	r2, [r3, #8]
 800e700:	60da      	str	r2, [r3, #12]
 800e702:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4a12      	ldr	r2, [pc, #72]	; (800e754 <HAL_TIM_MspPostInit+0x68>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d11d      	bne.n	800e74a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e70e:	2300      	movs	r3, #0
 800e710:	60bb      	str	r3, [r7, #8]
 800e712:	4b11      	ldr	r3, [pc, #68]	; (800e758 <HAL_TIM_MspPostInit+0x6c>)
 800e714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e716:	4a10      	ldr	r2, [pc, #64]	; (800e758 <HAL_TIM_MspPostInit+0x6c>)
 800e718:	f043 0302 	orr.w	r3, r3, #2
 800e71c:	6313      	str	r3, [r2, #48]	; 0x30
 800e71e:	4b0e      	ldr	r3, [pc, #56]	; (800e758 <HAL_TIM_MspPostInit+0x6c>)
 800e720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e722:	f003 0302 	and.w	r3, r3, #2
 800e726:	60bb      	str	r3, [r7, #8]
 800e728:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800e72a:	2340      	movs	r3, #64	; 0x40
 800e72c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e72e:	2302      	movs	r3, #2
 800e730:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e732:	2300      	movs	r3, #0
 800e734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e736:	2300      	movs	r3, #0
 800e738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800e73a:	2302      	movs	r3, #2
 800e73c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800e73e:	f107 030c 	add.w	r3, r7, #12
 800e742:	4619      	mov	r1, r3
 800e744:	4805      	ldr	r0, [pc, #20]	; (800e75c <HAL_TIM_MspPostInit+0x70>)
 800e746:	f002 fc81 	bl	801104c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800e74a:	bf00      	nop
 800e74c:	3720      	adds	r7, #32
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	40000800 	.word	0x40000800
 800e758:	40023800 	.word	0x40023800
 800e75c:	40020400 	.word	0x40020400

0800e760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b08a      	sub	sp, #40	; 0x28
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e768:	f107 0314 	add.w	r3, r7, #20
 800e76c:	2200      	movs	r2, #0
 800e76e:	601a      	str	r2, [r3, #0]
 800e770:	605a      	str	r2, [r3, #4]
 800e772:	609a      	str	r2, [r3, #8]
 800e774:	60da      	str	r2, [r3, #12]
 800e776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4a19      	ldr	r2, [pc, #100]	; (800e7e4 <HAL_UART_MspInit+0x84>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d12c      	bne.n	800e7dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e782:	2300      	movs	r3, #0
 800e784:	613b      	str	r3, [r7, #16]
 800e786:	4b18      	ldr	r3, [pc, #96]	; (800e7e8 <HAL_UART_MspInit+0x88>)
 800e788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e78a:	4a17      	ldr	r2, [pc, #92]	; (800e7e8 <HAL_UART_MspInit+0x88>)
 800e78c:	f043 0310 	orr.w	r3, r3, #16
 800e790:	6453      	str	r3, [r2, #68]	; 0x44
 800e792:	4b15      	ldr	r3, [pc, #84]	; (800e7e8 <HAL_UART_MspInit+0x88>)
 800e794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e796:	f003 0310 	and.w	r3, r3, #16
 800e79a:	613b      	str	r3, [r7, #16]
 800e79c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e79e:	2300      	movs	r3, #0
 800e7a0:	60fb      	str	r3, [r7, #12]
 800e7a2:	4b11      	ldr	r3, [pc, #68]	; (800e7e8 <HAL_UART_MspInit+0x88>)
 800e7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a6:	4a10      	ldr	r2, [pc, #64]	; (800e7e8 <HAL_UART_MspInit+0x88>)
 800e7a8:	f043 0301 	orr.w	r3, r3, #1
 800e7ac:	6313      	str	r3, [r2, #48]	; 0x30
 800e7ae:	4b0e      	ldr	r3, [pc, #56]	; (800e7e8 <HAL_UART_MspInit+0x88>)
 800e7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7b2:	f003 0301 	and.w	r3, r3, #1
 800e7b6:	60fb      	str	r3, [r7, #12]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e7ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e7be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7c0:	2302      	movs	r3, #2
 800e7c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7c8:	2303      	movs	r3, #3
 800e7ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e7cc:	2307      	movs	r3, #7
 800e7ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7d0:	f107 0314 	add.w	r3, r7, #20
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	4805      	ldr	r0, [pc, #20]	; (800e7ec <HAL_UART_MspInit+0x8c>)
 800e7d8:	f002 fc38 	bl	801104c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800e7dc:	bf00      	nop
 800e7de:	3728      	adds	r7, #40	; 0x28
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	40011000 	.word	0x40011000
 800e7e8:	40023800 	.word	0x40023800
 800e7ec:	40020000 	.word	0x40020000

0800e7f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b08c      	sub	sp, #48	; 0x30
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800e800:	2200      	movs	r2, #0
 800e802:	6879      	ldr	r1, [r7, #4]
 800e804:	2019      	movs	r0, #25
 800e806:	f002 f901 	bl	8010a0c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e80a:	2019      	movs	r0, #25
 800e80c:	f002 f91a 	bl	8010a44 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800e810:	2300      	movs	r3, #0
 800e812:	60fb      	str	r3, [r7, #12]
 800e814:	4b1e      	ldr	r3, [pc, #120]	; (800e890 <HAL_InitTick+0xa0>)
 800e816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e818:	4a1d      	ldr	r2, [pc, #116]	; (800e890 <HAL_InitTick+0xa0>)
 800e81a:	f043 0301 	orr.w	r3, r3, #1
 800e81e:	6453      	str	r3, [r2, #68]	; 0x44
 800e820:	4b1b      	ldr	r3, [pc, #108]	; (800e890 <HAL_InitTick+0xa0>)
 800e822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e824:	f003 0301 	and.w	r3, r3, #1
 800e828:	60fb      	str	r3, [r7, #12]
 800e82a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e82c:	f107 0210 	add.w	r2, r7, #16
 800e830:	f107 0314 	add.w	r3, r7, #20
 800e834:	4611      	mov	r1, r2
 800e836:	4618      	mov	r0, r3
 800e838:	f004 fbfa 	bl	8013030 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800e83c:	f004 fbe4 	bl	8013008 <HAL_RCC_GetPCLK2Freq>
 800e840:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800e842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e844:	4a13      	ldr	r2, [pc, #76]	; (800e894 <HAL_InitTick+0xa4>)
 800e846:	fba2 2303 	umull	r2, r3, r2, r3
 800e84a:	0c9b      	lsrs	r3, r3, #18
 800e84c:	3b01      	subs	r3, #1
 800e84e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800e850:	4b11      	ldr	r3, [pc, #68]	; (800e898 <HAL_InitTick+0xa8>)
 800e852:	4a12      	ldr	r2, [pc, #72]	; (800e89c <HAL_InitTick+0xac>)
 800e854:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800e856:	4b10      	ldr	r3, [pc, #64]	; (800e898 <HAL_InitTick+0xa8>)
 800e858:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e85c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800e85e:	4a0e      	ldr	r2, [pc, #56]	; (800e898 <HAL_InitTick+0xa8>)
 800e860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e862:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800e864:	4b0c      	ldr	r3, [pc, #48]	; (800e898 <HAL_InitTick+0xa8>)
 800e866:	2200      	movs	r2, #0
 800e868:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e86a:	4b0b      	ldr	r3, [pc, #44]	; (800e898 <HAL_InitTick+0xa8>)
 800e86c:	2200      	movs	r2, #0
 800e86e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800e870:	4809      	ldr	r0, [pc, #36]	; (800e898 <HAL_InitTick+0xa8>)
 800e872:	f005 f9b7 	bl	8013be4 <HAL_TIM_Base_Init>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d104      	bne.n	800e886 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800e87c:	4806      	ldr	r0, [pc, #24]	; (800e898 <HAL_InitTick+0xa8>)
 800e87e:	f005 fa0b 	bl	8013c98 <HAL_TIM_Base_Start_IT>
 800e882:	4603      	mov	r3, r0
 800e884:	e000      	b.n	800e888 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800e886:	2301      	movs	r3, #1
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3730      	adds	r7, #48	; 0x30
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	40023800 	.word	0x40023800
 800e894:	431bde83 	.word	0x431bde83
 800e898:	20007918 	.word	0x20007918
 800e89c:	40010000 	.word	0x40010000

0800e8a0 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 800e8a4:	4b06      	ldr	r3, [pc, #24]	; (800e8c0 <HAL_SuspendTick+0x20>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	68da      	ldr	r2, [r3, #12]
 800e8aa:	4b05      	ldr	r3, [pc, #20]	; (800e8c0 <HAL_SuspendTick+0x20>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f022 0201 	bic.w	r2, r2, #1
 800e8b2:	60da      	str	r2, [r3, #12]
}
 800e8b4:	bf00      	nop
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	20007918 	.word	0x20007918

0800e8c4 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	af00      	add	r7, sp, #0
  /* Enable TIM1 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 800e8c8:	4b06      	ldr	r3, [pc, #24]	; (800e8e4 <HAL_ResumeTick+0x20>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	68da      	ldr	r2, [r3, #12]
 800e8ce:	4b05      	ldr	r3, [pc, #20]	; (800e8e4 <HAL_ResumeTick+0x20>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f042 0201 	orr.w	r2, r2, #1
 800e8d6:	60da      	str	r2, [r3, #12]
}
 800e8d8:	bf00      	nop
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop
 800e8e4:	20007918 	.word	0x20007918

0800e8e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e8ec:	e7fe      	b.n	800e8ec <NMI_Handler+0x4>

0800e8ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e8ee:	b480      	push	{r7}
 800e8f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e8f2:	e7fe      	b.n	800e8f2 <HardFault_Handler+0x4>

0800e8f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e8f8:	e7fe      	b.n	800e8f8 <MemManage_Handler+0x4>

0800e8fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e8fa:	b480      	push	{r7}
 800e8fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e8fe:	e7fe      	b.n	800e8fe <BusFault_Handler+0x4>

0800e900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e900:	b480      	push	{r7}
 800e902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e904:	e7fe      	b.n	800e904 <UsageFault_Handler+0x4>

0800e906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e906:	b480      	push	{r7}
 800e908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e90a:	bf00      	nop
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr

0800e914 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800e918:	2004      	movs	r0, #4
 800e91a:	f002 fd4d 	bl	80113b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800e91e:	bf00      	nop
 800e920:	bd80      	pop	{r7, pc}
	...

0800e924 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e928:	4802      	ldr	r0, [pc, #8]	; (800e934 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800e92a:	f005 fb7b 	bl	8014024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800e92e:	bf00      	nop
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	20007918 	.word	0x20007918

0800e938 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT2_Pin);
 800e93c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800e940:	f002 fd3a 	bl	80113b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 800e944:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e948:	f002 fd36 	bl	80113b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e94c:	bf00      	nop
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800e954:	4802      	ldr	r0, [pc, #8]	; (800e960 <OTG_FS_IRQHandler+0x10>)
 800e956:	f002 fe97 	bl	8011688 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800e95a:	bf00      	nop
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	20008164 	.word	0x20008164

0800e964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b086      	sub	sp, #24
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e96c:	4a14      	ldr	r2, [pc, #80]	; (800e9c0 <_sbrk+0x5c>)
 800e96e:	4b15      	ldr	r3, [pc, #84]	; (800e9c4 <_sbrk+0x60>)
 800e970:	1ad3      	subs	r3, r2, r3
 800e972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e978:	4b13      	ldr	r3, [pc, #76]	; (800e9c8 <_sbrk+0x64>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d102      	bne.n	800e986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e980:	4b11      	ldr	r3, [pc, #68]	; (800e9c8 <_sbrk+0x64>)
 800e982:	4a12      	ldr	r2, [pc, #72]	; (800e9cc <_sbrk+0x68>)
 800e984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e986:	4b10      	ldr	r3, [pc, #64]	; (800e9c8 <_sbrk+0x64>)
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4413      	add	r3, r2
 800e98e:	693a      	ldr	r2, [r7, #16]
 800e990:	429a      	cmp	r2, r3
 800e992:	d207      	bcs.n	800e9a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e994:	f00d febc 	bl	801c710 <__errno>
 800e998:	4603      	mov	r3, r0
 800e99a:	220c      	movs	r2, #12
 800e99c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e99e:	f04f 33ff 	mov.w	r3, #4294967295
 800e9a2:	e009      	b.n	800e9b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e9a4:	4b08      	ldr	r3, [pc, #32]	; (800e9c8 <_sbrk+0x64>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e9aa:	4b07      	ldr	r3, [pc, #28]	; (800e9c8 <_sbrk+0x64>)
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	4a05      	ldr	r2, [pc, #20]	; (800e9c8 <_sbrk+0x64>)
 800e9b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3718      	adds	r7, #24
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	20020000 	.word	0x20020000
 800e9c4:	00000400 	.word	0x00000400
 800e9c8:	20000474 	.word	0x20000474
 800e9cc:	20008580 	.word	0x20008580

0800e9d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e9d4:	4b06      	ldr	r3, [pc, #24]	; (800e9f0 <SystemInit+0x20>)
 800e9d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9da:	4a05      	ldr	r2, [pc, #20]	; (800e9f0 <SystemInit+0x20>)
 800e9dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e9e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e9e4:	bf00      	nop
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr
 800e9ee:	bf00      	nop
 800e9f0:	e000ed00 	.word	0xe000ed00

0800e9f4 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800e9f4:	b590      	push	{r4, r7, lr}
 800e9f6:	b087      	sub	sp, #28
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	607a      	str	r2, [r7, #4]
 800e9fe:	461a      	mov	r2, r3
 800ea00:	460b      	mov	r3, r1
 800ea02:	72fb      	strb	r3, [r7, #11]
 800ea04:	4613      	mov	r3, r2
 800ea06:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	685c      	ldr	r4, [r3, #4]
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	6898      	ldr	r0, [r3, #8]
 800ea10:	893b      	ldrh	r3, [r7, #8]
 800ea12:	7af9      	ldrb	r1, [r7, #11]
 800ea14:	687a      	ldr	r2, [r7, #4]
 800ea16:	47a0      	blx	r4
 800ea18:	6178      	str	r0, [r7, #20]

  return ret;
 800ea1a:	697b      	ldr	r3, [r7, #20]
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	371c      	adds	r7, #28
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd90      	pop	{r4, r7, pc}

0800ea24 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800ea24:	b590      	push	{r4, r7, lr}
 800ea26:	b087      	sub	sp, #28
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	60f8      	str	r0, [r7, #12]
 800ea2c:	607a      	str	r2, [r7, #4]
 800ea2e:	461a      	mov	r2, r3
 800ea30:	460b      	mov	r3, r1
 800ea32:	72fb      	strb	r3, [r7, #11]
 800ea34:	4613      	mov	r3, r2
 800ea36:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681c      	ldr	r4, [r3, #0]
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	6898      	ldr	r0, [r3, #8]
 800ea40:	893b      	ldrh	r3, [r7, #8]
 800ea42:	7af9      	ldrb	r1, [r7, #11]
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	47a0      	blx	r4
 800ea48:	6178      	str	r0, [r7, #20]

  return ret;
 800ea4a:	697b      	ldr	r3, [r7, #20]
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	371c      	adds	r7, #28
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd90      	pop	{r4, r7, pc}

0800ea54 <lsm6dsr_from_fs16g_to_mg>:
{
  return ((float_t)lsb * 0.244f);
}

float_t lsm6dsr_from_fs16g_to_mg(int16_t lsb)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b083      	sub	sp, #12
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.488f);
 800ea5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea62:	ee07 3a90 	vmov	s15, r3
 800ea66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea6a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800ea80 <lsm6dsr_from_fs16g_to_mg+0x2c>
 800ea6e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800ea72:	eeb0 0a67 	vmov.f32	s0, s15
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr
 800ea80:	3ef9db23 	.word	0x3ef9db23

0800ea84 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800ea90:	f107 0208 	add.w	r2, r7, #8
 800ea94:	2301      	movs	r3, #1
 800ea96:	2110      	movs	r1, #16
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f7ff ffab 	bl	800e9f4 <lsm6dsr_read_reg>
 800ea9e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d10f      	bne.n	800eac6 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800eaa6:	78fb      	ldrb	r3, [r7, #3]
 800eaa8:	f003 0303 	and.w	r3, r3, #3
 800eaac:	b2da      	uxtb	r2, r3
 800eaae:	7a3b      	ldrb	r3, [r7, #8]
 800eab0:	f362 0383 	bfi	r3, r2, #2, #2
 800eab4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800eab6:	f107 0208 	add.w	r2, r7, #8
 800eaba:	2301      	movs	r3, #1
 800eabc:	2110      	movs	r1, #16
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f7ff ffb0 	bl	800ea24 <lsm6dsr_write_reg>
 800eac4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800eac6:	68fb      	ldr	r3, [r7, #12]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3710      	adds	r7, #16
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	460b      	mov	r3, r1
 800eada:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 800eadc:	78fb      	ldrb	r3, [r7, #3]
 800eade:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800eae0:	f107 030c 	add.w	r3, r7, #12
 800eae4:	4619      	mov	r1, r3
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 fd91 	bl	800f60e <lsm6dsr_fsm_enable_get>
 800eaec:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	f040 80c4 	bne.w	800ec7e <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800eaf6:	7b3b      	ldrb	r3, [r7, #12]
 800eaf8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800eafc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800eafe:	7b3b      	ldrb	r3, [r7, #12]
 800eb00:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800eb04:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800eb06:	4313      	orrs	r3, r2
 800eb08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800eb0a:	7b3b      	ldrb	r3, [r7, #12]
 800eb0c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800eb10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800eb12:	4313      	orrs	r3, r2
 800eb14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800eb16:	7b3b      	ldrb	r3, [r7, #12]
 800eb18:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800eb1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800eb1e:	4313      	orrs	r3, r2
 800eb20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800eb22:	7b3b      	ldrb	r3, [r7, #12]
 800eb24:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800eb28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800eb2e:	7b3b      	ldrb	r3, [r7, #12]
 800eb30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eb34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800eb36:	4313      	orrs	r3, r2
 800eb38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800eb3a:	7b3b      	ldrb	r3, [r7, #12]
 800eb3c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800eb40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800eb42:	4313      	orrs	r3, r2
 800eb44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800eb46:	7b3b      	ldrb	r3, [r7, #12]
 800eb48:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800eb4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800eb52:	7b7b      	ldrb	r3, [r7, #13]
 800eb54:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800eb58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800eb5e:	7b7b      	ldrb	r3, [r7, #13]
 800eb60:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800eb64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800eb66:	4313      	orrs	r3, r2
 800eb68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800eb6a:	7b7b      	ldrb	r3, [r7, #13]
 800eb6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800eb70:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800eb72:	4313      	orrs	r3, r2
 800eb74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800eb76:	7b7b      	ldrb	r3, [r7, #13]
 800eb78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800eb7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800eb7e:	4313      	orrs	r3, r2
 800eb80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800eb82:	7b7b      	ldrb	r3, [r7, #13]
 800eb84:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800eb88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800eb8a:	4313      	orrs	r3, r2
 800eb8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800eb8e:	7b7b      	ldrb	r3, [r7, #13]
 800eb90:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eb94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800eb96:	4313      	orrs	r3, r2
 800eb98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800eb9a:	7b7b      	ldrb	r3, [r7, #13]
 800eb9c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800eba0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800eba2:	4313      	orrs	r3, r2
 800eba4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800eba6:	7b7b      	ldrb	r3, [r7, #13]
 800eba8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ebac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d163      	bne.n	800ec7e <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800ebb6:	f107 030b 	add.w	r3, r7, #11
 800ebba:	4619      	mov	r1, r3
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f000 fd53 	bl	800f668 <lsm6dsr_fsm_data_rate_get>
 800ebc2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d159      	bne.n	800ec7e <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800ebca:	7afb      	ldrb	r3, [r7, #11]
 800ebcc:	2b03      	cmp	r3, #3
 800ebce:	d853      	bhi.n	800ec78 <lsm6dsr_xl_data_rate_set+0x1a8>
 800ebd0:	a201      	add	r2, pc, #4	; (adr r2, 800ebd8 <lsm6dsr_xl_data_rate_set+0x108>)
 800ebd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd6:	bf00      	nop
 800ebd8:	0800ebe9 	.word	0x0800ebe9
 800ebdc:	0800ebfb 	.word	0x0800ebfb
 800ebe0:	0800ec19 	.word	0x0800ec19
 800ebe4:	0800ec43 	.word	0x0800ec43
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 800ebe8:	78fb      	ldrb	r3, [r7, #3]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d102      	bne.n	800ebf4 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800ebf2:	e045      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800ebf4:	78fb      	ldrb	r3, [r7, #3]
 800ebf6:	75fb      	strb	r3, [r7, #23]
            break;
 800ebf8:	e042      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800ebfa:	78fb      	ldrb	r3, [r7, #3]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d102      	bne.n	800ec06 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800ec00:	2302      	movs	r3, #2
 800ec02:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800ec04:	e03c      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800ec06:	78fb      	ldrb	r3, [r7, #3]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d102      	bne.n	800ec12 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800ec0c:	2302      	movs	r3, #2
 800ec0e:	75fb      	strb	r3, [r7, #23]
            break;
 800ec10:	e036      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800ec12:	78fb      	ldrb	r3, [r7, #3]
 800ec14:	75fb      	strb	r3, [r7, #23]
            break;
 800ec16:	e033      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800ec18:	78fb      	ldrb	r3, [r7, #3]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d102      	bne.n	800ec24 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800ec1e:	2303      	movs	r3, #3
 800ec20:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800ec22:	e02d      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800ec24:	78fb      	ldrb	r3, [r7, #3]
 800ec26:	2b01      	cmp	r3, #1
 800ec28:	d102      	bne.n	800ec30 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800ec2a:	2303      	movs	r3, #3
 800ec2c:	75fb      	strb	r3, [r7, #23]
            break;
 800ec2e:	e027      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800ec30:	78fb      	ldrb	r3, [r7, #3]
 800ec32:	2b02      	cmp	r3, #2
 800ec34:	d102      	bne.n	800ec3c <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800ec36:	2303      	movs	r3, #3
 800ec38:	75fb      	strb	r3, [r7, #23]
            break;
 800ec3a:	e021      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800ec3c:	78fb      	ldrb	r3, [r7, #3]
 800ec3e:	75fb      	strb	r3, [r7, #23]
            break;
 800ec40:	e01e      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800ec42:	78fb      	ldrb	r3, [r7, #3]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d102      	bne.n	800ec4e <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800ec48:	2304      	movs	r3, #4
 800ec4a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800ec4c:	e018      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800ec4e:	78fb      	ldrb	r3, [r7, #3]
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d102      	bne.n	800ec5a <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800ec54:	2304      	movs	r3, #4
 800ec56:	75fb      	strb	r3, [r7, #23]
            break;
 800ec58:	e012      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800ec5a:	78fb      	ldrb	r3, [r7, #3]
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d102      	bne.n	800ec66 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800ec60:	2304      	movs	r3, #4
 800ec62:	75fb      	strb	r3, [r7, #23]
            break;
 800ec64:	e00c      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 800ec66:	78fb      	ldrb	r3, [r7, #3]
 800ec68:	2b03      	cmp	r3, #3
 800ec6a:	d102      	bne.n	800ec72 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800ec6c:	2304      	movs	r3, #4
 800ec6e:	75fb      	strb	r3, [r7, #23]
            break;
 800ec70:	e006      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800ec72:	78fb      	ldrb	r3, [r7, #3]
 800ec74:	75fb      	strb	r3, [r7, #23]
            break;
 800ec76:	e003      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 800ec78:	78fb      	ldrb	r3, [r7, #3]
 800ec7a:	75fb      	strb	r3, [r7, #23]
            break;
 800ec7c:	e000      	b.n	800ec80 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800ec7e:	bf00      	nop
    }
  }

  if (ret == 0)
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d107      	bne.n	800ec96 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800ec86:	f107 0208 	add.w	r2, r7, #8
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	2110      	movs	r1, #16
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f7ff feb0 	bl	800e9f4 <lsm6dsr_read_reg>
 800ec94:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d10f      	bne.n	800ecbc <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800ec9c:	7dfb      	ldrb	r3, [r7, #23]
 800ec9e:	f003 030f 	and.w	r3, r3, #15
 800eca2:	b2da      	uxtb	r2, r3
 800eca4:	7a3b      	ldrb	r3, [r7, #8]
 800eca6:	f362 1307 	bfi	r3, r2, #4, #4
 800ecaa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800ecac:	f107 0208 	add.w	r2, r7, #8
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	2110      	movs	r1, #16
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f7ff feb5 	bl	800ea24 <lsm6dsr_write_reg>
 800ecba:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800ecbc:	693b      	ldr	r3, [r7, #16]
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3718      	adds	r7, #24
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop

0800ecc8 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ecd4:	f107 0208 	add.w	r2, r7, #8
 800ecd8:	2301      	movs	r3, #1
 800ecda:	2111      	movs	r1, #17
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7ff fe89 	bl	800e9f4 <lsm6dsr_read_reg>
 800ece2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d10f      	bne.n	800ed0a <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800ecea:	78fb      	ldrb	r3, [r7, #3]
 800ecec:	f003 030f 	and.w	r3, r3, #15
 800ecf0:	b2da      	uxtb	r2, r3
 800ecf2:	7a3b      	ldrb	r3, [r7, #8]
 800ecf4:	f362 0303 	bfi	r3, r2, #0, #4
 800ecf8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ecfa:	f107 0208 	add.w	r2, r7, #8
 800ecfe:	2301      	movs	r3, #1
 800ed00:	2111      	movs	r1, #17
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f7ff fe8e 	bl	800ea24 <lsm6dsr_write_reg>
 800ed08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3710      	adds	r7, #16
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 800ed20:	78fb      	ldrb	r3, [r7, #3]
 800ed22:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800ed24:	f107 030c 	add.w	r3, r7, #12
 800ed28:	4619      	mov	r1, r3
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 fc6f 	bl	800f60e <lsm6dsr_fsm_enable_get>
 800ed30:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f040 80c4 	bne.w	800eec2 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800ed3a:	7b3b      	ldrb	r3, [r7, #12]
 800ed3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ed40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800ed42:	7b3b      	ldrb	r3, [r7, #12]
 800ed44:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ed48:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800ed4e:	7b3b      	ldrb	r3, [r7, #12]
 800ed50:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ed54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800ed56:	4313      	orrs	r3, r2
 800ed58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800ed5a:	7b3b      	ldrb	r3, [r7, #12]
 800ed5c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ed60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800ed62:	4313      	orrs	r3, r2
 800ed64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800ed66:	7b3b      	ldrb	r3, [r7, #12]
 800ed68:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ed6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800ed6e:	4313      	orrs	r3, r2
 800ed70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800ed72:	7b3b      	ldrb	r3, [r7, #12]
 800ed74:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ed78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800ed7e:	7b3b      	ldrb	r3, [r7, #12]
 800ed80:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ed84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800ed86:	4313      	orrs	r3, r2
 800ed88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800ed8a:	7b3b      	ldrb	r3, [r7, #12]
 800ed8c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ed90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800ed92:	4313      	orrs	r3, r2
 800ed94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800ed96:	7b7b      	ldrb	r3, [r7, #13]
 800ed98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ed9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800eda2:	7b7b      	ldrb	r3, [r7, #13]
 800eda4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800eda8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800edaa:	4313      	orrs	r3, r2
 800edac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800edae:	7b7b      	ldrb	r3, [r7, #13]
 800edb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800edb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800edb6:	4313      	orrs	r3, r2
 800edb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800edba:	7b7b      	ldrb	r3, [r7, #13]
 800edbc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800edc0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800edc2:	4313      	orrs	r3, r2
 800edc4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800edc6:	7b7b      	ldrb	r3, [r7, #13]
 800edc8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800edcc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800edce:	4313      	orrs	r3, r2
 800edd0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800edd2:	7b7b      	ldrb	r3, [r7, #13]
 800edd4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800edd8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800edda:	4313      	orrs	r3, r2
 800eddc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800edde:	7b7b      	ldrb	r3, [r7, #13]
 800ede0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ede4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800ede6:	4313      	orrs	r3, r2
 800ede8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800edea:	7b7b      	ldrb	r3, [r7, #13]
 800edec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800edf0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800edf2:	4313      	orrs	r3, r2
 800edf4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800edf6:	2b01      	cmp	r3, #1
 800edf8:	d163      	bne.n	800eec2 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800edfa:	f107 030b 	add.w	r3, r7, #11
 800edfe:	4619      	mov	r1, r3
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f000 fc31 	bl	800f668 <lsm6dsr_fsm_data_rate_get>
 800ee06:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d159      	bne.n	800eec2 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800ee0e:	7afb      	ldrb	r3, [r7, #11]
 800ee10:	2b03      	cmp	r3, #3
 800ee12:	d853      	bhi.n	800eebc <lsm6dsr_gy_data_rate_set+0x1a8>
 800ee14:	a201      	add	r2, pc, #4	; (adr r2, 800ee1c <lsm6dsr_gy_data_rate_set+0x108>)
 800ee16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee1a:	bf00      	nop
 800ee1c:	0800ee2d 	.word	0x0800ee2d
 800ee20:	0800ee3f 	.word	0x0800ee3f
 800ee24:	0800ee5d 	.word	0x0800ee5d
 800ee28:	0800ee87 	.word	0x0800ee87
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 800ee2c:	78fb      	ldrb	r3, [r7, #3]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d102      	bne.n	800ee38 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800ee32:	2301      	movs	r3, #1
 800ee34:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800ee36:	e045      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800ee38:	78fb      	ldrb	r3, [r7, #3]
 800ee3a:	75fb      	strb	r3, [r7, #23]
            break;
 800ee3c:	e042      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800ee3e:	78fb      	ldrb	r3, [r7, #3]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d102      	bne.n	800ee4a <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800ee44:	2302      	movs	r3, #2
 800ee46:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800ee48:	e03c      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800ee4a:	78fb      	ldrb	r3, [r7, #3]
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	d102      	bne.n	800ee56 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800ee50:	2302      	movs	r3, #2
 800ee52:	75fb      	strb	r3, [r7, #23]
            break;
 800ee54:	e036      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800ee56:	78fb      	ldrb	r3, [r7, #3]
 800ee58:	75fb      	strb	r3, [r7, #23]
            break;
 800ee5a:	e033      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800ee5c:	78fb      	ldrb	r3, [r7, #3]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d102      	bne.n	800ee68 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800ee62:	2303      	movs	r3, #3
 800ee64:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800ee66:	e02d      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800ee68:	78fb      	ldrb	r3, [r7, #3]
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d102      	bne.n	800ee74 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800ee6e:	2303      	movs	r3, #3
 800ee70:	75fb      	strb	r3, [r7, #23]
            break;
 800ee72:	e027      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800ee74:	78fb      	ldrb	r3, [r7, #3]
 800ee76:	2b02      	cmp	r3, #2
 800ee78:	d102      	bne.n	800ee80 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800ee7a:	2303      	movs	r3, #3
 800ee7c:	75fb      	strb	r3, [r7, #23]
            break;
 800ee7e:	e021      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800ee80:	78fb      	ldrb	r3, [r7, #3]
 800ee82:	75fb      	strb	r3, [r7, #23]
            break;
 800ee84:	e01e      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800ee86:	78fb      	ldrb	r3, [r7, #3]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d102      	bne.n	800ee92 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800ee8c:	2304      	movs	r3, #4
 800ee8e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800ee90:	e018      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800ee92:	78fb      	ldrb	r3, [r7, #3]
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	d102      	bne.n	800ee9e <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800ee98:	2304      	movs	r3, #4
 800ee9a:	75fb      	strb	r3, [r7, #23]
            break;
 800ee9c:	e012      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800ee9e:	78fb      	ldrb	r3, [r7, #3]
 800eea0:	2b02      	cmp	r3, #2
 800eea2:	d102      	bne.n	800eeaa <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800eea4:	2304      	movs	r3, #4
 800eea6:	75fb      	strb	r3, [r7, #23]
            break;
 800eea8:	e00c      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 800eeaa:	78fb      	ldrb	r3, [r7, #3]
 800eeac:	2b03      	cmp	r3, #3
 800eeae:	d102      	bne.n	800eeb6 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800eeb0:	2304      	movs	r3, #4
 800eeb2:	75fb      	strb	r3, [r7, #23]
            break;
 800eeb4:	e006      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800eeb6:	78fb      	ldrb	r3, [r7, #3]
 800eeb8:	75fb      	strb	r3, [r7, #23]
            break;
 800eeba:	e003      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 800eebc:	78fb      	ldrb	r3, [r7, #3]
 800eebe:	75fb      	strb	r3, [r7, #23]
            break;
 800eec0:	e000      	b.n	800eec4 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 800eec2:	bf00      	nop
    }
  }

  if (ret == 0)
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d107      	bne.n	800eeda <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800eeca:	f107 0208 	add.w	r2, r7, #8
 800eece:	2301      	movs	r3, #1
 800eed0:	2111      	movs	r1, #17
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7ff fd8e 	bl	800e9f4 <lsm6dsr_read_reg>
 800eed8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10f      	bne.n	800ef00 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 800eee0:	7dfb      	ldrb	r3, [r7, #23]
 800eee2:	f003 030f 	and.w	r3, r3, #15
 800eee6:	b2da      	uxtb	r2, r3
 800eee8:	7a3b      	ldrb	r3, [r7, #8]
 800eeea:	f362 1307 	bfi	r3, r2, #4, #4
 800eeee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800eef0:	f107 0208 	add.w	r2, r7, #8
 800eef4:	2301      	movs	r3, #1
 800eef6:	2111      	movs	r1, #17
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f7ff fd93 	bl	800ea24 <lsm6dsr_write_reg>
 800eefe:	6138      	str	r0, [r7, #16]
  }

  return ret;
 800ef00:	693b      	ldr	r3, [r7, #16]
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3718      	adds	r7, #24
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
 800ef0a:	bf00      	nop

0800ef0c <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	460b      	mov	r3, r1
 800ef16:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800ef18:	f107 0208 	add.w	r2, r7, #8
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	2112      	movs	r1, #18
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f7ff fd67 	bl	800e9f4 <lsm6dsr_read_reg>
 800ef26:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d10f      	bne.n	800ef4e <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800ef2e:	78fb      	ldrb	r3, [r7, #3]
 800ef30:	f003 0301 	and.w	r3, r3, #1
 800ef34:	b2da      	uxtb	r2, r3
 800ef36:	7a3b      	ldrb	r3, [r7, #8]
 800ef38:	f362 1386 	bfi	r3, r2, #6, #1
 800ef3c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800ef3e:	f107 0208 	add.w	r2, r7, #8
 800ef42:	2301      	movs	r3, #1
 800ef44:	2112      	movs	r1, #18
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f7ff fd6c 	bl	800ea24 <lsm6dsr_write_reg>
 800ef4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3710      	adds	r7, #16
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <lsm6dsr_all_sources_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_all_sources_get(stmdev_ctx_t *ctx,
                                lsm6dsr_all_sources_t *val)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_ALL_INT_SRC,
                         (uint8_t *)&val->all_int_src, 1);
 800ef62:	683a      	ldr	r2, [r7, #0]
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_ALL_INT_SRC,
 800ef64:	2301      	movs	r3, #1
 800ef66:	211a      	movs	r1, #26
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f7ff fd43 	bl	800e9f4 <lsm6dsr_read_reg>
 800ef6e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d107      	bne.n	800ef86 <lsm6dsr_all_sources_get+0x2e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_WAKE_UP_SRC,
                           (uint8_t *)&val->wake_up_src, 1);
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_WAKE_UP_SRC,
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	211b      	movs	r1, #27
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f7ff fd38 	bl	800e9f4 <lsm6dsr_read_reg>
 800ef84:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d107      	bne.n	800ef9c <lsm6dsr_all_sources_get+0x44>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_SRC,
                           (uint8_t *)&val->tap_src, 1);
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_SRC,
 800ef90:	2301      	movs	r3, #1
 800ef92:	211c      	movs	r1, #28
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f7ff fd2d 	bl	800e9f4 <lsm6dsr_read_reg>
 800ef9a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d107      	bne.n	800efb2 <lsm6dsr_all_sources_get+0x5a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_D6D_SRC,
                           (uint8_t *)&val->d6d_src, 1);
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_D6D_SRC,
 800efa6:	2301      	movs	r3, #1
 800efa8:	211d      	movs	r1, #29
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f7ff fd22 	bl	800e9f4 <lsm6dsr_read_reg>
 800efb0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d107      	bne.n	800efc8 <lsm6dsr_all_sources_get+0x70>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
                           (uint8_t *)&val->status_reg, 1);
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800efbc:	2301      	movs	r3, #1
 800efbe:	211e      	movs	r1, #30
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7ff fd17 	bl	800e9f4 <lsm6dsr_read_reg>
 800efc6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d104      	bne.n	800efd8 <lsm6dsr_all_sources_get+0x80>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800efce:	2102      	movs	r1, #2
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f000 f87a 	bl	800f0ca <lsm6dsr_mem_bank_set>
 800efd6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d107      	bne.n	800efee <lsm6dsr_all_sources_get+0x96>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_STATUS,
                           (uint8_t *)&val->emb_func_status, 1);
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	1d5a      	adds	r2, r3, #5
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_STATUS,
 800efe2:	2301      	movs	r3, #1
 800efe4:	2112      	movs	r1, #18
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7ff fd04 	bl	800e9f4 <lsm6dsr_read_reg>
 800efec:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d107      	bne.n	800f004 <lsm6dsr_all_sources_get+0xac>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_A,
                           (uint8_t *)&val->fsm_status_a, 1);
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	1d9a      	adds	r2, r3, #6
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_A,
 800eff8:	2301      	movs	r3, #1
 800effa:	2113      	movs	r1, #19
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f7ff fcf9 	bl	800e9f4 <lsm6dsr_read_reg>
 800f002:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d107      	bne.n	800f01a <lsm6dsr_all_sources_get+0xc2>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_B,
                           (uint8_t *)&val->fsm_status_b, 1);
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	1dda      	adds	r2, r3, #7
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_B,
 800f00e:	2301      	movs	r3, #1
 800f010:	2114      	movs	r1, #20
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f7ff fcee 	bl	800e9f4 <lsm6dsr_read_reg>
 800f018:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d104      	bne.n	800f02a <lsm6dsr_all_sources_get+0xd2>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800f020:	2100      	movs	r1, #0
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f000 f851 	bl	800f0ca <lsm6dsr_mem_bank_set>
 800f028:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f02a:	68fb      	ldr	r3, [r7, #12]
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3710      	adds	r7, #16
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b086      	sub	sp, #24
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 800f03e:	f107 020c 	add.w	r2, r7, #12
 800f042:	2306      	movs	r3, #6
 800f044:	2128      	movs	r1, #40	; 0x28
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f7ff fcd4 	bl	800e9f4 <lsm6dsr_read_reg>
 800f04c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800f04e:	7b7b      	ldrb	r3, [r7, #13]
 800f050:	b21a      	sxth	r2, r3
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f05c:	b29b      	uxth	r3, r3
 800f05e:	021b      	lsls	r3, r3, #8
 800f060:	b29a      	uxth	r2, r3
 800f062:	7b3b      	ldrb	r3, [r7, #12]
 800f064:	b29b      	uxth	r3, r3
 800f066:	4413      	add	r3, r2
 800f068:	b29b      	uxth	r3, r3
 800f06a:	b21a      	sxth	r2, r3
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800f070:	7bfa      	ldrb	r2, [r7, #15]
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	3302      	adds	r3, #2
 800f076:	b212      	sxth	r2, r2
 800f078:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	3302      	adds	r3, #2
 800f07e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f082:	b29b      	uxth	r3, r3
 800f084:	021b      	lsls	r3, r3, #8
 800f086:	b29a      	uxth	r2, r3
 800f088:	7bbb      	ldrb	r3, [r7, #14]
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	4413      	add	r3, r2
 800f08e:	b29a      	uxth	r2, r3
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	3302      	adds	r3, #2
 800f094:	b212      	sxth	r2, r2
 800f096:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800f098:	7c7a      	ldrb	r2, [r7, #17]
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	3304      	adds	r3, #4
 800f09e:	b212      	sxth	r2, r2
 800f0a0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	3304      	adds	r3, #4
 800f0a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	021b      	lsls	r3, r3, #8
 800f0ae:	b29a      	uxth	r2, r3
 800f0b0:	7c3b      	ldrb	r3, [r7, #16]
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	4413      	add	r3, r2
 800f0b6:	b29a      	uxth	r2, r3
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	3304      	adds	r3, #4
 800f0bc:	b212      	sxth	r2, r2
 800f0be:	801a      	strh	r2, [r3, #0]

  return ret;
 800f0c0:	697b      	ldr	r3, [r7, #20]
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3718      	adds	r7, #24
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b084      	sub	sp, #16
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
 800f0d2:	460b      	mov	r3, r1
 800f0d4:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800f0d6:	f107 0208 	add.w	r2, r7, #8
 800f0da:	2301      	movs	r3, #1
 800f0dc:	2101      	movs	r1, #1
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f7ff fc88 	bl	800e9f4 <lsm6dsr_read_reg>
 800f0e4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d10f      	bne.n	800f10c <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800f0ec:	78fb      	ldrb	r3, [r7, #3]
 800f0ee:	f003 0303 	and.w	r3, r3, #3
 800f0f2:	b2da      	uxtb	r2, r3
 800f0f4:	7a3b      	ldrb	r3, [r7, #8]
 800f0f6:	f362 1387 	bfi	r3, r2, #6, #2
 800f0fa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800f0fc:	f107 0208 	add.w	r2, r7, #8
 800f100:	2301      	movs	r3, #1
 800f102:	2101      	movs	r1, #1
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f7ff fc8d 	bl	800ea24 <lsm6dsr_write_reg>
 800f10a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800f10c:	68fb      	ldr	r3, [r7, #12]
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3710      	adds	r7, #16
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}

0800f116 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800f116:	b580      	push	{r7, lr}
 800f118:	b084      	sub	sp, #16
 800f11a:	af00      	add	r7, sp, #0
 800f11c:	6078      	str	r0, [r7, #4]
 800f11e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 800f120:	2301      	movs	r3, #1
 800f122:	683a      	ldr	r2, [r7, #0]
 800f124:	210f      	movs	r1, #15
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f7ff fc64 	bl	800e9f4 <lsm6dsr_read_reg>
 800f12c:	60f8      	str	r0, [r7, #12]

  return ret;
 800f12e:	68fb      	ldr	r3, [r7, #12]
}
 800f130:	4618      	mov	r0, r3
 800f132:	3710      	adds	r7, #16
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	460b      	mov	r3, r1
 800f142:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800f144:	f107 0208 	add.w	r2, r7, #8
 800f148:	2301      	movs	r3, #1
 800f14a:	2112      	movs	r1, #18
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f7ff fc51 	bl	800e9f4 <lsm6dsr_read_reg>
 800f152:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d10f      	bne.n	800f17a <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800f15a:	78fb      	ldrb	r3, [r7, #3]
 800f15c:	f003 0301 	and.w	r3, r3, #1
 800f160:	b2da      	uxtb	r2, r3
 800f162:	7a3b      	ldrb	r3, [r7, #8]
 800f164:	f362 0300 	bfi	r3, r2, #0, #1
 800f168:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800f16a:	f107 0208 	add.w	r2, r7, #8
 800f16e:	2301      	movs	r3, #1
 800f170:	2112      	movs	r1, #18
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f7ff fc56 	bl	800ea24 <lsm6dsr_write_reg>
 800f178:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f17a:	68fb      	ldr	r3, [r7, #12]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <lsm6dsr_xl_hp_path_internal_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_internal_set(stmdev_ctx_t *ctx,
                                        lsm6dsr_slope_fds_t val)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	460b      	mov	r3, r1
 800f18e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_tap_cfg0_t tap_cfg0;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_CFG0, (uint8_t *)&tap_cfg0, 1);
 800f190:	f107 0208 	add.w	r2, r7, #8
 800f194:	2301      	movs	r3, #1
 800f196:	2156      	movs	r1, #86	; 0x56
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f7ff fc2b 	bl	800e9f4 <lsm6dsr_read_reg>
 800f19e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d10f      	bne.n	800f1c6 <lsm6dsr_xl_hp_path_internal_set+0x42>
  {
    tap_cfg0.slope_fds = (uint8_t)val;
 800f1a6:	78fb      	ldrb	r3, [r7, #3]
 800f1a8:	f003 0301 	and.w	r3, r3, #1
 800f1ac:	b2da      	uxtb	r2, r3
 800f1ae:	7a3b      	ldrb	r3, [r7, #8]
 800f1b0:	f362 1304 	bfi	r3, r2, #4, #1
 800f1b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_TAP_CFG0,
 800f1b6:	f107 0208 	add.w	r2, r7, #8
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	2156      	movs	r1, #86	; 0x56
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f7ff fc30 	bl	800ea24 <lsm6dsr_write_reg>
 800f1c4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&tap_cfg0, 1);
  }

  return ret;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3710      	adds	r7, #16
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}

0800f1d0 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b086      	sub	sp, #24
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	460b      	mov	r3, r1
 800f1da:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800f1dc:	f107 0210 	add.w	r2, r7, #16
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	2118      	movs	r1, #24
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f7ff fc05 	bl	800e9f4 <lsm6dsr_read_reg>
 800f1ea:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d111      	bne.n	800f216 <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800f1f2:	78fb      	ldrb	r3, [r7, #3]
 800f1f4:	09db      	lsrs	r3, r3, #7
 800f1f6:	b2db      	uxtb	r3, r3
 800f1f8:	f003 0301 	and.w	r3, r3, #1
 800f1fc:	b2da      	uxtb	r2, r3
 800f1fe:	7c3b      	ldrb	r3, [r7, #16]
 800f200:	f362 0341 	bfi	r3, r2, #1, #1
 800f204:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 800f206:	f107 0210 	add.w	r2, r7, #16
 800f20a:	2301      	movs	r3, #1
 800f20c:	2118      	movs	r1, #24
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f7ff fc08 	bl	800ea24 <lsm6dsr_write_reg>
 800f214:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d107      	bne.n	800f22c <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 800f21c:	f107 020c 	add.w	r2, r7, #12
 800f220:	2301      	movs	r3, #1
 800f222:	2162      	movs	r1, #98	; 0x62
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f7ff fbe5 	bl	800e9f4 <lsm6dsr_read_reg>
 800f22a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d10f      	bne.n	800f252 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800f232:	78fb      	ldrb	r3, [r7, #3]
 800f234:	f003 0303 	and.w	r3, r3, #3
 800f238:	b2da      	uxtb	r2, r3
 800f23a:	7b3b      	ldrb	r3, [r7, #12]
 800f23c:	f362 03c4 	bfi	r3, r2, #3, #2
 800f240:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 800f242:	f107 020c 	add.w	r2, r7, #12
 800f246:	2301      	movs	r3, #1
 800f248:	2162      	movs	r1, #98	; 0x62
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7ff fbea 	bl	800ea24 <lsm6dsr_write_reg>
 800f250:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800f252:	697b      	ldr	r3, [r7, #20]
}
 800f254:	4618      	mov	r0, r3
 800f256:	3718      	adds	r7, #24
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <lsm6dsr_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsr_pin_int1_route_t *val)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	6039      	str	r1, [r7, #0]
  lsm6dsr_tap_cfg2_t tap_cfg2;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800f266:	2102      	movs	r1, #2
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f7ff ff2e 	bl	800f0ca <lsm6dsr_mem_bank_set>
 800f26e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d107      	bne.n	800f286 <lsm6dsr_pin_int1_route_set+0x2a>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
                            (uint8_t *)&val->emb_func_int1, 1);
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
 800f27a:	2301      	movs	r3, #1
 800f27c:	210a      	movs	r1, #10
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f7ff fbd0 	bl	800ea24 <lsm6dsr_write_reg>
 800f284:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d107      	bne.n	800f29c <lsm6dsr_pin_int1_route_set+0x40>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_A,
                            (uint8_t *)&val->fsm_int1_a, 1);
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_A,
 800f290:	2301      	movs	r3, #1
 800f292:	210b      	movs	r1, #11
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7ff fbc5 	bl	800ea24 <lsm6dsr_write_reg>
 800f29a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d107      	bne.n	800f2b2 <lsm6dsr_pin_int1_route_set+0x56>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_B,
                            (uint8_t *)&val->fsm_int1_b, 1);
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_B,
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	210c      	movs	r1, #12
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f7ff fbba 	bl	800ea24 <lsm6dsr_write_reg>
 800f2b0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d104      	bne.n	800f2c2 <lsm6dsr_pin_int1_route_set+0x66>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800f2b8:	2100      	movs	r1, #0
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7ff ff05 	bl	800f0ca <lsm6dsr_mem_bank_set>
 800f2c0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	f040 809e 	bne.w	800f406 <lsm6dsr_pin_int1_route_set+0x1aa>
  {
    if ((val->emb_func_int1.int1_fsm_lc |
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	789b      	ldrb	r3, [r3, #2]
 800f2ce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f2d2:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_sig_mot |
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	789b      	ldrb	r3, [r3, #2]
 800f2d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f2dc:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int1.int1_fsm_lc |
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_step_detector |
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	789b      	ldrb	r3, [r3, #2]
 800f2e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f2ea:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_sig_mot |
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_tilt |
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	789b      	ldrb	r3, [r3, #2]
 800f2f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f2f8:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_step_detector |
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm1 |
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	78db      	ldrb	r3, [r3, #3]
 800f302:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f306:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_tilt |
 800f308:	4313      	orrs	r3, r2
 800f30a:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm2 |
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	78db      	ldrb	r3, [r3, #3]
 800f310:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f314:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm1 |
 800f316:	4313      	orrs	r3, r2
 800f318:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm3 |
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	78db      	ldrb	r3, [r3, #3]
 800f31e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f322:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm2 |
 800f324:	4313      	orrs	r3, r2
 800f326:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm4 |
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	78db      	ldrb	r3, [r3, #3]
 800f32c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f330:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm3 |
 800f332:	4313      	orrs	r3, r2
 800f334:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm5 |
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	78db      	ldrb	r3, [r3, #3]
 800f33a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f33e:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm4 |
 800f340:	4313      	orrs	r3, r2
 800f342:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm6 |
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	78db      	ldrb	r3, [r3, #3]
 800f348:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f34c:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm5 |
 800f34e:	4313      	orrs	r3, r2
 800f350:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm7 |
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	78db      	ldrb	r3, [r3, #3]
 800f356:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f35a:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm6 |
 800f35c:	4313      	orrs	r3, r2
 800f35e:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm8 |
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	78db      	ldrb	r3, [r3, #3]
 800f364:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f368:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm7 |
 800f36a:	4313      	orrs	r3, r2
 800f36c:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm9 |
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	791b      	ldrb	r3, [r3, #4]
 800f372:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f376:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm8 |
 800f378:	4313      	orrs	r3, r2
 800f37a:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm10 |
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	791b      	ldrb	r3, [r3, #4]
 800f380:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f384:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm9 |
 800f386:	4313      	orrs	r3, r2
 800f388:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm11 |
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	791b      	ldrb	r3, [r3, #4]
 800f38e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f392:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm10 |
 800f394:	4313      	orrs	r3, r2
 800f396:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm12 |
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	791b      	ldrb	r3, [r3, #4]
 800f39c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f3a0:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm11 |
 800f3a2:	4313      	orrs	r3, r2
 800f3a4:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm13 |
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	791b      	ldrb	r3, [r3, #4]
 800f3aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f3ae:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm12 |
 800f3b0:	4313      	orrs	r3, r2
 800f3b2:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm14 |
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	791b      	ldrb	r3, [r3, #4]
 800f3b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f3bc:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm13 |
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm15 |
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	791b      	ldrb	r3, [r3, #4]
 800f3c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f3ca:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm14 |
 800f3cc:	4313      	orrs	r3, r2
 800f3ce:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	791b      	ldrb	r3, [r3, #4]
 800f3d4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f3d8:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm15 |
 800f3da:	4313      	orrs	r3, r2
 800f3dc:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int1.int1_fsm_lc |
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d005      	beq.n	800f3ee <lsm6dsr_pin_int1_route_set+0x192>
    {
      val->md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 800f3e2:	683a      	ldr	r2, [r7, #0]
 800f3e4:	7853      	ldrb	r3, [r2, #1]
 800f3e6:	f043 0302 	orr.w	r3, r3, #2
 800f3ea:	7053      	strb	r3, [r2, #1]
 800f3ec:	e004      	b.n	800f3f8 <lsm6dsr_pin_int1_route_set+0x19c>
    }

    else
    {
      val->md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 800f3ee:	683a      	ldr	r2, [r7, #0]
 800f3f0:	7853      	ldrb	r3, [r2, #1]
 800f3f2:	f36f 0341 	bfc	r3, #1, #1
 800f3f6:	7053      	strb	r3, [r2, #1]
    }

    ret = lsm6dsr_write_reg(ctx, LSM6DSR_INT1_CTRL,
                            (uint8_t *)&val->int1_ctrl, 1);
 800f3f8:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_INT1_CTRL,
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	210d      	movs	r1, #13
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f7ff fb10 	bl	800ea24 <lsm6dsr_write_reg>
 800f404:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d107      	bne.n	800f41c <lsm6dsr_pin_int1_route_set+0x1c0>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_MD1_CFG,
                            (uint8_t *)&val->md1_cfg, 1);
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_MD1_CFG,
 800f410:	2301      	movs	r3, #1
 800f412:	215e      	movs	r1, #94	; 0x5e
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f7ff fb05 	bl	800ea24 <lsm6dsr_write_reg>
 800f41a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d172      	bne.n	800f508 <lsm6dsr_pin_int1_route_set+0x2ac>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_CFG2, (uint8_t *)&tap_cfg2, 1);
 800f422:	f107 0208 	add.w	r2, r7, #8
 800f426:	2301      	movs	r3, #1
 800f428:	2158      	movs	r1, #88	; 0x58
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f7ff fae2 	bl	800e9f4 <lsm6dsr_read_reg>
 800f430:	60f8      	str	r0, [r7, #12]

    if ((val->int1_ctrl.den_drdy_flag |
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f43a:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_boot |
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f444:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag |
 800f446:	4313      	orrs	r3, r2
 800f448:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_cnt_bdr |
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f452:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_boot |
 800f454:	4313      	orrs	r3, r2
 800f456:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_g |
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f460:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_cnt_bdr |
 800f462:	4313      	orrs	r3, r2
 800f464:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_xl |
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f46e:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_g |
 800f470:	4313      	orrs	r3, r2
 800f472:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_full |
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f47c:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_xl |
 800f47e:	4313      	orrs	r3, r2
 800f480:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_ovr |
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f48a:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_full |
 800f48c:	4313      	orrs	r3, r2
 800f48e:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_th |
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f498:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_ovr |
 800f49a:	4313      	orrs	r3, r2
 800f49c:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_6d |
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	785b      	ldrb	r3, [r3, #1]
 800f4a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f4a6:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_th |
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_double_tap |
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	785b      	ldrb	r3, [r3, #1]
 800f4b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f4b4:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_6d |
 800f4b6:	4313      	orrs	r3, r2
 800f4b8:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_ff |
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	785b      	ldrb	r3, [r3, #1]
 800f4be:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f4c2:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_double_tap |
 800f4c4:	4313      	orrs	r3, r2
 800f4c6:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_wu |
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	785b      	ldrb	r3, [r3, #1]
 800f4cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f4d0:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_ff |
 800f4d2:	4313      	orrs	r3, r2
 800f4d4:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_single_tap |
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	785b      	ldrb	r3, [r3, #1]
 800f4da:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f4de:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_wu |
 800f4e0:	4313      	orrs	r3, r2
 800f4e2:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	785b      	ldrb	r3, [r3, #1]
 800f4e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f4ec:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_single_tap |
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag |
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d004      	beq.n	800f500 <lsm6dsr_pin_int1_route_set+0x2a4>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 800f4f6:	7a3b      	ldrb	r3, [r7, #8]
 800f4f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4fc:	723b      	strb	r3, [r7, #8]
 800f4fe:	e003      	b.n	800f508 <lsm6dsr_pin_int1_route_set+0x2ac>
    }

    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 800f500:	7a3b      	ldrb	r3, [r7, #8]
 800f502:	f36f 13c7 	bfc	r3, #7, #1
 800f506:	723b      	strb	r3, [r7, #8]
    }
  }

  if (ret == 0)
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d107      	bne.n	800f51e <lsm6dsr_pin_int1_route_set+0x2c2>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_TAP_CFG2,
 800f50e:	f107 0208 	add.w	r2, r7, #8
 800f512:	2301      	movs	r3, #1
 800f514:	2158      	movs	r1, #88	; 0x58
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f7ff fa84 	bl	800ea24 <lsm6dsr_write_reg>
 800f51c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&tap_cfg2, 1);
  }

  return ret;
 800f51e:	68fb      	ldr	r3, [r7, #12]
}
 800f520:	4618      	mov	r0, r3
 800f522:	3710      	adds	r7, #16
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <lsm6dsr_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsr_pin_int1_route_t *val)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800f532:	2102      	movs	r1, #2
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f7ff fdc8 	bl	800f0ca <lsm6dsr_mem_bank_set>
 800f53a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d107      	bne.n	800f552 <lsm6dsr_pin_int1_route_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
                           (uint8_t *)&val->emb_func_int1, 1);
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
 800f546:	2301      	movs	r3, #1
 800f548:	210a      	movs	r1, #10
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f7ff fa52 	bl	800e9f4 <lsm6dsr_read_reg>
 800f550:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d107      	bne.n	800f568 <lsm6dsr_pin_int1_route_get+0x40>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_A,
                           (uint8_t *)&val->fsm_int1_a, 1);
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_A,
 800f55c:	2301      	movs	r3, #1
 800f55e:	210b      	movs	r1, #11
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f7ff fa47 	bl	800e9f4 <lsm6dsr_read_reg>
 800f566:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d107      	bne.n	800f57e <lsm6dsr_pin_int1_route_get+0x56>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_B,
                           (uint8_t *)&val->fsm_int1_b, 1);
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_B,
 800f572:	2301      	movs	r3, #1
 800f574:	210c      	movs	r1, #12
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f7ff fa3c 	bl	800e9f4 <lsm6dsr_read_reg>
 800f57c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d104      	bne.n	800f58e <lsm6dsr_pin_int1_route_get+0x66>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800f584:	2100      	movs	r1, #0
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f7ff fd9f 	bl	800f0ca <lsm6dsr_mem_bank_set>
 800f58c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d106      	bne.n	800f5a2 <lsm6dsr_pin_int1_route_get+0x7a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_INT1_CTRL,
                           (uint8_t *)&val->int1_ctrl, 1);
 800f594:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_INT1_CTRL,
 800f596:	2301      	movs	r3, #1
 800f598:	210d      	movs	r1, #13
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f7ff fa2a 	bl	800e9f4 <lsm6dsr_read_reg>
 800f5a0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d107      	bne.n	800f5b8 <lsm6dsr_pin_int1_route_get+0x90>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_MD1_CFG,
                           (uint8_t *)&val->md1_cfg, 1);
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_MD1_CFG,
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	215e      	movs	r1, #94	; 0x5e
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f7ff fa1f 	bl	800e9f4 <lsm6dsr_read_reg>
 800f5b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}

0800f5c2 <lsm6dsr_wkup_threshold_set>:
  * @param  val    Change the values of wk_ths in reg WAKE_UP_THS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b084      	sub	sp, #16
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
 800f5ca:	460b      	mov	r3, r1
 800f5cc:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_wake_up_ths_t wake_up_ths;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WAKE_UP_THS,
 800f5ce:	f107 0208 	add.w	r2, r7, #8
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	215b      	movs	r1, #91	; 0x5b
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f7ff fa0c 	bl	800e9f4 <lsm6dsr_read_reg>
 800f5dc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&wake_up_ths, 1);

  if (ret == 0)
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d10f      	bne.n	800f604 <lsm6dsr_wkup_threshold_set+0x42>
  {
    wake_up_ths.wk_ths = (uint8_t)val;
 800f5e4:	78fb      	ldrb	r3, [r7, #3]
 800f5e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5ea:	b2da      	uxtb	r2, r3
 800f5ec:	7a3b      	ldrb	r3, [r7, #8]
 800f5ee:	f362 0305 	bfi	r3, r2, #0, #6
 800f5f2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_WAKE_UP_THS,
 800f5f4:	f107 0208 	add.w	r2, r7, #8
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	215b      	movs	r1, #91	; 0x5b
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7ff fa11 	bl	800ea24 <lsm6dsr_write_reg>
 800f602:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&wake_up_ths, 1);
  }

  return ret;
 800f604:	68fb      	ldr	r3, [r7, #12]
}
 800f606:	4618      	mov	r0, r3
 800f608:	3710      	adds	r7, #16
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}

0800f60e <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 800f60e:	b580      	push	{r7, lr}
 800f610:	b084      	sub	sp, #16
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
 800f616:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800f618:	2102      	movs	r1, #2
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f7ff fd55 	bl	800f0ca <lsm6dsr_mem_bank_set>
 800f620:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d106      	bne.n	800f636 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800f628:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 800f62a:	2301      	movs	r3, #1
 800f62c:	2146      	movs	r1, #70	; 0x46
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f7ff f9e0 	bl	800e9f4 <lsm6dsr_read_reg>
 800f634:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d107      	bne.n	800f64c <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 800f640:	2301      	movs	r3, #1
 800f642:	2147      	movs	r1, #71	; 0x47
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f7ff f9d5 	bl	800e9f4 <lsm6dsr_read_reg>
 800f64a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d104      	bne.n	800f65c <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800f652:	2100      	movs	r1, #0
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f7ff fd38 	bl	800f0ca <lsm6dsr_mem_bank_set>
 800f65a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f65c:	68fb      	ldr	r3, [r7, #12]
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3710      	adds	r7, #16
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
	...

0800f668 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b084      	sub	sp, #16
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800f672:	2102      	movs	r1, #2
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f7ff fd28 	bl	800f0ca <lsm6dsr_mem_bank_set>
 800f67a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d107      	bne.n	800f692 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800f682:	f107 0208 	add.w	r2, r7, #8
 800f686:	2301      	movs	r3, #1
 800f688:	215f      	movs	r1, #95	; 0x5f
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f7ff f9b2 	bl	800e9f4 <lsm6dsr_read_reg>
 800f690:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d104      	bne.n	800f6a2 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800f698:	2100      	movs	r1, #0
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f7ff fd15 	bl	800f0ca <lsm6dsr_mem_bank_set>
 800f6a0:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800f6a2:	7a3b      	ldrb	r3, [r7, #8]
 800f6a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	2b03      	cmp	r3, #3
 800f6ac:	d81a      	bhi.n	800f6e4 <lsm6dsr_fsm_data_rate_get+0x7c>
 800f6ae:	a201      	add	r2, pc, #4	; (adr r2, 800f6b4 <lsm6dsr_fsm_data_rate_get+0x4c>)
 800f6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6b4:	0800f6c5 	.word	0x0800f6c5
 800f6b8:	0800f6cd 	.word	0x0800f6cd
 800f6bc:	0800f6d5 	.word	0x0800f6d5
 800f6c0:	0800f6dd 	.word	0x0800f6dd
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	701a      	strb	r2, [r3, #0]
      break;
 800f6ca:	e00f      	b.n	800f6ec <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	701a      	strb	r2, [r3, #0]
      break;
 800f6d2:	e00b      	b.n	800f6ec <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	2202      	movs	r2, #2
 800f6d8:	701a      	strb	r2, [r3, #0]
      break;
 800f6da:	e007      	b.n	800f6ec <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	2203      	movs	r2, #3
 800f6e0:	701a      	strb	r2, [r3, #0]
      break;
 800f6e2:	e003      	b.n	800f6ec <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	701a      	strb	r2, [r3, #0]
      break;
 800f6ea:	bf00      	nop
  }

  return ret;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop

0800f6f8 <get_temperature>:
#include "max6675.h"

#define MAX_SPI_HANDLE hspi2


thermocouple_status_t get_temperature(float *temperature){
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b084      	sub	sp, #16
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
	uint8_t tmp[2];
	HAL_GPIO_WritePin(TC_CS_GPIO_Port, TC_CS_Pin, GPIO_PIN_RESET);
 800f700:	2200      	movs	r2, #0
 800f702:	2108      	movs	r1, #8
 800f704:	4815      	ldr	r0, [pc, #84]	; (800f75c <get_temperature+0x64>)
 800f706:	f001 fe3d 	bl	8011384 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&MAX_SPI_HANDLE, tmp, 2, 2);
 800f70a:	f107 010c 	add.w	r1, r7, #12
 800f70e:	2302      	movs	r3, #2
 800f710:	2202      	movs	r2, #2
 800f712:	4813      	ldr	r0, [pc, #76]	; (800f760 <get_temperature+0x68>)
 800f714:	f003 fe83 	bl	801341e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(TC_CS_GPIO_Port, TC_CS_Pin, GPIO_PIN_SET);
 800f718:	2201      	movs	r2, #1
 800f71a:	2108      	movs	r1, #8
 800f71c:	480f      	ldr	r0, [pc, #60]	; (800f75c <get_temperature+0x64>)
 800f71e:	f001 fe31 	bl	8011384 <HAL_GPIO_WritePin>
	if(tmp[1] & 0x04){
 800f722:	7b7b      	ldrb	r3, [r7, #13]
 800f724:	f003 0304 	and.w	r3, r3, #4
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d001      	beq.n	800f730 <get_temperature+0x38>
		return TMP_OPEN;
 800f72c:	2301      	movs	r3, #1
 800f72e:	e011      	b.n	800f754 <get_temperature+0x5c>
	} else {
		*temperature = (((uint16_t)(tmp[0]) << 5) + ((tmp[1] & 0xF8) >> 3))/4.0f;
 800f730:	7b3b      	ldrb	r3, [r7, #12]
 800f732:	015b      	lsls	r3, r3, #5
 800f734:	7b7a      	ldrb	r2, [r7, #13]
 800f736:	08d2      	lsrs	r2, r2, #3
 800f738:	b2d2      	uxtb	r2, r2
 800f73a:	4413      	add	r3, r2
 800f73c:	ee07 3a90 	vmov	s15, r3
 800f740:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f744:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800f748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	edc3 7a00 	vstr	s15, [r3]
		return TMP_OK;
 800f752:	2300      	movs	r3, #0
	}
}
 800f754:	4618      	mov	r0, r3
 800f756:	3710      	adds	r7, #16
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	40020000 	.word	0x40020000
 800f760:	200055c8 	.word	0x200055c8

0800f764 <task_buzzer>:
	"DBFG" // bootup
    "ace",  // ready
    "eca",  // not ready
};

void task_buzzer(void *argument) {
 800f764:	b580      	push	{r7, lr}
 800f766:	b086      	sub	sp, #24
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
	beeps_t id;

	buzzer_set_volume(&BUZZER, 20);
 800f76c:	2114      	movs	r1, #20
 800f76e:	4833      	ldr	r0, [pc, #204]	; (800f83c <task_buzzer+0xd8>)
 800f770:	f7fe f97c 	bl	800da6c <buzzer_set_volume>
	buzzer_set_freq(&BUZZER, 2500);
 800f774:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800f778:	4830      	ldr	r0, [pc, #192]	; (800f83c <task_buzzer+0xd8>)
 800f77a:	f7fe f9bb 	bl	800daf4 <buzzer_set_freq>

	while (1) {
		id = osEventFlagsWait(buzzer_event_id, 0x0001U, osFlagsWaitAny, osWaitForever);
 800f77e:	4b30      	ldr	r3, [pc, #192]	; (800f840 <task_buzzer+0xdc>)
 800f780:	6818      	ldr	r0, [r3, #0]
 800f782:	f04f 33ff 	mov.w	r3, #4294967295
 800f786:	2200      	movs	r2, #0
 800f788:	2101      	movs	r1, #1
 800f78a:	f008 fd4d 	bl	8018228 <osEventFlagsWait>
 800f78e:	4603      	mov	r3, r0
 800f790:	73fb      	strb	r3, [r7, #15]
		osEventFlagsClear(buzzer_event_id, id);
 800f792:	4b2b      	ldr	r3, [pc, #172]	; (800f840 <task_buzzer+0xdc>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	7bfa      	ldrb	r2, [r7, #15]
 800f798:	4611      	mov	r1, r2
 800f79a:	4618      	mov	r0, r3
 800f79c:	f008 fd12 	bl	80181c4 <osEventFlagsClear>
		uint32_t duration = 0;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < nr_buz[id]; i++){
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	613b      	str	r3, [r7, #16]
 800f7a8:	e03b      	b.n	800f822 <task_buzzer+0xbe>
			char pitch = beep_codes[id][i];
 800f7aa:	7bfa      	ldrb	r2, [r7, #15]
 800f7ac:	4925      	ldr	r1, [pc, #148]	; (800f844 <task_buzzer+0xe0>)
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	00db      	lsls	r3, r3, #3
 800f7b2:	4413      	add	r3, r2
 800f7b4:	18ca      	adds	r2, r1, r3
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	4413      	add	r3, r2
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	73bb      	strb	r3, [r7, #14]
			if (pitch >= 'A' && pitch <= 'H') {
 800f7be:	7bbb      	ldrb	r3, [r7, #14]
 800f7c0:	2b40      	cmp	r3, #64	; 0x40
 800f7c2:	d90e      	bls.n	800f7e2 <task_buzzer+0x7e>
 800f7c4:	7bbb      	ldrb	r3, [r7, #14]
 800f7c6:	2b48      	cmp	r3, #72	; 0x48
 800f7c8:	d80b      	bhi.n	800f7e2 <task_buzzer+0x7e>
				buzzer_set_freq(&BUZZER, pitch_lookup[pitch - 'A']);
 800f7ca:	7bbb      	ldrb	r3, [r7, #14]
 800f7cc:	3b41      	subs	r3, #65	; 0x41
 800f7ce:	4a1e      	ldr	r2, [pc, #120]	; (800f848 <task_buzzer+0xe4>)
 800f7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	4819      	ldr	r0, [pc, #100]	; (800f83c <task_buzzer+0xd8>)
 800f7d8:	f7fe f98c 	bl	800daf4 <buzzer_set_freq>
				duration = BUZZER_LONG_BEEP;
 800f7dc:	2364      	movs	r3, #100	; 0x64
 800f7de:	617b      	str	r3, [r7, #20]
 800f7e0:	e010      	b.n	800f804 <task_buzzer+0xa0>
			} else if (pitch >= 'a' && pitch <= 'h') {
 800f7e2:	7bbb      	ldrb	r3, [r7, #14]
 800f7e4:	2b60      	cmp	r3, #96	; 0x60
 800f7e6:	d90d      	bls.n	800f804 <task_buzzer+0xa0>
 800f7e8:	7bbb      	ldrb	r3, [r7, #14]
 800f7ea:	2b68      	cmp	r3, #104	; 0x68
 800f7ec:	d80a      	bhi.n	800f804 <task_buzzer+0xa0>
				buzzer_set_freq(&BUZZER, pitch_lookup[pitch - 'a']);
 800f7ee:	7bbb      	ldrb	r3, [r7, #14]
 800f7f0:	3b61      	subs	r3, #97	; 0x61
 800f7f2:	4a15      	ldr	r2, [pc, #84]	; (800f848 <task_buzzer+0xe4>)
 800f7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7f8:	4619      	mov	r1, r3
 800f7fa:	4810      	ldr	r0, [pc, #64]	; (800f83c <task_buzzer+0xd8>)
 800f7fc:	f7fe f97a 	bl	800daf4 <buzzer_set_freq>
				duration = BUZZER_SHORT_BEEP;
 800f800:	2328      	movs	r3, #40	; 0x28
 800f802:	617b      	str	r3, [r7, #20]
			}
			buzzer_start(&BUZZER);
 800f804:	480d      	ldr	r0, [pc, #52]	; (800f83c <task_buzzer+0xd8>)
 800f806:	f7fe f9b2 	bl	800db6e <buzzer_start>
			osDelay(duration);
 800f80a:	6978      	ldr	r0, [r7, #20]
 800f80c:	f008 fc0e 	bl	801802c <osDelay>
			buzzer_stop(&BUZZER);
 800f810:	480a      	ldr	r0, [pc, #40]	; (800f83c <task_buzzer+0xd8>)
 800f812:	f7fe f9bf 	bl	800db94 <buzzer_stop>
			osDelay(BUZZER_SHORT_PAUSE);
 800f816:	2064      	movs	r0, #100	; 0x64
 800f818:	f008 fc08 	bl	801802c <osDelay>
		for(int i = 0; i < nr_buz[id]; i++){
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	3301      	adds	r3, #1
 800f820:	613b      	str	r3, [r7, #16]
 800f822:	7bfb      	ldrb	r3, [r7, #15]
 800f824:	4a09      	ldr	r2, [pc, #36]	; (800f84c <task_buzzer+0xe8>)
 800f826:	5cd3      	ldrb	r3, [r2, r3]
 800f828:	461a      	mov	r2, r3
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	4293      	cmp	r3, r2
 800f82e:	dbbc      	blt.n	800f7aa <task_buzzer+0x46>
		}

		// Wait at least 1s before buzzing again
		osDelay(BUZZER_LONG_PAUSE);
 800f830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f834:	f008 fbfa 	bl	801802c <osDelay>
	while (1) {
 800f838:	e7a1      	b.n	800f77e <task_buzzer+0x1a>
 800f83a:	bf00      	nop
 800f83c:	20000000 	.word	0x20000000
 800f840:	200053a8 	.word	0x200053a8
 800f844:	0801ddc4 	.word	0x0801ddc4
 800f848:	0801dd9c 	.word	0x0801dd9c
 800f84c:	0801ddbc 	.word	0x0801ddbc

0800f850 <task_fsm>:
#include "config/config.h"

#include "util/log.h"
#include "cli/cli.h"

void task_fsm(void *argument) {
 800f850:	b580      	push	{r7, lr}
 800f852:	b086      	sub	sp, #24
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 800f858:	f008 fb38 	bl	8017ecc <osKernelGetTickCount>
 800f85c:	6178      	str	r0, [r7, #20]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 800f85e:	f008 fb4a 	bl	8017ef6 <osKernelGetTickFreq>
 800f862:	4603      	mov	r3, r0
 800f864:	4a27      	ldr	r2, [pc, #156]	; (800f904 <task_fsm+0xb4>)
 800f866:	fba2 2303 	umull	r2, r3, r2, r3
 800f86a:	095b      	lsrs	r3, r3, #5
 800f86c:	613b      	str	r3, [r7, #16]

	osDelay(2000);
 800f86e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f872:	f008 fbdb 	bl	801802c <osDelay>

	config_init();
 800f876:	f7fd ffdf 	bl	800d838 <config_init>
	config_load();
 800f87a:	f7fd fff5 	bl	800d868 <config_load>

	if(global_config.config.config_version != CONFIG_VERSION){
 800f87e:	4b22      	ldr	r3, [pc, #136]	; (800f908 <task_fsm+0xb8>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2b64      	cmp	r3, #100	; 0x64
 800f884:	d022      	beq.n	800f8cc <task_fsm+0x7c>
		log_warn("Config versions mismatch");
 800f886:	4921      	ldr	r1, [pc, #132]	; (800f90c <task_fsm+0xbc>)
 800f888:	4b21      	ldr	r3, [pc, #132]	; (800f910 <task_fsm+0xc0>)
 800f88a:	221d      	movs	r2, #29
 800f88c:	2003      	movs	r0, #3
 800f88e:	f000 fabb 	bl	800fe08 <log_log>
		log_info("Resetting to defaults..");
 800f892:	491e      	ldr	r1, [pc, #120]	; (800f90c <task_fsm+0xbc>)
 800f894:	4b1f      	ldr	r3, [pc, #124]	; (800f914 <task_fsm+0xc4>)
 800f896:	221e      	movs	r2, #30
 800f898:	2002      	movs	r0, #2
 800f89a:	f000 fab5 	bl	800fe08 <log_log>
		config_defaults();
 800f89e:	f7fd ffd3 	bl	800d848 <config_defaults>
		bool status = config_save();
 800f8a2:	f7fd ffed 	bl	800d880 <config_save>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	73fb      	strb	r3, [r7, #15]
		if(status){
 800f8aa:	7bfb      	ldrb	r3, [r7, #15]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d006      	beq.n	800f8be <task_fsm+0x6e>
			log_info("Reset successful!");
 800f8b0:	4916      	ldr	r1, [pc, #88]	; (800f90c <task_fsm+0xbc>)
 800f8b2:	4b19      	ldr	r3, [pc, #100]	; (800f918 <task_fsm+0xc8>)
 800f8b4:	2222      	movs	r2, #34	; 0x22
 800f8b6:	2002      	movs	r0, #2
 800f8b8:	f000 faa6 	bl	800fe08 <log_log>
 800f8bc:	e00c      	b.n	800f8d8 <task_fsm+0x88>
		} else {
			log_error("Error resetting config!");
 800f8be:	4913      	ldr	r1, [pc, #76]	; (800f90c <task_fsm+0xbc>)
 800f8c0:	4b16      	ldr	r3, [pc, #88]	; (800f91c <task_fsm+0xcc>)
 800f8c2:	2224      	movs	r2, #36	; 0x24
 800f8c4:	2004      	movs	r0, #4
 800f8c6:	f000 fa9f 	bl	800fe08 <log_log>
 800f8ca:	e005      	b.n	800f8d8 <task_fsm+0x88>
		}
	} else {
		log_info("Config loading successful!");
 800f8cc:	490f      	ldr	r1, [pc, #60]	; (800f90c <task_fsm+0xbc>)
 800f8ce:	4b14      	ldr	r3, [pc, #80]	; (800f920 <task_fsm+0xd0>)
 800f8d0:	2227      	movs	r2, #39	; 0x27
 800f8d2:	2002      	movs	r0, #2
 800f8d4:	f000 fa98 	bl	800fe08 <log_log>
	}

	osEventFlagsSet(buzzer_event_id, BEEP_BOOTUP);
 800f8d8:	4b12      	ldr	r3, [pc, #72]	; (800f924 <task_fsm+0xd4>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	2103      	movs	r1, #3
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f008 fc2c 	bl	801813c <osEventFlagsSet>

	//ee_write(12, 10, data_write);
	//ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data); //  only use when _EE_USE_RAM_BYTE is enabled
	log_disable();
 800f8e4:	f000 fa78 	bl	800fdd8 <log_disable>
	cli_enter(&usb_input_fifo, &usb_output_fifo);
 800f8e8:	490f      	ldr	r1, [pc, #60]	; (800f928 <task_fsm+0xd8>)
 800f8ea:	4810      	ldr	r0, [pc, #64]	; (800f92c <task_fsm+0xdc>)
 800f8ec:	f7fd f8ee 	bl	800cacc <cli_enter>

	while (1) {

		cli_process();
 800f8f0:	f7fd f8d2 	bl	800ca98 <cli_process>
		tick_count += tick_update;
 800f8f4:	697a      	ldr	r2, [r7, #20]
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	4413      	add	r3, r2
 800f8fa:	617b      	str	r3, [r7, #20]
		osDelayUntil(tick_count);
 800f8fc:	6978      	ldr	r0, [r7, #20]
 800f8fe:	f008 fbb0 	bl	8018062 <osDelayUntil>
		cli_process();
 800f902:	e7f5      	b.n	800f8f0 <task_fsm+0xa0>
 800f904:	51eb851f 	.word	0x51eb851f
 800f908:	20000458 	.word	0x20000458
 800f90c:	0801d956 	.word	0x0801d956
 800f910:	0801d964 	.word	0x0801d964
 800f914:	0801d980 	.word	0x0801d980
 800f918:	0801d998 	.word	0x0801d998
 800f91c:	0801d9ac 	.word	0x0801d9ac
 800f920:	0801d9c4 	.word	0x0801d9c4
 800f924:	200053a8 	.word	0x200053a8
 800f928:	200055ac 	.word	0x200055ac
 800f92c:	20005390 	.word	0x20005390

0800f930 <task_heater>:
#include "sensors/max6675.h"
#include "util/log.h"

#define SAMPLING_FREQ_HEATER 1 //Hz

void task_heater(void *argument) {
 800f930:	b580      	push	{r7, lr}
 800f932:	b088      	sub	sp, #32
 800f934:	af02      	add	r7, sp, #8
 800f936:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 800f938:	f008 fac8 	bl	8017ecc <osKernelGetTickCount>
 800f93c:	6178      	str	r0, [r7, #20]
	uint32_t tick_update = 5000; //osKernelGetTickFreq() / SAMPLING_FREQ_HEATER;
 800f93e:	f241 3388 	movw	r3, #5000	; 0x1388
 800f942:	613b      	str	r3, [r7, #16]

	while (1) {
		float temperature = 0;
 800f944:	f04f 0300 	mov.w	r3, #0
 800f948:	60bb      	str	r3, [r7, #8]
		thermocouple_status_t status;

		status = get_temperature(&temperature);
 800f94a:	f107 0308 	add.w	r3, r7, #8
 800f94e:	4618      	mov	r0, r3
 800f950:	f7ff fed2 	bl	800f6f8 <get_temperature>
 800f954:	4603      	mov	r3, r0
 800f956:	73fb      	strb	r3, [r7, #15]

		if(status != TMP_OK) {
 800f958:	7bfb      	ldrb	r3, [r7, #15]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d006      	beq.n	800f96c <task_heater+0x3c>
			log_error("No thermocouple connected!");
 800f95e:	490e      	ldr	r1, [pc, #56]	; (800f998 <task_heater+0x68>)
 800f960:	4b0e      	ldr	r3, [pc, #56]	; (800f99c <task_heater+0x6c>)
 800f962:	221e      	movs	r2, #30
 800f964:	2004      	movs	r0, #4
 800f966:	f000 fa4f 	bl	800fe08 <log_log>
 800f96a:	e00c      	b.n	800f986 <task_heater+0x56>
		} else {
			log_info("Current thermocouple temperature: %ld", (int32_t)temperature);
 800f96c:	490a      	ldr	r1, [pc, #40]	; (800f998 <task_heater+0x68>)
 800f96e:	edd7 7a02 	vldr	s15, [r7, #8]
 800f972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f976:	ee17 3a90 	vmov	r3, s15
 800f97a:	9300      	str	r3, [sp, #0]
 800f97c:	4b08      	ldr	r3, [pc, #32]	; (800f9a0 <task_heater+0x70>)
 800f97e:	2220      	movs	r2, #32
 800f980:	2002      	movs	r0, #2
 800f982:	f000 fa41 	bl	800fe08 <log_log>
		}
		//dcdc_set_voltage(8);
		//dcdc_enable();

		tick_count += tick_update;
 800f986:	697a      	ldr	r2, [r7, #20]
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	4413      	add	r3, r2
 800f98c:	617b      	str	r3, [r7, #20]
		osDelayUntil(tick_count);
 800f98e:	6978      	ldr	r0, [r7, #20]
 800f990:	f008 fb67 	bl	8018062 <osDelayUntil>
	while (1) {
 800f994:	e7d6      	b.n	800f944 <task_heater+0x14>
 800f996:	bf00      	nop
 800f998:	0801d9f2 	.word	0x0801d9f2
 800f99c:	0801da00 	.word	0x0801da00
 800f9a0:	0801da1c 	.word	0x0801da1c

0800f9a4 <task_sensor_read>:
#include "cmsis_os.h"
#include "task_sensor_read.h"
#include "config/globals.h"
#include "util/log.h"

void task_sensor_read(void *argument) {
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 800f9ac:	f008 fa8e 	bl	8017ecc <osKernelGetTickCount>
 800f9b0:	60f8      	str	r0, [r7, #12]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 800f9b2:	f008 faa0 	bl	8017ef6 <osKernelGetTickFreq>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	4a08      	ldr	r2, [pc, #32]	; (800f9dc <task_sensor_read+0x38>)
 800f9ba:	fba2 2303 	umull	r2, r3, r2, r3
 800f9be:	095b      	lsrs	r3, r3, #5
 800f9c0:	60bb      	str	r3, [r7, #8]
	osDelay(2000);
 800f9c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f9c6:	f008 fb31 	bl	801802c <osDelay>

	while (1) {

		tick_count += tick_update;
 800f9ca:	68fa      	ldr	r2, [r7, #12]
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	4413      	add	r3, r2
 800f9d0:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick_count);
 800f9d2:	68f8      	ldr	r0, [r7, #12]
 800f9d4:	f008 fb45 	bl	8018062 <osDelayUntil>
		tick_count += tick_update;
 800f9d8:	e7f7      	b.n	800f9ca <task_sensor_read+0x26>
 800f9da:	bf00      	nop
 800f9dc:	51eb851f 	.word	0x51eb851f

0800f9e0 <task_state_est>:
#include "cmsis_os.h"
#include "task_state_est.h"
#include "config/globals.h"
#include "util/log.h"

void task_state_est(void *argument) {
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 800f9e8:	f008 fa70 	bl	8017ecc <osKernelGetTickCount>
 800f9ec:	60f8      	str	r0, [r7, #12]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 800f9ee:	f008 fa82 	bl	8017ef6 <osKernelGetTickFreq>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	4a08      	ldr	r2, [pc, #32]	; (800fa18 <task_state_est+0x38>)
 800f9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800f9fa:	095b      	lsrs	r3, r3, #5
 800f9fc:	60bb      	str	r3, [r7, #8]
	osDelay(2000);
 800f9fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800fa02:	f008 fb13 	bl	801802c <osDelay>
	while (1) {
		tick_count += tick_update;
 800fa06:	68fa      	ldr	r2, [r7, #12]
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick_count);
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f008 fb27 	bl	8018062 <osDelayUntil>
		tick_count += tick_update;
 800fa14:	e7f7      	b.n	800fa06 <task_state_est+0x26>
 800fa16:	bf00      	nop
 800fa18:	51eb851f 	.word	0x51eb851f

0800fa1c <fifo_init>:
 */

#include <string.h>
#include "fifo.h"

void fifo_init(fifo_t *fifo, uint8_t *pdata, uint32_t size) {
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	607a      	str	r2, [r7, #4]
  fifo->data = pdata;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	68ba      	ldr	r2, [r7, #8]
 800fa2c:	611a      	str	r2, [r3, #16]
  fifo->size = size;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	60da      	str	r2, [r3, #12]
  fifo->mutex = false;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2200      	movs	r2, #0
 800fa38:	751a      	strb	r2, [r3, #20]
  fifo_flush(fifo);
 800fa3a:	68f8      	ldr	r0, [r7, #12]
 800fa3c:	f000 f804 	bl	800fa48 <fifo_flush>
}
 800fa40:	bf00      	nop
 800fa42:	3710      	adds	r7, #16
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <fifo_flush>:

void fifo_flush(fifo_t *fifo) {
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  if (fifo->mutex == false) {
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	7d1b      	ldrb	r3, [r3, #20]
 800fa54:	b2db      	uxtb	r3, r3
 800fa56:	f083 0301 	eor.w	r3, r3, #1
 800fa5a:	b2db      	uxtb	r3, r3
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d00e      	beq.n	800fa7e <fifo_flush+0x36>
    fifo->mutex = true;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2201      	movs	r2, #1
 800fa64:	751a      	strb	r2, [r3, #20]
    fifo->tail = 0;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	605a      	str	r2, [r3, #4]
    fifo->head = 0;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	601a      	str	r2, [r3, #0]
    fifo->used = 0;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2200      	movs	r2, #0
 800fa76:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	751a      	strb	r2, [r3, #20]
  }
}
 800fa7e:	bf00      	nop
 800fa80:	370c      	adds	r7, #12
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <fifo_get_length>:

uint32_t fifo_get_length(fifo_t *fifo) { return fifo->used; }
 800fa8a:	b480      	push	{r7}
 800fa8c:	b083      	sub	sp, #12
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	4618      	mov	r0, r3
 800fa98:	370c      	adds	r7, #12
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr

0800faa2 <fifo_read>:

uint8_t fifo_read(fifo_t *fifo) {
 800faa2:	b480      	push	{r7}
 800faa4:	b085      	sub	sp, #20
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
  if (fifo->mutex == false) {
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	7d1b      	ldrb	r3, [r3, #20]
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	f083 0301 	eor.w	r3, r3, #1
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d028      	beq.n	800fb0c <fifo_read+0x6a>
    fifo->mutex = true;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2201      	movs	r2, #1
 800fabe:	751a      	strb	r2, [r3, #20]
    if (fifo->used == 0) {
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	689b      	ldr	r3, [r3, #8]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d104      	bne.n	800fad2 <fifo_read+0x30>
      fifo->mutex = false;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	751a      	strb	r2, [r3, #20]
      return 0;
 800face:	2300      	movs	r3, #0
 800fad0:	e01d      	b.n	800fb0e <fifo_read+0x6c>
    }
    uint8_t data = fifo->data[fifo->tail];
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	691a      	ldr	r2, [r3, #16]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	4413      	add	r3, r2
 800fadc:	781b      	ldrb	r3, [r3, #0]
 800fade:	73fb      	strb	r3, [r7, #15]
    fifo->tail = (fifo->tail + 1) % fifo->size;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	3301      	adds	r3, #1
 800fae6:	687a      	ldr	r2, [r7, #4]
 800fae8:	68d2      	ldr	r2, [r2, #12]
 800faea:	fbb3 f1f2 	udiv	r1, r3, r2
 800faee:	fb02 f201 	mul.w	r2, r2, r1
 800faf2:	1a9a      	subs	r2, r3, r2
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	605a      	str	r2, [r3, #4]
    fifo->used--;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	689b      	ldr	r3, [r3, #8]
 800fafc:	1e5a      	subs	r2, r3, #1
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2200      	movs	r2, #0
 800fb06:	751a      	strb	r2, [r3, #20]
    return data;
 800fb08:	7bfb      	ldrb	r3, [r7, #15]
 800fb0a:	e000      	b.n	800fb0e <fifo_read+0x6c>
  }
  return 0;
 800fb0c:	2300      	movs	r3, #0
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3714      	adds	r7, #20
 800fb12:	46bd      	mov	sp, r7
 800fb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb18:	4770      	bx	lr

0800fb1a <fifo_write>:

bool fifo_write(fifo_t *fifo, uint8_t data) {
 800fb1a:	b480      	push	{r7}
 800fb1c:	b083      	sub	sp, #12
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	6078      	str	r0, [r7, #4]
 800fb22:	460b      	mov	r3, r1
 800fb24:	70fb      	strb	r3, [r7, #3]
  if (fifo->mutex == false) {
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	7d1b      	ldrb	r3, [r3, #20]
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	f083 0301 	eor.w	r3, r3, #1
 800fb30:	b2db      	uxtb	r3, r3
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d02a      	beq.n	800fb8c <fifo_write+0x72>
    fifo->mutex = true;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2201      	movs	r2, #1
 800fb3a:	751a      	strb	r2, [r3, #20]
    if (fifo->used >= fifo->size) {
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	689a      	ldr	r2, [r3, #8]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	68db      	ldr	r3, [r3, #12]
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d304      	bcc.n	800fb52 <fifo_write+0x38>
      fifo->mutex = false;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	751a      	strb	r2, [r3, #20]
      return false;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	e01d      	b.n	800fb8e <fifo_write+0x74>
    }
    fifo->data[fifo->head] = data;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	691a      	ldr	r2, [r3, #16]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4413      	add	r3, r2
 800fb5c:	78fa      	ldrb	r2, [r7, #3]
 800fb5e:	701a      	strb	r2, [r3, #0]
    fifo->head = (fifo->head + 1) % fifo->size;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	3301      	adds	r3, #1
 800fb66:	687a      	ldr	r2, [r7, #4]
 800fb68:	68d2      	ldr	r2, [r2, #12]
 800fb6a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb6e:	fb02 f201 	mul.w	r2, r2, r1
 800fb72:	1a9a      	subs	r2, r3, r2
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	601a      	str	r2, [r3, #0]
    fifo->used++;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	689b      	ldr	r3, [r3, #8]
 800fb7c:	1c5a      	adds	r2, r3, #1
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2200      	movs	r2, #0
 800fb86:	751a      	strb	r2, [r3, #20]
    return true;
 800fb88:	2301      	movs	r3, #1
 800fb8a:	e000      	b.n	800fb8e <fifo_write+0x74>
  }
  return false;
 800fb8c:	2300      	movs	r3, #0
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	370c      	adds	r7, #12
 800fb92:	46bd      	mov	sp, r7
 800fb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb98:	4770      	bx	lr

0800fb9a <fifo_read_bytes>:

bool fifo_read_bytes(fifo_t *fifo, uint8_t *data, uint32_t count) {
 800fb9a:	b580      	push	{r7, lr}
 800fb9c:	b086      	sub	sp, #24
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	60f8      	str	r0, [r7, #12]
 800fba2:	60b9      	str	r1, [r7, #8]
 800fba4:	607a      	str	r2, [r7, #4]
  if (fifo->mutex == false) {
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	7d1b      	ldrb	r3, [r3, #20]
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	f083 0301 	eor.w	r3, r3, #1
 800fbb0:	b2db      	uxtb	r3, r3
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d05a      	beq.n	800fc6c <fifo_read_bytes+0xd2>
    fifo->mutex = true;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2201      	movs	r2, #1
 800fbba:	751a      	strb	r2, [r3, #20]
    if (fifo->used < count) {
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d904      	bls.n	800fbd0 <fifo_read_bytes+0x36>
      fifo->mutex = false;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	751a      	strb	r2, [r3, #20]
      return false;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	e04e      	b.n	800fc6e <fifo_read_bytes+0xd4>
    }
    if (fifo->tail + count > fifo->size) {
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	685a      	ldr	r2, [r3, #4]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	441a      	add	r2, r3
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d923      	bls.n	800fc28 <fifo_read_bytes+0x8e>
      uint32_t front = (fifo->tail + count) % fifo->size;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	685a      	ldr	r2, [r3, #4]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	4413      	add	r3, r2
 800fbe8:	68fa      	ldr	r2, [r7, #12]
 800fbea:	68d2      	ldr	r2, [r2, #12]
 800fbec:	fbb3 f1f2 	udiv	r1, r3, r2
 800fbf0:	fb02 f201 	mul.w	r2, r2, r1
 800fbf4:	1a9b      	subs	r3, r3, r2
 800fbf6:	617b      	str	r3, [r7, #20]
      uint32_t back = count - front;
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	1ad3      	subs	r3, r2, r3
 800fbfe:	613b      	str	r3, [r7, #16]
      memcpy(&data[0], &fifo->data[fifo->tail], back);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	691a      	ldr	r2, [r3, #16]
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	4413      	add	r3, r2
 800fc0a:	693a      	ldr	r2, [r7, #16]
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	68b8      	ldr	r0, [r7, #8]
 800fc10:	f00c fda8 	bl	801c764 <memcpy>
      memcpy(&data[back], &fifo->data[0], front);
 800fc14:	68ba      	ldr	r2, [r7, #8]
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	18d0      	adds	r0, r2, r3
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	691b      	ldr	r3, [r3, #16]
 800fc1e:	697a      	ldr	r2, [r7, #20]
 800fc20:	4619      	mov	r1, r3
 800fc22:	f00c fd9f 	bl	801c764 <memcpy>
 800fc26:	e009      	b.n	800fc3c <fifo_read_bytes+0xa2>
    } else {
      memcpy(&data[0], &fifo->data[fifo->tail], count);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	691a      	ldr	r2, [r3, #16]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	4413      	add	r3, r2
 800fc32:	687a      	ldr	r2, [r7, #4]
 800fc34:	4619      	mov	r1, r3
 800fc36:	68b8      	ldr	r0, [r7, #8]
 800fc38:	f00c fd94 	bl	801c764 <memcpy>
    }
    fifo->tail = (fifo->tail + count) % fifo->size;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	685a      	ldr	r2, [r3, #4]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	4413      	add	r3, r2
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	68d2      	ldr	r2, [r2, #12]
 800fc48:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc4c:	fb02 f201 	mul.w	r2, r2, r1
 800fc50:	1a9a      	subs	r2, r3, r2
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	605a      	str	r2, [r3, #4]
    fifo->used -= count;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	689a      	ldr	r2, [r3, #8]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	1ad2      	subs	r2, r2, r3
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2200      	movs	r2, #0
 800fc66:	751a      	strb	r2, [r3, #20]
    return true;
 800fc68:	2301      	movs	r3, #1
 800fc6a:	e000      	b.n	800fc6e <fifo_read_bytes+0xd4>
  }
  return false;
 800fc6c:	2300      	movs	r3, #0
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3718      	adds	r7, #24
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <fifo_write_bytes>:
    return i;
  }
  return 0;
}

bool fifo_write_bytes(fifo_t *fifo, uint8_t *data, uint32_t count) {
 800fc76:	b580      	push	{r7, lr}
 800fc78:	b086      	sub	sp, #24
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	60f8      	str	r0, [r7, #12]
 800fc7e:	60b9      	str	r1, [r7, #8]
 800fc80:	607a      	str	r2, [r7, #4]
  // If there is not enough space return false
  if (fifo->mutex == false) {
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	7d1b      	ldrb	r3, [r3, #20]
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	f083 0301 	eor.w	r3, r3, #1
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d059      	beq.n	800fd46 <fifo_write_bytes+0xd0>
    fifo->mutex = true;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2201      	movs	r2, #1
 800fc96:	751a      	strb	r2, [r3, #20]
    if ((fifo->size - fifo->used) < count) {
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	68da      	ldr	r2, [r3, #12]
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	1ad3      	subs	r3, r2, r3
 800fca2:	687a      	ldr	r2, [r7, #4]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d904      	bls.n	800fcb2 <fifo_write_bytes+0x3c>
      fifo->mutex = false;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	751a      	strb	r2, [r3, #20]
      return false;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	e04a      	b.n	800fd48 <fifo_write_bytes+0xd2>
    }
    if (count + fifo->head > fifo->size) {
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	681a      	ldr	r2, [r3, #0]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	441a      	add	r2, r3
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d91f      	bls.n	800fd02 <fifo_write_bytes+0x8c>
      uint32_t front = fifo->head + count - fifo->size;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681a      	ldr	r2, [r3, #0]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	441a      	add	r2, r3
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	68db      	ldr	r3, [r3, #12]
 800fcce:	1ad3      	subs	r3, r2, r3
 800fcd0:	617b      	str	r3, [r7, #20]
      uint32_t back = count - front;
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	1ad3      	subs	r3, r2, r3
 800fcd8:	613b      	str	r3, [r7, #16]
      memcpy(&fifo->data[fifo->head], data, back);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	691a      	ldr	r2, [r3, #16]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	4413      	add	r3, r2
 800fce4:	693a      	ldr	r2, [r7, #16]
 800fce6:	68b9      	ldr	r1, [r7, #8]
 800fce8:	4618      	mov	r0, r3
 800fcea:	f00c fd3b 	bl	801c764 <memcpy>
      memcpy(&fifo->data[0], &data[back], front);
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6918      	ldr	r0, [r3, #16]
 800fcf2:	68ba      	ldr	r2, [r7, #8]
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	4413      	add	r3, r2
 800fcf8:	697a      	ldr	r2, [r7, #20]
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	f00c fd32 	bl	801c764 <memcpy>
 800fd00:	e009      	b.n	800fd16 <fifo_write_bytes+0xa0>
    } else {
      memcpy(&fifo->data[fifo->head], data, count);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	691a      	ldr	r2, [r3, #16]
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4413      	add	r3, r2
 800fd0c:	687a      	ldr	r2, [r7, #4]
 800fd0e:	68b9      	ldr	r1, [r7, #8]
 800fd10:	4618      	mov	r0, r3
 800fd12:	f00c fd27 	bl	801c764 <memcpy>
    }
    fifo->head = (fifo->head + count) % fifo->size;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	4413      	add	r3, r2
 800fd1e:	68fa      	ldr	r2, [r7, #12]
 800fd20:	68d2      	ldr	r2, [r2, #12]
 800fd22:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd26:	fb02 f201 	mul.w	r2, r2, r1
 800fd2a:	1a9a      	subs	r2, r3, r2
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	601a      	str	r2, [r3, #0]
    fifo->used += count;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	689a      	ldr	r2, [r3, #8]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	441a      	add	r2, r3
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	751a      	strb	r2, [r3, #20]
    return true;
 800fd42:	2301      	movs	r3, #1
 800fd44:	e000      	b.n	800fd48 <fifo_write_bytes+0xd2>
  }
  return false;
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3718      	adds	r7, #24
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <fifo_write_str>:

void fifo_write_str(fifo_t *fifo, const char *str) {
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  while (*str) {
 800fd5a:	e010      	b.n	800fd7e <fifo_write_str+0x2e>
    while (fifo_write(fifo, *str++) == false) {
      str--;
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	3b01      	subs	r3, #1
 800fd60:	603b      	str	r3, [r7, #0]
    while (fifo_write(fifo, *str++) == false) {
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	1c5a      	adds	r2, r3, #1
 800fd66:	603a      	str	r2, [r7, #0]
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f7ff fed4 	bl	800fb1a <fifo_write>
 800fd72:	4603      	mov	r3, r0
 800fd74:	f083 0301 	eor.w	r3, r3, #1
 800fd78:	b2db      	uxtb	r3, r3
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d1ee      	bne.n	800fd5c <fifo_write_str+0xc>
  while (*str) {
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d1ed      	bne.n	800fd62 <fifo_write_str+0x12>
    }
  }
}
 800fd86:	bf00      	nop
 800fd88:	bf00      	nop
 800fd8a:	3708      	adds	r7, #8
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <log_init>:
static const char *level_colors[] = {"\x1b[94m", "\x1b[36m", "\x1b[32m", "\x1b[33m", "\x1b[31m", "\x1b[35m"};

osMutexId_t print_mutex;
static char print_buffer[PRINT_BUFFER_LEN];

void log_init(){
 800fd90:	b590      	push	{r4, r7, lr}
 800fd92:	b085      	sub	sp, #20
 800fd94:	af00      	add	r7, sp, #0
	const osMutexAttr_t print_mutex_attr = {
 800fd96:	4b08      	ldr	r3, [pc, #32]	; (800fdb8 <log_init+0x28>)
 800fd98:	463c      	mov	r4, r7
 800fd9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  "print_mutex",       // human readable mutex name
	   osMutexPrioInherit,  // attr_bits
	   NULL,                // memory for control block
	   0U                   // size for control block
	};
	print_mutex = osMutexNew(&print_mutex_attr);
 800fda0:	463b      	mov	r3, r7
 800fda2:	4618      	mov	r0, r3
 800fda4:	f008 faa6 	bl	80182f4 <osMutexNew>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	4a04      	ldr	r2, [pc, #16]	; (800fdbc <log_init+0x2c>)
 800fdac:	6013      	str	r3, [r2, #0]
}
 800fdae:	bf00      	nop
 800fdb0:	3714      	adds	r7, #20
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd90      	pop	{r4, r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	0801dab0 	.word	0x0801dab0
 800fdbc:	20007960 	.word	0x20007960

0800fdc0 <log_enable>:

void log_set_level(int level) {
  L.level = level;
}

void log_enable() {
 800fdc0:	b480      	push	{r7}
 800fdc2:	af00      	add	r7, sp, #0
  L.enabled = true;
 800fdc4:	4b03      	ldr	r3, [pc, #12]	; (800fdd4 <log_enable+0x14>)
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	711a      	strb	r2, [r3, #4]
}
 800fdca:	bf00      	nop
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr
 800fdd4:	20000478 	.word	0x20000478

0800fdd8 <log_disable>:

void log_disable() {
 800fdd8:	b480      	push	{r7}
 800fdda:	af00      	add	r7, sp, #0
  L.enabled = false;
 800fddc:	4b03      	ldr	r3, [pc, #12]	; (800fdec <log_disable+0x14>)
 800fdde:	2200      	movs	r2, #0
 800fde0:	711a      	strb	r2, [r3, #4]
}
 800fde2:	bf00      	nop
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr
 800fdec:	20000478 	.word	0x20000478

0800fdf0 <log_is_enabled>:

bool log_is_enabled() {
 800fdf0:	b480      	push	{r7}
 800fdf2:	af00      	add	r7, sp, #0
  return L.enabled;
 800fdf4:	4b03      	ldr	r3, [pc, #12]	; (800fe04 <log_is_enabled+0x14>)
 800fdf6:	791b      	ldrb	r3, [r3, #4]
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe00:	4770      	bx	lr
 800fe02:	bf00      	nop
 800fe04:	20000478 	.word	0x20000478

0800fe08 <log_log>:

void log_log(int level, const char *file, int line, const char *format, ...) {
 800fe08:	b408      	push	{r3}
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b08b      	sub	sp, #44	; 0x2c
 800fe0e:	af04      	add	r7, sp, #16
 800fe10:	60f8      	str	r0, [r7, #12]
 800fe12:	60b9      	str	r1, [r7, #8]
 800fe14:	607a      	str	r2, [r7, #4]
  if (L.enabled && level >= L.level && osMutexAcquire(print_mutex, 0U) == osOK) {
 800fe16:	4b35      	ldr	r3, [pc, #212]	; (800feec <log_log+0xe4>)
 800fe18:	791b      	ldrb	r3, [r3, #4]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d05f      	beq.n	800fede <log_log+0xd6>
 800fe1e:	4b33      	ldr	r3, [pc, #204]	; (800feec <log_log+0xe4>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	68fa      	ldr	r2, [r7, #12]
 800fe24:	429a      	cmp	r2, r3
 800fe26:	db5a      	blt.n	800fede <log_log+0xd6>
 800fe28:	4b31      	ldr	r3, [pc, #196]	; (800fef0 <log_log+0xe8>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2100      	movs	r1, #0
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f008 fae6 	bl	8018400 <osMutexAcquire>
 800fe34:	4603      	mov	r3, r0
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d151      	bne.n	800fede <log_log+0xd6>
    /* fill buffer with metadata */
    static char buf_ts[16];
    buf_ts[snprintf(buf_ts, sizeof(buf_ts), "%lu", osKernelGetTickCount())] = '\0';
 800fe3a:	f008 f847 	bl	8017ecc <osKernelGetTickCount>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	4a2c      	ldr	r2, [pc, #176]	; (800fef4 <log_log+0xec>)
 800fe42:	2110      	movs	r1, #16
 800fe44:	482c      	ldr	r0, [pc, #176]	; (800fef8 <log_log+0xf0>)
 800fe46:	f00c fca3 	bl	801c790 <sniprintf>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	4a2a      	ldr	r2, [pc, #168]	; (800fef8 <log_log+0xf0>)
 800fe4e:	2100      	movs	r1, #0
 800fe50:	54d1      	strb	r1, [r2, r3]
    static char buf_loc[30];
    buf_loc[snprintf(buf_loc, sizeof(buf_loc), "%s:%d:", file, line)] = '\0';
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	9300      	str	r3, [sp, #0]
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	4a28      	ldr	r2, [pc, #160]	; (800fefc <log_log+0xf4>)
 800fe5a:	211e      	movs	r1, #30
 800fe5c:	4828      	ldr	r0, [pc, #160]	; (800ff00 <log_log+0xf8>)
 800fe5e:	f00c fc97 	bl	801c790 <sniprintf>
 800fe62:	4603      	mov	r3, r0
 800fe64:	4a26      	ldr	r2, [pc, #152]	; (800ff00 <log_log+0xf8>)
 800fe66:	2100      	movs	r1, #0
 800fe68:	54d1      	strb	r1, [r2, r3]
    int len;
    len = snprintf(print_buffer, PRINT_BUFFER_LEN, "%6s %s%5s\x1b[0m \x1b[90m%30s\x1b[0m ", buf_ts, level_colors[level],
 800fe6a:	4a26      	ldr	r2, [pc, #152]	; (800ff04 <log_log+0xfc>)
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe72:	4925      	ldr	r1, [pc, #148]	; (800ff08 <log_log+0x100>)
 800fe74:	68fa      	ldr	r2, [r7, #12]
 800fe76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fe7a:	4921      	ldr	r1, [pc, #132]	; (800ff00 <log_log+0xf8>)
 800fe7c:	9102      	str	r1, [sp, #8]
 800fe7e:	9201      	str	r2, [sp, #4]
 800fe80:	9300      	str	r3, [sp, #0]
 800fe82:	4b1d      	ldr	r3, [pc, #116]	; (800fef8 <log_log+0xf0>)
 800fe84:	4a21      	ldr	r2, [pc, #132]	; (800ff0c <log_log+0x104>)
 800fe86:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800fe8a:	4821      	ldr	r0, [pc, #132]	; (800ff10 <log_log+0x108>)
 800fe8c:	f00c fc80 	bl	801c790 <sniprintf>
 800fe90:	6178      	str	r0, [r7, #20]
                   level_strings[level], buf_loc);
    va_list argptr;
    va_start(argptr, format);
 800fe92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe96:	613b      	str	r3, [r7, #16]
    vsnprintf(print_buffer + len, PRINT_BUFFER_LEN, format, argptr);
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	4a1d      	ldr	r2, [pc, #116]	; (800ff10 <log_log+0x108>)
 800fe9c:	1898      	adds	r0, r3, r2
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fea2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800fea6:	f00c fe5d 	bl	801cb64 <vsniprintf>
    va_end(argptr);
    snprintf(print_buffer + strlen(print_buffer), PRINT_BUFFER_LEN, "\n");
 800feaa:	4819      	ldr	r0, [pc, #100]	; (800ff10 <log_log+0x108>)
 800feac:	f7fc f8c8 	bl	800c040 <strlen>
 800feb0:	4603      	mov	r3, r0
 800feb2:	4a17      	ldr	r2, [pc, #92]	; (800ff10 <log_log+0x108>)
 800feb4:	4413      	add	r3, r2
 800feb6:	4a17      	ldr	r2, [pc, #92]	; (800ff14 <log_log+0x10c>)
 800feb8:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800febc:	4618      	mov	r0, r3
 800febe:	f00c fc67 	bl	801c790 <sniprintf>
    fifo_write_bytes(&usb_output_fifo, (uint8_t *)print_buffer, strlen(print_buffer));
 800fec2:	4813      	ldr	r0, [pc, #76]	; (800ff10 <log_log+0x108>)
 800fec4:	f7fc f8bc 	bl	800c040 <strlen>
 800fec8:	4603      	mov	r3, r0
 800feca:	461a      	mov	r2, r3
 800fecc:	4910      	ldr	r1, [pc, #64]	; (800ff10 <log_log+0x108>)
 800fece:	4812      	ldr	r0, [pc, #72]	; (800ff18 <log_log+0x110>)
 800fed0:	f7ff fed1 	bl	800fc76 <fifo_write_bytes>
    osMutexRelease(print_mutex);
 800fed4:	4b06      	ldr	r3, [pc, #24]	; (800fef0 <log_log+0xe8>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4618      	mov	r0, r3
 800feda:	f008 fadc 	bl	8018496 <osMutexRelease>
  }
}
 800fede:	bf00      	nop
 800fee0:	371c      	adds	r7, #28
 800fee2:	46bd      	mov	sp, r7
 800fee4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fee8:	b001      	add	sp, #4
 800feea:	4770      	bx	lr
 800feec:	20000478 	.word	0x20000478
 800fef0:	20007960 	.word	0x20007960
 800fef4:	0801dac0 	.word	0x0801dac0
 800fef8:	20000624 	.word	0x20000624
 800fefc:	0801dac4 	.word	0x0801dac4
 800ff00:	20000634 	.word	0x20000634
 800ff04:	20000030 	.word	0x20000030
 800ff08:	20000018 	.word	0x20000018
 800ff0c:	0801dacc 	.word	0x0801dacc
 800ff10:	20000480 	.word	0x20000480
 800ff14:	0801daec 	.word	0x0801daec
 800ff18:	200055ac 	.word	0x200055ac

0800ff1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800ff1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ff54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ff20:	480d      	ldr	r0, [pc, #52]	; (800ff58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800ff22:	490e      	ldr	r1, [pc, #56]	; (800ff5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800ff24:	4a0e      	ldr	r2, [pc, #56]	; (800ff60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800ff26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ff28:	e002      	b.n	800ff30 <LoopCopyDataInit>

0800ff2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ff2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ff2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ff2e:	3304      	adds	r3, #4

0800ff30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ff30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ff32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ff34:	d3f9      	bcc.n	800ff2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ff36:	4a0b      	ldr	r2, [pc, #44]	; (800ff64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800ff38:	4c0b      	ldr	r4, [pc, #44]	; (800ff68 <LoopFillZerobss+0x26>)
  movs r3, #0
 800ff3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ff3c:	e001      	b.n	800ff42 <LoopFillZerobss>

0800ff3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ff3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ff40:	3204      	adds	r2, #4

0800ff42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ff42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ff44:	d3fb      	bcc.n	800ff3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ff46:	f7fe fd43 	bl	800e9d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ff4a:	f00c fbe7 	bl	801c71c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ff4e:	f7fd fec9 	bl	800dce4 <main>
  bx  lr    
 800ff52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800ff54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ff58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ff5c:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 800ff60:	0801df40 	.word	0x0801df40
  ldr r2, =_sbss
 800ff64:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 800ff68:	2000857c 	.word	0x2000857c

0800ff6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ff6c:	e7fe      	b.n	800ff6c <ADC_IRQHandler>
	...

0800ff70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ff74:	4b0e      	ldr	r3, [pc, #56]	; (800ffb0 <HAL_Init+0x40>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	4a0d      	ldr	r2, [pc, #52]	; (800ffb0 <HAL_Init+0x40>)
 800ff7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ff7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ff80:	4b0b      	ldr	r3, [pc, #44]	; (800ffb0 <HAL_Init+0x40>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	4a0a      	ldr	r2, [pc, #40]	; (800ffb0 <HAL_Init+0x40>)
 800ff86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ff8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ff8c:	4b08      	ldr	r3, [pc, #32]	; (800ffb0 <HAL_Init+0x40>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	4a07      	ldr	r2, [pc, #28]	; (800ffb0 <HAL_Init+0x40>)
 800ff92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ff96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ff98:	2003      	movs	r0, #3
 800ff9a:	f000 fd2c 	bl	80109f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ff9e:	200f      	movs	r0, #15
 800ffa0:	f7fe fc26 	bl	800e7f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ffa4:	f7fe fa92 	bl	800e4cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ffa8:	2300      	movs	r3, #0
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop
 800ffb0:	40023c00 	.word	0x40023c00

0800ffb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ffb8:	4b06      	ldr	r3, [pc, #24]	; (800ffd4 <HAL_IncTick+0x20>)
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	4b06      	ldr	r3, [pc, #24]	; (800ffd8 <HAL_IncTick+0x24>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	4413      	add	r3, r2
 800ffc4:	4a04      	ldr	r2, [pc, #16]	; (800ffd8 <HAL_IncTick+0x24>)
 800ffc6:	6013      	str	r3, [r2, #0]
}
 800ffc8:	bf00      	nop
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd0:	4770      	bx	lr
 800ffd2:	bf00      	nop
 800ffd4:	2000004c 	.word	0x2000004c
 800ffd8:	20007964 	.word	0x20007964

0800ffdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	af00      	add	r7, sp, #0
  return uwTick;
 800ffe0:	4b03      	ldr	r3, [pc, #12]	; (800fff0 <HAL_GetTick+0x14>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop
 800fff0:	20007964 	.word	0x20007964

0800fff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b084      	sub	sp, #16
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800fffc:	f7ff ffee 	bl	800ffdc <HAL_GetTick>
 8010000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801000c:	d005      	beq.n	801001a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801000e:	4b0a      	ldr	r3, [pc, #40]	; (8010038 <HAL_Delay+0x44>)
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	461a      	mov	r2, r3
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	4413      	add	r3, r2
 8010018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801001a:	bf00      	nop
 801001c:	f7ff ffde 	bl	800ffdc <HAL_GetTick>
 8010020:	4602      	mov	r2, r0
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	1ad3      	subs	r3, r2, r3
 8010026:	68fa      	ldr	r2, [r7, #12]
 8010028:	429a      	cmp	r2, r3
 801002a:	d8f7      	bhi.n	801001c <HAL_Delay+0x28>
  {
  }
}
 801002c:	bf00      	nop
 801002e:	bf00      	nop
 8010030:	3710      	adds	r7, #16
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}
 8010036:	bf00      	nop
 8010038:	2000004c 	.word	0x2000004c

0801003c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801003c:	b480      	push	{r7}
 801003e:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8010040:	4b03      	ldr	r3, [pc, #12]	; (8010050 <HAL_GetREVID+0x14>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	0c1b      	lsrs	r3, r3, #16
}
 8010046:	4618      	mov	r0, r3
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr
 8010050:	e0042000 	.word	0xe0042000

08010054 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8010054:	b480      	push	{r7}
 8010056:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010058:	4b04      	ldr	r3, [pc, #16]	; (801006c <HAL_GetDEVID+0x18>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8010060:	4618      	mov	r0, r3
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop
 801006c:	e0042000 	.word	0xe0042000

08010070 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010078:	2300      	movs	r3, #0
 801007a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d101      	bne.n	8010086 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8010082:	2301      	movs	r3, #1
 8010084:	e033      	b.n	80100ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801008a:	2b00      	cmp	r3, #0
 801008c:	d109      	bne.n	80100a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7fe fa48 	bl	800e524 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2200      	movs	r2, #0
 8010098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2200      	movs	r2, #0
 801009e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100a6:	f003 0310 	and.w	r3, r3, #16
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d118      	bne.n	80100e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80100b6:	f023 0302 	bic.w	r3, r3, #2
 80100ba:	f043 0202 	orr.w	r2, r3, #2
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f000 faca 	bl	801065c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2200      	movs	r2, #0
 80100cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100d2:	f023 0303 	bic.w	r3, r3, #3
 80100d6:	f043 0201 	orr.w	r2, r3, #1
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	641a      	str	r2, [r3, #64]	; 0x40
 80100de:	e001      	b.n	80100e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80100e0:	2301      	movs	r3, #1
 80100e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2200      	movs	r2, #0
 80100e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80100ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
	...

080100f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80100f8:	b480      	push	{r7}
 80100fa:	b085      	sub	sp, #20
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8010100:	2300      	movs	r3, #0
 8010102:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801010a:	2b01      	cmp	r3, #1
 801010c:	d101      	bne.n	8010112 <HAL_ADC_Start+0x1a>
 801010e:	2302      	movs	r3, #2
 8010110:	e097      	b.n	8010242 <HAL_ADC_Start+0x14a>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2201      	movs	r2, #1
 8010116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	689b      	ldr	r3, [r3, #8]
 8010120:	f003 0301 	and.w	r3, r3, #1
 8010124:	2b01      	cmp	r3, #1
 8010126:	d018      	beq.n	801015a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	689a      	ldr	r2, [r3, #8]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f042 0201 	orr.w	r2, r2, #1
 8010136:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8010138:	4b45      	ldr	r3, [pc, #276]	; (8010250 <HAL_ADC_Start+0x158>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	4a45      	ldr	r2, [pc, #276]	; (8010254 <HAL_ADC_Start+0x15c>)
 801013e:	fba2 2303 	umull	r2, r3, r2, r3
 8010142:	0c9a      	lsrs	r2, r3, #18
 8010144:	4613      	mov	r3, r2
 8010146:	005b      	lsls	r3, r3, #1
 8010148:	4413      	add	r3, r2
 801014a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 801014c:	e002      	b.n	8010154 <HAL_ADC_Start+0x5c>
    {
      counter--;
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	3b01      	subs	r3, #1
 8010152:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d1f9      	bne.n	801014e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	689b      	ldr	r3, [r3, #8]
 8010160:	f003 0301 	and.w	r3, r3, #1
 8010164:	2b01      	cmp	r3, #1
 8010166:	d15f      	bne.n	8010228 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801016c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010170:	f023 0301 	bic.w	r3, r3, #1
 8010174:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	685b      	ldr	r3, [r3, #4]
 8010182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010186:	2b00      	cmp	r3, #0
 8010188:	d007      	beq.n	801019a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801018e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010192:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801019e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80101a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101a6:	d106      	bne.n	80101b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ac:	f023 0206 	bic.w	r2, r3, #6
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	645a      	str	r2, [r3, #68]	; 0x44
 80101b4:	e002      	b.n	80101bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2200      	movs	r2, #0
 80101ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2200      	movs	r2, #0
 80101c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80101c4:	4b24      	ldr	r3, [pc, #144]	; (8010258 <HAL_ADC_Start+0x160>)
 80101c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80101d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	f003 031f 	and.w	r3, r3, #31
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d10f      	bne.n	80101fe <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d129      	bne.n	8010240 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	689a      	ldr	r2, [r3, #8]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80101fa:	609a      	str	r2, [r3, #8]
 80101fc:	e020      	b.n	8010240 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4a16      	ldr	r2, [pc, #88]	; (801025c <HAL_ADC_Start+0x164>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d11b      	bne.n	8010240 <HAL_ADC_Start+0x148>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	689b      	ldr	r3, [r3, #8]
 801020e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010212:	2b00      	cmp	r3, #0
 8010214:	d114      	bne.n	8010240 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	689a      	ldr	r2, [r3, #8]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8010224:	609a      	str	r2, [r3, #8]
 8010226:	e00b      	b.n	8010240 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801022c:	f043 0210 	orr.w	r2, r3, #16
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010238:	f043 0201 	orr.w	r2, r3, #1
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8010240:	2300      	movs	r3, #0
}
 8010242:	4618      	mov	r0, r3
 8010244:	3714      	adds	r7, #20
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr
 801024e:	bf00      	nop
 8010250:	20000014 	.word	0x20000014
 8010254:	431bde83 	.word	0x431bde83
 8010258:	40012300 	.word	0x40012300
 801025c:	40012000 	.word	0x40012000

08010260 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8010260:	b480      	push	{r7}
 8010262:	b083      	sub	sp, #12
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801026e:	2b01      	cmp	r3, #1
 8010270:	d101      	bne.n	8010276 <HAL_ADC_Stop+0x16>
 8010272:	2302      	movs	r3, #2
 8010274:	e021      	b.n	80102ba <HAL_ADC_Stop+0x5a>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2201      	movs	r2, #1
 801027a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	689a      	ldr	r2, [r3, #8]
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f022 0201 	bic.w	r2, r2, #1
 801028c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	f003 0301 	and.w	r3, r3, #1
 8010298:	2b00      	cmp	r3, #0
 801029a:	d109      	bne.n	80102b0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80102a4:	f023 0301 	bic.w	r3, r3, #1
 80102a8:	f043 0201 	orr.w	r2, r3, #1
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2200      	movs	r2, #0
 80102b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80102b8:	2300      	movs	r3, #0
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	370c      	adds	r7, #12
 80102be:	46bd      	mov	sp, r7
 80102c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c4:	4770      	bx	lr

080102c6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80102c6:	b580      	push	{r7, lr}
 80102c8:	b084      	sub	sp, #16
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	6078      	str	r0, [r7, #4]
 80102ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80102d0:	2300      	movs	r3, #0
 80102d2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	689b      	ldr	r3, [r3, #8]
 80102da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80102de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80102e2:	d113      	bne.n	801030c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	689b      	ldr	r3, [r3, #8]
 80102ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80102ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102f2:	d10b      	bne.n	801030c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102f8:	f043 0220 	orr.w	r2, r3, #32
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2200      	movs	r2, #0
 8010304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8010308:	2301      	movs	r3, #1
 801030a:	e063      	b.n	80103d4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 801030c:	f7ff fe66 	bl	800ffdc <HAL_GetTick>
 8010310:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8010312:	e021      	b.n	8010358 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	f1b3 3fff 	cmp.w	r3, #4294967295
 801031a:	d01d      	beq.n	8010358 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d007      	beq.n	8010332 <HAL_ADC_PollForConversion+0x6c>
 8010322:	f7ff fe5b 	bl	800ffdc <HAL_GetTick>
 8010326:	4602      	mov	r2, r0
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	1ad3      	subs	r3, r2, r3
 801032c:	683a      	ldr	r2, [r7, #0]
 801032e:	429a      	cmp	r2, r3
 8010330:	d212      	bcs.n	8010358 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f003 0302 	and.w	r3, r3, #2
 801033c:	2b02      	cmp	r3, #2
 801033e:	d00b      	beq.n	8010358 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010344:	f043 0204 	orr.w	r2, r3, #4
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2200      	movs	r2, #0
 8010350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8010354:	2303      	movs	r3, #3
 8010356:	e03d      	b.n	80103d4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	f003 0302 	and.w	r3, r3, #2
 8010362:	2b02      	cmp	r3, #2
 8010364:	d1d6      	bne.n	8010314 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f06f 0212 	mvn.w	r2, #18
 801036e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010374:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010386:	2b00      	cmp	r3, #0
 8010388:	d123      	bne.n	80103d2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801038e:	2b00      	cmp	r3, #0
 8010390:	d11f      	bne.n	80103d2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010398:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801039c:	2b00      	cmp	r3, #0
 801039e:	d006      	beq.n	80103ae <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	689b      	ldr	r3, [r3, #8]
 80103a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d111      	bne.n	80103d2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d105      	bne.n	80103d2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ca:	f043 0201 	orr.w	r2, r3, #1
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80103d2:	2300      	movs	r3, #0
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	3710      	adds	r7, #16
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	370c      	adds	r7, #12
 80103ee:	46bd      	mov	sp, r7
 80103f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f4:	4770      	bx	lr
	...

080103f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80103f8:	b480      	push	{r7}
 80103fa:	b085      	sub	sp, #20
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8010402:	2300      	movs	r3, #0
 8010404:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801040c:	2b01      	cmp	r3, #1
 801040e:	d101      	bne.n	8010414 <HAL_ADC_ConfigChannel+0x1c>
 8010410:	2302      	movs	r3, #2
 8010412:	e113      	b.n	801063c <HAL_ADC_ConfigChannel+0x244>
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2201      	movs	r2, #1
 8010418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	2b09      	cmp	r3, #9
 8010422:	d925      	bls.n	8010470 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	68d9      	ldr	r1, [r3, #12]
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	b29b      	uxth	r3, r3
 8010430:	461a      	mov	r2, r3
 8010432:	4613      	mov	r3, r2
 8010434:	005b      	lsls	r3, r3, #1
 8010436:	4413      	add	r3, r2
 8010438:	3b1e      	subs	r3, #30
 801043a:	2207      	movs	r2, #7
 801043c:	fa02 f303 	lsl.w	r3, r2, r3
 8010440:	43da      	mvns	r2, r3
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	400a      	ands	r2, r1
 8010448:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	68d9      	ldr	r1, [r3, #12]
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	689a      	ldr	r2, [r3, #8]
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	b29b      	uxth	r3, r3
 801045a:	4618      	mov	r0, r3
 801045c:	4603      	mov	r3, r0
 801045e:	005b      	lsls	r3, r3, #1
 8010460:	4403      	add	r3, r0
 8010462:	3b1e      	subs	r3, #30
 8010464:	409a      	lsls	r2, r3
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	430a      	orrs	r2, r1
 801046c:	60da      	str	r2, [r3, #12]
 801046e:	e022      	b.n	80104b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	6919      	ldr	r1, [r3, #16]
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	b29b      	uxth	r3, r3
 801047c:	461a      	mov	r2, r3
 801047e:	4613      	mov	r3, r2
 8010480:	005b      	lsls	r3, r3, #1
 8010482:	4413      	add	r3, r2
 8010484:	2207      	movs	r2, #7
 8010486:	fa02 f303 	lsl.w	r3, r2, r3
 801048a:	43da      	mvns	r2, r3
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	400a      	ands	r2, r1
 8010492:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	6919      	ldr	r1, [r3, #16]
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	689a      	ldr	r2, [r3, #8]
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	4618      	mov	r0, r3
 80104a6:	4603      	mov	r3, r0
 80104a8:	005b      	lsls	r3, r3, #1
 80104aa:	4403      	add	r3, r0
 80104ac:	409a      	lsls	r2, r3
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	430a      	orrs	r2, r1
 80104b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	2b06      	cmp	r3, #6
 80104bc:	d824      	bhi.n	8010508 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	685a      	ldr	r2, [r3, #4]
 80104c8:	4613      	mov	r3, r2
 80104ca:	009b      	lsls	r3, r3, #2
 80104cc:	4413      	add	r3, r2
 80104ce:	3b05      	subs	r3, #5
 80104d0:	221f      	movs	r2, #31
 80104d2:	fa02 f303 	lsl.w	r3, r2, r3
 80104d6:	43da      	mvns	r2, r3
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	400a      	ands	r2, r1
 80104de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	4618      	mov	r0, r3
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	685a      	ldr	r2, [r3, #4]
 80104f2:	4613      	mov	r3, r2
 80104f4:	009b      	lsls	r3, r3, #2
 80104f6:	4413      	add	r3, r2
 80104f8:	3b05      	subs	r3, #5
 80104fa:	fa00 f203 	lsl.w	r2, r0, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	430a      	orrs	r2, r1
 8010504:	635a      	str	r2, [r3, #52]	; 0x34
 8010506:	e04c      	b.n	80105a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	2b0c      	cmp	r3, #12
 801050e:	d824      	bhi.n	801055a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	685a      	ldr	r2, [r3, #4]
 801051a:	4613      	mov	r3, r2
 801051c:	009b      	lsls	r3, r3, #2
 801051e:	4413      	add	r3, r2
 8010520:	3b23      	subs	r3, #35	; 0x23
 8010522:	221f      	movs	r2, #31
 8010524:	fa02 f303 	lsl.w	r3, r2, r3
 8010528:	43da      	mvns	r2, r3
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	400a      	ands	r2, r1
 8010530:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	b29b      	uxth	r3, r3
 801053e:	4618      	mov	r0, r3
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	685a      	ldr	r2, [r3, #4]
 8010544:	4613      	mov	r3, r2
 8010546:	009b      	lsls	r3, r3, #2
 8010548:	4413      	add	r3, r2
 801054a:	3b23      	subs	r3, #35	; 0x23
 801054c:	fa00 f203 	lsl.w	r2, r0, r3
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	430a      	orrs	r2, r1
 8010556:	631a      	str	r2, [r3, #48]	; 0x30
 8010558:	e023      	b.n	80105a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	685a      	ldr	r2, [r3, #4]
 8010564:	4613      	mov	r3, r2
 8010566:	009b      	lsls	r3, r3, #2
 8010568:	4413      	add	r3, r2
 801056a:	3b41      	subs	r3, #65	; 0x41
 801056c:	221f      	movs	r2, #31
 801056e:	fa02 f303 	lsl.w	r3, r2, r3
 8010572:	43da      	mvns	r2, r3
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	400a      	ands	r2, r1
 801057a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	b29b      	uxth	r3, r3
 8010588:	4618      	mov	r0, r3
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	685a      	ldr	r2, [r3, #4]
 801058e:	4613      	mov	r3, r2
 8010590:	009b      	lsls	r3, r3, #2
 8010592:	4413      	add	r3, r2
 8010594:	3b41      	subs	r3, #65	; 0x41
 8010596:	fa00 f203 	lsl.w	r2, r0, r3
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	430a      	orrs	r2, r1
 80105a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80105a2:	4b29      	ldr	r3, [pc, #164]	; (8010648 <HAL_ADC_ConfigChannel+0x250>)
 80105a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	4a28      	ldr	r2, [pc, #160]	; (801064c <HAL_ADC_ConfigChannel+0x254>)
 80105ac:	4293      	cmp	r3, r2
 80105ae:	d10f      	bne.n	80105d0 <HAL_ADC_ConfigChannel+0x1d8>
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	2b12      	cmp	r3, #18
 80105b6:	d10b      	bne.n	80105d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	685b      	ldr	r3, [r3, #4]
 80105c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	4a1d      	ldr	r2, [pc, #116]	; (801064c <HAL_ADC_ConfigChannel+0x254>)
 80105d6:	4293      	cmp	r3, r2
 80105d8:	d12b      	bne.n	8010632 <HAL_ADC_ConfigChannel+0x23a>
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	4a1c      	ldr	r2, [pc, #112]	; (8010650 <HAL_ADC_ConfigChannel+0x258>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d003      	beq.n	80105ec <HAL_ADC_ConfigChannel+0x1f4>
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2b11      	cmp	r3, #17
 80105ea:	d122      	bne.n	8010632 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	685b      	ldr	r3, [r3, #4]
 80105fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	4a11      	ldr	r2, [pc, #68]	; (8010650 <HAL_ADC_ConfigChannel+0x258>)
 801060a:	4293      	cmp	r3, r2
 801060c:	d111      	bne.n	8010632 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801060e:	4b11      	ldr	r3, [pc, #68]	; (8010654 <HAL_ADC_ConfigChannel+0x25c>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	4a11      	ldr	r2, [pc, #68]	; (8010658 <HAL_ADC_ConfigChannel+0x260>)
 8010614:	fba2 2303 	umull	r2, r3, r2, r3
 8010618:	0c9a      	lsrs	r2, r3, #18
 801061a:	4613      	mov	r3, r2
 801061c:	009b      	lsls	r3, r3, #2
 801061e:	4413      	add	r3, r2
 8010620:	005b      	lsls	r3, r3, #1
 8010622:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010624:	e002      	b.n	801062c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	3b01      	subs	r3, #1
 801062a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d1f9      	bne.n	8010626 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801063a:	2300      	movs	r3, #0
}
 801063c:	4618      	mov	r0, r3
 801063e:	3714      	adds	r7, #20
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr
 8010648:	40012300 	.word	0x40012300
 801064c:	40012000 	.word	0x40012000
 8010650:	10000012 	.word	0x10000012
 8010654:	20000014 	.word	0x20000014
 8010658:	431bde83 	.word	0x431bde83

0801065c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801065c:	b480      	push	{r7}
 801065e:	b085      	sub	sp, #20
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010664:	4b79      	ldr	r3, [pc, #484]	; (801084c <ADC_Init+0x1f0>)
 8010666:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	685a      	ldr	r2, [r3, #4]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	685b      	ldr	r3, [r3, #4]
 801067c:	431a      	orrs	r2, r3
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	685a      	ldr	r2, [r3, #4]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	6859      	ldr	r1, [r3, #4]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	691b      	ldr	r3, [r3, #16]
 801069c:	021a      	lsls	r2, r3, #8
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	430a      	orrs	r2, r1
 80106a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	685a      	ldr	r2, [r3, #4]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80106b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	6859      	ldr	r1, [r3, #4]
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	689a      	ldr	r2, [r3, #8]
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	430a      	orrs	r2, r1
 80106c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	689a      	ldr	r2, [r3, #8]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80106d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	6899      	ldr	r1, [r3, #8]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	68da      	ldr	r2, [r3, #12]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	430a      	orrs	r2, r1
 80106e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106ee:	4a58      	ldr	r2, [pc, #352]	; (8010850 <ADC_Init+0x1f4>)
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d022      	beq.n	801073a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	689a      	ldr	r2, [r3, #8]
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010702:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	6899      	ldr	r1, [r3, #8]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	430a      	orrs	r2, r1
 8010714:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	689a      	ldr	r2, [r3, #8]
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010724:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	6899      	ldr	r1, [r3, #8]
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	430a      	orrs	r2, r1
 8010736:	609a      	str	r2, [r3, #8]
 8010738:	e00f      	b.n	801075a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	689a      	ldr	r2, [r3, #8]
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	689a      	ldr	r2, [r3, #8]
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010758:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	689a      	ldr	r2, [r3, #8]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	f022 0202 	bic.w	r2, r2, #2
 8010768:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	6899      	ldr	r1, [r3, #8]
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	7e1b      	ldrb	r3, [r3, #24]
 8010774:	005a      	lsls	r2, r3, #1
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	430a      	orrs	r2, r1
 801077c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d01b      	beq.n	80107c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	685a      	ldr	r2, [r3, #4]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010796:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	685a      	ldr	r2, [r3, #4]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80107a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	6859      	ldr	r1, [r3, #4]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b2:	3b01      	subs	r3, #1
 80107b4:	035a      	lsls	r2, r3, #13
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	430a      	orrs	r2, r1
 80107bc:	605a      	str	r2, [r3, #4]
 80107be:	e007      	b.n	80107d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	685a      	ldr	r2, [r3, #4]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80107ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80107de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	69db      	ldr	r3, [r3, #28]
 80107ea:	3b01      	subs	r3, #1
 80107ec:	051a      	lsls	r2, r3, #20
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	430a      	orrs	r2, r1
 80107f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	689a      	ldr	r2, [r3, #8]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	6899      	ldr	r1, [r3, #8]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010812:	025a      	lsls	r2, r3, #9
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	430a      	orrs	r2, r1
 801081a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	689a      	ldr	r2, [r3, #8]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801082a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	6899      	ldr	r1, [r3, #8]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	695b      	ldr	r3, [r3, #20]
 8010836:	029a      	lsls	r2, r3, #10
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	430a      	orrs	r2, r1
 801083e:	609a      	str	r2, [r3, #8]
}
 8010840:	bf00      	nop
 8010842:	3714      	adds	r7, #20
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr
 801084c:	40012300 	.word	0x40012300
 8010850:	0f000001 	.word	0x0f000001

08010854 <__NVIC_SetPriorityGrouping>:
{
 8010854:	b480      	push	{r7}
 8010856:	b085      	sub	sp, #20
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f003 0307 	and.w	r3, r3, #7
 8010862:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010864:	4b0c      	ldr	r3, [pc, #48]	; (8010898 <__NVIC_SetPriorityGrouping+0x44>)
 8010866:	68db      	ldr	r3, [r3, #12]
 8010868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801086a:	68ba      	ldr	r2, [r7, #8]
 801086c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010870:	4013      	ands	r3, r2
 8010872:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801087c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010886:	4a04      	ldr	r2, [pc, #16]	; (8010898 <__NVIC_SetPriorityGrouping+0x44>)
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	60d3      	str	r3, [r2, #12]
}
 801088c:	bf00      	nop
 801088e:	3714      	adds	r7, #20
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr
 8010898:	e000ed00 	.word	0xe000ed00

0801089c <__NVIC_GetPriorityGrouping>:
{
 801089c:	b480      	push	{r7}
 801089e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80108a0:	4b04      	ldr	r3, [pc, #16]	; (80108b4 <__NVIC_GetPriorityGrouping+0x18>)
 80108a2:	68db      	ldr	r3, [r3, #12]
 80108a4:	0a1b      	lsrs	r3, r3, #8
 80108a6:	f003 0307 	and.w	r3, r3, #7
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	46bd      	mov	sp, r7
 80108ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b2:	4770      	bx	lr
 80108b4:	e000ed00 	.word	0xe000ed00

080108b8 <__NVIC_EnableIRQ>:
{
 80108b8:	b480      	push	{r7}
 80108ba:	b083      	sub	sp, #12
 80108bc:	af00      	add	r7, sp, #0
 80108be:	4603      	mov	r3, r0
 80108c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80108c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	db0b      	blt.n	80108e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80108ca:	79fb      	ldrb	r3, [r7, #7]
 80108cc:	f003 021f 	and.w	r2, r3, #31
 80108d0:	4907      	ldr	r1, [pc, #28]	; (80108f0 <__NVIC_EnableIRQ+0x38>)
 80108d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80108d6:	095b      	lsrs	r3, r3, #5
 80108d8:	2001      	movs	r0, #1
 80108da:	fa00 f202 	lsl.w	r2, r0, r2
 80108de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80108e2:	bf00      	nop
 80108e4:	370c      	adds	r7, #12
 80108e6:	46bd      	mov	sp, r7
 80108e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ec:	4770      	bx	lr
 80108ee:	bf00      	nop
 80108f0:	e000e100 	.word	0xe000e100

080108f4 <__NVIC_DisableIRQ>:
{
 80108f4:	b480      	push	{r7}
 80108f6:	b083      	sub	sp, #12
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	4603      	mov	r3, r0
 80108fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80108fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010902:	2b00      	cmp	r3, #0
 8010904:	db12      	blt.n	801092c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010906:	79fb      	ldrb	r3, [r7, #7]
 8010908:	f003 021f 	and.w	r2, r3, #31
 801090c:	490a      	ldr	r1, [pc, #40]	; (8010938 <__NVIC_DisableIRQ+0x44>)
 801090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010912:	095b      	lsrs	r3, r3, #5
 8010914:	2001      	movs	r0, #1
 8010916:	fa00 f202 	lsl.w	r2, r0, r2
 801091a:	3320      	adds	r3, #32
 801091c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010920:	f3bf 8f4f 	dsb	sy
}
 8010924:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010926:	f3bf 8f6f 	isb	sy
}
 801092a:	bf00      	nop
}
 801092c:	bf00      	nop
 801092e:	370c      	adds	r7, #12
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr
 8010938:	e000e100 	.word	0xe000e100

0801093c <__NVIC_SetPriority>:
{
 801093c:	b480      	push	{r7}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
 8010942:	4603      	mov	r3, r0
 8010944:	6039      	str	r1, [r7, #0]
 8010946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801094c:	2b00      	cmp	r3, #0
 801094e:	db0a      	blt.n	8010966 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	b2da      	uxtb	r2, r3
 8010954:	490c      	ldr	r1, [pc, #48]	; (8010988 <__NVIC_SetPriority+0x4c>)
 8010956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801095a:	0112      	lsls	r2, r2, #4
 801095c:	b2d2      	uxtb	r2, r2
 801095e:	440b      	add	r3, r1
 8010960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010964:	e00a      	b.n	801097c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	b2da      	uxtb	r2, r3
 801096a:	4908      	ldr	r1, [pc, #32]	; (801098c <__NVIC_SetPriority+0x50>)
 801096c:	79fb      	ldrb	r3, [r7, #7]
 801096e:	f003 030f 	and.w	r3, r3, #15
 8010972:	3b04      	subs	r3, #4
 8010974:	0112      	lsls	r2, r2, #4
 8010976:	b2d2      	uxtb	r2, r2
 8010978:	440b      	add	r3, r1
 801097a:	761a      	strb	r2, [r3, #24]
}
 801097c:	bf00      	nop
 801097e:	370c      	adds	r7, #12
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr
 8010988:	e000e100 	.word	0xe000e100
 801098c:	e000ed00 	.word	0xe000ed00

08010990 <NVIC_EncodePriority>:
{
 8010990:	b480      	push	{r7}
 8010992:	b089      	sub	sp, #36	; 0x24
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	f003 0307 	and.w	r3, r3, #7
 80109a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	f1c3 0307 	rsb	r3, r3, #7
 80109aa:	2b04      	cmp	r3, #4
 80109ac:	bf28      	it	cs
 80109ae:	2304      	movcs	r3, #4
 80109b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80109b2:	69fb      	ldr	r3, [r7, #28]
 80109b4:	3304      	adds	r3, #4
 80109b6:	2b06      	cmp	r3, #6
 80109b8:	d902      	bls.n	80109c0 <NVIC_EncodePriority+0x30>
 80109ba:	69fb      	ldr	r3, [r7, #28]
 80109bc:	3b03      	subs	r3, #3
 80109be:	e000      	b.n	80109c2 <NVIC_EncodePriority+0x32>
 80109c0:	2300      	movs	r3, #0
 80109c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80109c4:	f04f 32ff 	mov.w	r2, #4294967295
 80109c8:	69bb      	ldr	r3, [r7, #24]
 80109ca:	fa02 f303 	lsl.w	r3, r2, r3
 80109ce:	43da      	mvns	r2, r3
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	401a      	ands	r2, r3
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80109d8:	f04f 31ff 	mov.w	r1, #4294967295
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	fa01 f303 	lsl.w	r3, r1, r3
 80109e2:	43d9      	mvns	r1, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80109e8:	4313      	orrs	r3, r2
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3724      	adds	r7, #36	; 0x24
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr

080109f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80109f6:	b580      	push	{r7, lr}
 80109f8:	b082      	sub	sp, #8
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f7ff ff28 	bl	8010854 <__NVIC_SetPriorityGrouping>
}
 8010a04:	bf00      	nop
 8010a06:	3708      	adds	r7, #8
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b086      	sub	sp, #24
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	4603      	mov	r3, r0
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	607a      	str	r2, [r7, #4]
 8010a18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010a1e:	f7ff ff3d 	bl	801089c <__NVIC_GetPriorityGrouping>
 8010a22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010a24:	687a      	ldr	r2, [r7, #4]
 8010a26:	68b9      	ldr	r1, [r7, #8]
 8010a28:	6978      	ldr	r0, [r7, #20]
 8010a2a:	f7ff ffb1 	bl	8010990 <NVIC_EncodePriority>
 8010a2e:	4602      	mov	r2, r0
 8010a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a34:	4611      	mov	r1, r2
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7ff ff80 	bl	801093c <__NVIC_SetPriority>
}
 8010a3c:	bf00      	nop
 8010a3e:	3718      	adds	r7, #24
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7ff ff30 	bl	80108b8 <__NVIC_EnableIRQ>
}
 8010a58:	bf00      	nop
 8010a5a:	3708      	adds	r7, #8
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b082      	sub	sp, #8
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	4603      	mov	r3, r0
 8010a68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8010a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f7ff ff40 	bl	80108f4 <__NVIC_DisableIRQ>
}
 8010a74:	bf00      	nop
 8010a76:	3708      	adds	r7, #8
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b086      	sub	sp, #24
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	60f8      	str	r0, [r7, #12]
 8010a84:	60b9      	str	r1, [r7, #8]
 8010a86:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010a8e:	4b23      	ldr	r3, [pc, #140]	; (8010b1c <HAL_FLASH_Program+0xa0>)
 8010a90:	7e1b      	ldrb	r3, [r3, #24]
 8010a92:	2b01      	cmp	r3, #1
 8010a94:	d101      	bne.n	8010a9a <HAL_FLASH_Program+0x1e>
 8010a96:	2302      	movs	r3, #2
 8010a98:	e03b      	b.n	8010b12 <HAL_FLASH_Program+0x96>
 8010a9a:	4b20      	ldr	r3, [pc, #128]	; (8010b1c <HAL_FLASH_Program+0xa0>)
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010aa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010aa4:	f000 f870 	bl	8010b88 <FLASH_WaitForLastOperation>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8010aac:	7dfb      	ldrb	r3, [r7, #23]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d12b      	bne.n	8010b0a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d105      	bne.n	8010ac4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8010ab8:	783b      	ldrb	r3, [r7, #0]
 8010aba:	4619      	mov	r1, r3
 8010abc:	68b8      	ldr	r0, [r7, #8]
 8010abe:	f000 f91b 	bl	8010cf8 <FLASH_Program_Byte>
 8010ac2:	e016      	b.n	8010af2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d105      	bne.n	8010ad6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8010aca:	883b      	ldrh	r3, [r7, #0]
 8010acc:	4619      	mov	r1, r3
 8010ace:	68b8      	ldr	r0, [r7, #8]
 8010ad0:	f000 f8ee 	bl	8010cb0 <FLASH_Program_HalfWord>
 8010ad4:	e00d      	b.n	8010af2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2b02      	cmp	r3, #2
 8010ada:	d105      	bne.n	8010ae8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	4619      	mov	r1, r3
 8010ae0:	68b8      	ldr	r0, [r7, #8]
 8010ae2:	f000 f8c3 	bl	8010c6c <FLASH_Program_Word>
 8010ae6:	e004      	b.n	8010af2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8010ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010aec:	68b8      	ldr	r0, [r7, #8]
 8010aee:	f000 f88b 	bl	8010c08 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010af2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010af6:	f000 f847 	bl	8010b88 <FLASH_WaitForLastOperation>
 8010afa:	4603      	mov	r3, r0
 8010afc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8010afe:	4b08      	ldr	r3, [pc, #32]	; (8010b20 <HAL_FLASH_Program+0xa4>)
 8010b00:	691b      	ldr	r3, [r3, #16]
 8010b02:	4a07      	ldr	r2, [pc, #28]	; (8010b20 <HAL_FLASH_Program+0xa4>)
 8010b04:	f023 0301 	bic.w	r3, r3, #1
 8010b08:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010b0a:	4b04      	ldr	r3, [pc, #16]	; (8010b1c <HAL_FLASH_Program+0xa0>)
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8010b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3718      	adds	r7, #24
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	20007968 	.word	0x20007968
 8010b20:	40023c00 	.word	0x40023c00

08010b24 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8010b24:	b480      	push	{r7}
 8010b26:	b083      	sub	sp, #12
 8010b28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010b2e:	4b0b      	ldr	r3, [pc, #44]	; (8010b5c <HAL_FLASH_Unlock+0x38>)
 8010b30:	691b      	ldr	r3, [r3, #16]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	da0b      	bge.n	8010b4e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010b36:	4b09      	ldr	r3, [pc, #36]	; (8010b5c <HAL_FLASH_Unlock+0x38>)
 8010b38:	4a09      	ldr	r2, [pc, #36]	; (8010b60 <HAL_FLASH_Unlock+0x3c>)
 8010b3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010b3c:	4b07      	ldr	r3, [pc, #28]	; (8010b5c <HAL_FLASH_Unlock+0x38>)
 8010b3e:	4a09      	ldr	r2, [pc, #36]	; (8010b64 <HAL_FLASH_Unlock+0x40>)
 8010b40:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010b42:	4b06      	ldr	r3, [pc, #24]	; (8010b5c <HAL_FLASH_Unlock+0x38>)
 8010b44:	691b      	ldr	r3, [r3, #16]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	da01      	bge.n	8010b4e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8010b4e:	79fb      	ldrb	r3, [r7, #7]
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	370c      	adds	r7, #12
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr
 8010b5c:	40023c00 	.word	0x40023c00
 8010b60:	45670123 	.word	0x45670123
 8010b64:	cdef89ab 	.word	0xcdef89ab

08010b68 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8010b6c:	4b05      	ldr	r3, [pc, #20]	; (8010b84 <HAL_FLASH_Lock+0x1c>)
 8010b6e:	691b      	ldr	r3, [r3, #16]
 8010b70:	4a04      	ldr	r2, [pc, #16]	; (8010b84 <HAL_FLASH_Lock+0x1c>)
 8010b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010b76:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8010b78:	2300      	movs	r3, #0
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b82:	4770      	bx	lr
 8010b84:	40023c00 	.word	0x40023c00

08010b88 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b084      	sub	sp, #16
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010b90:	2300      	movs	r3, #0
 8010b92:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010b94:	4b1a      	ldr	r3, [pc, #104]	; (8010c00 <FLASH_WaitForLastOperation+0x78>)
 8010b96:	2200      	movs	r2, #0
 8010b98:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8010b9a:	f7ff fa1f 	bl	800ffdc <HAL_GetTick>
 8010b9e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8010ba0:	e010      	b.n	8010bc4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ba8:	d00c      	beq.n	8010bc4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d007      	beq.n	8010bc0 <FLASH_WaitForLastOperation+0x38>
 8010bb0:	f7ff fa14 	bl	800ffdc <HAL_GetTick>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	1ad3      	subs	r3, r2, r3
 8010bba:	687a      	ldr	r2, [r7, #4]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d201      	bcs.n	8010bc4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8010bc0:	2303      	movs	r3, #3
 8010bc2:	e019      	b.n	8010bf8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8010bc4:	4b0f      	ldr	r3, [pc, #60]	; (8010c04 <FLASH_WaitForLastOperation+0x7c>)
 8010bc6:	68db      	ldr	r3, [r3, #12]
 8010bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d1e8      	bne.n	8010ba2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8010bd0:	4b0c      	ldr	r3, [pc, #48]	; (8010c04 <FLASH_WaitForLastOperation+0x7c>)
 8010bd2:	68db      	ldr	r3, [r3, #12]
 8010bd4:	f003 0301 	and.w	r3, r3, #1
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d002      	beq.n	8010be2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010bdc:	4b09      	ldr	r3, [pc, #36]	; (8010c04 <FLASH_WaitForLastOperation+0x7c>)
 8010bde:	2201      	movs	r2, #1
 8010be0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8010be2:	4b08      	ldr	r3, [pc, #32]	; (8010c04 <FLASH_WaitForLastOperation+0x7c>)
 8010be4:	68db      	ldr	r3, [r3, #12]
 8010be6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d003      	beq.n	8010bf6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8010bee:	f000 f8a5 	bl	8010d3c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	e000      	b.n	8010bf8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8010bf6:	2300      	movs	r3, #0
  
}  
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3710      	adds	r7, #16
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}
 8010c00:	20007968 	.word	0x20007968
 8010c04:	40023c00 	.word	0x40023c00

08010c08 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b085      	sub	sp, #20
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010c14:	4b14      	ldr	r3, [pc, #80]	; (8010c68 <FLASH_Program_DoubleWord+0x60>)
 8010c16:	691b      	ldr	r3, [r3, #16]
 8010c18:	4a13      	ldr	r2, [pc, #76]	; (8010c68 <FLASH_Program_DoubleWord+0x60>)
 8010c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8010c20:	4b11      	ldr	r3, [pc, #68]	; (8010c68 <FLASH_Program_DoubleWord+0x60>)
 8010c22:	691b      	ldr	r3, [r3, #16]
 8010c24:	4a10      	ldr	r2, [pc, #64]	; (8010c68 <FLASH_Program_DoubleWord+0x60>)
 8010c26:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8010c2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010c2c:	4b0e      	ldr	r3, [pc, #56]	; (8010c68 <FLASH_Program_DoubleWord+0x60>)
 8010c2e:	691b      	ldr	r3, [r3, #16]
 8010c30:	4a0d      	ldr	r2, [pc, #52]	; (8010c68 <FLASH_Program_DoubleWord+0x60>)
 8010c32:	f043 0301 	orr.w	r3, r3, #1
 8010c36:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	683a      	ldr	r2, [r7, #0]
 8010c3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8010c3e:	f3bf 8f6f 	isb	sy
}
 8010c42:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8010c44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c48:	f04f 0200 	mov.w	r2, #0
 8010c4c:	f04f 0300 	mov.w	r3, #0
 8010c50:	000a      	movs	r2, r1
 8010c52:	2300      	movs	r3, #0
 8010c54:	68f9      	ldr	r1, [r7, #12]
 8010c56:	3104      	adds	r1, #4
 8010c58:	4613      	mov	r3, r2
 8010c5a:	600b      	str	r3, [r1, #0]
}
 8010c5c:	bf00      	nop
 8010c5e:	3714      	adds	r7, #20
 8010c60:	46bd      	mov	sp, r7
 8010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c66:	4770      	bx	lr
 8010c68:	40023c00 	.word	0x40023c00

08010c6c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8010c6c:	b480      	push	{r7}
 8010c6e:	b083      	sub	sp, #12
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010c76:	4b0d      	ldr	r3, [pc, #52]	; (8010cac <FLASH_Program_Word+0x40>)
 8010c78:	691b      	ldr	r3, [r3, #16]
 8010c7a:	4a0c      	ldr	r2, [pc, #48]	; (8010cac <FLASH_Program_Word+0x40>)
 8010c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8010c82:	4b0a      	ldr	r3, [pc, #40]	; (8010cac <FLASH_Program_Word+0x40>)
 8010c84:	691b      	ldr	r3, [r3, #16]
 8010c86:	4a09      	ldr	r2, [pc, #36]	; (8010cac <FLASH_Program_Word+0x40>)
 8010c88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010c8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010c8e:	4b07      	ldr	r3, [pc, #28]	; (8010cac <FLASH_Program_Word+0x40>)
 8010c90:	691b      	ldr	r3, [r3, #16]
 8010c92:	4a06      	ldr	r2, [pc, #24]	; (8010cac <FLASH_Program_Word+0x40>)
 8010c94:	f043 0301 	orr.w	r3, r3, #1
 8010c98:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	683a      	ldr	r2, [r7, #0]
 8010c9e:	601a      	str	r2, [r3, #0]
}
 8010ca0:	bf00      	nop
 8010ca2:	370c      	adds	r7, #12
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010caa:	4770      	bx	lr
 8010cac:	40023c00 	.word	0x40023c00

08010cb0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b083      	sub	sp, #12
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	460b      	mov	r3, r1
 8010cba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010cbc:	4b0d      	ldr	r3, [pc, #52]	; (8010cf4 <FLASH_Program_HalfWord+0x44>)
 8010cbe:	691b      	ldr	r3, [r3, #16]
 8010cc0:	4a0c      	ldr	r2, [pc, #48]	; (8010cf4 <FLASH_Program_HalfWord+0x44>)
 8010cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010cc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8010cc8:	4b0a      	ldr	r3, [pc, #40]	; (8010cf4 <FLASH_Program_HalfWord+0x44>)
 8010cca:	691b      	ldr	r3, [r3, #16]
 8010ccc:	4a09      	ldr	r2, [pc, #36]	; (8010cf4 <FLASH_Program_HalfWord+0x44>)
 8010cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010cd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010cd4:	4b07      	ldr	r3, [pc, #28]	; (8010cf4 <FLASH_Program_HalfWord+0x44>)
 8010cd6:	691b      	ldr	r3, [r3, #16]
 8010cd8:	4a06      	ldr	r2, [pc, #24]	; (8010cf4 <FLASH_Program_HalfWord+0x44>)
 8010cda:	f043 0301 	orr.w	r3, r3, #1
 8010cde:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	887a      	ldrh	r2, [r7, #2]
 8010ce4:	801a      	strh	r2, [r3, #0]
}
 8010ce6:	bf00      	nop
 8010ce8:	370c      	adds	r7, #12
 8010cea:	46bd      	mov	sp, r7
 8010cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf0:	4770      	bx	lr
 8010cf2:	bf00      	nop
 8010cf4:	40023c00 	.word	0x40023c00

08010cf8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b083      	sub	sp, #12
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	460b      	mov	r3, r1
 8010d02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010d04:	4b0c      	ldr	r3, [pc, #48]	; (8010d38 <FLASH_Program_Byte+0x40>)
 8010d06:	691b      	ldr	r3, [r3, #16]
 8010d08:	4a0b      	ldr	r2, [pc, #44]	; (8010d38 <FLASH_Program_Byte+0x40>)
 8010d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010d0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8010d10:	4b09      	ldr	r3, [pc, #36]	; (8010d38 <FLASH_Program_Byte+0x40>)
 8010d12:	4a09      	ldr	r2, [pc, #36]	; (8010d38 <FLASH_Program_Byte+0x40>)
 8010d14:	691b      	ldr	r3, [r3, #16]
 8010d16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010d18:	4b07      	ldr	r3, [pc, #28]	; (8010d38 <FLASH_Program_Byte+0x40>)
 8010d1a:	691b      	ldr	r3, [r3, #16]
 8010d1c:	4a06      	ldr	r2, [pc, #24]	; (8010d38 <FLASH_Program_Byte+0x40>)
 8010d1e:	f043 0301 	orr.w	r3, r3, #1
 8010d22:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	78fa      	ldrb	r2, [r7, #3]
 8010d28:	701a      	strb	r2, [r3, #0]
}
 8010d2a:	bf00      	nop
 8010d2c:	370c      	adds	r7, #12
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d34:	4770      	bx	lr
 8010d36:	bf00      	nop
 8010d38:	40023c00 	.word	0x40023c00

08010d3c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8010d3c:	b480      	push	{r7}
 8010d3e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8010d40:	4b2f      	ldr	r3, [pc, #188]	; (8010e00 <FLASH_SetErrorCode+0xc4>)
 8010d42:	68db      	ldr	r3, [r3, #12]
 8010d44:	f003 0310 	and.w	r3, r3, #16
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d008      	beq.n	8010d5e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010d4c:	4b2d      	ldr	r3, [pc, #180]	; (8010e04 <FLASH_SetErrorCode+0xc8>)
 8010d4e:	69db      	ldr	r3, [r3, #28]
 8010d50:	f043 0310 	orr.w	r3, r3, #16
 8010d54:	4a2b      	ldr	r2, [pc, #172]	; (8010e04 <FLASH_SetErrorCode+0xc8>)
 8010d56:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8010d58:	4b29      	ldr	r3, [pc, #164]	; (8010e00 <FLASH_SetErrorCode+0xc4>)
 8010d5a:	2210      	movs	r2, #16
 8010d5c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8010d5e:	4b28      	ldr	r3, [pc, #160]	; (8010e00 <FLASH_SetErrorCode+0xc4>)
 8010d60:	68db      	ldr	r3, [r3, #12]
 8010d62:	f003 0320 	and.w	r3, r3, #32
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d008      	beq.n	8010d7c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8010d6a:	4b26      	ldr	r3, [pc, #152]	; (8010e04 <FLASH_SetErrorCode+0xc8>)
 8010d6c:	69db      	ldr	r3, [r3, #28]
 8010d6e:	f043 0308 	orr.w	r3, r3, #8
 8010d72:	4a24      	ldr	r2, [pc, #144]	; (8010e04 <FLASH_SetErrorCode+0xc8>)
 8010d74:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8010d76:	4b22      	ldr	r3, [pc, #136]	; (8010e00 <FLASH_SetErrorCode+0xc4>)
 8010d78:	2220      	movs	r2, #32
 8010d7a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8010d7c:	4b20      	ldr	r3, [pc, #128]	; (8010e00 <FLASH_SetErrorCode+0xc4>)
 8010d7e:	68db      	ldr	r3, [r3, #12]
 8010d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d008      	beq.n	8010d9a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8010d88:	4b1e      	ldr	r3, [pc, #120]	; (8010e04 <FLASH_SetErrorCode+0xc8>)
 8010d8a:	69db      	ldr	r3, [r3, #28]
 8010d8c:	f043 0304 	orr.w	r3, r3, #4
 8010d90:	4a1c      	ldr	r2, [pc, #112]	; (8010e04 <FLASH_SetErrorCode+0xc8>)
 8010d92:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8010d94:	4b1a      	ldr	r3, [pc, #104]	; (8010e00 <FLASH_SetErrorCode+0xc4>)
 8010d96:	2240      	movs	r2, #64	; 0x40
 8010d98:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8010d9a:	4b19      	ldr	r3, [pc, #100]	; (8010e00 <FLASH_SetErrorCode+0xc4>)
 8010d9c:	68db      	ldr	r3, [r3, #12]
 8010d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d008      	beq.n	8010db8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8010da6:	4b17      	ldr	r3, [pc, #92]	; (8010e04 <FLASH_SetErrorCode+0xc8>)
 8010da8:	69db      	ldr	r3, [r3, #28]
 8010daa:	f043 0302 	orr.w	r3, r3, #2
 8010dae:	4a15      	ldr	r2, [pc, #84]	; (8010e04 <FLASH_SetErrorCode+0xc8>)
 8010db0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8010db2:	4b13      	ldr	r3, [pc, #76]	; (8010e00 <FLASH_SetErrorCode+0xc4>)
 8010db4:	2280      	movs	r2, #128	; 0x80
 8010db6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8010db8:	4b11      	ldr	r3, [pc, #68]	; (8010e00 <FLASH_SetErrorCode+0xc4>)
 8010dba:	68db      	ldr	r3, [r3, #12]
 8010dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d009      	beq.n	8010dd8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8010dc4:	4b0f      	ldr	r3, [pc, #60]	; (8010e04 <FLASH_SetErrorCode+0xc8>)
 8010dc6:	69db      	ldr	r3, [r3, #28]
 8010dc8:	f043 0301 	orr.w	r3, r3, #1
 8010dcc:	4a0d      	ldr	r2, [pc, #52]	; (8010e04 <FLASH_SetErrorCode+0xc8>)
 8010dce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8010dd0:	4b0b      	ldr	r3, [pc, #44]	; (8010e00 <FLASH_SetErrorCode+0xc4>)
 8010dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010dd6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8010dd8:	4b09      	ldr	r3, [pc, #36]	; (8010e00 <FLASH_SetErrorCode+0xc4>)
 8010dda:	68db      	ldr	r3, [r3, #12]
 8010ddc:	f003 0302 	and.w	r3, r3, #2
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d008      	beq.n	8010df6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8010de4:	4b07      	ldr	r3, [pc, #28]	; (8010e04 <FLASH_SetErrorCode+0xc8>)
 8010de6:	69db      	ldr	r3, [r3, #28]
 8010de8:	f043 0320 	orr.w	r3, r3, #32
 8010dec:	4a05      	ldr	r2, [pc, #20]	; (8010e04 <FLASH_SetErrorCode+0xc8>)
 8010dee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8010df0:	4b03      	ldr	r3, [pc, #12]	; (8010e00 <FLASH_SetErrorCode+0xc4>)
 8010df2:	2202      	movs	r2, #2
 8010df4:	60da      	str	r2, [r3, #12]
  }
}
 8010df6:	bf00      	nop
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfe:	4770      	bx	lr
 8010e00:	40023c00 	.word	0x40023c00
 8010e04:	20007968 	.word	0x20007968

08010e08 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010e12:	2301      	movs	r3, #1
 8010e14:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8010e16:	2300      	movs	r3, #0
 8010e18:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010e1a:	4b31      	ldr	r3, [pc, #196]	; (8010ee0 <HAL_FLASHEx_Erase+0xd8>)
 8010e1c:	7e1b      	ldrb	r3, [r3, #24]
 8010e1e:	2b01      	cmp	r3, #1
 8010e20:	d101      	bne.n	8010e26 <HAL_FLASHEx_Erase+0x1e>
 8010e22:	2302      	movs	r3, #2
 8010e24:	e058      	b.n	8010ed8 <HAL_FLASHEx_Erase+0xd0>
 8010e26:	4b2e      	ldr	r3, [pc, #184]	; (8010ee0 <HAL_FLASHEx_Erase+0xd8>)
 8010e28:	2201      	movs	r2, #1
 8010e2a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010e2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010e30:	f7ff feaa 	bl	8010b88 <FLASH_WaitForLastOperation>
 8010e34:	4603      	mov	r3, r0
 8010e36:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8010e38:	7bfb      	ldrb	r3, [r7, #15]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d148      	bne.n	8010ed0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	f04f 32ff 	mov.w	r2, #4294967295
 8010e44:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	2b01      	cmp	r3, #1
 8010e4c:	d115      	bne.n	8010e7a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	691b      	ldr	r3, [r3, #16]
 8010e52:	b2da      	uxtb	r2, r3
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	685b      	ldr	r3, [r3, #4]
 8010e58:	4619      	mov	r1, r3
 8010e5a:	4610      	mov	r0, r2
 8010e5c:	f000 f844 	bl	8010ee8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010e60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010e64:	f7ff fe90 	bl	8010b88 <FLASH_WaitForLastOperation>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8010e6c:	4b1d      	ldr	r3, [pc, #116]	; (8010ee4 <HAL_FLASHEx_Erase+0xdc>)
 8010e6e:	691b      	ldr	r3, [r3, #16]
 8010e70:	4a1c      	ldr	r2, [pc, #112]	; (8010ee4 <HAL_FLASHEx_Erase+0xdc>)
 8010e72:	f023 0304 	bic.w	r3, r3, #4
 8010e76:	6113      	str	r3, [r2, #16]
 8010e78:	e028      	b.n	8010ecc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	689b      	ldr	r3, [r3, #8]
 8010e7e:	60bb      	str	r3, [r7, #8]
 8010e80:	e01c      	b.n	8010ebc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	691b      	ldr	r3, [r3, #16]
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	4619      	mov	r1, r3
 8010e8a:	68b8      	ldr	r0, [r7, #8]
 8010e8c:	f000 f850 	bl	8010f30 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010e90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010e94:	f7ff fe78 	bl	8010b88 <FLASH_WaitForLastOperation>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8010e9c:	4b11      	ldr	r3, [pc, #68]	; (8010ee4 <HAL_FLASHEx_Erase+0xdc>)
 8010e9e:	691b      	ldr	r3, [r3, #16]
 8010ea0:	4a10      	ldr	r2, [pc, #64]	; (8010ee4 <HAL_FLASHEx_Erase+0xdc>)
 8010ea2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8010ea6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8010ea8:	7bfb      	ldrb	r3, [r7, #15]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d003      	beq.n	8010eb6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	68ba      	ldr	r2, [r7, #8]
 8010eb2:	601a      	str	r2, [r3, #0]
          break;
 8010eb4:	e00a      	b.n	8010ecc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	3301      	adds	r3, #1
 8010eba:	60bb      	str	r3, [r7, #8]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	68da      	ldr	r2, [r3, #12]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	689b      	ldr	r3, [r3, #8]
 8010ec4:	4413      	add	r3, r2
 8010ec6:	68ba      	ldr	r2, [r7, #8]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d3da      	bcc.n	8010e82 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8010ecc:	f000 f878 	bl	8010fc0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010ed0:	4b03      	ldr	r3, [pc, #12]	; (8010ee0 <HAL_FLASHEx_Erase+0xd8>)
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	761a      	strb	r2, [r3, #24]

  return status;
 8010ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3710      	adds	r7, #16
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	20007968 	.word	0x20007968
 8010ee4:	40023c00 	.word	0x40023c00

08010ee8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b083      	sub	sp, #12
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	4603      	mov	r3, r0
 8010ef0:	6039      	str	r1, [r7, #0]
 8010ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010ef4:	4b0d      	ldr	r3, [pc, #52]	; (8010f2c <FLASH_MassErase+0x44>)
 8010ef6:	691b      	ldr	r3, [r3, #16]
 8010ef8:	4a0c      	ldr	r2, [pc, #48]	; (8010f2c <FLASH_MassErase+0x44>)
 8010efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010efe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8010f00:	4b0a      	ldr	r3, [pc, #40]	; (8010f2c <FLASH_MassErase+0x44>)
 8010f02:	691b      	ldr	r3, [r3, #16]
 8010f04:	4a09      	ldr	r2, [pc, #36]	; (8010f2c <FLASH_MassErase+0x44>)
 8010f06:	f043 0304 	orr.w	r3, r3, #4
 8010f0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8010f0c:	4b07      	ldr	r3, [pc, #28]	; (8010f2c <FLASH_MassErase+0x44>)
 8010f0e:	691a      	ldr	r2, [r3, #16]
 8010f10:	79fb      	ldrb	r3, [r7, #7]
 8010f12:	021b      	lsls	r3, r3, #8
 8010f14:	4313      	orrs	r3, r2
 8010f16:	4a05      	ldr	r2, [pc, #20]	; (8010f2c <FLASH_MassErase+0x44>)
 8010f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010f1c:	6113      	str	r3, [r2, #16]
}
 8010f1e:	bf00      	nop
 8010f20:	370c      	adds	r7, #12
 8010f22:	46bd      	mov	sp, r7
 8010f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f28:	4770      	bx	lr
 8010f2a:	bf00      	nop
 8010f2c:	40023c00 	.word	0x40023c00

08010f30 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8010f30:	b480      	push	{r7}
 8010f32:	b085      	sub	sp, #20
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	460b      	mov	r3, r1
 8010f3a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8010f40:	78fb      	ldrb	r3, [r7, #3]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d102      	bne.n	8010f4c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8010f46:	2300      	movs	r3, #0
 8010f48:	60fb      	str	r3, [r7, #12]
 8010f4a:	e010      	b.n	8010f6e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8010f4c:	78fb      	ldrb	r3, [r7, #3]
 8010f4e:	2b01      	cmp	r3, #1
 8010f50:	d103      	bne.n	8010f5a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8010f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f56:	60fb      	str	r3, [r7, #12]
 8010f58:	e009      	b.n	8010f6e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8010f5a:	78fb      	ldrb	r3, [r7, #3]
 8010f5c:	2b02      	cmp	r3, #2
 8010f5e:	d103      	bne.n	8010f68 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8010f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f64:	60fb      	str	r3, [r7, #12]
 8010f66:	e002      	b.n	8010f6e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8010f68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010f6c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010f6e:	4b13      	ldr	r3, [pc, #76]	; (8010fbc <FLASH_Erase_Sector+0x8c>)
 8010f70:	691b      	ldr	r3, [r3, #16]
 8010f72:	4a12      	ldr	r2, [pc, #72]	; (8010fbc <FLASH_Erase_Sector+0x8c>)
 8010f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010f78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8010f7a:	4b10      	ldr	r3, [pc, #64]	; (8010fbc <FLASH_Erase_Sector+0x8c>)
 8010f7c:	691a      	ldr	r2, [r3, #16]
 8010f7e:	490f      	ldr	r1, [pc, #60]	; (8010fbc <FLASH_Erase_Sector+0x8c>)
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	4313      	orrs	r3, r2
 8010f84:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8010f86:	4b0d      	ldr	r3, [pc, #52]	; (8010fbc <FLASH_Erase_Sector+0x8c>)
 8010f88:	691b      	ldr	r3, [r3, #16]
 8010f8a:	4a0c      	ldr	r2, [pc, #48]	; (8010fbc <FLASH_Erase_Sector+0x8c>)
 8010f8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8010f90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8010f92:	4b0a      	ldr	r3, [pc, #40]	; (8010fbc <FLASH_Erase_Sector+0x8c>)
 8010f94:	691a      	ldr	r2, [r3, #16]
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	00db      	lsls	r3, r3, #3
 8010f9a:	4313      	orrs	r3, r2
 8010f9c:	4a07      	ldr	r2, [pc, #28]	; (8010fbc <FLASH_Erase_Sector+0x8c>)
 8010f9e:	f043 0302 	orr.w	r3, r3, #2
 8010fa2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8010fa4:	4b05      	ldr	r3, [pc, #20]	; (8010fbc <FLASH_Erase_Sector+0x8c>)
 8010fa6:	691b      	ldr	r3, [r3, #16]
 8010fa8:	4a04      	ldr	r2, [pc, #16]	; (8010fbc <FLASH_Erase_Sector+0x8c>)
 8010faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010fae:	6113      	str	r3, [r2, #16]
}
 8010fb0:	bf00      	nop
 8010fb2:	3714      	adds	r7, #20
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fba:	4770      	bx	lr
 8010fbc:	40023c00 	.word	0x40023c00

08010fc0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8010fc4:	4b20      	ldr	r3, [pc, #128]	; (8011048 <FLASH_FlushCaches+0x88>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d017      	beq.n	8011000 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8010fd0:	4b1d      	ldr	r3, [pc, #116]	; (8011048 <FLASH_FlushCaches+0x88>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	4a1c      	ldr	r2, [pc, #112]	; (8011048 <FLASH_FlushCaches+0x88>)
 8010fd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010fda:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8010fdc:	4b1a      	ldr	r3, [pc, #104]	; (8011048 <FLASH_FlushCaches+0x88>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	4a19      	ldr	r2, [pc, #100]	; (8011048 <FLASH_FlushCaches+0x88>)
 8010fe2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010fe6:	6013      	str	r3, [r2, #0]
 8010fe8:	4b17      	ldr	r3, [pc, #92]	; (8011048 <FLASH_FlushCaches+0x88>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	4a16      	ldr	r2, [pc, #88]	; (8011048 <FLASH_FlushCaches+0x88>)
 8010fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ff2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010ff4:	4b14      	ldr	r3, [pc, #80]	; (8011048 <FLASH_FlushCaches+0x88>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	4a13      	ldr	r2, [pc, #76]	; (8011048 <FLASH_FlushCaches+0x88>)
 8010ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010ffe:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8011000:	4b11      	ldr	r3, [pc, #68]	; (8011048 <FLASH_FlushCaches+0x88>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011008:	2b00      	cmp	r3, #0
 801100a:	d017      	beq.n	801103c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 801100c:	4b0e      	ldr	r3, [pc, #56]	; (8011048 <FLASH_FlushCaches+0x88>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	4a0d      	ldr	r2, [pc, #52]	; (8011048 <FLASH_FlushCaches+0x88>)
 8011012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011016:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8011018:	4b0b      	ldr	r3, [pc, #44]	; (8011048 <FLASH_FlushCaches+0x88>)
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	4a0a      	ldr	r2, [pc, #40]	; (8011048 <FLASH_FlushCaches+0x88>)
 801101e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011022:	6013      	str	r3, [r2, #0]
 8011024:	4b08      	ldr	r3, [pc, #32]	; (8011048 <FLASH_FlushCaches+0x88>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	4a07      	ldr	r2, [pc, #28]	; (8011048 <FLASH_FlushCaches+0x88>)
 801102a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801102e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8011030:	4b05      	ldr	r3, [pc, #20]	; (8011048 <FLASH_FlushCaches+0x88>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	4a04      	ldr	r2, [pc, #16]	; (8011048 <FLASH_FlushCaches+0x88>)
 8011036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801103a:	6013      	str	r3, [r2, #0]
  }
}
 801103c:	bf00      	nop
 801103e:	46bd      	mov	sp, r7
 8011040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop
 8011048:	40023c00 	.word	0x40023c00

0801104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801104c:	b480      	push	{r7}
 801104e:	b089      	sub	sp, #36	; 0x24
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011056:	2300      	movs	r3, #0
 8011058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801105a:	2300      	movs	r3, #0
 801105c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801105e:	2300      	movs	r3, #0
 8011060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011062:	2300      	movs	r3, #0
 8011064:	61fb      	str	r3, [r7, #28]
 8011066:	e159      	b.n	801131c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011068:	2201      	movs	r2, #1
 801106a:	69fb      	ldr	r3, [r7, #28]
 801106c:	fa02 f303 	lsl.w	r3, r2, r3
 8011070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	697a      	ldr	r2, [r7, #20]
 8011078:	4013      	ands	r3, r2
 801107a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801107c:	693a      	ldr	r2, [r7, #16]
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	429a      	cmp	r2, r3
 8011082:	f040 8148 	bne.w	8011316 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	f003 0303 	and.w	r3, r3, #3
 801108e:	2b01      	cmp	r3, #1
 8011090:	d005      	beq.n	801109e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801109a:	2b02      	cmp	r3, #2
 801109c:	d130      	bne.n	8011100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	689b      	ldr	r3, [r3, #8]
 80110a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80110a4:	69fb      	ldr	r3, [r7, #28]
 80110a6:	005b      	lsls	r3, r3, #1
 80110a8:	2203      	movs	r2, #3
 80110aa:	fa02 f303 	lsl.w	r3, r2, r3
 80110ae:	43db      	mvns	r3, r3
 80110b0:	69ba      	ldr	r2, [r7, #24]
 80110b2:	4013      	ands	r3, r2
 80110b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	68da      	ldr	r2, [r3, #12]
 80110ba:	69fb      	ldr	r3, [r7, #28]
 80110bc:	005b      	lsls	r3, r3, #1
 80110be:	fa02 f303 	lsl.w	r3, r2, r3
 80110c2:	69ba      	ldr	r2, [r7, #24]
 80110c4:	4313      	orrs	r3, r2
 80110c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	69ba      	ldr	r2, [r7, #24]
 80110cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80110d4:	2201      	movs	r2, #1
 80110d6:	69fb      	ldr	r3, [r7, #28]
 80110d8:	fa02 f303 	lsl.w	r3, r2, r3
 80110dc:	43db      	mvns	r3, r3
 80110de:	69ba      	ldr	r2, [r7, #24]
 80110e0:	4013      	ands	r3, r2
 80110e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	091b      	lsrs	r3, r3, #4
 80110ea:	f003 0201 	and.w	r2, r3, #1
 80110ee:	69fb      	ldr	r3, [r7, #28]
 80110f0:	fa02 f303 	lsl.w	r3, r2, r3
 80110f4:	69ba      	ldr	r2, [r7, #24]
 80110f6:	4313      	orrs	r3, r2
 80110f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	69ba      	ldr	r2, [r7, #24]
 80110fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	f003 0303 	and.w	r3, r3, #3
 8011108:	2b03      	cmp	r3, #3
 801110a:	d017      	beq.n	801113c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011112:	69fb      	ldr	r3, [r7, #28]
 8011114:	005b      	lsls	r3, r3, #1
 8011116:	2203      	movs	r2, #3
 8011118:	fa02 f303 	lsl.w	r3, r2, r3
 801111c:	43db      	mvns	r3, r3
 801111e:	69ba      	ldr	r2, [r7, #24]
 8011120:	4013      	ands	r3, r2
 8011122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	689a      	ldr	r2, [r3, #8]
 8011128:	69fb      	ldr	r3, [r7, #28]
 801112a:	005b      	lsls	r3, r3, #1
 801112c:	fa02 f303 	lsl.w	r3, r2, r3
 8011130:	69ba      	ldr	r2, [r7, #24]
 8011132:	4313      	orrs	r3, r2
 8011134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	69ba      	ldr	r2, [r7, #24]
 801113a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	685b      	ldr	r3, [r3, #4]
 8011140:	f003 0303 	and.w	r3, r3, #3
 8011144:	2b02      	cmp	r3, #2
 8011146:	d123      	bne.n	8011190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011148:	69fb      	ldr	r3, [r7, #28]
 801114a:	08da      	lsrs	r2, r3, #3
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	3208      	adds	r2, #8
 8011150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011156:	69fb      	ldr	r3, [r7, #28]
 8011158:	f003 0307 	and.w	r3, r3, #7
 801115c:	009b      	lsls	r3, r3, #2
 801115e:	220f      	movs	r2, #15
 8011160:	fa02 f303 	lsl.w	r3, r2, r3
 8011164:	43db      	mvns	r3, r3
 8011166:	69ba      	ldr	r2, [r7, #24]
 8011168:	4013      	ands	r3, r2
 801116a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	691a      	ldr	r2, [r3, #16]
 8011170:	69fb      	ldr	r3, [r7, #28]
 8011172:	f003 0307 	and.w	r3, r3, #7
 8011176:	009b      	lsls	r3, r3, #2
 8011178:	fa02 f303 	lsl.w	r3, r2, r3
 801117c:	69ba      	ldr	r2, [r7, #24]
 801117e:	4313      	orrs	r3, r2
 8011180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011182:	69fb      	ldr	r3, [r7, #28]
 8011184:	08da      	lsrs	r2, r3, #3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	3208      	adds	r2, #8
 801118a:	69b9      	ldr	r1, [r7, #24]
 801118c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011196:	69fb      	ldr	r3, [r7, #28]
 8011198:	005b      	lsls	r3, r3, #1
 801119a:	2203      	movs	r2, #3
 801119c:	fa02 f303 	lsl.w	r3, r2, r3
 80111a0:	43db      	mvns	r3, r3
 80111a2:	69ba      	ldr	r2, [r7, #24]
 80111a4:	4013      	ands	r3, r2
 80111a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	f003 0203 	and.w	r2, r3, #3
 80111b0:	69fb      	ldr	r3, [r7, #28]
 80111b2:	005b      	lsls	r3, r3, #1
 80111b4:	fa02 f303 	lsl.w	r3, r2, r3
 80111b8:	69ba      	ldr	r2, [r7, #24]
 80111ba:	4313      	orrs	r3, r2
 80111bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	69ba      	ldr	r2, [r7, #24]
 80111c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	685b      	ldr	r3, [r3, #4]
 80111c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	f000 80a2 	beq.w	8011316 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80111d2:	2300      	movs	r3, #0
 80111d4:	60fb      	str	r3, [r7, #12]
 80111d6:	4b57      	ldr	r3, [pc, #348]	; (8011334 <HAL_GPIO_Init+0x2e8>)
 80111d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111da:	4a56      	ldr	r2, [pc, #344]	; (8011334 <HAL_GPIO_Init+0x2e8>)
 80111dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80111e0:	6453      	str	r3, [r2, #68]	; 0x44
 80111e2:	4b54      	ldr	r3, [pc, #336]	; (8011334 <HAL_GPIO_Init+0x2e8>)
 80111e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80111ea:	60fb      	str	r3, [r7, #12]
 80111ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80111ee:	4a52      	ldr	r2, [pc, #328]	; (8011338 <HAL_GPIO_Init+0x2ec>)
 80111f0:	69fb      	ldr	r3, [r7, #28]
 80111f2:	089b      	lsrs	r3, r3, #2
 80111f4:	3302      	adds	r3, #2
 80111f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	f003 0303 	and.w	r3, r3, #3
 8011202:	009b      	lsls	r3, r3, #2
 8011204:	220f      	movs	r2, #15
 8011206:	fa02 f303 	lsl.w	r3, r2, r3
 801120a:	43db      	mvns	r3, r3
 801120c:	69ba      	ldr	r2, [r7, #24]
 801120e:	4013      	ands	r3, r2
 8011210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4a49      	ldr	r2, [pc, #292]	; (801133c <HAL_GPIO_Init+0x2f0>)
 8011216:	4293      	cmp	r3, r2
 8011218:	d019      	beq.n	801124e <HAL_GPIO_Init+0x202>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	4a48      	ldr	r2, [pc, #288]	; (8011340 <HAL_GPIO_Init+0x2f4>)
 801121e:	4293      	cmp	r3, r2
 8011220:	d013      	beq.n	801124a <HAL_GPIO_Init+0x1fe>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	4a47      	ldr	r2, [pc, #284]	; (8011344 <HAL_GPIO_Init+0x2f8>)
 8011226:	4293      	cmp	r3, r2
 8011228:	d00d      	beq.n	8011246 <HAL_GPIO_Init+0x1fa>
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	4a46      	ldr	r2, [pc, #280]	; (8011348 <HAL_GPIO_Init+0x2fc>)
 801122e:	4293      	cmp	r3, r2
 8011230:	d007      	beq.n	8011242 <HAL_GPIO_Init+0x1f6>
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	4a45      	ldr	r2, [pc, #276]	; (801134c <HAL_GPIO_Init+0x300>)
 8011236:	4293      	cmp	r3, r2
 8011238:	d101      	bne.n	801123e <HAL_GPIO_Init+0x1f2>
 801123a:	2304      	movs	r3, #4
 801123c:	e008      	b.n	8011250 <HAL_GPIO_Init+0x204>
 801123e:	2307      	movs	r3, #7
 8011240:	e006      	b.n	8011250 <HAL_GPIO_Init+0x204>
 8011242:	2303      	movs	r3, #3
 8011244:	e004      	b.n	8011250 <HAL_GPIO_Init+0x204>
 8011246:	2302      	movs	r3, #2
 8011248:	e002      	b.n	8011250 <HAL_GPIO_Init+0x204>
 801124a:	2301      	movs	r3, #1
 801124c:	e000      	b.n	8011250 <HAL_GPIO_Init+0x204>
 801124e:	2300      	movs	r3, #0
 8011250:	69fa      	ldr	r2, [r7, #28]
 8011252:	f002 0203 	and.w	r2, r2, #3
 8011256:	0092      	lsls	r2, r2, #2
 8011258:	4093      	lsls	r3, r2
 801125a:	69ba      	ldr	r2, [r7, #24]
 801125c:	4313      	orrs	r3, r2
 801125e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011260:	4935      	ldr	r1, [pc, #212]	; (8011338 <HAL_GPIO_Init+0x2ec>)
 8011262:	69fb      	ldr	r3, [r7, #28]
 8011264:	089b      	lsrs	r3, r3, #2
 8011266:	3302      	adds	r3, #2
 8011268:	69ba      	ldr	r2, [r7, #24]
 801126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801126e:	4b38      	ldr	r3, [pc, #224]	; (8011350 <HAL_GPIO_Init+0x304>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	43db      	mvns	r3, r3
 8011278:	69ba      	ldr	r2, [r7, #24]
 801127a:	4013      	ands	r3, r2
 801127c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011286:	2b00      	cmp	r3, #0
 8011288:	d003      	beq.n	8011292 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801128a:	69ba      	ldr	r2, [r7, #24]
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	4313      	orrs	r3, r2
 8011290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011292:	4a2f      	ldr	r2, [pc, #188]	; (8011350 <HAL_GPIO_Init+0x304>)
 8011294:	69bb      	ldr	r3, [r7, #24]
 8011296:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8011298:	4b2d      	ldr	r3, [pc, #180]	; (8011350 <HAL_GPIO_Init+0x304>)
 801129a:	685b      	ldr	r3, [r3, #4]
 801129c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801129e:	693b      	ldr	r3, [r7, #16]
 80112a0:	43db      	mvns	r3, r3
 80112a2:	69ba      	ldr	r2, [r7, #24]
 80112a4:	4013      	ands	r3, r2
 80112a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	685b      	ldr	r3, [r3, #4]
 80112ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d003      	beq.n	80112bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80112b4:	69ba      	ldr	r2, [r7, #24]
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	4313      	orrs	r3, r2
 80112ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80112bc:	4a24      	ldr	r2, [pc, #144]	; (8011350 <HAL_GPIO_Init+0x304>)
 80112be:	69bb      	ldr	r3, [r7, #24]
 80112c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80112c2:	4b23      	ldr	r3, [pc, #140]	; (8011350 <HAL_GPIO_Init+0x304>)
 80112c4:	689b      	ldr	r3, [r3, #8]
 80112c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80112c8:	693b      	ldr	r3, [r7, #16]
 80112ca:	43db      	mvns	r3, r3
 80112cc:	69ba      	ldr	r2, [r7, #24]
 80112ce:	4013      	ands	r3, r2
 80112d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d003      	beq.n	80112e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80112de:	69ba      	ldr	r2, [r7, #24]
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	4313      	orrs	r3, r2
 80112e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80112e6:	4a1a      	ldr	r2, [pc, #104]	; (8011350 <HAL_GPIO_Init+0x304>)
 80112e8:	69bb      	ldr	r3, [r7, #24]
 80112ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80112ec:	4b18      	ldr	r3, [pc, #96]	; (8011350 <HAL_GPIO_Init+0x304>)
 80112ee:	68db      	ldr	r3, [r3, #12]
 80112f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	43db      	mvns	r3, r3
 80112f6:	69ba      	ldr	r2, [r7, #24]
 80112f8:	4013      	ands	r3, r2
 80112fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011304:	2b00      	cmp	r3, #0
 8011306:	d003      	beq.n	8011310 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8011308:	69ba      	ldr	r2, [r7, #24]
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	4313      	orrs	r3, r2
 801130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011310:	4a0f      	ldr	r2, [pc, #60]	; (8011350 <HAL_GPIO_Init+0x304>)
 8011312:	69bb      	ldr	r3, [r7, #24]
 8011314:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011316:	69fb      	ldr	r3, [r7, #28]
 8011318:	3301      	adds	r3, #1
 801131a:	61fb      	str	r3, [r7, #28]
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	2b0f      	cmp	r3, #15
 8011320:	f67f aea2 	bls.w	8011068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011324:	bf00      	nop
 8011326:	bf00      	nop
 8011328:	3724      	adds	r7, #36	; 0x24
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr
 8011332:	bf00      	nop
 8011334:	40023800 	.word	0x40023800
 8011338:	40013800 	.word	0x40013800
 801133c:	40020000 	.word	0x40020000
 8011340:	40020400 	.word	0x40020400
 8011344:	40020800 	.word	0x40020800
 8011348:	40020c00 	.word	0x40020c00
 801134c:	40021000 	.word	0x40021000
 8011350:	40013c00 	.word	0x40013c00

08011354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011354:	b480      	push	{r7}
 8011356:	b085      	sub	sp, #20
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	460b      	mov	r3, r1
 801135e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	691a      	ldr	r2, [r3, #16]
 8011364:	887b      	ldrh	r3, [r7, #2]
 8011366:	4013      	ands	r3, r2
 8011368:	2b00      	cmp	r3, #0
 801136a:	d002      	beq.n	8011372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801136c:	2301      	movs	r3, #1
 801136e:	73fb      	strb	r3, [r7, #15]
 8011370:	e001      	b.n	8011376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011372:	2300      	movs	r3, #0
 8011374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011376:	7bfb      	ldrb	r3, [r7, #15]
}
 8011378:	4618      	mov	r0, r3
 801137a:	3714      	adds	r7, #20
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr

08011384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011384:	b480      	push	{r7}
 8011386:	b083      	sub	sp, #12
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	460b      	mov	r3, r1
 801138e:	807b      	strh	r3, [r7, #2]
 8011390:	4613      	mov	r3, r2
 8011392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011394:	787b      	ldrb	r3, [r7, #1]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d003      	beq.n	80113a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801139a:	887a      	ldrh	r2, [r7, #2]
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80113a0:	e003      	b.n	80113aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80113a2:	887b      	ldrh	r3, [r7, #2]
 80113a4:	041a      	lsls	r2, r3, #16
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	619a      	str	r2, [r3, #24]
}
 80113aa:	bf00      	nop
 80113ac:	370c      	adds	r7, #12
 80113ae:	46bd      	mov	sp, r7
 80113b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b4:	4770      	bx	lr
	...

080113b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	4603      	mov	r3, r0
 80113c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80113c2:	4b08      	ldr	r3, [pc, #32]	; (80113e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80113c4:	695a      	ldr	r2, [r3, #20]
 80113c6:	88fb      	ldrh	r3, [r7, #6]
 80113c8:	4013      	ands	r3, r2
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d006      	beq.n	80113dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80113ce:	4a05      	ldr	r2, [pc, #20]	; (80113e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80113d0:	88fb      	ldrh	r3, [r7, #6]
 80113d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80113d4:	88fb      	ldrh	r3, [r7, #6]
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7fc ffdc 	bl	800e394 <HAL_GPIO_EXTI_Callback>
  }
}
 80113dc:	bf00      	nop
 80113de:	3708      	adds	r7, #8
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	40013c00 	.word	0x40013c00

080113e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80113e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113ea:	b08f      	sub	sp, #60	; 0x3c
 80113ec:	af0a      	add	r7, sp, #40	; 0x28
 80113ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d101      	bne.n	80113fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80113f6:	2301      	movs	r3, #1
 80113f8:	e10f      	b.n	801161a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8011406:	b2db      	uxtb	r3, r3
 8011408:	2b00      	cmp	r3, #0
 801140a:	d106      	bne.n	801141a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2200      	movs	r2, #0
 8011410:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8011414:	6878      	ldr	r0, [r7, #4]
 8011416:	f00a fe6d 	bl	801c0f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2203      	movs	r2, #3
 801141e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801142a:	2b00      	cmp	r3, #0
 801142c:	d102      	bne.n	8011434 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2200      	movs	r2, #0
 8011432:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4618      	mov	r0, r3
 801143a:	f003 fdc4 	bl	8014fc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	603b      	str	r3, [r7, #0]
 8011444:	687e      	ldr	r6, [r7, #4]
 8011446:	466d      	mov	r5, sp
 8011448:	f106 0410 	add.w	r4, r6, #16
 801144c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801144e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011454:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011458:	e885 0003 	stmia.w	r5, {r0, r1}
 801145c:	1d33      	adds	r3, r6, #4
 801145e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011460:	6838      	ldr	r0, [r7, #0]
 8011462:	f003 fc9b 	bl	8014d9c <USB_CoreInit>
 8011466:	4603      	mov	r3, r0
 8011468:	2b00      	cmp	r3, #0
 801146a:	d005      	beq.n	8011478 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2202      	movs	r2, #2
 8011470:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8011474:	2301      	movs	r3, #1
 8011476:	e0d0      	b.n	801161a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2100      	movs	r1, #0
 801147e:	4618      	mov	r0, r3
 8011480:	f003 fdb2 	bl	8014fe8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011484:	2300      	movs	r3, #0
 8011486:	73fb      	strb	r3, [r7, #15]
 8011488:	e04a      	b.n	8011520 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801148a:	7bfa      	ldrb	r2, [r7, #15]
 801148c:	6879      	ldr	r1, [r7, #4]
 801148e:	4613      	mov	r3, r2
 8011490:	00db      	lsls	r3, r3, #3
 8011492:	1a9b      	subs	r3, r3, r2
 8011494:	009b      	lsls	r3, r3, #2
 8011496:	440b      	add	r3, r1
 8011498:	333d      	adds	r3, #61	; 0x3d
 801149a:	2201      	movs	r2, #1
 801149c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801149e:	7bfa      	ldrb	r2, [r7, #15]
 80114a0:	6879      	ldr	r1, [r7, #4]
 80114a2:	4613      	mov	r3, r2
 80114a4:	00db      	lsls	r3, r3, #3
 80114a6:	1a9b      	subs	r3, r3, r2
 80114a8:	009b      	lsls	r3, r3, #2
 80114aa:	440b      	add	r3, r1
 80114ac:	333c      	adds	r3, #60	; 0x3c
 80114ae:	7bfa      	ldrb	r2, [r7, #15]
 80114b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80114b2:	7bfa      	ldrb	r2, [r7, #15]
 80114b4:	7bfb      	ldrb	r3, [r7, #15]
 80114b6:	b298      	uxth	r0, r3
 80114b8:	6879      	ldr	r1, [r7, #4]
 80114ba:	4613      	mov	r3, r2
 80114bc:	00db      	lsls	r3, r3, #3
 80114be:	1a9b      	subs	r3, r3, r2
 80114c0:	009b      	lsls	r3, r3, #2
 80114c2:	440b      	add	r3, r1
 80114c4:	3342      	adds	r3, #66	; 0x42
 80114c6:	4602      	mov	r2, r0
 80114c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80114ca:	7bfa      	ldrb	r2, [r7, #15]
 80114cc:	6879      	ldr	r1, [r7, #4]
 80114ce:	4613      	mov	r3, r2
 80114d0:	00db      	lsls	r3, r3, #3
 80114d2:	1a9b      	subs	r3, r3, r2
 80114d4:	009b      	lsls	r3, r3, #2
 80114d6:	440b      	add	r3, r1
 80114d8:	333f      	adds	r3, #63	; 0x3f
 80114da:	2200      	movs	r2, #0
 80114dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80114de:	7bfa      	ldrb	r2, [r7, #15]
 80114e0:	6879      	ldr	r1, [r7, #4]
 80114e2:	4613      	mov	r3, r2
 80114e4:	00db      	lsls	r3, r3, #3
 80114e6:	1a9b      	subs	r3, r3, r2
 80114e8:	009b      	lsls	r3, r3, #2
 80114ea:	440b      	add	r3, r1
 80114ec:	3344      	adds	r3, #68	; 0x44
 80114ee:	2200      	movs	r2, #0
 80114f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80114f2:	7bfa      	ldrb	r2, [r7, #15]
 80114f4:	6879      	ldr	r1, [r7, #4]
 80114f6:	4613      	mov	r3, r2
 80114f8:	00db      	lsls	r3, r3, #3
 80114fa:	1a9b      	subs	r3, r3, r2
 80114fc:	009b      	lsls	r3, r3, #2
 80114fe:	440b      	add	r3, r1
 8011500:	3348      	adds	r3, #72	; 0x48
 8011502:	2200      	movs	r2, #0
 8011504:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8011506:	7bfa      	ldrb	r2, [r7, #15]
 8011508:	6879      	ldr	r1, [r7, #4]
 801150a:	4613      	mov	r3, r2
 801150c:	00db      	lsls	r3, r3, #3
 801150e:	1a9b      	subs	r3, r3, r2
 8011510:	009b      	lsls	r3, r3, #2
 8011512:	440b      	add	r3, r1
 8011514:	3350      	adds	r3, #80	; 0x50
 8011516:	2200      	movs	r2, #0
 8011518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801151a:	7bfb      	ldrb	r3, [r7, #15]
 801151c:	3301      	adds	r3, #1
 801151e:	73fb      	strb	r3, [r7, #15]
 8011520:	7bfa      	ldrb	r2, [r7, #15]
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	429a      	cmp	r2, r3
 8011528:	d3af      	bcc.n	801148a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801152a:	2300      	movs	r3, #0
 801152c:	73fb      	strb	r3, [r7, #15]
 801152e:	e044      	b.n	80115ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8011530:	7bfa      	ldrb	r2, [r7, #15]
 8011532:	6879      	ldr	r1, [r7, #4]
 8011534:	4613      	mov	r3, r2
 8011536:	00db      	lsls	r3, r3, #3
 8011538:	1a9b      	subs	r3, r3, r2
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	440b      	add	r3, r1
 801153e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8011542:	2200      	movs	r2, #0
 8011544:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8011546:	7bfa      	ldrb	r2, [r7, #15]
 8011548:	6879      	ldr	r1, [r7, #4]
 801154a:	4613      	mov	r3, r2
 801154c:	00db      	lsls	r3, r3, #3
 801154e:	1a9b      	subs	r3, r3, r2
 8011550:	009b      	lsls	r3, r3, #2
 8011552:	440b      	add	r3, r1
 8011554:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8011558:	7bfa      	ldrb	r2, [r7, #15]
 801155a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801155c:	7bfa      	ldrb	r2, [r7, #15]
 801155e:	6879      	ldr	r1, [r7, #4]
 8011560:	4613      	mov	r3, r2
 8011562:	00db      	lsls	r3, r3, #3
 8011564:	1a9b      	subs	r3, r3, r2
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	440b      	add	r3, r1
 801156a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801156e:	2200      	movs	r2, #0
 8011570:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8011572:	7bfa      	ldrb	r2, [r7, #15]
 8011574:	6879      	ldr	r1, [r7, #4]
 8011576:	4613      	mov	r3, r2
 8011578:	00db      	lsls	r3, r3, #3
 801157a:	1a9b      	subs	r3, r3, r2
 801157c:	009b      	lsls	r3, r3, #2
 801157e:	440b      	add	r3, r1
 8011580:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8011584:	2200      	movs	r2, #0
 8011586:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8011588:	7bfa      	ldrb	r2, [r7, #15]
 801158a:	6879      	ldr	r1, [r7, #4]
 801158c:	4613      	mov	r3, r2
 801158e:	00db      	lsls	r3, r3, #3
 8011590:	1a9b      	subs	r3, r3, r2
 8011592:	009b      	lsls	r3, r3, #2
 8011594:	440b      	add	r3, r1
 8011596:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801159a:	2200      	movs	r2, #0
 801159c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801159e:	7bfa      	ldrb	r2, [r7, #15]
 80115a0:	6879      	ldr	r1, [r7, #4]
 80115a2:	4613      	mov	r3, r2
 80115a4:	00db      	lsls	r3, r3, #3
 80115a6:	1a9b      	subs	r3, r3, r2
 80115a8:	009b      	lsls	r3, r3, #2
 80115aa:	440b      	add	r3, r1
 80115ac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80115b0:	2200      	movs	r2, #0
 80115b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80115b4:	7bfb      	ldrb	r3, [r7, #15]
 80115b6:	3301      	adds	r3, #1
 80115b8:	73fb      	strb	r3, [r7, #15]
 80115ba:	7bfa      	ldrb	r2, [r7, #15]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d3b5      	bcc.n	8011530 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	603b      	str	r3, [r7, #0]
 80115ca:	687e      	ldr	r6, [r7, #4]
 80115cc:	466d      	mov	r5, sp
 80115ce:	f106 0410 	add.w	r4, r6, #16
 80115d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80115d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80115da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80115de:	e885 0003 	stmia.w	r5, {r0, r1}
 80115e2:	1d33      	adds	r3, r6, #4
 80115e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80115e6:	6838      	ldr	r0, [r7, #0]
 80115e8:	f003 fd4a 	bl	8015080 <USB_DevInit>
 80115ec:	4603      	mov	r3, r0
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d005      	beq.n	80115fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2202      	movs	r2, #2
 80115f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80115fa:	2301      	movs	r3, #1
 80115fc:	e00d      	b.n	801161a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	2200      	movs	r2, #0
 8011602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2201      	movs	r2, #1
 801160a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	4618      	mov	r0, r3
 8011614:	f004 fdc6 	bl	80161a4 <USB_DevDisconnect>

  return HAL_OK;
 8011618:	2300      	movs	r3, #0
}
 801161a:	4618      	mov	r0, r3
 801161c:	3714      	adds	r7, #20
 801161e:	46bd      	mov	sp, r7
 8011620:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011622 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8011622:	b580      	push	{r7, lr}
 8011624:	b084      	sub	sp, #16
 8011626:	af00      	add	r7, sp, #0
 8011628:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011636:	2b01      	cmp	r3, #1
 8011638:	d101      	bne.n	801163e <HAL_PCD_Start+0x1c>
 801163a:	2302      	movs	r3, #2
 801163c:	e020      	b.n	8011680 <HAL_PCD_Start+0x5e>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2201      	movs	r2, #1
 8011642:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801164a:	2b01      	cmp	r3, #1
 801164c:	d109      	bne.n	8011662 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8011652:	2b01      	cmp	r3, #1
 8011654:	d005      	beq.n	8011662 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801165a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	4618      	mov	r0, r3
 8011668:	f003 fc9c 	bl	8014fa4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4618      	mov	r0, r3
 8011672:	f004 fd76 	bl	8016162 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2200      	movs	r2, #0
 801167a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801167e:	2300      	movs	r3, #0
}
 8011680:	4618      	mov	r0, r3
 8011682:	3710      	adds	r7, #16
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}

08011688 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8011688:	b590      	push	{r4, r7, lr}
 801168a:	b08d      	sub	sp, #52	; 0x34
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011696:	6a3b      	ldr	r3, [r7, #32]
 8011698:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	4618      	mov	r0, r3
 80116a0:	f004 fe34 	bl	801630c <USB_GetMode>
 80116a4:	4603      	mov	r3, r0
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	f040 839d 	bne.w	8011de6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	4618      	mov	r0, r3
 80116b2:	f004 fd98 	bl	80161e6 <USB_ReadInterrupts>
 80116b6:	4603      	mov	r3, r0
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	f000 8393 	beq.w	8011de4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	4618      	mov	r0, r3
 80116c4:	f004 fd8f 	bl	80161e6 <USB_ReadInterrupts>
 80116c8:	4603      	mov	r3, r0
 80116ca:	f003 0302 	and.w	r3, r3, #2
 80116ce:	2b02      	cmp	r3, #2
 80116d0:	d107      	bne.n	80116e2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	695a      	ldr	r2, [r3, #20]
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f002 0202 	and.w	r2, r2, #2
 80116e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	4618      	mov	r0, r3
 80116e8:	f004 fd7d 	bl	80161e6 <USB_ReadInterrupts>
 80116ec:	4603      	mov	r3, r0
 80116ee:	f003 0310 	and.w	r3, r3, #16
 80116f2:	2b10      	cmp	r3, #16
 80116f4:	d161      	bne.n	80117ba <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	699a      	ldr	r2, [r3, #24]
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f022 0210 	bic.w	r2, r2, #16
 8011704:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8011706:	6a3b      	ldr	r3, [r7, #32]
 8011708:	6a1b      	ldr	r3, [r3, #32]
 801170a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 801170c:	69bb      	ldr	r3, [r7, #24]
 801170e:	f003 020f 	and.w	r2, r3, #15
 8011712:	4613      	mov	r3, r2
 8011714:	00db      	lsls	r3, r3, #3
 8011716:	1a9b      	subs	r3, r3, r2
 8011718:	009b      	lsls	r3, r3, #2
 801171a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	4413      	add	r3, r2
 8011722:	3304      	adds	r3, #4
 8011724:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8011726:	69bb      	ldr	r3, [r7, #24]
 8011728:	0c5b      	lsrs	r3, r3, #17
 801172a:	f003 030f 	and.w	r3, r3, #15
 801172e:	2b02      	cmp	r3, #2
 8011730:	d124      	bne.n	801177c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8011732:	69ba      	ldr	r2, [r7, #24]
 8011734:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8011738:	4013      	ands	r3, r2
 801173a:	2b00      	cmp	r3, #0
 801173c:	d035      	beq.n	80117aa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8011742:	69bb      	ldr	r3, [r7, #24]
 8011744:	091b      	lsrs	r3, r3, #4
 8011746:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8011748:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801174c:	b29b      	uxth	r3, r3
 801174e:	461a      	mov	r2, r3
 8011750:	6a38      	ldr	r0, [r7, #32]
 8011752:	f004 fbb4 	bl	8015ebe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	68da      	ldr	r2, [r3, #12]
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	091b      	lsrs	r3, r3, #4
 801175e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011762:	441a      	add	r2, r3
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	699a      	ldr	r2, [r3, #24]
 801176c:	69bb      	ldr	r3, [r7, #24]
 801176e:	091b      	lsrs	r3, r3, #4
 8011770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011774:	441a      	add	r2, r3
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	619a      	str	r2, [r3, #24]
 801177a:	e016      	b.n	80117aa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 801177c:	69bb      	ldr	r3, [r7, #24]
 801177e:	0c5b      	lsrs	r3, r3, #17
 8011780:	f003 030f 	and.w	r3, r3, #15
 8011784:	2b06      	cmp	r3, #6
 8011786:	d110      	bne.n	80117aa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801178e:	2208      	movs	r2, #8
 8011790:	4619      	mov	r1, r3
 8011792:	6a38      	ldr	r0, [r7, #32]
 8011794:	f004 fb93 	bl	8015ebe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	699a      	ldr	r2, [r3, #24]
 801179c:	69bb      	ldr	r3, [r7, #24]
 801179e:	091b      	lsrs	r3, r3, #4
 80117a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80117a4:	441a      	add	r2, r3
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	699a      	ldr	r2, [r3, #24]
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	f042 0210 	orr.w	r2, r2, #16
 80117b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	4618      	mov	r0, r3
 80117c0:	f004 fd11 	bl	80161e6 <USB_ReadInterrupts>
 80117c4:	4603      	mov	r3, r0
 80117c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80117ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80117ce:	d16e      	bne.n	80118ae <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80117d0:	2300      	movs	r3, #0
 80117d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	4618      	mov	r0, r3
 80117da:	f004 fd17 	bl	801620c <USB_ReadDevAllOutEpInterrupt>
 80117de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80117e0:	e062      	b.n	80118a8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80117e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e4:	f003 0301 	and.w	r3, r3, #1
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d057      	beq.n	801189c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117f2:	b2d2      	uxtb	r2, r2
 80117f4:	4611      	mov	r1, r2
 80117f6:	4618      	mov	r0, r3
 80117f8:	f004 fd3c 	bl	8016274 <USB_ReadDevOutEPInterrupt>
 80117fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	f003 0301 	and.w	r3, r3, #1
 8011804:	2b00      	cmp	r3, #0
 8011806:	d00c      	beq.n	8011822 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8011808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180a:	015a      	lsls	r2, r3, #5
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	4413      	add	r3, r2
 8011810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011814:	461a      	mov	r2, r3
 8011816:	2301      	movs	r3, #1
 8011818:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801181a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f000 fdb1 	bl	8012384 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	f003 0308 	and.w	r3, r3, #8
 8011828:	2b00      	cmp	r3, #0
 801182a:	d00c      	beq.n	8011846 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182e:	015a      	lsls	r2, r3, #5
 8011830:	69fb      	ldr	r3, [r7, #28]
 8011832:	4413      	add	r3, r2
 8011834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011838:	461a      	mov	r2, r3
 801183a:	2308      	movs	r3, #8
 801183c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 801183e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f000 feab 	bl	801259c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8011846:	693b      	ldr	r3, [r7, #16]
 8011848:	f003 0310 	and.w	r3, r3, #16
 801184c:	2b00      	cmp	r3, #0
 801184e:	d008      	beq.n	8011862 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8011850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011852:	015a      	lsls	r2, r3, #5
 8011854:	69fb      	ldr	r3, [r7, #28]
 8011856:	4413      	add	r3, r2
 8011858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801185c:	461a      	mov	r2, r3
 801185e:	2310      	movs	r3, #16
 8011860:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8011862:	693b      	ldr	r3, [r7, #16]
 8011864:	f003 0320 	and.w	r3, r3, #32
 8011868:	2b00      	cmp	r3, #0
 801186a:	d008      	beq.n	801187e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186e:	015a      	lsls	r2, r3, #5
 8011870:	69fb      	ldr	r3, [r7, #28]
 8011872:	4413      	add	r3, r2
 8011874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011878:	461a      	mov	r2, r3
 801187a:	2320      	movs	r3, #32
 801187c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801187e:	693b      	ldr	r3, [r7, #16]
 8011880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011884:	2b00      	cmp	r3, #0
 8011886:	d009      	beq.n	801189c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8011888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188a:	015a      	lsls	r2, r3, #5
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	4413      	add	r3, r2
 8011890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011894:	461a      	mov	r2, r3
 8011896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801189a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189e:	3301      	adds	r3, #1
 80118a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80118a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118a4:	085b      	lsrs	r3, r3, #1
 80118a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80118a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d199      	bne.n	80117e2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	4618      	mov	r0, r3
 80118b4:	f004 fc97 	bl	80161e6 <USB_ReadInterrupts>
 80118b8:	4603      	mov	r3, r0
 80118ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80118be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80118c2:	f040 80c0 	bne.w	8011a46 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	4618      	mov	r0, r3
 80118cc:	f004 fcb8 	bl	8016240 <USB_ReadDevAllInEpInterrupt>
 80118d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80118d2:	2300      	movs	r3, #0
 80118d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80118d6:	e0b2      	b.n	8011a3e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80118d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118da:	f003 0301 	and.w	r3, r3, #1
 80118de:	2b00      	cmp	r3, #0
 80118e0:	f000 80a7 	beq.w	8011a32 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118ea:	b2d2      	uxtb	r2, r2
 80118ec:	4611      	mov	r1, r2
 80118ee:	4618      	mov	r0, r3
 80118f0:	f004 fcde 	bl	80162b0 <USB_ReadDevInEPInterrupt>
 80118f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	f003 0301 	and.w	r3, r3, #1
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d057      	beq.n	80119b0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8011900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011902:	f003 030f 	and.w	r3, r3, #15
 8011906:	2201      	movs	r2, #1
 8011908:	fa02 f303 	lsl.w	r3, r2, r3
 801190c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801190e:	69fb      	ldr	r3, [r7, #28]
 8011910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	43db      	mvns	r3, r3
 801191a:	69f9      	ldr	r1, [r7, #28]
 801191c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011920:	4013      	ands	r3, r2
 8011922:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8011924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011926:	015a      	lsls	r2, r3, #5
 8011928:	69fb      	ldr	r3, [r7, #28]
 801192a:	4413      	add	r3, r2
 801192c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011930:	461a      	mov	r2, r3
 8011932:	2301      	movs	r3, #1
 8011934:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	691b      	ldr	r3, [r3, #16]
 801193a:	2b01      	cmp	r3, #1
 801193c:	d132      	bne.n	80119a4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 801193e:	6879      	ldr	r1, [r7, #4]
 8011940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011942:	4613      	mov	r3, r2
 8011944:	00db      	lsls	r3, r3, #3
 8011946:	1a9b      	subs	r3, r3, r2
 8011948:	009b      	lsls	r3, r3, #2
 801194a:	440b      	add	r3, r1
 801194c:	3348      	adds	r3, #72	; 0x48
 801194e:	6819      	ldr	r1, [r3, #0]
 8011950:	6878      	ldr	r0, [r7, #4]
 8011952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011954:	4613      	mov	r3, r2
 8011956:	00db      	lsls	r3, r3, #3
 8011958:	1a9b      	subs	r3, r3, r2
 801195a:	009b      	lsls	r3, r3, #2
 801195c:	4403      	add	r3, r0
 801195e:	3344      	adds	r3, #68	; 0x44
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	4419      	add	r1, r3
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011968:	4613      	mov	r3, r2
 801196a:	00db      	lsls	r3, r3, #3
 801196c:	1a9b      	subs	r3, r3, r2
 801196e:	009b      	lsls	r3, r3, #2
 8011970:	4403      	add	r3, r0
 8011972:	3348      	adds	r3, #72	; 0x48
 8011974:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8011976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011978:	2b00      	cmp	r3, #0
 801197a:	d113      	bne.n	80119a4 <HAL_PCD_IRQHandler+0x31c>
 801197c:	6879      	ldr	r1, [r7, #4]
 801197e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011980:	4613      	mov	r3, r2
 8011982:	00db      	lsls	r3, r3, #3
 8011984:	1a9b      	subs	r3, r3, r2
 8011986:	009b      	lsls	r3, r3, #2
 8011988:	440b      	add	r3, r1
 801198a:	3350      	adds	r3, #80	; 0x50
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d108      	bne.n	80119a4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6818      	ldr	r0, [r3, #0]
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801199c:	461a      	mov	r2, r3
 801199e:	2101      	movs	r1, #1
 80119a0:	f004 fce6 	bl	8016370 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80119a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	4619      	mov	r1, r3
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f00a fc23 	bl	801c1f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80119b0:	693b      	ldr	r3, [r7, #16]
 80119b2:	f003 0308 	and.w	r3, r3, #8
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d008      	beq.n	80119cc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80119ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119bc:	015a      	lsls	r2, r3, #5
 80119be:	69fb      	ldr	r3, [r7, #28]
 80119c0:	4413      	add	r3, r2
 80119c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119c6:	461a      	mov	r2, r3
 80119c8:	2308      	movs	r3, #8
 80119ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	f003 0310 	and.w	r3, r3, #16
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d008      	beq.n	80119e8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80119d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d8:	015a      	lsls	r2, r3, #5
 80119da:	69fb      	ldr	r3, [r7, #28]
 80119dc:	4413      	add	r3, r2
 80119de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119e2:	461a      	mov	r2, r3
 80119e4:	2310      	movs	r3, #16
 80119e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d008      	beq.n	8011a04 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80119f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f4:	015a      	lsls	r2, r3, #5
 80119f6:	69fb      	ldr	r3, [r7, #28]
 80119f8:	4413      	add	r3, r2
 80119fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119fe:	461a      	mov	r2, r3
 8011a00:	2340      	movs	r3, #64	; 0x40
 8011a02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	f003 0302 	and.w	r3, r3, #2
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d008      	beq.n	8011a20 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8011a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a10:	015a      	lsls	r2, r3, #5
 8011a12:	69fb      	ldr	r3, [r7, #28]
 8011a14:	4413      	add	r3, r2
 8011a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	2302      	movs	r3, #2
 8011a1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d003      	beq.n	8011a32 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8011a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f000 fc1b 	bl	8012268 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8011a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a34:	3301      	adds	r3, #1
 8011a36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8011a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a3a:	085b      	lsrs	r3, r3, #1
 8011a3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8011a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	f47f af49 	bne.w	80118d8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f004 fbcb 	bl	80161e6 <USB_ReadInterrupts>
 8011a50:	4603      	mov	r3, r0
 8011a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011a5a:	d122      	bne.n	8011aa2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8011a5c:	69fb      	ldr	r3, [r7, #28]
 8011a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	69fa      	ldr	r2, [r7, #28]
 8011a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011a6a:	f023 0301 	bic.w	r3, r3, #1
 8011a6e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d108      	bne.n	8011a8c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8011a82:	2100      	movs	r1, #0
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f000 fe27 	bl	80126d8 <HAL_PCDEx_LPM_Callback>
 8011a8a:	e002      	b.n	8011a92 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f00a fc1f 	bl	801c2d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	695a      	ldr	r2, [r3, #20]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8011aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f004 fb9d 	bl	80161e6 <USB_ReadInterrupts>
 8011aac:	4603      	mov	r3, r0
 8011aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ab6:	d112      	bne.n	8011ade <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8011ab8:	69fb      	ldr	r3, [r7, #28]
 8011aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011abe:	689b      	ldr	r3, [r3, #8]
 8011ac0:	f003 0301 	and.w	r3, r3, #1
 8011ac4:	2b01      	cmp	r3, #1
 8011ac6:	d102      	bne.n	8011ace <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f00a fbdb 	bl	801c284 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	695a      	ldr	r2, [r3, #20]
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8011adc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f004 fb7f 	bl	80161e6 <USB_ReadInterrupts>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011af2:	f040 80c7 	bne.w	8011c84 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	69fa      	ldr	r2, [r7, #28]
 8011b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011b04:	f023 0301 	bic.w	r3, r3, #1
 8011b08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2110      	movs	r1, #16
 8011b10:	4618      	mov	r0, r3
 8011b12:	f003 fc19 	bl	8015348 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011b16:	2300      	movs	r3, #0
 8011b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b1a:	e056      	b.n	8011bca <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8011b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b1e:	015a      	lsls	r2, r3, #5
 8011b20:	69fb      	ldr	r3, [r7, #28]
 8011b22:	4413      	add	r3, r2
 8011b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b28:	461a      	mov	r2, r3
 8011b2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011b2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b32:	015a      	lsls	r2, r3, #5
 8011b34:	69fb      	ldr	r3, [r7, #28]
 8011b36:	4413      	add	r3, r2
 8011b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b40:	0151      	lsls	r1, r2, #5
 8011b42:	69fa      	ldr	r2, [r7, #28]
 8011b44:	440a      	add	r2, r1
 8011b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011b4e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b52:	015a      	lsls	r2, r3, #5
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	4413      	add	r3, r2
 8011b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b60:	0151      	lsls	r1, r2, #5
 8011b62:	69fa      	ldr	r2, [r7, #28]
 8011b64:	440a      	add	r2, r1
 8011b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011b6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8011b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b72:	015a      	lsls	r2, r3, #5
 8011b74:	69fb      	ldr	r3, [r7, #28]
 8011b76:	4413      	add	r3, r2
 8011b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011b82:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b86:	015a      	lsls	r2, r3, #5
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	4413      	add	r3, r2
 8011b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b94:	0151      	lsls	r1, r2, #5
 8011b96:	69fa      	ldr	r2, [r7, #28]
 8011b98:	440a      	add	r2, r1
 8011b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011ba2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba6:	015a      	lsls	r2, r3, #5
 8011ba8:	69fb      	ldr	r3, [r7, #28]
 8011baa:	4413      	add	r3, r2
 8011bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bb4:	0151      	lsls	r1, r2, #5
 8011bb6:	69fa      	ldr	r2, [r7, #28]
 8011bb8:	440a      	add	r2, r1
 8011bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011bbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011bc2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc6:	3301      	adds	r3, #1
 8011bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	685b      	ldr	r3, [r3, #4]
 8011bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d3a3      	bcc.n	8011b1c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8011bd4:	69fb      	ldr	r3, [r7, #28]
 8011bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011bda:	69db      	ldr	r3, [r3, #28]
 8011bdc:	69fa      	ldr	r2, [r7, #28]
 8011bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011be2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8011be6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d016      	beq.n	8011c1e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8011bf0:	69fb      	ldr	r3, [r7, #28]
 8011bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011bfa:	69fa      	ldr	r2, [r7, #28]
 8011bfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011c00:	f043 030b 	orr.w	r3, r3, #11
 8011c04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8011c08:	69fb      	ldr	r3, [r7, #28]
 8011c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c10:	69fa      	ldr	r2, [r7, #28]
 8011c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011c16:	f043 030b 	orr.w	r3, r3, #11
 8011c1a:	6453      	str	r3, [r2, #68]	; 0x44
 8011c1c:	e015      	b.n	8011c4a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8011c1e:	69fb      	ldr	r3, [r7, #28]
 8011c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c24:	695b      	ldr	r3, [r3, #20]
 8011c26:	69fa      	ldr	r2, [r7, #28]
 8011c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011c30:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8011c34:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8011c36:	69fb      	ldr	r3, [r7, #28]
 8011c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c3c:	691b      	ldr	r3, [r3, #16]
 8011c3e:	69fa      	ldr	r2, [r7, #28]
 8011c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011c44:	f043 030b 	orr.w	r3, r3, #11
 8011c48:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8011c4a:	69fb      	ldr	r3, [r7, #28]
 8011c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	69fa      	ldr	r2, [r7, #28]
 8011c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011c58:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011c5c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6818      	ldr	r0, [r3, #0]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	691b      	ldr	r3, [r3, #16]
 8011c66:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8011c6e:	461a      	mov	r2, r3
 8011c70:	f004 fb7e 	bl	8016370 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	695a      	ldr	r2, [r3, #20]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8011c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f004 faac 	bl	80161e6 <USB_ReadInterrupts>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011c98:	d124      	bne.n	8011ce4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f004 fb42 	bl	8016328 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f003 fbaa 	bl	8015402 <USB_GetDevSpeed>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	461a      	mov	r2, r3
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681c      	ldr	r4, [r3, #0]
 8011cba:	f001 f985 	bl	8012fc8 <HAL_RCC_GetHCLKFreq>
 8011cbe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	4620      	mov	r0, r4
 8011cca:	f003 f8c9 	bl	8014e60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f00a fab9 	bl	801c246 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	695a      	ldr	r2, [r3, #20]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8011ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f004 fa7c 	bl	80161e6 <USB_ReadInterrupts>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	f003 0308 	and.w	r3, r3, #8
 8011cf4:	2b08      	cmp	r3, #8
 8011cf6:	d10a      	bne.n	8011d0e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f00a fa96 	bl	801c22a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	695a      	ldr	r2, [r3, #20]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f002 0208 	and.w	r2, r2, #8
 8011d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	4618      	mov	r0, r3
 8011d14:	f004 fa67 	bl	80161e6 <USB_ReadInterrupts>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011d22:	d10f      	bne.n	8011d44 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8011d24:	2300      	movs	r3, #0
 8011d26:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8011d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	4619      	mov	r1, r3
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f00a faee 	bl	801c310 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	695a      	ldr	r2, [r3, #20]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8011d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f004 fa4c 	bl	80161e6 <USB_ReadInterrupts>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011d54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011d58:	d10f      	bne.n	8011d7a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8011d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d60:	b2db      	uxtb	r3, r3
 8011d62:	4619      	mov	r1, r3
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	f00a fac1 	bl	801c2ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	695a      	ldr	r2, [r3, #20]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8011d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f004 fa31 	bl	80161e6 <USB_ReadInterrupts>
 8011d84:	4603      	mov	r3, r0
 8011d86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d8e:	d10a      	bne.n	8011da6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8011d90:	6878      	ldr	r0, [r7, #4]
 8011d92:	f00a facf 	bl	801c334 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	695a      	ldr	r2, [r3, #20]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8011da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	4618      	mov	r0, r3
 8011dac:	f004 fa1b 	bl	80161e6 <USB_ReadInterrupts>
 8011db0:	4603      	mov	r3, r0
 8011db2:	f003 0304 	and.w	r3, r3, #4
 8011db6:	2b04      	cmp	r3, #4
 8011db8:	d115      	bne.n	8011de6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8011dc2:	69bb      	ldr	r3, [r7, #24]
 8011dc4:	f003 0304 	and.w	r3, r3, #4
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d002      	beq.n	8011dd2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f00a fabf 	bl	801c350 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	6859      	ldr	r1, [r3, #4]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	69ba      	ldr	r2, [r7, #24]
 8011dde:	430a      	orrs	r2, r1
 8011de0:	605a      	str	r2, [r3, #4]
 8011de2:	e000      	b.n	8011de6 <HAL_PCD_IRQHandler+0x75e>
      return;
 8011de4:	bf00      	nop
    }
  }
}
 8011de6:	3734      	adds	r7, #52	; 0x34
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd90      	pop	{r4, r7, pc}

08011dec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
 8011df4:	460b      	mov	r3, r1
 8011df6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011dfe:	2b01      	cmp	r3, #1
 8011e00:	d101      	bne.n	8011e06 <HAL_PCD_SetAddress+0x1a>
 8011e02:	2302      	movs	r3, #2
 8011e04:	e013      	b.n	8011e2e <HAL_PCD_SetAddress+0x42>
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2201      	movs	r2, #1
 8011e0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	78fa      	ldrb	r2, [r7, #3]
 8011e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	78fa      	ldrb	r2, [r7, #3]
 8011e1c:	4611      	mov	r1, r2
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f004 f979 	bl	8016116 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2200      	movs	r2, #0
 8011e28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8011e2c:	2300      	movs	r3, #0
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3708      	adds	r7, #8
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}

08011e36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8011e36:	b580      	push	{r7, lr}
 8011e38:	b084      	sub	sp, #16
 8011e3a:	af00      	add	r7, sp, #0
 8011e3c:	6078      	str	r0, [r7, #4]
 8011e3e:	4608      	mov	r0, r1
 8011e40:	4611      	mov	r1, r2
 8011e42:	461a      	mov	r2, r3
 8011e44:	4603      	mov	r3, r0
 8011e46:	70fb      	strb	r3, [r7, #3]
 8011e48:	460b      	mov	r3, r1
 8011e4a:	803b      	strh	r3, [r7, #0]
 8011e4c:	4613      	mov	r3, r2
 8011e4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8011e50:	2300      	movs	r3, #0
 8011e52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	da0f      	bge.n	8011e7c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011e5c:	78fb      	ldrb	r3, [r7, #3]
 8011e5e:	f003 020f 	and.w	r2, r3, #15
 8011e62:	4613      	mov	r3, r2
 8011e64:	00db      	lsls	r3, r3, #3
 8011e66:	1a9b      	subs	r3, r3, r2
 8011e68:	009b      	lsls	r3, r3, #2
 8011e6a:	3338      	adds	r3, #56	; 0x38
 8011e6c:	687a      	ldr	r2, [r7, #4]
 8011e6e:	4413      	add	r3, r2
 8011e70:	3304      	adds	r3, #4
 8011e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	2201      	movs	r2, #1
 8011e78:	705a      	strb	r2, [r3, #1]
 8011e7a:	e00f      	b.n	8011e9c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011e7c:	78fb      	ldrb	r3, [r7, #3]
 8011e7e:	f003 020f 	and.w	r2, r3, #15
 8011e82:	4613      	mov	r3, r2
 8011e84:	00db      	lsls	r3, r3, #3
 8011e86:	1a9b      	subs	r3, r3, r2
 8011e88:	009b      	lsls	r3, r3, #2
 8011e8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	4413      	add	r3, r2
 8011e92:	3304      	adds	r3, #4
 8011e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	2200      	movs	r2, #0
 8011e9a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8011e9c:	78fb      	ldrb	r3, [r7, #3]
 8011e9e:	f003 030f 	and.w	r3, r3, #15
 8011ea2:	b2da      	uxtb	r2, r3
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8011ea8:	883a      	ldrh	r2, [r7, #0]
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	78ba      	ldrb	r2, [r7, #2]
 8011eb2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	785b      	ldrb	r3, [r3, #1]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d004      	beq.n	8011ec6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	781b      	ldrb	r3, [r3, #0]
 8011ec0:	b29a      	uxth	r2, r3
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8011ec6:	78bb      	ldrb	r3, [r7, #2]
 8011ec8:	2b02      	cmp	r3, #2
 8011eca:	d102      	bne.n	8011ed2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011ed8:	2b01      	cmp	r3, #1
 8011eda:	d101      	bne.n	8011ee0 <HAL_PCD_EP_Open+0xaa>
 8011edc:	2302      	movs	r3, #2
 8011ede:	e00e      	b.n	8011efe <HAL_PCD_EP_Open+0xc8>
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2201      	movs	r2, #1
 8011ee4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	68f9      	ldr	r1, [r7, #12]
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f003 faac 	bl	801544c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8011efc:	7afb      	ldrb	r3, [r7, #11]
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	3710      	adds	r7, #16
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}

08011f06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011f06:	b580      	push	{r7, lr}
 8011f08:	b084      	sub	sp, #16
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
 8011f0e:	460b      	mov	r3, r1
 8011f10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	da0f      	bge.n	8011f3a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011f1a:	78fb      	ldrb	r3, [r7, #3]
 8011f1c:	f003 020f 	and.w	r2, r3, #15
 8011f20:	4613      	mov	r3, r2
 8011f22:	00db      	lsls	r3, r3, #3
 8011f24:	1a9b      	subs	r3, r3, r2
 8011f26:	009b      	lsls	r3, r3, #2
 8011f28:	3338      	adds	r3, #56	; 0x38
 8011f2a:	687a      	ldr	r2, [r7, #4]
 8011f2c:	4413      	add	r3, r2
 8011f2e:	3304      	adds	r3, #4
 8011f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	2201      	movs	r2, #1
 8011f36:	705a      	strb	r2, [r3, #1]
 8011f38:	e00f      	b.n	8011f5a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011f3a:	78fb      	ldrb	r3, [r7, #3]
 8011f3c:	f003 020f 	and.w	r2, r3, #15
 8011f40:	4613      	mov	r3, r2
 8011f42:	00db      	lsls	r3, r3, #3
 8011f44:	1a9b      	subs	r3, r3, r2
 8011f46:	009b      	lsls	r3, r3, #2
 8011f48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8011f4c:	687a      	ldr	r2, [r7, #4]
 8011f4e:	4413      	add	r3, r2
 8011f50:	3304      	adds	r3, #4
 8011f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	2200      	movs	r2, #0
 8011f58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8011f5a:	78fb      	ldrb	r3, [r7, #3]
 8011f5c:	f003 030f 	and.w	r3, r3, #15
 8011f60:	b2da      	uxtb	r2, r3
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011f6c:	2b01      	cmp	r3, #1
 8011f6e:	d101      	bne.n	8011f74 <HAL_PCD_EP_Close+0x6e>
 8011f70:	2302      	movs	r3, #2
 8011f72:	e00e      	b.n	8011f92 <HAL_PCD_EP_Close+0x8c>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2201      	movs	r2, #1
 8011f78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	68f9      	ldr	r1, [r7, #12]
 8011f82:	4618      	mov	r0, r3
 8011f84:	f003 faea 	bl	801555c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8011f90:	2300      	movs	r3, #0
}
 8011f92:	4618      	mov	r0, r3
 8011f94:	3710      	adds	r7, #16
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bd80      	pop	{r7, pc}

08011f9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011f9a:	b580      	push	{r7, lr}
 8011f9c:	b086      	sub	sp, #24
 8011f9e:	af00      	add	r7, sp, #0
 8011fa0:	60f8      	str	r0, [r7, #12]
 8011fa2:	607a      	str	r2, [r7, #4]
 8011fa4:	603b      	str	r3, [r7, #0]
 8011fa6:	460b      	mov	r3, r1
 8011fa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011faa:	7afb      	ldrb	r3, [r7, #11]
 8011fac:	f003 020f 	and.w	r2, r3, #15
 8011fb0:	4613      	mov	r3, r2
 8011fb2:	00db      	lsls	r3, r3, #3
 8011fb4:	1a9b      	subs	r3, r3, r2
 8011fb6:	009b      	lsls	r3, r3, #2
 8011fb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8011fbc:	68fa      	ldr	r2, [r7, #12]
 8011fbe:	4413      	add	r3, r2
 8011fc0:	3304      	adds	r3, #4
 8011fc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	687a      	ldr	r2, [r7, #4]
 8011fc8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8011fca:	697b      	ldr	r3, [r7, #20]
 8011fcc:	683a      	ldr	r2, [r7, #0]
 8011fce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	2200      	movs	r2, #0
 8011fda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011fdc:	7afb      	ldrb	r3, [r7, #11]
 8011fde:	f003 030f 	and.w	r3, r3, #15
 8011fe2:	b2da      	uxtb	r2, r3
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	691b      	ldr	r3, [r3, #16]
 8011fec:	2b01      	cmp	r3, #1
 8011fee:	d102      	bne.n	8011ff6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8011ff0:	687a      	ldr	r2, [r7, #4]
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011ff6:	7afb      	ldrb	r3, [r7, #11]
 8011ff8:	f003 030f 	and.w	r3, r3, #15
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d109      	bne.n	8012014 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	6818      	ldr	r0, [r3, #0]
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	691b      	ldr	r3, [r3, #16]
 8012008:	b2db      	uxtb	r3, r3
 801200a:	461a      	mov	r2, r3
 801200c:	6979      	ldr	r1, [r7, #20]
 801200e:	f003 fdc5 	bl	8015b9c <USB_EP0StartXfer>
 8012012:	e008      	b.n	8012026 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	6818      	ldr	r0, [r3, #0]
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	691b      	ldr	r3, [r3, #16]
 801201c:	b2db      	uxtb	r3, r3
 801201e:	461a      	mov	r2, r3
 8012020:	6979      	ldr	r1, [r7, #20]
 8012022:	f003 fb77 	bl	8015714 <USB_EPStartXfer>
  }

  return HAL_OK;
 8012026:	2300      	movs	r3, #0
}
 8012028:	4618      	mov	r0, r3
 801202a:	3718      	adds	r7, #24
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}

08012030 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012030:	b480      	push	{r7}
 8012032:	b083      	sub	sp, #12
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	460b      	mov	r3, r1
 801203a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801203c:	78fb      	ldrb	r3, [r7, #3]
 801203e:	f003 020f 	and.w	r2, r3, #15
 8012042:	6879      	ldr	r1, [r7, #4]
 8012044:	4613      	mov	r3, r2
 8012046:	00db      	lsls	r3, r3, #3
 8012048:	1a9b      	subs	r3, r3, r2
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	440b      	add	r3, r1
 801204e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012052:	681b      	ldr	r3, [r3, #0]
}
 8012054:	4618      	mov	r0, r3
 8012056:	370c      	adds	r7, #12
 8012058:	46bd      	mov	sp, r7
 801205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205e:	4770      	bx	lr

08012060 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b086      	sub	sp, #24
 8012064:	af00      	add	r7, sp, #0
 8012066:	60f8      	str	r0, [r7, #12]
 8012068:	607a      	str	r2, [r7, #4]
 801206a:	603b      	str	r3, [r7, #0]
 801206c:	460b      	mov	r3, r1
 801206e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012070:	7afb      	ldrb	r3, [r7, #11]
 8012072:	f003 020f 	and.w	r2, r3, #15
 8012076:	4613      	mov	r3, r2
 8012078:	00db      	lsls	r3, r3, #3
 801207a:	1a9b      	subs	r3, r3, r2
 801207c:	009b      	lsls	r3, r3, #2
 801207e:	3338      	adds	r3, #56	; 0x38
 8012080:	68fa      	ldr	r2, [r7, #12]
 8012082:	4413      	add	r3, r2
 8012084:	3304      	adds	r3, #4
 8012086:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	687a      	ldr	r2, [r7, #4]
 801208c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	683a      	ldr	r2, [r7, #0]
 8012092:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	2200      	movs	r2, #0
 8012098:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	2201      	movs	r2, #1
 801209e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80120a0:	7afb      	ldrb	r3, [r7, #11]
 80120a2:	f003 030f 	and.w	r3, r3, #15
 80120a6:	b2da      	uxtb	r2, r3
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	691b      	ldr	r3, [r3, #16]
 80120b0:	2b01      	cmp	r3, #1
 80120b2:	d102      	bne.n	80120ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80120b4:	687a      	ldr	r2, [r7, #4]
 80120b6:	697b      	ldr	r3, [r7, #20]
 80120b8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80120ba:	7afb      	ldrb	r3, [r7, #11]
 80120bc:	f003 030f 	and.w	r3, r3, #15
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d109      	bne.n	80120d8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	6818      	ldr	r0, [r3, #0]
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	691b      	ldr	r3, [r3, #16]
 80120cc:	b2db      	uxtb	r3, r3
 80120ce:	461a      	mov	r2, r3
 80120d0:	6979      	ldr	r1, [r7, #20]
 80120d2:	f003 fd63 	bl	8015b9c <USB_EP0StartXfer>
 80120d6:	e008      	b.n	80120ea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	6818      	ldr	r0, [r3, #0]
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	691b      	ldr	r3, [r3, #16]
 80120e0:	b2db      	uxtb	r3, r3
 80120e2:	461a      	mov	r2, r3
 80120e4:	6979      	ldr	r1, [r7, #20]
 80120e6:	f003 fb15 	bl	8015714 <USB_EPStartXfer>
  }

  return HAL_OK;
 80120ea:	2300      	movs	r3, #0
}
 80120ec:	4618      	mov	r0, r3
 80120ee:	3718      	adds	r7, #24
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}

080120f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b084      	sub	sp, #16
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	460b      	mov	r3, r1
 80120fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012100:	78fb      	ldrb	r3, [r7, #3]
 8012102:	f003 020f 	and.w	r2, r3, #15
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	429a      	cmp	r2, r3
 801210c:	d901      	bls.n	8012112 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801210e:	2301      	movs	r3, #1
 8012110:	e050      	b.n	80121b4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012116:	2b00      	cmp	r3, #0
 8012118:	da0f      	bge.n	801213a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801211a:	78fb      	ldrb	r3, [r7, #3]
 801211c:	f003 020f 	and.w	r2, r3, #15
 8012120:	4613      	mov	r3, r2
 8012122:	00db      	lsls	r3, r3, #3
 8012124:	1a9b      	subs	r3, r3, r2
 8012126:	009b      	lsls	r3, r3, #2
 8012128:	3338      	adds	r3, #56	; 0x38
 801212a:	687a      	ldr	r2, [r7, #4]
 801212c:	4413      	add	r3, r2
 801212e:	3304      	adds	r3, #4
 8012130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	2201      	movs	r2, #1
 8012136:	705a      	strb	r2, [r3, #1]
 8012138:	e00d      	b.n	8012156 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801213a:	78fa      	ldrb	r2, [r7, #3]
 801213c:	4613      	mov	r3, r2
 801213e:	00db      	lsls	r3, r3, #3
 8012140:	1a9b      	subs	r3, r3, r2
 8012142:	009b      	lsls	r3, r3, #2
 8012144:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8012148:	687a      	ldr	r2, [r7, #4]
 801214a:	4413      	add	r3, r2
 801214c:	3304      	adds	r3, #4
 801214e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	2200      	movs	r2, #0
 8012154:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	2201      	movs	r2, #1
 801215a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801215c:	78fb      	ldrb	r3, [r7, #3]
 801215e:	f003 030f 	and.w	r3, r3, #15
 8012162:	b2da      	uxtb	r2, r3
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801216e:	2b01      	cmp	r3, #1
 8012170:	d101      	bne.n	8012176 <HAL_PCD_EP_SetStall+0x82>
 8012172:	2302      	movs	r3, #2
 8012174:	e01e      	b.n	80121b4 <HAL_PCD_EP_SetStall+0xc0>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2201      	movs	r2, #1
 801217a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	68f9      	ldr	r1, [r7, #12]
 8012184:	4618      	mov	r0, r3
 8012186:	f003 fef2 	bl	8015f6e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801218a:	78fb      	ldrb	r3, [r7, #3]
 801218c:	f003 030f 	and.w	r3, r3, #15
 8012190:	2b00      	cmp	r3, #0
 8012192:	d10a      	bne.n	80121aa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6818      	ldr	r0, [r3, #0]
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	691b      	ldr	r3, [r3, #16]
 801219c:	b2d9      	uxtb	r1, r3
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80121a4:	461a      	mov	r2, r3
 80121a6:	f004 f8e3 	bl	8016370 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2200      	movs	r2, #0
 80121ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80121b2:	2300      	movs	r3, #0
}
 80121b4:	4618      	mov	r0, r3
 80121b6:	3710      	adds	r7, #16
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}

080121bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b084      	sub	sp, #16
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	460b      	mov	r3, r1
 80121c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80121c8:	78fb      	ldrb	r3, [r7, #3]
 80121ca:	f003 020f 	and.w	r2, r3, #15
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d901      	bls.n	80121da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80121d6:	2301      	movs	r3, #1
 80121d8:	e042      	b.n	8012260 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80121da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	da0f      	bge.n	8012202 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80121e2:	78fb      	ldrb	r3, [r7, #3]
 80121e4:	f003 020f 	and.w	r2, r3, #15
 80121e8:	4613      	mov	r3, r2
 80121ea:	00db      	lsls	r3, r3, #3
 80121ec:	1a9b      	subs	r3, r3, r2
 80121ee:	009b      	lsls	r3, r3, #2
 80121f0:	3338      	adds	r3, #56	; 0x38
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	4413      	add	r3, r2
 80121f6:	3304      	adds	r3, #4
 80121f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	2201      	movs	r2, #1
 80121fe:	705a      	strb	r2, [r3, #1]
 8012200:	e00f      	b.n	8012222 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012202:	78fb      	ldrb	r3, [r7, #3]
 8012204:	f003 020f 	and.w	r2, r3, #15
 8012208:	4613      	mov	r3, r2
 801220a:	00db      	lsls	r3, r3, #3
 801220c:	1a9b      	subs	r3, r3, r2
 801220e:	009b      	lsls	r3, r3, #2
 8012210:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	4413      	add	r3, r2
 8012218:	3304      	adds	r3, #4
 801221a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	2200      	movs	r2, #0
 8012220:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	2200      	movs	r2, #0
 8012226:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012228:	78fb      	ldrb	r3, [r7, #3]
 801222a:	f003 030f 	and.w	r3, r3, #15
 801222e:	b2da      	uxtb	r2, r3
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801223a:	2b01      	cmp	r3, #1
 801223c:	d101      	bne.n	8012242 <HAL_PCD_EP_ClrStall+0x86>
 801223e:	2302      	movs	r3, #2
 8012240:	e00e      	b.n	8012260 <HAL_PCD_EP_ClrStall+0xa4>
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2201      	movs	r2, #1
 8012246:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	68f9      	ldr	r1, [r7, #12]
 8012250:	4618      	mov	r0, r3
 8012252:	f003 fefa 	bl	801604a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2200      	movs	r2, #0
 801225a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801225e:	2300      	movs	r3, #0
}
 8012260:	4618      	mov	r0, r3
 8012262:	3710      	adds	r7, #16
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}

08012268 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b08a      	sub	sp, #40	; 0x28
 801226c:	af02      	add	r7, sp, #8
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801227c:	683a      	ldr	r2, [r7, #0]
 801227e:	4613      	mov	r3, r2
 8012280:	00db      	lsls	r3, r3, #3
 8012282:	1a9b      	subs	r3, r3, r2
 8012284:	009b      	lsls	r3, r3, #2
 8012286:	3338      	adds	r3, #56	; 0x38
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	4413      	add	r3, r2
 801228c:	3304      	adds	r3, #4
 801228e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	699a      	ldr	r2, [r3, #24]
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	695b      	ldr	r3, [r3, #20]
 8012298:	429a      	cmp	r2, r3
 801229a:	d901      	bls.n	80122a0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801229c:	2301      	movs	r3, #1
 801229e:	e06c      	b.n	801237a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	695a      	ldr	r2, [r3, #20]
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	699b      	ldr	r3, [r3, #24]
 80122a8:	1ad3      	subs	r3, r2, r3
 80122aa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	689b      	ldr	r3, [r3, #8]
 80122b0:	69fa      	ldr	r2, [r7, #28]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d902      	bls.n	80122bc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	689b      	ldr	r3, [r3, #8]
 80122ba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80122bc:	69fb      	ldr	r3, [r7, #28]
 80122be:	3303      	adds	r3, #3
 80122c0:	089b      	lsrs	r3, r3, #2
 80122c2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80122c4:	e02b      	b.n	801231e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	695a      	ldr	r2, [r3, #20]
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	699b      	ldr	r3, [r3, #24]
 80122ce:	1ad3      	subs	r3, r2, r3
 80122d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	689b      	ldr	r3, [r3, #8]
 80122d6:	69fa      	ldr	r2, [r7, #28]
 80122d8:	429a      	cmp	r2, r3
 80122da:	d902      	bls.n	80122e2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	689b      	ldr	r3, [r3, #8]
 80122e0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80122e2:	69fb      	ldr	r3, [r7, #28]
 80122e4:	3303      	adds	r3, #3
 80122e6:	089b      	lsrs	r3, r3, #2
 80122e8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	68d9      	ldr	r1, [r3, #12]
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	b2da      	uxtb	r2, r3
 80122f2:	69fb      	ldr	r3, [r7, #28]
 80122f4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80122fa:	b2db      	uxtb	r3, r3
 80122fc:	9300      	str	r3, [sp, #0]
 80122fe:	4603      	mov	r3, r0
 8012300:	6978      	ldr	r0, [r7, #20]
 8012302:	f003 fd9e 	bl	8015e42 <USB_WritePacket>

    ep->xfer_buff  += len;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	68da      	ldr	r2, [r3, #12]
 801230a:	69fb      	ldr	r3, [r7, #28]
 801230c:	441a      	add	r2, r3
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	699a      	ldr	r2, [r3, #24]
 8012316:	69fb      	ldr	r3, [r7, #28]
 8012318:	441a      	add	r2, r3
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	015a      	lsls	r2, r3, #5
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	4413      	add	r3, r2
 8012326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801232a:	699b      	ldr	r3, [r3, #24]
 801232c:	b29b      	uxth	r3, r3
 801232e:	69ba      	ldr	r2, [r7, #24]
 8012330:	429a      	cmp	r2, r3
 8012332:	d809      	bhi.n	8012348 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	699a      	ldr	r2, [r3, #24]
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801233c:	429a      	cmp	r2, r3
 801233e:	d203      	bcs.n	8012348 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	695b      	ldr	r3, [r3, #20]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d1be      	bne.n	80122c6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	695a      	ldr	r2, [r3, #20]
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	699b      	ldr	r3, [r3, #24]
 8012350:	429a      	cmp	r2, r3
 8012352:	d811      	bhi.n	8012378 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8012354:	683b      	ldr	r3, [r7, #0]
 8012356:	f003 030f 	and.w	r3, r3, #15
 801235a:	2201      	movs	r2, #1
 801235c:	fa02 f303 	lsl.w	r3, r2, r3
 8012360:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	43db      	mvns	r3, r3
 801236e:	6939      	ldr	r1, [r7, #16]
 8012370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012374:	4013      	ands	r3, r2
 8012376:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8012378:	2300      	movs	r3, #0
}
 801237a:	4618      	mov	r0, r3
 801237c:	3720      	adds	r7, #32
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
	...

08012384 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b086      	sub	sp, #24
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	333c      	adds	r3, #60	; 0x3c
 801239c:	3304      	adds	r3, #4
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	015a      	lsls	r2, r3, #5
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	4413      	add	r3, r2
 80123aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123ae:	689b      	ldr	r3, [r3, #8]
 80123b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	691b      	ldr	r3, [r3, #16]
 80123b6:	2b01      	cmp	r3, #1
 80123b8:	f040 80a0 	bne.w	80124fc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	f003 0308 	and.w	r3, r3, #8
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d015      	beq.n	80123f2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	4a72      	ldr	r2, [pc, #456]	; (8012594 <PCD_EP_OutXfrComplete_int+0x210>)
 80123ca:	4293      	cmp	r3, r2
 80123cc:	f240 80dd 	bls.w	801258a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	f000 80d7 	beq.w	801258a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	015a      	lsls	r2, r3, #5
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	4413      	add	r3, r2
 80123e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123e8:	461a      	mov	r2, r3
 80123ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80123ee:	6093      	str	r3, [r2, #8]
 80123f0:	e0cb      	b.n	801258a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	f003 0320 	and.w	r3, r3, #32
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d009      	beq.n	8012410 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	015a      	lsls	r2, r3, #5
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	4413      	add	r3, r2
 8012404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012408:	461a      	mov	r2, r3
 801240a:	2320      	movs	r3, #32
 801240c:	6093      	str	r3, [r2, #8]
 801240e:	e0bc      	b.n	801258a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8012416:	2b00      	cmp	r3, #0
 8012418:	f040 80b7 	bne.w	801258a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	4a5d      	ldr	r2, [pc, #372]	; (8012594 <PCD_EP_OutXfrComplete_int+0x210>)
 8012420:	4293      	cmp	r3, r2
 8012422:	d90f      	bls.n	8012444 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801242a:	2b00      	cmp	r3, #0
 801242c:	d00a      	beq.n	8012444 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	015a      	lsls	r2, r3, #5
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	4413      	add	r3, r2
 8012436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801243a:	461a      	mov	r2, r3
 801243c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012440:	6093      	str	r3, [r2, #8]
 8012442:	e0a2      	b.n	801258a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8012444:	6879      	ldr	r1, [r7, #4]
 8012446:	683a      	ldr	r2, [r7, #0]
 8012448:	4613      	mov	r3, r2
 801244a:	00db      	lsls	r3, r3, #3
 801244c:	1a9b      	subs	r3, r3, r2
 801244e:	009b      	lsls	r3, r3, #2
 8012450:	440b      	add	r3, r1
 8012452:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8012456:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	0159      	lsls	r1, r3, #5
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	440b      	add	r3, r1
 8012460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012464:	691b      	ldr	r3, [r3, #16]
 8012466:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 801246a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	683a      	ldr	r2, [r7, #0]
 8012470:	4613      	mov	r3, r2
 8012472:	00db      	lsls	r3, r3, #3
 8012474:	1a9b      	subs	r3, r3, r2
 8012476:	009b      	lsls	r3, r3, #2
 8012478:	4403      	add	r3, r0
 801247a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801247e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8012480:	6879      	ldr	r1, [r7, #4]
 8012482:	683a      	ldr	r2, [r7, #0]
 8012484:	4613      	mov	r3, r2
 8012486:	00db      	lsls	r3, r3, #3
 8012488:	1a9b      	subs	r3, r3, r2
 801248a:	009b      	lsls	r3, r3, #2
 801248c:	440b      	add	r3, r1
 801248e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012492:	6819      	ldr	r1, [r3, #0]
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	683a      	ldr	r2, [r7, #0]
 8012498:	4613      	mov	r3, r2
 801249a:	00db      	lsls	r3, r3, #3
 801249c:	1a9b      	subs	r3, r3, r2
 801249e:	009b      	lsls	r3, r3, #2
 80124a0:	4403      	add	r3, r0
 80124a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	4419      	add	r1, r3
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	683a      	ldr	r2, [r7, #0]
 80124ae:	4613      	mov	r3, r2
 80124b0:	00db      	lsls	r3, r3, #3
 80124b2:	1a9b      	subs	r3, r3, r2
 80124b4:	009b      	lsls	r3, r3, #2
 80124b6:	4403      	add	r3, r0
 80124b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80124bc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d114      	bne.n	80124ee <PCD_EP_OutXfrComplete_int+0x16a>
 80124c4:	6879      	ldr	r1, [r7, #4]
 80124c6:	683a      	ldr	r2, [r7, #0]
 80124c8:	4613      	mov	r3, r2
 80124ca:	00db      	lsls	r3, r3, #3
 80124cc:	1a9b      	subs	r3, r3, r2
 80124ce:	009b      	lsls	r3, r3, #2
 80124d0:	440b      	add	r3, r1
 80124d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d108      	bne.n	80124ee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6818      	ldr	r0, [r3, #0]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80124e6:	461a      	mov	r2, r3
 80124e8:	2101      	movs	r1, #1
 80124ea:	f003 ff41 	bl	8016370 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	4619      	mov	r1, r3
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f009 fe63 	bl	801c1c0 <HAL_PCD_DataOutStageCallback>
 80124fa:	e046      	b.n	801258a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	4a26      	ldr	r2, [pc, #152]	; (8012598 <PCD_EP_OutXfrComplete_int+0x214>)
 8012500:	4293      	cmp	r3, r2
 8012502:	d124      	bne.n	801254e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801250a:	2b00      	cmp	r3, #0
 801250c:	d00a      	beq.n	8012524 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	015a      	lsls	r2, r3, #5
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	4413      	add	r3, r2
 8012516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801251a:	461a      	mov	r2, r3
 801251c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012520:	6093      	str	r3, [r2, #8]
 8012522:	e032      	b.n	801258a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	f003 0320 	and.w	r3, r3, #32
 801252a:	2b00      	cmp	r3, #0
 801252c:	d008      	beq.n	8012540 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	015a      	lsls	r2, r3, #5
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	4413      	add	r3, r2
 8012536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801253a:	461a      	mov	r2, r3
 801253c:	2320      	movs	r3, #32
 801253e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	b2db      	uxtb	r3, r3
 8012544:	4619      	mov	r1, r3
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f009 fe3a 	bl	801c1c0 <HAL_PCD_DataOutStageCallback>
 801254c:	e01d      	b.n	801258a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d114      	bne.n	801257e <PCD_EP_OutXfrComplete_int+0x1fa>
 8012554:	6879      	ldr	r1, [r7, #4]
 8012556:	683a      	ldr	r2, [r7, #0]
 8012558:	4613      	mov	r3, r2
 801255a:	00db      	lsls	r3, r3, #3
 801255c:	1a9b      	subs	r3, r3, r2
 801255e:	009b      	lsls	r3, r3, #2
 8012560:	440b      	add	r3, r1
 8012562:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d108      	bne.n	801257e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6818      	ldr	r0, [r3, #0]
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012576:	461a      	mov	r2, r3
 8012578:	2100      	movs	r1, #0
 801257a:	f003 fef9 	bl	8016370 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	b2db      	uxtb	r3, r3
 8012582:	4619      	mov	r1, r3
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f009 fe1b 	bl	801c1c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801258a:	2300      	movs	r3, #0
}
 801258c:	4618      	mov	r0, r3
 801258e:	3718      	adds	r7, #24
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}
 8012594:	4f54300a 	.word	0x4f54300a
 8012598:	4f54310a 	.word	0x4f54310a

0801259c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b086      	sub	sp, #24
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	333c      	adds	r3, #60	; 0x3c
 80125b4:	3304      	adds	r3, #4
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	015a      	lsls	r2, r3, #5
 80125be:	693b      	ldr	r3, [r7, #16]
 80125c0:	4413      	add	r3, r2
 80125c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125c6:	689b      	ldr	r3, [r3, #8]
 80125c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	4a15      	ldr	r2, [pc, #84]	; (8012624 <PCD_EP_OutSetupPacket_int+0x88>)
 80125ce:	4293      	cmp	r3, r2
 80125d0:	d90e      	bls.n	80125f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d009      	beq.n	80125f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	015a      	lsls	r2, r3, #5
 80125e0:	693b      	ldr	r3, [r7, #16]
 80125e2:	4413      	add	r3, r2
 80125e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125e8:	461a      	mov	r2, r3
 80125ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80125ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f009 fdd3 	bl	801c19c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	4a0a      	ldr	r2, [pc, #40]	; (8012624 <PCD_EP_OutSetupPacket_int+0x88>)
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d90c      	bls.n	8012618 <PCD_EP_OutSetupPacket_int+0x7c>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	691b      	ldr	r3, [r3, #16]
 8012602:	2b01      	cmp	r3, #1
 8012604:	d108      	bne.n	8012618 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6818      	ldr	r0, [r3, #0]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012610:	461a      	mov	r2, r3
 8012612:	2101      	movs	r1, #1
 8012614:	f003 feac 	bl	8016370 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8012618:	2300      	movs	r3, #0
}
 801261a:	4618      	mov	r0, r3
 801261c:	3718      	adds	r7, #24
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}
 8012622:	bf00      	nop
 8012624:	4f54300a 	.word	0x4f54300a

08012628 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8012628:	b480      	push	{r7}
 801262a:	b085      	sub	sp, #20
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	460b      	mov	r3, r1
 8012632:	70fb      	strb	r3, [r7, #3]
 8012634:	4613      	mov	r3, r2
 8012636:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801263e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8012640:	78fb      	ldrb	r3, [r7, #3]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d107      	bne.n	8012656 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8012646:	883b      	ldrh	r3, [r7, #0]
 8012648:	0419      	lsls	r1, r3, #16
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	68ba      	ldr	r2, [r7, #8]
 8012650:	430a      	orrs	r2, r1
 8012652:	629a      	str	r2, [r3, #40]	; 0x28
 8012654:	e028      	b.n	80126a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801265c:	0c1b      	lsrs	r3, r3, #16
 801265e:	68ba      	ldr	r2, [r7, #8]
 8012660:	4413      	add	r3, r2
 8012662:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8012664:	2300      	movs	r3, #0
 8012666:	73fb      	strb	r3, [r7, #15]
 8012668:	e00d      	b.n	8012686 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681a      	ldr	r2, [r3, #0]
 801266e:	7bfb      	ldrb	r3, [r7, #15]
 8012670:	3340      	adds	r3, #64	; 0x40
 8012672:	009b      	lsls	r3, r3, #2
 8012674:	4413      	add	r3, r2
 8012676:	685b      	ldr	r3, [r3, #4]
 8012678:	0c1b      	lsrs	r3, r3, #16
 801267a:	68ba      	ldr	r2, [r7, #8]
 801267c:	4413      	add	r3, r2
 801267e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8012680:	7bfb      	ldrb	r3, [r7, #15]
 8012682:	3301      	adds	r3, #1
 8012684:	73fb      	strb	r3, [r7, #15]
 8012686:	7bfa      	ldrb	r2, [r7, #15]
 8012688:	78fb      	ldrb	r3, [r7, #3]
 801268a:	3b01      	subs	r3, #1
 801268c:	429a      	cmp	r2, r3
 801268e:	d3ec      	bcc.n	801266a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8012690:	883b      	ldrh	r3, [r7, #0]
 8012692:	0418      	lsls	r0, r3, #16
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6819      	ldr	r1, [r3, #0]
 8012698:	78fb      	ldrb	r3, [r7, #3]
 801269a:	3b01      	subs	r3, #1
 801269c:	68ba      	ldr	r2, [r7, #8]
 801269e:	4302      	orrs	r2, r0
 80126a0:	3340      	adds	r3, #64	; 0x40
 80126a2:	009b      	lsls	r3, r3, #2
 80126a4:	440b      	add	r3, r1
 80126a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80126a8:	2300      	movs	r3, #0
}
 80126aa:	4618      	mov	r0, r3
 80126ac:	3714      	adds	r7, #20
 80126ae:	46bd      	mov	sp, r7
 80126b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b4:	4770      	bx	lr

080126b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80126b6:	b480      	push	{r7}
 80126b8:	b083      	sub	sp, #12
 80126ba:	af00      	add	r7, sp, #0
 80126bc:	6078      	str	r0, [r7, #4]
 80126be:	460b      	mov	r3, r1
 80126c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	887a      	ldrh	r2, [r7, #2]
 80126c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80126ca:	2300      	movs	r3, #0
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	370c      	adds	r7, #12
 80126d0:	46bd      	mov	sp, r7
 80126d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d6:	4770      	bx	lr

080126d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80126d8:	b480      	push	{r7}
 80126da:	b083      	sub	sp, #12
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
 80126e0:	460b      	mov	r3, r1
 80126e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80126e4:	bf00      	nop
 80126e6:	370c      	adds	r7, #12
 80126e8:	46bd      	mov	sp, r7
 80126ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ee:	4770      	bx	lr

080126f0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80126f0:	b480      	push	{r7}
 80126f2:	b083      	sub	sp, #12
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	460b      	mov	r3, r1
 80126fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 80126fc:	4b10      	ldr	r3, [pc, #64]	; (8012740 <HAL_PWR_EnterSTOPMode+0x50>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	f023 0203 	bic.w	r2, r3, #3
 8012704:	490e      	ldr	r1, [pc, #56]	; (8012740 <HAL_PWR_EnterSTOPMode+0x50>)
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	4313      	orrs	r3, r2
 801270a:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 801270c:	4b0d      	ldr	r3, [pc, #52]	; (8012744 <HAL_PWR_EnterSTOPMode+0x54>)
 801270e:	691b      	ldr	r3, [r3, #16]
 8012710:	4a0c      	ldr	r2, [pc, #48]	; (8012744 <HAL_PWR_EnterSTOPMode+0x54>)
 8012712:	f043 0304 	orr.w	r3, r3, #4
 8012716:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8012718:	78fb      	ldrb	r3, [r7, #3]
 801271a:	2b01      	cmp	r3, #1
 801271c:	d101      	bne.n	8012722 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 801271e:	bf30      	wfi
 8012720:	e002      	b.n	8012728 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8012722:	bf40      	sev
    __WFE();
 8012724:	bf20      	wfe
    __WFE();
 8012726:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8012728:	4b06      	ldr	r3, [pc, #24]	; (8012744 <HAL_PWR_EnterSTOPMode+0x54>)
 801272a:	691b      	ldr	r3, [r3, #16]
 801272c:	4a05      	ldr	r2, [pc, #20]	; (8012744 <HAL_PWR_EnterSTOPMode+0x54>)
 801272e:	f023 0304 	bic.w	r3, r3, #4
 8012732:	6113      	str	r3, [r2, #16]
}
 8012734:	bf00      	nop
 8012736:	370c      	adds	r7, #12
 8012738:	46bd      	mov	sp, r7
 801273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273e:	4770      	bx	lr
 8012740:	40007000 	.word	0x40007000
 8012744:	e000ed00 	.word	0xe000ed00

08012748 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b086      	sub	sp, #24
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d101      	bne.n	801275a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012756:	2301      	movs	r3, #1
 8012758:	e264      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	f003 0301 	and.w	r3, r3, #1
 8012762:	2b00      	cmp	r3, #0
 8012764:	d075      	beq.n	8012852 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012766:	4ba3      	ldr	r3, [pc, #652]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 8012768:	689b      	ldr	r3, [r3, #8]
 801276a:	f003 030c 	and.w	r3, r3, #12
 801276e:	2b04      	cmp	r3, #4
 8012770:	d00c      	beq.n	801278c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012772:	4ba0      	ldr	r3, [pc, #640]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 8012774:	689b      	ldr	r3, [r3, #8]
 8012776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801277a:	2b08      	cmp	r3, #8
 801277c:	d112      	bne.n	80127a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801277e:	4b9d      	ldr	r3, [pc, #628]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801278a:	d10b      	bne.n	80127a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801278c:	4b99      	ldr	r3, [pc, #612]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012794:	2b00      	cmp	r3, #0
 8012796:	d05b      	beq.n	8012850 <HAL_RCC_OscConfig+0x108>
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	685b      	ldr	r3, [r3, #4]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d157      	bne.n	8012850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80127a0:	2301      	movs	r3, #1
 80127a2:	e23f      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127ac:	d106      	bne.n	80127bc <HAL_RCC_OscConfig+0x74>
 80127ae:	4b91      	ldr	r3, [pc, #580]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	4a90      	ldr	r2, [pc, #576]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80127b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80127b8:	6013      	str	r3, [r2, #0]
 80127ba:	e01d      	b.n	80127f8 <HAL_RCC_OscConfig+0xb0>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80127c4:	d10c      	bne.n	80127e0 <HAL_RCC_OscConfig+0x98>
 80127c6:	4b8b      	ldr	r3, [pc, #556]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	4a8a      	ldr	r2, [pc, #552]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80127cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80127d0:	6013      	str	r3, [r2, #0]
 80127d2:	4b88      	ldr	r3, [pc, #544]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	4a87      	ldr	r2, [pc, #540]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80127d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80127dc:	6013      	str	r3, [r2, #0]
 80127de:	e00b      	b.n	80127f8 <HAL_RCC_OscConfig+0xb0>
 80127e0:	4b84      	ldr	r3, [pc, #528]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	4a83      	ldr	r2, [pc, #524]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80127e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80127ea:	6013      	str	r3, [r2, #0]
 80127ec:	4b81      	ldr	r3, [pc, #516]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	4a80      	ldr	r2, [pc, #512]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80127f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80127f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	685b      	ldr	r3, [r3, #4]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d013      	beq.n	8012828 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012800:	f7fd fbec 	bl	800ffdc <HAL_GetTick>
 8012804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012806:	e008      	b.n	801281a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012808:	f7fd fbe8 	bl	800ffdc <HAL_GetTick>
 801280c:	4602      	mov	r2, r0
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	1ad3      	subs	r3, r2, r3
 8012812:	2b64      	cmp	r3, #100	; 0x64
 8012814:	d901      	bls.n	801281a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012816:	2303      	movs	r3, #3
 8012818:	e204      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801281a:	4b76      	ldr	r3, [pc, #472]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012822:	2b00      	cmp	r3, #0
 8012824:	d0f0      	beq.n	8012808 <HAL_RCC_OscConfig+0xc0>
 8012826:	e014      	b.n	8012852 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012828:	f7fd fbd8 	bl	800ffdc <HAL_GetTick>
 801282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801282e:	e008      	b.n	8012842 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012830:	f7fd fbd4 	bl	800ffdc <HAL_GetTick>
 8012834:	4602      	mov	r2, r0
 8012836:	693b      	ldr	r3, [r7, #16]
 8012838:	1ad3      	subs	r3, r2, r3
 801283a:	2b64      	cmp	r3, #100	; 0x64
 801283c:	d901      	bls.n	8012842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801283e:	2303      	movs	r3, #3
 8012840:	e1f0      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012842:	4b6c      	ldr	r3, [pc, #432]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801284a:	2b00      	cmp	r3, #0
 801284c:	d1f0      	bne.n	8012830 <HAL_RCC_OscConfig+0xe8>
 801284e:	e000      	b.n	8012852 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	f003 0302 	and.w	r3, r3, #2
 801285a:	2b00      	cmp	r3, #0
 801285c:	d063      	beq.n	8012926 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801285e:	4b65      	ldr	r3, [pc, #404]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 8012860:	689b      	ldr	r3, [r3, #8]
 8012862:	f003 030c 	and.w	r3, r3, #12
 8012866:	2b00      	cmp	r3, #0
 8012868:	d00b      	beq.n	8012882 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801286a:	4b62      	ldr	r3, [pc, #392]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 801286c:	689b      	ldr	r3, [r3, #8]
 801286e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012872:	2b08      	cmp	r3, #8
 8012874:	d11c      	bne.n	80128b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012876:	4b5f      	ldr	r3, [pc, #380]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801287e:	2b00      	cmp	r3, #0
 8012880:	d116      	bne.n	80128b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012882:	4b5c      	ldr	r3, [pc, #368]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	f003 0302 	and.w	r3, r3, #2
 801288a:	2b00      	cmp	r3, #0
 801288c:	d005      	beq.n	801289a <HAL_RCC_OscConfig+0x152>
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	68db      	ldr	r3, [r3, #12]
 8012892:	2b01      	cmp	r3, #1
 8012894:	d001      	beq.n	801289a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012896:	2301      	movs	r3, #1
 8012898:	e1c4      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801289a:	4b56      	ldr	r3, [pc, #344]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	691b      	ldr	r3, [r3, #16]
 80128a6:	00db      	lsls	r3, r3, #3
 80128a8:	4952      	ldr	r1, [pc, #328]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80128aa:	4313      	orrs	r3, r2
 80128ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80128ae:	e03a      	b.n	8012926 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	68db      	ldr	r3, [r3, #12]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d020      	beq.n	80128fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80128b8:	4b4f      	ldr	r3, [pc, #316]	; (80129f8 <HAL_RCC_OscConfig+0x2b0>)
 80128ba:	2201      	movs	r2, #1
 80128bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80128be:	f7fd fb8d 	bl	800ffdc <HAL_GetTick>
 80128c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80128c4:	e008      	b.n	80128d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80128c6:	f7fd fb89 	bl	800ffdc <HAL_GetTick>
 80128ca:	4602      	mov	r2, r0
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	1ad3      	subs	r3, r2, r3
 80128d0:	2b02      	cmp	r3, #2
 80128d2:	d901      	bls.n	80128d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80128d4:	2303      	movs	r3, #3
 80128d6:	e1a5      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80128d8:	4b46      	ldr	r3, [pc, #280]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	f003 0302 	and.w	r3, r3, #2
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d0f0      	beq.n	80128c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80128e4:	4b43      	ldr	r3, [pc, #268]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	691b      	ldr	r3, [r3, #16]
 80128f0:	00db      	lsls	r3, r3, #3
 80128f2:	4940      	ldr	r1, [pc, #256]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80128f4:	4313      	orrs	r3, r2
 80128f6:	600b      	str	r3, [r1, #0]
 80128f8:	e015      	b.n	8012926 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80128fa:	4b3f      	ldr	r3, [pc, #252]	; (80129f8 <HAL_RCC_OscConfig+0x2b0>)
 80128fc:	2200      	movs	r2, #0
 80128fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012900:	f7fd fb6c 	bl	800ffdc <HAL_GetTick>
 8012904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012906:	e008      	b.n	801291a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012908:	f7fd fb68 	bl	800ffdc <HAL_GetTick>
 801290c:	4602      	mov	r2, r0
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	1ad3      	subs	r3, r2, r3
 8012912:	2b02      	cmp	r3, #2
 8012914:	d901      	bls.n	801291a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012916:	2303      	movs	r3, #3
 8012918:	e184      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801291a:	4b36      	ldr	r3, [pc, #216]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	f003 0302 	and.w	r3, r3, #2
 8012922:	2b00      	cmp	r3, #0
 8012924:	d1f0      	bne.n	8012908 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	f003 0308 	and.w	r3, r3, #8
 801292e:	2b00      	cmp	r3, #0
 8012930:	d030      	beq.n	8012994 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	695b      	ldr	r3, [r3, #20]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d016      	beq.n	8012968 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801293a:	4b30      	ldr	r3, [pc, #192]	; (80129fc <HAL_RCC_OscConfig+0x2b4>)
 801293c:	2201      	movs	r2, #1
 801293e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012940:	f7fd fb4c 	bl	800ffdc <HAL_GetTick>
 8012944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012946:	e008      	b.n	801295a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012948:	f7fd fb48 	bl	800ffdc <HAL_GetTick>
 801294c:	4602      	mov	r2, r0
 801294e:	693b      	ldr	r3, [r7, #16]
 8012950:	1ad3      	subs	r3, r2, r3
 8012952:	2b02      	cmp	r3, #2
 8012954:	d901      	bls.n	801295a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012956:	2303      	movs	r3, #3
 8012958:	e164      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801295a:	4b26      	ldr	r3, [pc, #152]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 801295c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801295e:	f003 0302 	and.w	r3, r3, #2
 8012962:	2b00      	cmp	r3, #0
 8012964:	d0f0      	beq.n	8012948 <HAL_RCC_OscConfig+0x200>
 8012966:	e015      	b.n	8012994 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012968:	4b24      	ldr	r3, [pc, #144]	; (80129fc <HAL_RCC_OscConfig+0x2b4>)
 801296a:	2200      	movs	r2, #0
 801296c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801296e:	f7fd fb35 	bl	800ffdc <HAL_GetTick>
 8012972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012974:	e008      	b.n	8012988 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012976:	f7fd fb31 	bl	800ffdc <HAL_GetTick>
 801297a:	4602      	mov	r2, r0
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	1ad3      	subs	r3, r2, r3
 8012980:	2b02      	cmp	r3, #2
 8012982:	d901      	bls.n	8012988 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012984:	2303      	movs	r3, #3
 8012986:	e14d      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012988:	4b1a      	ldr	r3, [pc, #104]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 801298a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801298c:	f003 0302 	and.w	r3, r3, #2
 8012990:	2b00      	cmp	r3, #0
 8012992:	d1f0      	bne.n	8012976 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	f003 0304 	and.w	r3, r3, #4
 801299c:	2b00      	cmp	r3, #0
 801299e:	f000 80a0 	beq.w	8012ae2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80129a2:	2300      	movs	r3, #0
 80129a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80129a6:	4b13      	ldr	r3, [pc, #76]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80129a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d10f      	bne.n	80129d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80129b2:	2300      	movs	r3, #0
 80129b4:	60bb      	str	r3, [r7, #8]
 80129b6:	4b0f      	ldr	r3, [pc, #60]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80129b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129ba:	4a0e      	ldr	r2, [pc, #56]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80129bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80129c0:	6413      	str	r3, [r2, #64]	; 0x40
 80129c2:	4b0c      	ldr	r3, [pc, #48]	; (80129f4 <HAL_RCC_OscConfig+0x2ac>)
 80129c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80129ca:	60bb      	str	r3, [r7, #8]
 80129cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80129ce:	2301      	movs	r3, #1
 80129d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80129d2:	4b0b      	ldr	r3, [pc, #44]	; (8012a00 <HAL_RCC_OscConfig+0x2b8>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d121      	bne.n	8012a22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80129de:	4b08      	ldr	r3, [pc, #32]	; (8012a00 <HAL_RCC_OscConfig+0x2b8>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	4a07      	ldr	r2, [pc, #28]	; (8012a00 <HAL_RCC_OscConfig+0x2b8>)
 80129e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80129e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80129ea:	f7fd faf7 	bl	800ffdc <HAL_GetTick>
 80129ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80129f0:	e011      	b.n	8012a16 <HAL_RCC_OscConfig+0x2ce>
 80129f2:	bf00      	nop
 80129f4:	40023800 	.word	0x40023800
 80129f8:	42470000 	.word	0x42470000
 80129fc:	42470e80 	.word	0x42470e80
 8012a00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012a04:	f7fd faea 	bl	800ffdc <HAL_GetTick>
 8012a08:	4602      	mov	r2, r0
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	1ad3      	subs	r3, r2, r3
 8012a0e:	2b02      	cmp	r3, #2
 8012a10:	d901      	bls.n	8012a16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8012a12:	2303      	movs	r3, #3
 8012a14:	e106      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012a16:	4b85      	ldr	r3, [pc, #532]	; (8012c2c <HAL_RCC_OscConfig+0x4e4>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d0f0      	beq.n	8012a04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	689b      	ldr	r3, [r3, #8]
 8012a26:	2b01      	cmp	r3, #1
 8012a28:	d106      	bne.n	8012a38 <HAL_RCC_OscConfig+0x2f0>
 8012a2a:	4b81      	ldr	r3, [pc, #516]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a2e:	4a80      	ldr	r2, [pc, #512]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012a30:	f043 0301 	orr.w	r3, r3, #1
 8012a34:	6713      	str	r3, [r2, #112]	; 0x70
 8012a36:	e01c      	b.n	8012a72 <HAL_RCC_OscConfig+0x32a>
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	689b      	ldr	r3, [r3, #8]
 8012a3c:	2b05      	cmp	r3, #5
 8012a3e:	d10c      	bne.n	8012a5a <HAL_RCC_OscConfig+0x312>
 8012a40:	4b7b      	ldr	r3, [pc, #492]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a44:	4a7a      	ldr	r2, [pc, #488]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012a46:	f043 0304 	orr.w	r3, r3, #4
 8012a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8012a4c:	4b78      	ldr	r3, [pc, #480]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a50:	4a77      	ldr	r2, [pc, #476]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012a52:	f043 0301 	orr.w	r3, r3, #1
 8012a56:	6713      	str	r3, [r2, #112]	; 0x70
 8012a58:	e00b      	b.n	8012a72 <HAL_RCC_OscConfig+0x32a>
 8012a5a:	4b75      	ldr	r3, [pc, #468]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a5e:	4a74      	ldr	r2, [pc, #464]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012a60:	f023 0301 	bic.w	r3, r3, #1
 8012a64:	6713      	str	r3, [r2, #112]	; 0x70
 8012a66:	4b72      	ldr	r3, [pc, #456]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a6a:	4a71      	ldr	r2, [pc, #452]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012a6c:	f023 0304 	bic.w	r3, r3, #4
 8012a70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	689b      	ldr	r3, [r3, #8]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d015      	beq.n	8012aa6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012a7a:	f7fd faaf 	bl	800ffdc <HAL_GetTick>
 8012a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012a80:	e00a      	b.n	8012a98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012a82:	f7fd faab 	bl	800ffdc <HAL_GetTick>
 8012a86:	4602      	mov	r2, r0
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	1ad3      	subs	r3, r2, r3
 8012a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a90:	4293      	cmp	r3, r2
 8012a92:	d901      	bls.n	8012a98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8012a94:	2303      	movs	r3, #3
 8012a96:	e0c5      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012a98:	4b65      	ldr	r3, [pc, #404]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a9c:	f003 0302 	and.w	r3, r3, #2
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d0ee      	beq.n	8012a82 <HAL_RCC_OscConfig+0x33a>
 8012aa4:	e014      	b.n	8012ad0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012aa6:	f7fd fa99 	bl	800ffdc <HAL_GetTick>
 8012aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012aac:	e00a      	b.n	8012ac4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012aae:	f7fd fa95 	bl	800ffdc <HAL_GetTick>
 8012ab2:	4602      	mov	r2, r0
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	1ad3      	subs	r3, r2, r3
 8012ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012abc:	4293      	cmp	r3, r2
 8012abe:	d901      	bls.n	8012ac4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012ac0:	2303      	movs	r3, #3
 8012ac2:	e0af      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012ac4:	4b5a      	ldr	r3, [pc, #360]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ac8:	f003 0302 	and.w	r3, r3, #2
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d1ee      	bne.n	8012aae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012ad0:	7dfb      	ldrb	r3, [r7, #23]
 8012ad2:	2b01      	cmp	r3, #1
 8012ad4:	d105      	bne.n	8012ae2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012ad6:	4b56      	ldr	r3, [pc, #344]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ada:	4a55      	ldr	r2, [pc, #340]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012ae0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	699b      	ldr	r3, [r3, #24]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	f000 809b 	beq.w	8012c22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012aec:	4b50      	ldr	r3, [pc, #320]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012aee:	689b      	ldr	r3, [r3, #8]
 8012af0:	f003 030c 	and.w	r3, r3, #12
 8012af4:	2b08      	cmp	r3, #8
 8012af6:	d05c      	beq.n	8012bb2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	699b      	ldr	r3, [r3, #24]
 8012afc:	2b02      	cmp	r3, #2
 8012afe:	d141      	bne.n	8012b84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012b00:	4b4c      	ldr	r3, [pc, #304]	; (8012c34 <HAL_RCC_OscConfig+0x4ec>)
 8012b02:	2200      	movs	r2, #0
 8012b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012b06:	f7fd fa69 	bl	800ffdc <HAL_GetTick>
 8012b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012b0c:	e008      	b.n	8012b20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012b0e:	f7fd fa65 	bl	800ffdc <HAL_GetTick>
 8012b12:	4602      	mov	r2, r0
 8012b14:	693b      	ldr	r3, [r7, #16]
 8012b16:	1ad3      	subs	r3, r2, r3
 8012b18:	2b02      	cmp	r3, #2
 8012b1a:	d901      	bls.n	8012b20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8012b1c:	2303      	movs	r3, #3
 8012b1e:	e081      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012b20:	4b43      	ldr	r3, [pc, #268]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d1f0      	bne.n	8012b0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	69da      	ldr	r2, [r3, #28]
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	6a1b      	ldr	r3, [r3, #32]
 8012b34:	431a      	orrs	r2, r3
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b3a:	019b      	lsls	r3, r3, #6
 8012b3c:	431a      	orrs	r2, r3
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b42:	085b      	lsrs	r3, r3, #1
 8012b44:	3b01      	subs	r3, #1
 8012b46:	041b      	lsls	r3, r3, #16
 8012b48:	431a      	orrs	r2, r3
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b4e:	061b      	lsls	r3, r3, #24
 8012b50:	4937      	ldr	r1, [pc, #220]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012b52:	4313      	orrs	r3, r2
 8012b54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012b56:	4b37      	ldr	r3, [pc, #220]	; (8012c34 <HAL_RCC_OscConfig+0x4ec>)
 8012b58:	2201      	movs	r2, #1
 8012b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012b5c:	f7fd fa3e 	bl	800ffdc <HAL_GetTick>
 8012b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012b62:	e008      	b.n	8012b76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012b64:	f7fd fa3a 	bl	800ffdc <HAL_GetTick>
 8012b68:	4602      	mov	r2, r0
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	1ad3      	subs	r3, r2, r3
 8012b6e:	2b02      	cmp	r3, #2
 8012b70:	d901      	bls.n	8012b76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8012b72:	2303      	movs	r3, #3
 8012b74:	e056      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012b76:	4b2e      	ldr	r3, [pc, #184]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d0f0      	beq.n	8012b64 <HAL_RCC_OscConfig+0x41c>
 8012b82:	e04e      	b.n	8012c22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012b84:	4b2b      	ldr	r3, [pc, #172]	; (8012c34 <HAL_RCC_OscConfig+0x4ec>)
 8012b86:	2200      	movs	r2, #0
 8012b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012b8a:	f7fd fa27 	bl	800ffdc <HAL_GetTick>
 8012b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012b90:	e008      	b.n	8012ba4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012b92:	f7fd fa23 	bl	800ffdc <HAL_GetTick>
 8012b96:	4602      	mov	r2, r0
 8012b98:	693b      	ldr	r3, [r7, #16]
 8012b9a:	1ad3      	subs	r3, r2, r3
 8012b9c:	2b02      	cmp	r3, #2
 8012b9e:	d901      	bls.n	8012ba4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012ba0:	2303      	movs	r3, #3
 8012ba2:	e03f      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012ba4:	4b22      	ldr	r3, [pc, #136]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d1f0      	bne.n	8012b92 <HAL_RCC_OscConfig+0x44a>
 8012bb0:	e037      	b.n	8012c22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	699b      	ldr	r3, [r3, #24]
 8012bb6:	2b01      	cmp	r3, #1
 8012bb8:	d101      	bne.n	8012bbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8012bba:	2301      	movs	r3, #1
 8012bbc:	e032      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012bbe:	4b1c      	ldr	r3, [pc, #112]	; (8012c30 <HAL_RCC_OscConfig+0x4e8>)
 8012bc0:	685b      	ldr	r3, [r3, #4]
 8012bc2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	699b      	ldr	r3, [r3, #24]
 8012bc8:	2b01      	cmp	r3, #1
 8012bca:	d028      	beq.n	8012c1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d121      	bne.n	8012c1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d11a      	bne.n	8012c1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012be8:	68fa      	ldr	r2, [r7, #12]
 8012bea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012bee:	4013      	ands	r3, r2
 8012bf0:	687a      	ldr	r2, [r7, #4]
 8012bf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012bf4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012bf6:	4293      	cmp	r3, r2
 8012bf8:	d111      	bne.n	8012c1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c04:	085b      	lsrs	r3, r3, #1
 8012c06:	3b01      	subs	r3, #1
 8012c08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	d107      	bne.n	8012c1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	d001      	beq.n	8012c22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8012c1e:	2301      	movs	r3, #1
 8012c20:	e000      	b.n	8012c24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8012c22:	2300      	movs	r3, #0
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3718      	adds	r7, #24
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}
 8012c2c:	40007000 	.word	0x40007000
 8012c30:	40023800 	.word	0x40023800
 8012c34:	42470060 	.word	0x42470060

08012c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b084      	sub	sp, #16
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d101      	bne.n	8012c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012c48:	2301      	movs	r3, #1
 8012c4a:	e0cc      	b.n	8012de6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012c4c:	4b68      	ldr	r3, [pc, #416]	; (8012df0 <HAL_RCC_ClockConfig+0x1b8>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f003 0307 	and.w	r3, r3, #7
 8012c54:	683a      	ldr	r2, [r7, #0]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d90c      	bls.n	8012c74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012c5a:	4b65      	ldr	r3, [pc, #404]	; (8012df0 <HAL_RCC_ClockConfig+0x1b8>)
 8012c5c:	683a      	ldr	r2, [r7, #0]
 8012c5e:	b2d2      	uxtb	r2, r2
 8012c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012c62:	4b63      	ldr	r3, [pc, #396]	; (8012df0 <HAL_RCC_ClockConfig+0x1b8>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	f003 0307 	and.w	r3, r3, #7
 8012c6a:	683a      	ldr	r2, [r7, #0]
 8012c6c:	429a      	cmp	r2, r3
 8012c6e:	d001      	beq.n	8012c74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012c70:	2301      	movs	r3, #1
 8012c72:	e0b8      	b.n	8012de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f003 0302 	and.w	r3, r3, #2
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d020      	beq.n	8012cc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	f003 0304 	and.w	r3, r3, #4
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d005      	beq.n	8012c98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012c8c:	4b59      	ldr	r3, [pc, #356]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012c8e:	689b      	ldr	r3, [r3, #8]
 8012c90:	4a58      	ldr	r2, [pc, #352]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012c96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	f003 0308 	and.w	r3, r3, #8
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d005      	beq.n	8012cb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012ca4:	4b53      	ldr	r3, [pc, #332]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012ca6:	689b      	ldr	r3, [r3, #8]
 8012ca8:	4a52      	ldr	r2, [pc, #328]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012cae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012cb0:	4b50      	ldr	r3, [pc, #320]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012cb2:	689b      	ldr	r3, [r3, #8]
 8012cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	689b      	ldr	r3, [r3, #8]
 8012cbc:	494d      	ldr	r1, [pc, #308]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012cbe:	4313      	orrs	r3, r2
 8012cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	f003 0301 	and.w	r3, r3, #1
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d044      	beq.n	8012d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	685b      	ldr	r3, [r3, #4]
 8012cd2:	2b01      	cmp	r3, #1
 8012cd4:	d107      	bne.n	8012ce6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012cd6:	4b47      	ldr	r3, [pc, #284]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d119      	bne.n	8012d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	e07f      	b.n	8012de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	685b      	ldr	r3, [r3, #4]
 8012cea:	2b02      	cmp	r3, #2
 8012cec:	d003      	beq.n	8012cf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012cf2:	2b03      	cmp	r3, #3
 8012cf4:	d107      	bne.n	8012d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012cf6:	4b3f      	ldr	r3, [pc, #252]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d109      	bne.n	8012d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012d02:	2301      	movs	r3, #1
 8012d04:	e06f      	b.n	8012de6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012d06:	4b3b      	ldr	r3, [pc, #236]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	f003 0302 	and.w	r3, r3, #2
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d101      	bne.n	8012d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012d12:	2301      	movs	r3, #1
 8012d14:	e067      	b.n	8012de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012d16:	4b37      	ldr	r3, [pc, #220]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012d18:	689b      	ldr	r3, [r3, #8]
 8012d1a:	f023 0203 	bic.w	r2, r3, #3
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	685b      	ldr	r3, [r3, #4]
 8012d22:	4934      	ldr	r1, [pc, #208]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012d24:	4313      	orrs	r3, r2
 8012d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012d28:	f7fd f958 	bl	800ffdc <HAL_GetTick>
 8012d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012d2e:	e00a      	b.n	8012d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012d30:	f7fd f954 	bl	800ffdc <HAL_GetTick>
 8012d34:	4602      	mov	r2, r0
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	1ad3      	subs	r3, r2, r3
 8012d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d3e:	4293      	cmp	r3, r2
 8012d40:	d901      	bls.n	8012d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012d42:	2303      	movs	r3, #3
 8012d44:	e04f      	b.n	8012de6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012d46:	4b2b      	ldr	r3, [pc, #172]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012d48:	689b      	ldr	r3, [r3, #8]
 8012d4a:	f003 020c 	and.w	r2, r3, #12
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	009b      	lsls	r3, r3, #2
 8012d54:	429a      	cmp	r2, r3
 8012d56:	d1eb      	bne.n	8012d30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012d58:	4b25      	ldr	r3, [pc, #148]	; (8012df0 <HAL_RCC_ClockConfig+0x1b8>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	f003 0307 	and.w	r3, r3, #7
 8012d60:	683a      	ldr	r2, [r7, #0]
 8012d62:	429a      	cmp	r2, r3
 8012d64:	d20c      	bcs.n	8012d80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012d66:	4b22      	ldr	r3, [pc, #136]	; (8012df0 <HAL_RCC_ClockConfig+0x1b8>)
 8012d68:	683a      	ldr	r2, [r7, #0]
 8012d6a:	b2d2      	uxtb	r2, r2
 8012d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012d6e:	4b20      	ldr	r3, [pc, #128]	; (8012df0 <HAL_RCC_ClockConfig+0x1b8>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	f003 0307 	and.w	r3, r3, #7
 8012d76:	683a      	ldr	r2, [r7, #0]
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	d001      	beq.n	8012d80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	e032      	b.n	8012de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	f003 0304 	and.w	r3, r3, #4
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d008      	beq.n	8012d9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012d8c:	4b19      	ldr	r3, [pc, #100]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012d8e:	689b      	ldr	r3, [r3, #8]
 8012d90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	68db      	ldr	r3, [r3, #12]
 8012d98:	4916      	ldr	r1, [pc, #88]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012d9a:	4313      	orrs	r3, r2
 8012d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	f003 0308 	and.w	r3, r3, #8
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d009      	beq.n	8012dbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012daa:	4b12      	ldr	r3, [pc, #72]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012dac:	689b      	ldr	r3, [r3, #8]
 8012dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	691b      	ldr	r3, [r3, #16]
 8012db6:	00db      	lsls	r3, r3, #3
 8012db8:	490e      	ldr	r1, [pc, #56]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012dba:	4313      	orrs	r3, r2
 8012dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012dbe:	f000 f821 	bl	8012e04 <HAL_RCC_GetSysClockFreq>
 8012dc2:	4602      	mov	r2, r0
 8012dc4:	4b0b      	ldr	r3, [pc, #44]	; (8012df4 <HAL_RCC_ClockConfig+0x1bc>)
 8012dc6:	689b      	ldr	r3, [r3, #8]
 8012dc8:	091b      	lsrs	r3, r3, #4
 8012dca:	f003 030f 	and.w	r3, r3, #15
 8012dce:	490a      	ldr	r1, [pc, #40]	; (8012df8 <HAL_RCC_ClockConfig+0x1c0>)
 8012dd0:	5ccb      	ldrb	r3, [r1, r3]
 8012dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8012dd6:	4a09      	ldr	r2, [pc, #36]	; (8012dfc <HAL_RCC_ClockConfig+0x1c4>)
 8012dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8012dda:	4b09      	ldr	r3, [pc, #36]	; (8012e00 <HAL_RCC_ClockConfig+0x1c8>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7fb fd06 	bl	800e7f0 <HAL_InitTick>

  return HAL_OK;
 8012de4:	2300      	movs	r3, #0
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3710      	adds	r7, #16
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
 8012dee:	bf00      	nop
 8012df0:	40023c00 	.word	0x40023c00
 8012df4:	40023800 	.word	0x40023800
 8012df8:	0801dd84 	.word	0x0801dd84
 8012dfc:	20000014 	.word	0x20000014
 8012e00:	20000048 	.word	0x20000048

08012e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012e04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8012e08:	b084      	sub	sp, #16
 8012e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	607b      	str	r3, [r7, #4]
 8012e10:	2300      	movs	r3, #0
 8012e12:	60fb      	str	r3, [r7, #12]
 8012e14:	2300      	movs	r3, #0
 8012e16:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012e1c:	4b67      	ldr	r3, [pc, #412]	; (8012fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012e1e:	689b      	ldr	r3, [r3, #8]
 8012e20:	f003 030c 	and.w	r3, r3, #12
 8012e24:	2b08      	cmp	r3, #8
 8012e26:	d00d      	beq.n	8012e44 <HAL_RCC_GetSysClockFreq+0x40>
 8012e28:	2b08      	cmp	r3, #8
 8012e2a:	f200 80bd 	bhi.w	8012fa8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d002      	beq.n	8012e38 <HAL_RCC_GetSysClockFreq+0x34>
 8012e32:	2b04      	cmp	r3, #4
 8012e34:	d003      	beq.n	8012e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8012e36:	e0b7      	b.n	8012fa8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012e38:	4b61      	ldr	r3, [pc, #388]	; (8012fc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8012e3a:	60bb      	str	r3, [r7, #8]
       break;
 8012e3c:	e0b7      	b.n	8012fae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012e3e:	4b61      	ldr	r3, [pc, #388]	; (8012fc4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8012e40:	60bb      	str	r3, [r7, #8]
      break;
 8012e42:	e0b4      	b.n	8012fae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012e44:	4b5d      	ldr	r3, [pc, #372]	; (8012fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012e46:	685b      	ldr	r3, [r3, #4]
 8012e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012e4e:	4b5b      	ldr	r3, [pc, #364]	; (8012fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d04d      	beq.n	8012ef6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012e5a:	4b58      	ldr	r3, [pc, #352]	; (8012fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	099b      	lsrs	r3, r3, #6
 8012e60:	461a      	mov	r2, r3
 8012e62:	f04f 0300 	mov.w	r3, #0
 8012e66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012e6a:	f04f 0100 	mov.w	r1, #0
 8012e6e:	ea02 0800 	and.w	r8, r2, r0
 8012e72:	ea03 0901 	and.w	r9, r3, r1
 8012e76:	4640      	mov	r0, r8
 8012e78:	4649      	mov	r1, r9
 8012e7a:	f04f 0200 	mov.w	r2, #0
 8012e7e:	f04f 0300 	mov.w	r3, #0
 8012e82:	014b      	lsls	r3, r1, #5
 8012e84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8012e88:	0142      	lsls	r2, r0, #5
 8012e8a:	4610      	mov	r0, r2
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	ebb0 0008 	subs.w	r0, r0, r8
 8012e92:	eb61 0109 	sbc.w	r1, r1, r9
 8012e96:	f04f 0200 	mov.w	r2, #0
 8012e9a:	f04f 0300 	mov.w	r3, #0
 8012e9e:	018b      	lsls	r3, r1, #6
 8012ea0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8012ea4:	0182      	lsls	r2, r0, #6
 8012ea6:	1a12      	subs	r2, r2, r0
 8012ea8:	eb63 0301 	sbc.w	r3, r3, r1
 8012eac:	f04f 0000 	mov.w	r0, #0
 8012eb0:	f04f 0100 	mov.w	r1, #0
 8012eb4:	00d9      	lsls	r1, r3, #3
 8012eb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012eba:	00d0      	lsls	r0, r2, #3
 8012ebc:	4602      	mov	r2, r0
 8012ebe:	460b      	mov	r3, r1
 8012ec0:	eb12 0208 	adds.w	r2, r2, r8
 8012ec4:	eb43 0309 	adc.w	r3, r3, r9
 8012ec8:	f04f 0000 	mov.w	r0, #0
 8012ecc:	f04f 0100 	mov.w	r1, #0
 8012ed0:	0259      	lsls	r1, r3, #9
 8012ed2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8012ed6:	0250      	lsls	r0, r2, #9
 8012ed8:	4602      	mov	r2, r0
 8012eda:	460b      	mov	r3, r1
 8012edc:	4610      	mov	r0, r2
 8012ede:	4619      	mov	r1, r3
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	f04f 0300 	mov.w	r3, #0
 8012ee8:	f7f9 f902 	bl	800c0f0 <__aeabi_uldivmod>
 8012eec:	4602      	mov	r2, r0
 8012eee:	460b      	mov	r3, r1
 8012ef0:	4613      	mov	r3, r2
 8012ef2:	60fb      	str	r3, [r7, #12]
 8012ef4:	e04a      	b.n	8012f8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012ef6:	4b31      	ldr	r3, [pc, #196]	; (8012fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	099b      	lsrs	r3, r3, #6
 8012efc:	461a      	mov	r2, r3
 8012efe:	f04f 0300 	mov.w	r3, #0
 8012f02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012f06:	f04f 0100 	mov.w	r1, #0
 8012f0a:	ea02 0400 	and.w	r4, r2, r0
 8012f0e:	ea03 0501 	and.w	r5, r3, r1
 8012f12:	4620      	mov	r0, r4
 8012f14:	4629      	mov	r1, r5
 8012f16:	f04f 0200 	mov.w	r2, #0
 8012f1a:	f04f 0300 	mov.w	r3, #0
 8012f1e:	014b      	lsls	r3, r1, #5
 8012f20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8012f24:	0142      	lsls	r2, r0, #5
 8012f26:	4610      	mov	r0, r2
 8012f28:	4619      	mov	r1, r3
 8012f2a:	1b00      	subs	r0, r0, r4
 8012f2c:	eb61 0105 	sbc.w	r1, r1, r5
 8012f30:	f04f 0200 	mov.w	r2, #0
 8012f34:	f04f 0300 	mov.w	r3, #0
 8012f38:	018b      	lsls	r3, r1, #6
 8012f3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8012f3e:	0182      	lsls	r2, r0, #6
 8012f40:	1a12      	subs	r2, r2, r0
 8012f42:	eb63 0301 	sbc.w	r3, r3, r1
 8012f46:	f04f 0000 	mov.w	r0, #0
 8012f4a:	f04f 0100 	mov.w	r1, #0
 8012f4e:	00d9      	lsls	r1, r3, #3
 8012f50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012f54:	00d0      	lsls	r0, r2, #3
 8012f56:	4602      	mov	r2, r0
 8012f58:	460b      	mov	r3, r1
 8012f5a:	1912      	adds	r2, r2, r4
 8012f5c:	eb45 0303 	adc.w	r3, r5, r3
 8012f60:	f04f 0000 	mov.w	r0, #0
 8012f64:	f04f 0100 	mov.w	r1, #0
 8012f68:	0299      	lsls	r1, r3, #10
 8012f6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8012f6e:	0290      	lsls	r0, r2, #10
 8012f70:	4602      	mov	r2, r0
 8012f72:	460b      	mov	r3, r1
 8012f74:	4610      	mov	r0, r2
 8012f76:	4619      	mov	r1, r3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	f04f 0300 	mov.w	r3, #0
 8012f80:	f7f9 f8b6 	bl	800c0f0 <__aeabi_uldivmod>
 8012f84:	4602      	mov	r2, r0
 8012f86:	460b      	mov	r3, r1
 8012f88:	4613      	mov	r3, r2
 8012f8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012f8c:	4b0b      	ldr	r3, [pc, #44]	; (8012fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012f8e:	685b      	ldr	r3, [r3, #4]
 8012f90:	0c1b      	lsrs	r3, r3, #16
 8012f92:	f003 0303 	and.w	r3, r3, #3
 8012f96:	3301      	adds	r3, #1
 8012f98:	005b      	lsls	r3, r3, #1
 8012f9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8012f9c:	68fa      	ldr	r2, [r7, #12]
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8012fa4:	60bb      	str	r3, [r7, #8]
      break;
 8012fa6:	e002      	b.n	8012fae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012fa8:	4b05      	ldr	r3, [pc, #20]	; (8012fc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8012faa:	60bb      	str	r3, [r7, #8]
      break;
 8012fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012fae:	68bb      	ldr	r3, [r7, #8]
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	3710      	adds	r7, #16
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012fba:	bf00      	nop
 8012fbc:	40023800 	.word	0x40023800
 8012fc0:	00f42400 	.word	0x00f42400
 8012fc4:	007a1200 	.word	0x007a1200

08012fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012fc8:	b480      	push	{r7}
 8012fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012fcc:	4b03      	ldr	r3, [pc, #12]	; (8012fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8012fce:	681b      	ldr	r3, [r3, #0]
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd8:	4770      	bx	lr
 8012fda:	bf00      	nop
 8012fdc:	20000014 	.word	0x20000014

08012fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012fe4:	f7ff fff0 	bl	8012fc8 <HAL_RCC_GetHCLKFreq>
 8012fe8:	4602      	mov	r2, r0
 8012fea:	4b05      	ldr	r3, [pc, #20]	; (8013000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8012fec:	689b      	ldr	r3, [r3, #8]
 8012fee:	0a9b      	lsrs	r3, r3, #10
 8012ff0:	f003 0307 	and.w	r3, r3, #7
 8012ff4:	4903      	ldr	r1, [pc, #12]	; (8013004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012ff6:	5ccb      	ldrb	r3, [r1, r3]
 8012ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	bd80      	pop	{r7, pc}
 8013000:	40023800 	.word	0x40023800
 8013004:	0801dd94 	.word	0x0801dd94

08013008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801300c:	f7ff ffdc 	bl	8012fc8 <HAL_RCC_GetHCLKFreq>
 8013010:	4602      	mov	r2, r0
 8013012:	4b05      	ldr	r3, [pc, #20]	; (8013028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8013014:	689b      	ldr	r3, [r3, #8]
 8013016:	0b5b      	lsrs	r3, r3, #13
 8013018:	f003 0307 	and.w	r3, r3, #7
 801301c:	4903      	ldr	r1, [pc, #12]	; (801302c <HAL_RCC_GetPCLK2Freq+0x24>)
 801301e:	5ccb      	ldrb	r3, [r1, r3]
 8013020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013024:	4618      	mov	r0, r3
 8013026:	bd80      	pop	{r7, pc}
 8013028:	40023800 	.word	0x40023800
 801302c:	0801dd94 	.word	0x0801dd94

08013030 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8013030:	b480      	push	{r7}
 8013032:	b083      	sub	sp, #12
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	220f      	movs	r2, #15
 801303e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8013040:	4b12      	ldr	r3, [pc, #72]	; (801308c <HAL_RCC_GetClockConfig+0x5c>)
 8013042:	689b      	ldr	r3, [r3, #8]
 8013044:	f003 0203 	and.w	r2, r3, #3
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801304c:	4b0f      	ldr	r3, [pc, #60]	; (801308c <HAL_RCC_GetClockConfig+0x5c>)
 801304e:	689b      	ldr	r3, [r3, #8]
 8013050:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8013058:	4b0c      	ldr	r3, [pc, #48]	; (801308c <HAL_RCC_GetClockConfig+0x5c>)
 801305a:	689b      	ldr	r3, [r3, #8]
 801305c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8013064:	4b09      	ldr	r3, [pc, #36]	; (801308c <HAL_RCC_GetClockConfig+0x5c>)
 8013066:	689b      	ldr	r3, [r3, #8]
 8013068:	08db      	lsrs	r3, r3, #3
 801306a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8013072:	4b07      	ldr	r3, [pc, #28]	; (8013090 <HAL_RCC_GetClockConfig+0x60>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	f003 0207 	and.w	r2, r3, #7
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	601a      	str	r2, [r3, #0]
}
 801307e:	bf00      	nop
 8013080:	370c      	adds	r7, #12
 8013082:	46bd      	mov	sp, r7
 8013084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013088:	4770      	bx	lr
 801308a:	bf00      	nop
 801308c:	40023800 	.word	0x40023800
 8013090:	40023c00 	.word	0x40023c00

08013094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d101      	bne.n	80130a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80130a2:	2301      	movs	r3, #1
 80130a4:	e07b      	b.n	801319e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d108      	bne.n	80130c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	685b      	ldr	r3, [r3, #4]
 80130b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80130b6:	d009      	beq.n	80130cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2200      	movs	r2, #0
 80130bc:	61da      	str	r2, [r3, #28]
 80130be:	e005      	b.n	80130cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2200      	movs	r2, #0
 80130c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2200      	movs	r2, #0
 80130ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2200      	movs	r2, #0
 80130d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80130d8:	b2db      	uxtb	r3, r3
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d106      	bne.n	80130ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2200      	movs	r2, #0
 80130e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80130e6:	6878      	ldr	r0, [r7, #4]
 80130e8:	f7fb fa60 	bl	800e5ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2202      	movs	r2, #2
 80130f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	681a      	ldr	r2, [r3, #0]
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013102:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	689b      	ldr	r3, [r3, #8]
 8013110:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8013114:	431a      	orrs	r2, r3
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	68db      	ldr	r3, [r3, #12]
 801311a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801311e:	431a      	orrs	r2, r3
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	691b      	ldr	r3, [r3, #16]
 8013124:	f003 0302 	and.w	r3, r3, #2
 8013128:	431a      	orrs	r2, r3
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	695b      	ldr	r3, [r3, #20]
 801312e:	f003 0301 	and.w	r3, r3, #1
 8013132:	431a      	orrs	r2, r3
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	699b      	ldr	r3, [r3, #24]
 8013138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801313c:	431a      	orrs	r2, r3
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	69db      	ldr	r3, [r3, #28]
 8013142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013146:	431a      	orrs	r2, r3
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6a1b      	ldr	r3, [r3, #32]
 801314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013150:	ea42 0103 	orr.w	r1, r2, r3
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013158:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	430a      	orrs	r2, r1
 8013162:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	699b      	ldr	r3, [r3, #24]
 8013168:	0c1b      	lsrs	r3, r3, #16
 801316a:	f003 0104 	and.w	r1, r3, #4
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013172:	f003 0210 	and.w	r2, r3, #16
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	430a      	orrs	r2, r1
 801317c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	69da      	ldr	r2, [r3, #28]
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801318c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2200      	movs	r2, #0
 8013192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2201      	movs	r2, #1
 8013198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801319c:	2300      	movs	r3, #0
}
 801319e:	4618      	mov	r0, r3
 80131a0:	3708      	adds	r7, #8
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}

080131a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80131a6:	b580      	push	{r7, lr}
 80131a8:	b088      	sub	sp, #32
 80131aa:	af00      	add	r7, sp, #0
 80131ac:	60f8      	str	r0, [r7, #12]
 80131ae:	60b9      	str	r1, [r7, #8]
 80131b0:	603b      	str	r3, [r7, #0]
 80131b2:	4613      	mov	r3, r2
 80131b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80131b6:	2300      	movs	r3, #0
 80131b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80131c0:	2b01      	cmp	r3, #1
 80131c2:	d101      	bne.n	80131c8 <HAL_SPI_Transmit+0x22>
 80131c4:	2302      	movs	r3, #2
 80131c6:	e126      	b.n	8013416 <HAL_SPI_Transmit+0x270>
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2201      	movs	r2, #1
 80131cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80131d0:	f7fc ff04 	bl	800ffdc <HAL_GetTick>
 80131d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80131d6:	88fb      	ldrh	r3, [r7, #6]
 80131d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80131e0:	b2db      	uxtb	r3, r3
 80131e2:	2b01      	cmp	r3, #1
 80131e4:	d002      	beq.n	80131ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80131e6:	2302      	movs	r3, #2
 80131e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80131ea:	e10b      	b.n	8013404 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80131ec:	68bb      	ldr	r3, [r7, #8]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d002      	beq.n	80131f8 <HAL_SPI_Transmit+0x52>
 80131f2:	88fb      	ldrh	r3, [r7, #6]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d102      	bne.n	80131fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80131f8:	2301      	movs	r3, #1
 80131fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80131fc:	e102      	b.n	8013404 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	2203      	movs	r2, #3
 8013202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	2200      	movs	r2, #0
 801320a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	68ba      	ldr	r2, [r7, #8]
 8013210:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	88fa      	ldrh	r2, [r7, #6]
 8013216:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	88fa      	ldrh	r2, [r7, #6]
 801321c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	2200      	movs	r2, #0
 8013222:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	2200      	movs	r2, #0
 8013228:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	2200      	movs	r2, #0
 801322e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	2200      	movs	r2, #0
 8013234:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	2200      	movs	r2, #0
 801323a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	689b      	ldr	r3, [r3, #8]
 8013240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013244:	d10f      	bne.n	8013266 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013254:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013264:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013270:	2b40      	cmp	r3, #64	; 0x40
 8013272:	d007      	beq.n	8013284 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	681a      	ldr	r2, [r3, #0]
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	68db      	ldr	r3, [r3, #12]
 8013288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801328c:	d14b      	bne.n	8013326 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	685b      	ldr	r3, [r3, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d002      	beq.n	801329c <HAL_SPI_Transmit+0xf6>
 8013296:	8afb      	ldrh	r3, [r7, #22]
 8013298:	2b01      	cmp	r3, #1
 801329a:	d13e      	bne.n	801331a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132a0:	881a      	ldrh	r2, [r3, #0]
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132ac:	1c9a      	adds	r2, r3, #2
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	3b01      	subs	r3, #1
 80132ba:	b29a      	uxth	r2, r3
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80132c0:	e02b      	b.n	801331a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	689b      	ldr	r3, [r3, #8]
 80132c8:	f003 0302 	and.w	r3, r3, #2
 80132cc:	2b02      	cmp	r3, #2
 80132ce:	d112      	bne.n	80132f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132d4:	881a      	ldrh	r2, [r3, #0]
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132e0:	1c9a      	adds	r2, r3, #2
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80132ea:	b29b      	uxth	r3, r3
 80132ec:	3b01      	subs	r3, #1
 80132ee:	b29a      	uxth	r2, r3
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80132f4:	e011      	b.n	801331a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80132f6:	f7fc fe71 	bl	800ffdc <HAL_GetTick>
 80132fa:	4602      	mov	r2, r0
 80132fc:	69bb      	ldr	r3, [r7, #24]
 80132fe:	1ad3      	subs	r3, r2, r3
 8013300:	683a      	ldr	r2, [r7, #0]
 8013302:	429a      	cmp	r2, r3
 8013304:	d803      	bhi.n	801330e <HAL_SPI_Transmit+0x168>
 8013306:	683b      	ldr	r3, [r7, #0]
 8013308:	f1b3 3fff 	cmp.w	r3, #4294967295
 801330c:	d102      	bne.n	8013314 <HAL_SPI_Transmit+0x16e>
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d102      	bne.n	801331a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8013314:	2303      	movs	r3, #3
 8013316:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013318:	e074      	b.n	8013404 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801331e:	b29b      	uxth	r3, r3
 8013320:	2b00      	cmp	r3, #0
 8013322:	d1ce      	bne.n	80132c2 <HAL_SPI_Transmit+0x11c>
 8013324:	e04c      	b.n	80133c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	685b      	ldr	r3, [r3, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d002      	beq.n	8013334 <HAL_SPI_Transmit+0x18e>
 801332e:	8afb      	ldrh	r3, [r7, #22]
 8013330:	2b01      	cmp	r3, #1
 8013332:	d140      	bne.n	80133b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	330c      	adds	r3, #12
 801333e:	7812      	ldrb	r2, [r2, #0]
 8013340:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013346:	1c5a      	adds	r2, r3, #1
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013350:	b29b      	uxth	r3, r3
 8013352:	3b01      	subs	r3, #1
 8013354:	b29a      	uxth	r2, r3
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801335a:	e02c      	b.n	80133b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	689b      	ldr	r3, [r3, #8]
 8013362:	f003 0302 	and.w	r3, r3, #2
 8013366:	2b02      	cmp	r3, #2
 8013368:	d113      	bne.n	8013392 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	330c      	adds	r3, #12
 8013374:	7812      	ldrb	r2, [r2, #0]
 8013376:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801337c:	1c5a      	adds	r2, r3, #1
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013386:	b29b      	uxth	r3, r3
 8013388:	3b01      	subs	r3, #1
 801338a:	b29a      	uxth	r2, r3
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	86da      	strh	r2, [r3, #54]	; 0x36
 8013390:	e011      	b.n	80133b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013392:	f7fc fe23 	bl	800ffdc <HAL_GetTick>
 8013396:	4602      	mov	r2, r0
 8013398:	69bb      	ldr	r3, [r7, #24]
 801339a:	1ad3      	subs	r3, r2, r3
 801339c:	683a      	ldr	r2, [r7, #0]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d803      	bhi.n	80133aa <HAL_SPI_Transmit+0x204>
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133a8:	d102      	bne.n	80133b0 <HAL_SPI_Transmit+0x20a>
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d102      	bne.n	80133b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80133b0:	2303      	movs	r3, #3
 80133b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80133b4:	e026      	b.n	8013404 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d1cd      	bne.n	801335c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80133c0:	69ba      	ldr	r2, [r7, #24]
 80133c2:	6839      	ldr	r1, [r7, #0]
 80133c4:	68f8      	ldr	r0, [r7, #12]
 80133c6:	f000 fbcb 	bl	8013b60 <SPI_EndRxTxTransaction>
 80133ca:	4603      	mov	r3, r0
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d002      	beq.n	80133d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	2220      	movs	r2, #32
 80133d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	689b      	ldr	r3, [r3, #8]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d10a      	bne.n	80133f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80133de:	2300      	movs	r3, #0
 80133e0:	613b      	str	r3, [r7, #16]
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	68db      	ldr	r3, [r3, #12]
 80133e8:	613b      	str	r3, [r7, #16]
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	689b      	ldr	r3, [r3, #8]
 80133f0:	613b      	str	r3, [r7, #16]
 80133f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d002      	beq.n	8013402 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80133fc:	2301      	movs	r3, #1
 80133fe:	77fb      	strb	r3, [r7, #31]
 8013400:	e000      	b.n	8013404 <HAL_SPI_Transmit+0x25e>
  }

error:
 8013402:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	2201      	movs	r2, #1
 8013408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	2200      	movs	r2, #0
 8013410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013414:	7ffb      	ldrb	r3, [r7, #31]
}
 8013416:	4618      	mov	r0, r3
 8013418:	3720      	adds	r7, #32
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}

0801341e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801341e:	b580      	push	{r7, lr}
 8013420:	b088      	sub	sp, #32
 8013422:	af02      	add	r7, sp, #8
 8013424:	60f8      	str	r0, [r7, #12]
 8013426:	60b9      	str	r1, [r7, #8]
 8013428:	603b      	str	r3, [r7, #0]
 801342a:	4613      	mov	r3, r2
 801342c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801342e:	2300      	movs	r3, #0
 8013430:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801343a:	d112      	bne.n	8013462 <HAL_SPI_Receive+0x44>
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	689b      	ldr	r3, [r3, #8]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d10e      	bne.n	8013462 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	2204      	movs	r2, #4
 8013448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801344c:	88fa      	ldrh	r2, [r7, #6]
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	9300      	str	r3, [sp, #0]
 8013452:	4613      	mov	r3, r2
 8013454:	68ba      	ldr	r2, [r7, #8]
 8013456:	68b9      	ldr	r1, [r7, #8]
 8013458:	68f8      	ldr	r0, [r7, #12]
 801345a:	f000 f8f1 	bl	8013640 <HAL_SPI_TransmitReceive>
 801345e:	4603      	mov	r3, r0
 8013460:	e0ea      	b.n	8013638 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013468:	2b01      	cmp	r3, #1
 801346a:	d101      	bne.n	8013470 <HAL_SPI_Receive+0x52>
 801346c:	2302      	movs	r3, #2
 801346e:	e0e3      	b.n	8013638 <HAL_SPI_Receive+0x21a>
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	2201      	movs	r2, #1
 8013474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013478:	f7fc fdb0 	bl	800ffdc <HAL_GetTick>
 801347c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013484:	b2db      	uxtb	r3, r3
 8013486:	2b01      	cmp	r3, #1
 8013488:	d002      	beq.n	8013490 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801348a:	2302      	movs	r3, #2
 801348c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801348e:	e0ca      	b.n	8013626 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8013490:	68bb      	ldr	r3, [r7, #8]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d002      	beq.n	801349c <HAL_SPI_Receive+0x7e>
 8013496:	88fb      	ldrh	r3, [r7, #6]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d102      	bne.n	80134a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801349c:	2301      	movs	r3, #1
 801349e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80134a0:	e0c1      	b.n	8013626 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	2204      	movs	r2, #4
 80134a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	2200      	movs	r2, #0
 80134ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	68ba      	ldr	r2, [r7, #8]
 80134b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	88fa      	ldrh	r2, [r7, #6]
 80134ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	88fa      	ldrh	r2, [r7, #6]
 80134c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	2200      	movs	r2, #0
 80134c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	2200      	movs	r2, #0
 80134cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	2200      	movs	r2, #0
 80134d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	2200      	movs	r2, #0
 80134d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2200      	movs	r2, #0
 80134de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	689b      	ldr	r3, [r3, #8]
 80134e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80134e8:	d10f      	bne.n	801350a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	681a      	ldr	r2, [r3, #0]
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80134f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	681a      	ldr	r2, [r3, #0]
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013508:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013514:	2b40      	cmp	r3, #64	; 0x40
 8013516:	d007      	beq.n	8013528 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	681a      	ldr	r2, [r3, #0]
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013526:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	68db      	ldr	r3, [r3, #12]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d162      	bne.n	80135f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8013530:	e02e      	b.n	8013590 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	689b      	ldr	r3, [r3, #8]
 8013538:	f003 0301 	and.w	r3, r3, #1
 801353c:	2b01      	cmp	r3, #1
 801353e:	d115      	bne.n	801356c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	f103 020c 	add.w	r2, r3, #12
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801354c:	7812      	ldrb	r2, [r2, #0]
 801354e:	b2d2      	uxtb	r2, r2
 8013550:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013556:	1c5a      	adds	r2, r3, #1
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013560:	b29b      	uxth	r3, r3
 8013562:	3b01      	subs	r3, #1
 8013564:	b29a      	uxth	r2, r3
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	87da      	strh	r2, [r3, #62]	; 0x3e
 801356a:	e011      	b.n	8013590 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801356c:	f7fc fd36 	bl	800ffdc <HAL_GetTick>
 8013570:	4602      	mov	r2, r0
 8013572:	693b      	ldr	r3, [r7, #16]
 8013574:	1ad3      	subs	r3, r2, r3
 8013576:	683a      	ldr	r2, [r7, #0]
 8013578:	429a      	cmp	r2, r3
 801357a:	d803      	bhi.n	8013584 <HAL_SPI_Receive+0x166>
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013582:	d102      	bne.n	801358a <HAL_SPI_Receive+0x16c>
 8013584:	683b      	ldr	r3, [r7, #0]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d102      	bne.n	8013590 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801358a:	2303      	movs	r3, #3
 801358c:	75fb      	strb	r3, [r7, #23]
          goto error;
 801358e:	e04a      	b.n	8013626 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013594:	b29b      	uxth	r3, r3
 8013596:	2b00      	cmp	r3, #0
 8013598:	d1cb      	bne.n	8013532 <HAL_SPI_Receive+0x114>
 801359a:	e031      	b.n	8013600 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	689b      	ldr	r3, [r3, #8]
 80135a2:	f003 0301 	and.w	r3, r3, #1
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	d113      	bne.n	80135d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	68da      	ldr	r2, [r3, #12]
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135b4:	b292      	uxth	r2, r2
 80135b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135bc:	1c9a      	adds	r2, r3, #2
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80135c6:	b29b      	uxth	r3, r3
 80135c8:	3b01      	subs	r3, #1
 80135ca:	b29a      	uxth	r2, r3
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80135d0:	e011      	b.n	80135f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80135d2:	f7fc fd03 	bl	800ffdc <HAL_GetTick>
 80135d6:	4602      	mov	r2, r0
 80135d8:	693b      	ldr	r3, [r7, #16]
 80135da:	1ad3      	subs	r3, r2, r3
 80135dc:	683a      	ldr	r2, [r7, #0]
 80135de:	429a      	cmp	r2, r3
 80135e0:	d803      	bhi.n	80135ea <HAL_SPI_Receive+0x1cc>
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135e8:	d102      	bne.n	80135f0 <HAL_SPI_Receive+0x1d2>
 80135ea:	683b      	ldr	r3, [r7, #0]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d102      	bne.n	80135f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80135f0:	2303      	movs	r3, #3
 80135f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80135f4:	e017      	b.n	8013626 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80135fa:	b29b      	uxth	r3, r3
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d1cd      	bne.n	801359c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013600:	693a      	ldr	r2, [r7, #16]
 8013602:	6839      	ldr	r1, [r7, #0]
 8013604:	68f8      	ldr	r0, [r7, #12]
 8013606:	f000 fa45 	bl	8013a94 <SPI_EndRxTransaction>
 801360a:	4603      	mov	r3, r0
 801360c:	2b00      	cmp	r3, #0
 801360e:	d002      	beq.n	8013616 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	2220      	movs	r2, #32
 8013614:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801361a:	2b00      	cmp	r3, #0
 801361c:	d002      	beq.n	8013624 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801361e:	2301      	movs	r3, #1
 8013620:	75fb      	strb	r3, [r7, #23]
 8013622:	e000      	b.n	8013626 <HAL_SPI_Receive+0x208>
  }

error :
 8013624:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	2201      	movs	r2, #1
 801362a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	2200      	movs	r2, #0
 8013632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013636:	7dfb      	ldrb	r3, [r7, #23]
}
 8013638:	4618      	mov	r0, r3
 801363a:	3718      	adds	r7, #24
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}

08013640 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b08c      	sub	sp, #48	; 0x30
 8013644:	af00      	add	r7, sp, #0
 8013646:	60f8      	str	r0, [r7, #12]
 8013648:	60b9      	str	r1, [r7, #8]
 801364a:	607a      	str	r2, [r7, #4]
 801364c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801364e:	2301      	movs	r3, #1
 8013650:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013652:	2300      	movs	r3, #0
 8013654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801365e:	2b01      	cmp	r3, #1
 8013660:	d101      	bne.n	8013666 <HAL_SPI_TransmitReceive+0x26>
 8013662:	2302      	movs	r3, #2
 8013664:	e18a      	b.n	801397c <HAL_SPI_TransmitReceive+0x33c>
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	2201      	movs	r2, #1
 801366a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801366e:	f7fc fcb5 	bl	800ffdc <HAL_GetTick>
 8013672:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801367a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	685b      	ldr	r3, [r3, #4]
 8013682:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8013684:	887b      	ldrh	r3, [r7, #2]
 8013686:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801368c:	2b01      	cmp	r3, #1
 801368e:	d00f      	beq.n	80136b0 <HAL_SPI_TransmitReceive+0x70>
 8013690:	69fb      	ldr	r3, [r7, #28]
 8013692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013696:	d107      	bne.n	80136a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	689b      	ldr	r3, [r3, #8]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d103      	bne.n	80136a8 <HAL_SPI_TransmitReceive+0x68>
 80136a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80136a4:	2b04      	cmp	r3, #4
 80136a6:	d003      	beq.n	80136b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80136a8:	2302      	movs	r3, #2
 80136aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80136ae:	e15b      	b.n	8013968 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d005      	beq.n	80136c2 <HAL_SPI_TransmitReceive+0x82>
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d002      	beq.n	80136c2 <HAL_SPI_TransmitReceive+0x82>
 80136bc:	887b      	ldrh	r3, [r7, #2]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d103      	bne.n	80136ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80136c2:	2301      	movs	r3, #1
 80136c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80136c8:	e14e      	b.n	8013968 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80136d0:	b2db      	uxtb	r3, r3
 80136d2:	2b04      	cmp	r3, #4
 80136d4:	d003      	beq.n	80136de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	2205      	movs	r2, #5
 80136da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	2200      	movs	r2, #0
 80136e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	687a      	ldr	r2, [r7, #4]
 80136e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	887a      	ldrh	r2, [r7, #2]
 80136ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	887a      	ldrh	r2, [r7, #2]
 80136f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	68ba      	ldr	r2, [r7, #8]
 80136fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	887a      	ldrh	r2, [r7, #2]
 8013700:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	887a      	ldrh	r2, [r7, #2]
 8013706:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	2200      	movs	r2, #0
 801370c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	2200      	movs	r2, #0
 8013712:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801371e:	2b40      	cmp	r3, #64	; 0x40
 8013720:	d007      	beq.n	8013732 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	681a      	ldr	r2, [r3, #0]
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013730:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	68db      	ldr	r3, [r3, #12]
 8013736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801373a:	d178      	bne.n	801382e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	685b      	ldr	r3, [r3, #4]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d002      	beq.n	801374a <HAL_SPI_TransmitReceive+0x10a>
 8013744:	8b7b      	ldrh	r3, [r7, #26]
 8013746:	2b01      	cmp	r3, #1
 8013748:	d166      	bne.n	8013818 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801374e:	881a      	ldrh	r2, [r3, #0]
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801375a:	1c9a      	adds	r2, r3, #2
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013764:	b29b      	uxth	r3, r3
 8013766:	3b01      	subs	r3, #1
 8013768:	b29a      	uxth	r2, r3
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801376e:	e053      	b.n	8013818 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	689b      	ldr	r3, [r3, #8]
 8013776:	f003 0302 	and.w	r3, r3, #2
 801377a:	2b02      	cmp	r3, #2
 801377c:	d11b      	bne.n	80137b6 <HAL_SPI_TransmitReceive+0x176>
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013782:	b29b      	uxth	r3, r3
 8013784:	2b00      	cmp	r3, #0
 8013786:	d016      	beq.n	80137b6 <HAL_SPI_TransmitReceive+0x176>
 8013788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801378a:	2b01      	cmp	r3, #1
 801378c:	d113      	bne.n	80137b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013792:	881a      	ldrh	r2, [r3, #0]
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801379e:	1c9a      	adds	r2, r3, #2
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80137a8:	b29b      	uxth	r3, r3
 80137aa:	3b01      	subs	r3, #1
 80137ac:	b29a      	uxth	r2, r3
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80137b2:	2300      	movs	r3, #0
 80137b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	689b      	ldr	r3, [r3, #8]
 80137bc:	f003 0301 	and.w	r3, r3, #1
 80137c0:	2b01      	cmp	r3, #1
 80137c2:	d119      	bne.n	80137f8 <HAL_SPI_TransmitReceive+0x1b8>
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80137c8:	b29b      	uxth	r3, r3
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d014      	beq.n	80137f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	68da      	ldr	r2, [r3, #12]
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137d8:	b292      	uxth	r2, r2
 80137da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137e0:	1c9a      	adds	r2, r3, #2
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	3b01      	subs	r3, #1
 80137ee:	b29a      	uxth	r2, r3
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80137f4:	2301      	movs	r3, #1
 80137f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80137f8:	f7fc fbf0 	bl	800ffdc <HAL_GetTick>
 80137fc:	4602      	mov	r2, r0
 80137fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013800:	1ad3      	subs	r3, r2, r3
 8013802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013804:	429a      	cmp	r2, r3
 8013806:	d807      	bhi.n	8013818 <HAL_SPI_TransmitReceive+0x1d8>
 8013808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801380e:	d003      	beq.n	8013818 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013810:	2303      	movs	r3, #3
 8013812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013816:	e0a7      	b.n	8013968 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801381c:	b29b      	uxth	r3, r3
 801381e:	2b00      	cmp	r3, #0
 8013820:	d1a6      	bne.n	8013770 <HAL_SPI_TransmitReceive+0x130>
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013826:	b29b      	uxth	r3, r3
 8013828:	2b00      	cmp	r3, #0
 801382a:	d1a1      	bne.n	8013770 <HAL_SPI_TransmitReceive+0x130>
 801382c:	e07c      	b.n	8013928 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	685b      	ldr	r3, [r3, #4]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d002      	beq.n	801383c <HAL_SPI_TransmitReceive+0x1fc>
 8013836:	8b7b      	ldrh	r3, [r7, #26]
 8013838:	2b01      	cmp	r3, #1
 801383a:	d16b      	bne.n	8013914 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	330c      	adds	r3, #12
 8013846:	7812      	ldrb	r2, [r2, #0]
 8013848:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801384e:	1c5a      	adds	r2, r3, #1
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013858:	b29b      	uxth	r3, r3
 801385a:	3b01      	subs	r3, #1
 801385c:	b29a      	uxth	r2, r3
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013862:	e057      	b.n	8013914 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	689b      	ldr	r3, [r3, #8]
 801386a:	f003 0302 	and.w	r3, r3, #2
 801386e:	2b02      	cmp	r3, #2
 8013870:	d11c      	bne.n	80138ac <HAL_SPI_TransmitReceive+0x26c>
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013876:	b29b      	uxth	r3, r3
 8013878:	2b00      	cmp	r3, #0
 801387a:	d017      	beq.n	80138ac <HAL_SPI_TransmitReceive+0x26c>
 801387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801387e:	2b01      	cmp	r3, #1
 8013880:	d114      	bne.n	80138ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	330c      	adds	r3, #12
 801388c:	7812      	ldrb	r2, [r2, #0]
 801388e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013894:	1c5a      	adds	r2, r3, #1
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801389e:	b29b      	uxth	r3, r3
 80138a0:	3b01      	subs	r3, #1
 80138a2:	b29a      	uxth	r2, r3
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80138a8:	2300      	movs	r3, #0
 80138aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	689b      	ldr	r3, [r3, #8]
 80138b2:	f003 0301 	and.w	r3, r3, #1
 80138b6:	2b01      	cmp	r3, #1
 80138b8:	d119      	bne.n	80138ee <HAL_SPI_TransmitReceive+0x2ae>
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80138be:	b29b      	uxth	r3, r3
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d014      	beq.n	80138ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	68da      	ldr	r2, [r3, #12]
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138ce:	b2d2      	uxtb	r2, r2
 80138d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138d6:	1c5a      	adds	r2, r3, #1
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80138e0:	b29b      	uxth	r3, r3
 80138e2:	3b01      	subs	r3, #1
 80138e4:	b29a      	uxth	r2, r3
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80138ea:	2301      	movs	r3, #1
 80138ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80138ee:	f7fc fb75 	bl	800ffdc <HAL_GetTick>
 80138f2:	4602      	mov	r2, r0
 80138f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f6:	1ad3      	subs	r3, r2, r3
 80138f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d803      	bhi.n	8013906 <HAL_SPI_TransmitReceive+0x2c6>
 80138fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013904:	d102      	bne.n	801390c <HAL_SPI_TransmitReceive+0x2cc>
 8013906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013908:	2b00      	cmp	r3, #0
 801390a:	d103      	bne.n	8013914 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801390c:	2303      	movs	r3, #3
 801390e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013912:	e029      	b.n	8013968 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013918:	b29b      	uxth	r3, r3
 801391a:	2b00      	cmp	r3, #0
 801391c:	d1a2      	bne.n	8013864 <HAL_SPI_TransmitReceive+0x224>
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013922:	b29b      	uxth	r3, r3
 8013924:	2b00      	cmp	r3, #0
 8013926:	d19d      	bne.n	8013864 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801392a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801392c:	68f8      	ldr	r0, [r7, #12]
 801392e:	f000 f917 	bl	8013b60 <SPI_EndRxTxTransaction>
 8013932:	4603      	mov	r3, r0
 8013934:	2b00      	cmp	r3, #0
 8013936:	d006      	beq.n	8013946 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013938:	2301      	movs	r3, #1
 801393a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	2220      	movs	r2, #32
 8013942:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013944:	e010      	b.n	8013968 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	689b      	ldr	r3, [r3, #8]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d10b      	bne.n	8013966 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801394e:	2300      	movs	r3, #0
 8013950:	617b      	str	r3, [r7, #20]
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	68db      	ldr	r3, [r3, #12]
 8013958:	617b      	str	r3, [r7, #20]
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	689b      	ldr	r3, [r3, #8]
 8013960:	617b      	str	r3, [r7, #20]
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	e000      	b.n	8013968 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8013966:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	2201      	movs	r2, #1
 801396c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	2200      	movs	r2, #0
 8013974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013978:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801397c:	4618      	mov	r0, r3
 801397e:	3730      	adds	r7, #48	; 0x30
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b088      	sub	sp, #32
 8013988:	af00      	add	r7, sp, #0
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	60b9      	str	r1, [r7, #8]
 801398e:	603b      	str	r3, [r7, #0]
 8013990:	4613      	mov	r3, r2
 8013992:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8013994:	f7fc fb22 	bl	800ffdc <HAL_GetTick>
 8013998:	4602      	mov	r2, r0
 801399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399c:	1a9b      	subs	r3, r3, r2
 801399e:	683a      	ldr	r2, [r7, #0]
 80139a0:	4413      	add	r3, r2
 80139a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80139a4:	f7fc fb1a 	bl	800ffdc <HAL_GetTick>
 80139a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80139aa:	4b39      	ldr	r3, [pc, #228]	; (8013a90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	015b      	lsls	r3, r3, #5
 80139b0:	0d1b      	lsrs	r3, r3, #20
 80139b2:	69fa      	ldr	r2, [r7, #28]
 80139b4:	fb02 f303 	mul.w	r3, r2, r3
 80139b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80139ba:	e054      	b.n	8013a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139c2:	d050      	beq.n	8013a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80139c4:	f7fc fb0a 	bl	800ffdc <HAL_GetTick>
 80139c8:	4602      	mov	r2, r0
 80139ca:	69bb      	ldr	r3, [r7, #24]
 80139cc:	1ad3      	subs	r3, r2, r3
 80139ce:	69fa      	ldr	r2, [r7, #28]
 80139d0:	429a      	cmp	r2, r3
 80139d2:	d902      	bls.n	80139da <SPI_WaitFlagStateUntilTimeout+0x56>
 80139d4:	69fb      	ldr	r3, [r7, #28]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d13d      	bne.n	8013a56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	685a      	ldr	r2, [r3, #4]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80139e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80139f2:	d111      	bne.n	8013a18 <SPI_WaitFlagStateUntilTimeout+0x94>
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	689b      	ldr	r3, [r3, #8]
 80139f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80139fc:	d004      	beq.n	8013a08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	689b      	ldr	r3, [r3, #8]
 8013a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013a06:	d107      	bne.n	8013a18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	681a      	ldr	r2, [r3, #0]
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013a16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013a20:	d10f      	bne.n	8013a42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	681a      	ldr	r2, [r3, #0]
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013a30:	601a      	str	r2, [r3, #0]
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	681a      	ldr	r2, [r3, #0]
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013a40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	2201      	movs	r2, #1
 8013a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8013a52:	2303      	movs	r3, #3
 8013a54:	e017      	b.n	8013a86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d101      	bne.n	8013a60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8013a60:	697b      	ldr	r3, [r7, #20]
 8013a62:	3b01      	subs	r3, #1
 8013a64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	689a      	ldr	r2, [r3, #8]
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	4013      	ands	r3, r2
 8013a70:	68ba      	ldr	r2, [r7, #8]
 8013a72:	429a      	cmp	r2, r3
 8013a74:	bf0c      	ite	eq
 8013a76:	2301      	moveq	r3, #1
 8013a78:	2300      	movne	r3, #0
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	461a      	mov	r2, r3
 8013a7e:	79fb      	ldrb	r3, [r7, #7]
 8013a80:	429a      	cmp	r2, r3
 8013a82:	d19b      	bne.n	80139bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8013a84:	2300      	movs	r3, #0
}
 8013a86:	4618      	mov	r0, r3
 8013a88:	3720      	adds	r7, #32
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}
 8013a8e:	bf00      	nop
 8013a90:	20000014 	.word	0x20000014

08013a94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b086      	sub	sp, #24
 8013a98:	af02      	add	r7, sp, #8
 8013a9a:	60f8      	str	r0, [r7, #12]
 8013a9c:	60b9      	str	r1, [r7, #8]
 8013a9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	685b      	ldr	r3, [r3, #4]
 8013aa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013aa8:	d111      	bne.n	8013ace <SPI_EndRxTransaction+0x3a>
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	689b      	ldr	r3, [r3, #8]
 8013aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013ab2:	d004      	beq.n	8013abe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	689b      	ldr	r3, [r3, #8]
 8013ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013abc:	d107      	bne.n	8013ace <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	681a      	ldr	r2, [r3, #0]
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013acc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	685b      	ldr	r3, [r3, #4]
 8013ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013ad6:	d12a      	bne.n	8013b2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	689b      	ldr	r3, [r3, #8]
 8013adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013ae0:	d012      	beq.n	8013b08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	9300      	str	r3, [sp, #0]
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	2180      	movs	r1, #128	; 0x80
 8013aec:	68f8      	ldr	r0, [r7, #12]
 8013aee:	f7ff ff49 	bl	8013984 <SPI_WaitFlagStateUntilTimeout>
 8013af2:	4603      	mov	r3, r0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d02d      	beq.n	8013b54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013afc:	f043 0220 	orr.w	r2, r3, #32
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013b04:	2303      	movs	r3, #3
 8013b06:	e026      	b.n	8013b56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	9300      	str	r3, [sp, #0]
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	2200      	movs	r2, #0
 8013b10:	2101      	movs	r1, #1
 8013b12:	68f8      	ldr	r0, [r7, #12]
 8013b14:	f7ff ff36 	bl	8013984 <SPI_WaitFlagStateUntilTimeout>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d01a      	beq.n	8013b54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b22:	f043 0220 	orr.w	r2, r3, #32
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013b2a:	2303      	movs	r3, #3
 8013b2c:	e013      	b.n	8013b56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	9300      	str	r3, [sp, #0]
 8013b32:	68bb      	ldr	r3, [r7, #8]
 8013b34:	2200      	movs	r2, #0
 8013b36:	2101      	movs	r1, #1
 8013b38:	68f8      	ldr	r0, [r7, #12]
 8013b3a:	f7ff ff23 	bl	8013984 <SPI_WaitFlagStateUntilTimeout>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d007      	beq.n	8013b54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b48:	f043 0220 	orr.w	r2, r3, #32
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013b50:	2303      	movs	r3, #3
 8013b52:	e000      	b.n	8013b56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8013b54:	2300      	movs	r3, #0
}
 8013b56:	4618      	mov	r0, r3
 8013b58:	3710      	adds	r7, #16
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}
	...

08013b60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b088      	sub	sp, #32
 8013b64:	af02      	add	r7, sp, #8
 8013b66:	60f8      	str	r0, [r7, #12]
 8013b68:	60b9      	str	r1, [r7, #8]
 8013b6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013b6c:	4b1b      	ldr	r3, [pc, #108]	; (8013bdc <SPI_EndRxTxTransaction+0x7c>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	4a1b      	ldr	r2, [pc, #108]	; (8013be0 <SPI_EndRxTxTransaction+0x80>)
 8013b72:	fba2 2303 	umull	r2, r3, r2, r3
 8013b76:	0d5b      	lsrs	r3, r3, #21
 8013b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013b7c:	fb02 f303 	mul.w	r3, r2, r3
 8013b80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	685b      	ldr	r3, [r3, #4]
 8013b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013b8a:	d112      	bne.n	8013bb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	9300      	str	r3, [sp, #0]
 8013b90:	68bb      	ldr	r3, [r7, #8]
 8013b92:	2200      	movs	r2, #0
 8013b94:	2180      	movs	r1, #128	; 0x80
 8013b96:	68f8      	ldr	r0, [r7, #12]
 8013b98:	f7ff fef4 	bl	8013984 <SPI_WaitFlagStateUntilTimeout>
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d016      	beq.n	8013bd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ba6:	f043 0220 	orr.w	r2, r3, #32
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013bae:	2303      	movs	r3, #3
 8013bb0:	e00f      	b.n	8013bd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8013bb2:	697b      	ldr	r3, [r7, #20]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d00a      	beq.n	8013bce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8013bb8:	697b      	ldr	r3, [r7, #20]
 8013bba:	3b01      	subs	r3, #1
 8013bbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	689b      	ldr	r3, [r3, #8]
 8013bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013bc8:	2b80      	cmp	r3, #128	; 0x80
 8013bca:	d0f2      	beq.n	8013bb2 <SPI_EndRxTxTransaction+0x52>
 8013bcc:	e000      	b.n	8013bd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8013bce:	bf00      	nop
  }

  return HAL_OK;
 8013bd0:	2300      	movs	r3, #0
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	3718      	adds	r7, #24
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd80      	pop	{r7, pc}
 8013bda:	bf00      	nop
 8013bdc:	20000014 	.word	0x20000014
 8013be0:	165e9f81 	.word	0x165e9f81

08013be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b082      	sub	sp, #8
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d101      	bne.n	8013bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013bf2:	2301      	movs	r3, #1
 8013bf4:	e041      	b.n	8013c7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013bfc:	b2db      	uxtb	r3, r3
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d106      	bne.n	8013c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	2200      	movs	r2, #0
 8013c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f000 f839 	bl	8013c82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2202      	movs	r2, #2
 8013c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681a      	ldr	r2, [r3, #0]
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	3304      	adds	r3, #4
 8013c20:	4619      	mov	r1, r3
 8013c22:	4610      	mov	r0, r2
 8013c24:	f000 fbf0 	bl	8014408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	2201      	movs	r2, #1
 8013c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2201      	movs	r2, #1
 8013c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	2201      	movs	r2, #1
 8013c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	2201      	movs	r2, #1
 8013c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2201      	movs	r2, #1
 8013c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2201      	movs	r2, #1
 8013c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2201      	movs	r2, #1
 8013c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2201      	movs	r2, #1
 8013c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2201      	movs	r2, #1
 8013c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2201      	movs	r2, #1
 8013c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013c78:	2300      	movs	r3, #0
}
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	3708      	adds	r7, #8
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}

08013c82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8013c82:	b480      	push	{r7}
 8013c84:	b083      	sub	sp, #12
 8013c86:	af00      	add	r7, sp, #0
 8013c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8013c8a:	bf00      	nop
 8013c8c:	370c      	adds	r7, #12
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c94:	4770      	bx	lr
	...

08013c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013c98:	b480      	push	{r7}
 8013c9a:	b085      	sub	sp, #20
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ca6:	b2db      	uxtb	r3, r3
 8013ca8:	2b01      	cmp	r3, #1
 8013caa:	d001      	beq.n	8013cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013cac:	2301      	movs	r3, #1
 8013cae:	e044      	b.n	8013d3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2202      	movs	r2, #2
 8013cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	68da      	ldr	r2, [r3, #12]
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	f042 0201 	orr.w	r2, r2, #1
 8013cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	4a1e      	ldr	r2, [pc, #120]	; (8013d48 <HAL_TIM_Base_Start_IT+0xb0>)
 8013cce:	4293      	cmp	r3, r2
 8013cd0:	d018      	beq.n	8013d04 <HAL_TIM_Base_Start_IT+0x6c>
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013cda:	d013      	beq.n	8013d04 <HAL_TIM_Base_Start_IT+0x6c>
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	4a1a      	ldr	r2, [pc, #104]	; (8013d4c <HAL_TIM_Base_Start_IT+0xb4>)
 8013ce2:	4293      	cmp	r3, r2
 8013ce4:	d00e      	beq.n	8013d04 <HAL_TIM_Base_Start_IT+0x6c>
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	4a19      	ldr	r2, [pc, #100]	; (8013d50 <HAL_TIM_Base_Start_IT+0xb8>)
 8013cec:	4293      	cmp	r3, r2
 8013cee:	d009      	beq.n	8013d04 <HAL_TIM_Base_Start_IT+0x6c>
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	4a17      	ldr	r2, [pc, #92]	; (8013d54 <HAL_TIM_Base_Start_IT+0xbc>)
 8013cf6:	4293      	cmp	r3, r2
 8013cf8:	d004      	beq.n	8013d04 <HAL_TIM_Base_Start_IT+0x6c>
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	4a16      	ldr	r2, [pc, #88]	; (8013d58 <HAL_TIM_Base_Start_IT+0xc0>)
 8013d00:	4293      	cmp	r3, r2
 8013d02:	d111      	bne.n	8013d28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	689b      	ldr	r3, [r3, #8]
 8013d0a:	f003 0307 	and.w	r3, r3, #7
 8013d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	2b06      	cmp	r3, #6
 8013d14:	d010      	beq.n	8013d38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	681a      	ldr	r2, [r3, #0]
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	f042 0201 	orr.w	r2, r2, #1
 8013d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013d26:	e007      	b.n	8013d38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	f042 0201 	orr.w	r2, r2, #1
 8013d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013d38:	2300      	movs	r3, #0
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3714      	adds	r7, #20
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d44:	4770      	bx	lr
 8013d46:	bf00      	nop
 8013d48:	40010000 	.word	0x40010000
 8013d4c:	40000400 	.word	0x40000400
 8013d50:	40000800 	.word	0x40000800
 8013d54:	40000c00 	.word	0x40000c00
 8013d58:	40014000 	.word	0x40014000

08013d5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b082      	sub	sp, #8
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d101      	bne.n	8013d6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	e041      	b.n	8013df2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013d74:	b2db      	uxtb	r3, r3
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d106      	bne.n	8013d88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013d82:	6878      	ldr	r0, [r7, #4]
 8013d84:	f7fa fc90 	bl	800e6a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	2202      	movs	r2, #2
 8013d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681a      	ldr	r2, [r3, #0]
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	3304      	adds	r3, #4
 8013d98:	4619      	mov	r1, r3
 8013d9a:	4610      	mov	r0, r2
 8013d9c:	f000 fb34 	bl	8014408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	2201      	movs	r2, #1
 8013da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2201      	movs	r2, #1
 8013dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2201      	movs	r2, #1
 8013db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	2201      	movs	r2, #1
 8013dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2201      	movs	r2, #1
 8013dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2201      	movs	r2, #1
 8013dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2201      	movs	r2, #1
 8013dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	2201      	movs	r2, #1
 8013ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	2201      	movs	r2, #1
 8013de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2201      	movs	r2, #1
 8013dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013df0:	2300      	movs	r3, #0
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	3708      	adds	r7, #8
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}
	...

08013dfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b084      	sub	sp, #16
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8013e06:	683b      	ldr	r3, [r7, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d109      	bne.n	8013e20 <HAL_TIM_PWM_Start+0x24>
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013e12:	b2db      	uxtb	r3, r3
 8013e14:	2b01      	cmp	r3, #1
 8013e16:	bf14      	ite	ne
 8013e18:	2301      	movne	r3, #1
 8013e1a:	2300      	moveq	r3, #0
 8013e1c:	b2db      	uxtb	r3, r3
 8013e1e:	e022      	b.n	8013e66 <HAL_TIM_PWM_Start+0x6a>
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	2b04      	cmp	r3, #4
 8013e24:	d109      	bne.n	8013e3a <HAL_TIM_PWM_Start+0x3e>
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013e2c:	b2db      	uxtb	r3, r3
 8013e2e:	2b01      	cmp	r3, #1
 8013e30:	bf14      	ite	ne
 8013e32:	2301      	movne	r3, #1
 8013e34:	2300      	moveq	r3, #0
 8013e36:	b2db      	uxtb	r3, r3
 8013e38:	e015      	b.n	8013e66 <HAL_TIM_PWM_Start+0x6a>
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	2b08      	cmp	r3, #8
 8013e3e:	d109      	bne.n	8013e54 <HAL_TIM_PWM_Start+0x58>
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013e46:	b2db      	uxtb	r3, r3
 8013e48:	2b01      	cmp	r3, #1
 8013e4a:	bf14      	ite	ne
 8013e4c:	2301      	movne	r3, #1
 8013e4e:	2300      	moveq	r3, #0
 8013e50:	b2db      	uxtb	r3, r3
 8013e52:	e008      	b.n	8013e66 <HAL_TIM_PWM_Start+0x6a>
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013e5a:	b2db      	uxtb	r3, r3
 8013e5c:	2b01      	cmp	r3, #1
 8013e5e:	bf14      	ite	ne
 8013e60:	2301      	movne	r3, #1
 8013e62:	2300      	moveq	r3, #0
 8013e64:	b2db      	uxtb	r3, r3
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d001      	beq.n	8013e6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8013e6a:	2301      	movs	r3, #1
 8013e6c:	e068      	b.n	8013f40 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013e6e:	683b      	ldr	r3, [r7, #0]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d104      	bne.n	8013e7e <HAL_TIM_PWM_Start+0x82>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2202      	movs	r2, #2
 8013e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013e7c:	e013      	b.n	8013ea6 <HAL_TIM_PWM_Start+0xaa>
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	2b04      	cmp	r3, #4
 8013e82:	d104      	bne.n	8013e8e <HAL_TIM_PWM_Start+0x92>
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2202      	movs	r2, #2
 8013e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013e8c:	e00b      	b.n	8013ea6 <HAL_TIM_PWM_Start+0xaa>
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	2b08      	cmp	r3, #8
 8013e92:	d104      	bne.n	8013e9e <HAL_TIM_PWM_Start+0xa2>
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	2202      	movs	r2, #2
 8013e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013e9c:	e003      	b.n	8013ea6 <HAL_TIM_PWM_Start+0xaa>
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2202      	movs	r2, #2
 8013ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	2201      	movs	r2, #1
 8013eac:	6839      	ldr	r1, [r7, #0]
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f000 fcb6 	bl	8014820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	4a23      	ldr	r2, [pc, #140]	; (8013f48 <HAL_TIM_PWM_Start+0x14c>)
 8013eba:	4293      	cmp	r3, r2
 8013ebc:	d107      	bne.n	8013ece <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013ecc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	4a1d      	ldr	r2, [pc, #116]	; (8013f48 <HAL_TIM_PWM_Start+0x14c>)
 8013ed4:	4293      	cmp	r3, r2
 8013ed6:	d018      	beq.n	8013f0a <HAL_TIM_PWM_Start+0x10e>
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013ee0:	d013      	beq.n	8013f0a <HAL_TIM_PWM_Start+0x10e>
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	4a19      	ldr	r2, [pc, #100]	; (8013f4c <HAL_TIM_PWM_Start+0x150>)
 8013ee8:	4293      	cmp	r3, r2
 8013eea:	d00e      	beq.n	8013f0a <HAL_TIM_PWM_Start+0x10e>
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	4a17      	ldr	r2, [pc, #92]	; (8013f50 <HAL_TIM_PWM_Start+0x154>)
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	d009      	beq.n	8013f0a <HAL_TIM_PWM_Start+0x10e>
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	4a16      	ldr	r2, [pc, #88]	; (8013f54 <HAL_TIM_PWM_Start+0x158>)
 8013efc:	4293      	cmp	r3, r2
 8013efe:	d004      	beq.n	8013f0a <HAL_TIM_PWM_Start+0x10e>
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	4a14      	ldr	r2, [pc, #80]	; (8013f58 <HAL_TIM_PWM_Start+0x15c>)
 8013f06:	4293      	cmp	r3, r2
 8013f08:	d111      	bne.n	8013f2e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	689b      	ldr	r3, [r3, #8]
 8013f10:	f003 0307 	and.w	r3, r3, #7
 8013f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	2b06      	cmp	r3, #6
 8013f1a:	d010      	beq.n	8013f3e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	681a      	ldr	r2, [r3, #0]
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	f042 0201 	orr.w	r2, r2, #1
 8013f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013f2c:	e007      	b.n	8013f3e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	681a      	ldr	r2, [r3, #0]
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	f042 0201 	orr.w	r2, r2, #1
 8013f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013f3e:	2300      	movs	r3, #0
}
 8013f40:	4618      	mov	r0, r3
 8013f42:	3710      	adds	r7, #16
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}
 8013f48:	40010000 	.word	0x40010000
 8013f4c:	40000400 	.word	0x40000400
 8013f50:	40000800 	.word	0x40000800
 8013f54:	40000c00 	.word	0x40000c00
 8013f58:	40014000 	.word	0x40014000

08013f5c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b082      	sub	sp, #8
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	6839      	ldr	r1, [r7, #0]
 8013f6e:	4618      	mov	r0, r3
 8013f70:	f000 fc56 	bl	8014820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	4a29      	ldr	r2, [pc, #164]	; (8014020 <HAL_TIM_PWM_Stop+0xc4>)
 8013f7a:	4293      	cmp	r3, r2
 8013f7c:	d117      	bne.n	8013fae <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	6a1a      	ldr	r2, [r3, #32]
 8013f84:	f241 1311 	movw	r3, #4369	; 0x1111
 8013f88:	4013      	ands	r3, r2
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d10f      	bne.n	8013fae <HAL_TIM_PWM_Stop+0x52>
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	6a1a      	ldr	r2, [r3, #32]
 8013f94:	f240 4344 	movw	r3, #1092	; 0x444
 8013f98:	4013      	ands	r3, r2
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d107      	bne.n	8013fae <HAL_TIM_PWM_Stop+0x52>
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013fac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	6a1a      	ldr	r2, [r3, #32]
 8013fb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8013fb8:	4013      	ands	r3, r2
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d10f      	bne.n	8013fde <HAL_TIM_PWM_Stop+0x82>
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	6a1a      	ldr	r2, [r3, #32]
 8013fc4:	f240 4344 	movw	r3, #1092	; 0x444
 8013fc8:	4013      	ands	r3, r2
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d107      	bne.n	8013fde <HAL_TIM_PWM_Stop+0x82>
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	681a      	ldr	r2, [r3, #0]
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	f022 0201 	bic.w	r2, r2, #1
 8013fdc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d104      	bne.n	8013fee <HAL_TIM_PWM_Stop+0x92>
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2201      	movs	r2, #1
 8013fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013fec:	e013      	b.n	8014016 <HAL_TIM_PWM_Stop+0xba>
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	2b04      	cmp	r3, #4
 8013ff2:	d104      	bne.n	8013ffe <HAL_TIM_PWM_Stop+0xa2>
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2201      	movs	r2, #1
 8013ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013ffc:	e00b      	b.n	8014016 <HAL_TIM_PWM_Stop+0xba>
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	2b08      	cmp	r3, #8
 8014002:	d104      	bne.n	801400e <HAL_TIM_PWM_Stop+0xb2>
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	2201      	movs	r2, #1
 8014008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801400c:	e003      	b.n	8014016 <HAL_TIM_PWM_Stop+0xba>
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2201      	movs	r2, #1
 8014012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8014016:	2300      	movs	r3, #0
}
 8014018:	4618      	mov	r0, r3
 801401a:	3708      	adds	r7, #8
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}
 8014020:	40010000 	.word	0x40010000

08014024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b082      	sub	sp, #8
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	691b      	ldr	r3, [r3, #16]
 8014032:	f003 0302 	and.w	r3, r3, #2
 8014036:	2b02      	cmp	r3, #2
 8014038:	d122      	bne.n	8014080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	68db      	ldr	r3, [r3, #12]
 8014040:	f003 0302 	and.w	r3, r3, #2
 8014044:	2b02      	cmp	r3, #2
 8014046:	d11b      	bne.n	8014080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	f06f 0202 	mvn.w	r2, #2
 8014050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2201      	movs	r2, #1
 8014056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	699b      	ldr	r3, [r3, #24]
 801405e:	f003 0303 	and.w	r3, r3, #3
 8014062:	2b00      	cmp	r3, #0
 8014064:	d003      	beq.n	801406e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	f000 f9b0 	bl	80143cc <HAL_TIM_IC_CaptureCallback>
 801406c:	e005      	b.n	801407a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	f000 f9a2 	bl	80143b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014074:	6878      	ldr	r0, [r7, #4]
 8014076:	f000 f9b3 	bl	80143e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2200      	movs	r2, #0
 801407e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	691b      	ldr	r3, [r3, #16]
 8014086:	f003 0304 	and.w	r3, r3, #4
 801408a:	2b04      	cmp	r3, #4
 801408c:	d122      	bne.n	80140d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	68db      	ldr	r3, [r3, #12]
 8014094:	f003 0304 	and.w	r3, r3, #4
 8014098:	2b04      	cmp	r3, #4
 801409a:	d11b      	bne.n	80140d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	f06f 0204 	mvn.w	r2, #4
 80140a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	2202      	movs	r2, #2
 80140aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	699b      	ldr	r3, [r3, #24]
 80140b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d003      	beq.n	80140c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f000 f986 	bl	80143cc <HAL_TIM_IC_CaptureCallback>
 80140c0:	e005      	b.n	80140ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f000 f978 	bl	80143b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f000 f989 	bl	80143e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2200      	movs	r2, #0
 80140d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	691b      	ldr	r3, [r3, #16]
 80140da:	f003 0308 	and.w	r3, r3, #8
 80140de:	2b08      	cmp	r3, #8
 80140e0:	d122      	bne.n	8014128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	68db      	ldr	r3, [r3, #12]
 80140e8:	f003 0308 	and.w	r3, r3, #8
 80140ec:	2b08      	cmp	r3, #8
 80140ee:	d11b      	bne.n	8014128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	f06f 0208 	mvn.w	r2, #8
 80140f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	2204      	movs	r2, #4
 80140fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	69db      	ldr	r3, [r3, #28]
 8014106:	f003 0303 	and.w	r3, r3, #3
 801410a:	2b00      	cmp	r3, #0
 801410c:	d003      	beq.n	8014116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	f000 f95c 	bl	80143cc <HAL_TIM_IC_CaptureCallback>
 8014114:	e005      	b.n	8014122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	f000 f94e 	bl	80143b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f000 f95f 	bl	80143e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	2200      	movs	r2, #0
 8014126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	691b      	ldr	r3, [r3, #16]
 801412e:	f003 0310 	and.w	r3, r3, #16
 8014132:	2b10      	cmp	r3, #16
 8014134:	d122      	bne.n	801417c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	68db      	ldr	r3, [r3, #12]
 801413c:	f003 0310 	and.w	r3, r3, #16
 8014140:	2b10      	cmp	r3, #16
 8014142:	d11b      	bne.n	801417c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	f06f 0210 	mvn.w	r2, #16
 801414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	2208      	movs	r2, #8
 8014152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	69db      	ldr	r3, [r3, #28]
 801415a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801415e:	2b00      	cmp	r3, #0
 8014160:	d003      	beq.n	801416a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f000 f932 	bl	80143cc <HAL_TIM_IC_CaptureCallback>
 8014168:	e005      	b.n	8014176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f000 f924 	bl	80143b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f000 f935 	bl	80143e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	2200      	movs	r2, #0
 801417a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	691b      	ldr	r3, [r3, #16]
 8014182:	f003 0301 	and.w	r3, r3, #1
 8014186:	2b01      	cmp	r3, #1
 8014188:	d10e      	bne.n	80141a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	68db      	ldr	r3, [r3, #12]
 8014190:	f003 0301 	and.w	r3, r3, #1
 8014194:	2b01      	cmp	r3, #1
 8014196:	d107      	bne.n	80141a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	f06f 0201 	mvn.w	r2, #1
 80141a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f7fa f970 	bl	800e488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	691b      	ldr	r3, [r3, #16]
 80141ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80141b2:	2b80      	cmp	r3, #128	; 0x80
 80141b4:	d10e      	bne.n	80141d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	68db      	ldr	r3, [r3, #12]
 80141bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80141c0:	2b80      	cmp	r3, #128	; 0x80
 80141c2:	d107      	bne.n	80141d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80141cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f000 fbc4 	bl	801495c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	691b      	ldr	r3, [r3, #16]
 80141da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80141de:	2b40      	cmp	r3, #64	; 0x40
 80141e0:	d10e      	bne.n	8014200 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	68db      	ldr	r3, [r3, #12]
 80141e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80141ec:	2b40      	cmp	r3, #64	; 0x40
 80141ee:	d107      	bne.n	8014200 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80141f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80141fa:	6878      	ldr	r0, [r7, #4]
 80141fc:	f000 f8fa 	bl	80143f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	691b      	ldr	r3, [r3, #16]
 8014206:	f003 0320 	and.w	r3, r3, #32
 801420a:	2b20      	cmp	r3, #32
 801420c:	d10e      	bne.n	801422c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	68db      	ldr	r3, [r3, #12]
 8014214:	f003 0320 	and.w	r3, r3, #32
 8014218:	2b20      	cmp	r3, #32
 801421a:	d107      	bne.n	801422c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	f06f 0220 	mvn.w	r2, #32
 8014224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f000 fb8e 	bl	8014948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801422c:	bf00      	nop
 801422e:	3708      	adds	r7, #8
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}

08014234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b086      	sub	sp, #24
 8014238:	af00      	add	r7, sp, #0
 801423a:	60f8      	str	r0, [r7, #12]
 801423c:	60b9      	str	r1, [r7, #8]
 801423e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014240:	2300      	movs	r3, #0
 8014242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801424a:	2b01      	cmp	r3, #1
 801424c:	d101      	bne.n	8014252 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801424e:	2302      	movs	r3, #2
 8014250:	e0ae      	b.n	80143b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	2201      	movs	r2, #1
 8014256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	2b0c      	cmp	r3, #12
 801425e:	f200 809f 	bhi.w	80143a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8014262:	a201      	add	r2, pc, #4	; (adr r2, 8014268 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014268:	0801429d 	.word	0x0801429d
 801426c:	080143a1 	.word	0x080143a1
 8014270:	080143a1 	.word	0x080143a1
 8014274:	080143a1 	.word	0x080143a1
 8014278:	080142dd 	.word	0x080142dd
 801427c:	080143a1 	.word	0x080143a1
 8014280:	080143a1 	.word	0x080143a1
 8014284:	080143a1 	.word	0x080143a1
 8014288:	0801431f 	.word	0x0801431f
 801428c:	080143a1 	.word	0x080143a1
 8014290:	080143a1 	.word	0x080143a1
 8014294:	080143a1 	.word	0x080143a1
 8014298:	0801435f 	.word	0x0801435f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	68b9      	ldr	r1, [r7, #8]
 80142a2:	4618      	mov	r0, r3
 80142a4:	f000 f930 	bl	8014508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	699a      	ldr	r2, [r3, #24]
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	f042 0208 	orr.w	r2, r2, #8
 80142b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	699a      	ldr	r2, [r3, #24]
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	f022 0204 	bic.w	r2, r2, #4
 80142c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	6999      	ldr	r1, [r3, #24]
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	691a      	ldr	r2, [r3, #16]
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	430a      	orrs	r2, r1
 80142d8:	619a      	str	r2, [r3, #24]
      break;
 80142da:	e064      	b.n	80143a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	68b9      	ldr	r1, [r7, #8]
 80142e2:	4618      	mov	r0, r3
 80142e4:	f000 f976 	bl	80145d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	699a      	ldr	r2, [r3, #24]
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80142f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	699a      	ldr	r2, [r3, #24]
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	6999      	ldr	r1, [r3, #24]
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	691b      	ldr	r3, [r3, #16]
 8014312:	021a      	lsls	r2, r3, #8
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	430a      	orrs	r2, r1
 801431a:	619a      	str	r2, [r3, #24]
      break;
 801431c:	e043      	b.n	80143a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	68b9      	ldr	r1, [r7, #8]
 8014324:	4618      	mov	r0, r3
 8014326:	f000 f9c1 	bl	80146ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	69da      	ldr	r2, [r3, #28]
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	f042 0208 	orr.w	r2, r2, #8
 8014338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	69da      	ldr	r2, [r3, #28]
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	f022 0204 	bic.w	r2, r2, #4
 8014348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	69d9      	ldr	r1, [r3, #28]
 8014350:	68bb      	ldr	r3, [r7, #8]
 8014352:	691a      	ldr	r2, [r3, #16]
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	430a      	orrs	r2, r1
 801435a:	61da      	str	r2, [r3, #28]
      break;
 801435c:	e023      	b.n	80143a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	68b9      	ldr	r1, [r7, #8]
 8014364:	4618      	mov	r0, r3
 8014366:	f000 fa0b 	bl	8014780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	69da      	ldr	r2, [r3, #28]
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	69da      	ldr	r2, [r3, #28]
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	69d9      	ldr	r1, [r3, #28]
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	691b      	ldr	r3, [r3, #16]
 8014394:	021a      	lsls	r2, r3, #8
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	430a      	orrs	r2, r1
 801439c:	61da      	str	r2, [r3, #28]
      break;
 801439e:	e002      	b.n	80143a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80143a0:	2301      	movs	r3, #1
 80143a2:	75fb      	strb	r3, [r7, #23]
      break;
 80143a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	2200      	movs	r2, #0
 80143aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80143ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3718      	adds	r7, #24
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80143b8:	b480      	push	{r7}
 80143ba:	b083      	sub	sp, #12
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80143c0:	bf00      	nop
 80143c2:	370c      	adds	r7, #12
 80143c4:	46bd      	mov	sp, r7
 80143c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ca:	4770      	bx	lr

080143cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80143cc:	b480      	push	{r7}
 80143ce:	b083      	sub	sp, #12
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80143d4:	bf00      	nop
 80143d6:	370c      	adds	r7, #12
 80143d8:	46bd      	mov	sp, r7
 80143da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143de:	4770      	bx	lr

080143e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80143e0:	b480      	push	{r7}
 80143e2:	b083      	sub	sp, #12
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80143e8:	bf00      	nop
 80143ea:	370c      	adds	r7, #12
 80143ec:	46bd      	mov	sp, r7
 80143ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f2:	4770      	bx	lr

080143f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80143f4:	b480      	push	{r7}
 80143f6:	b083      	sub	sp, #12
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80143fc:	bf00      	nop
 80143fe:	370c      	adds	r7, #12
 8014400:	46bd      	mov	sp, r7
 8014402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014406:	4770      	bx	lr

08014408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014408:	b480      	push	{r7}
 801440a:	b085      	sub	sp, #20
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	4a34      	ldr	r2, [pc, #208]	; (80144ec <TIM_Base_SetConfig+0xe4>)
 801441c:	4293      	cmp	r3, r2
 801441e:	d00f      	beq.n	8014440 <TIM_Base_SetConfig+0x38>
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014426:	d00b      	beq.n	8014440 <TIM_Base_SetConfig+0x38>
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	4a31      	ldr	r2, [pc, #196]	; (80144f0 <TIM_Base_SetConfig+0xe8>)
 801442c:	4293      	cmp	r3, r2
 801442e:	d007      	beq.n	8014440 <TIM_Base_SetConfig+0x38>
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	4a30      	ldr	r2, [pc, #192]	; (80144f4 <TIM_Base_SetConfig+0xec>)
 8014434:	4293      	cmp	r3, r2
 8014436:	d003      	beq.n	8014440 <TIM_Base_SetConfig+0x38>
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	4a2f      	ldr	r2, [pc, #188]	; (80144f8 <TIM_Base_SetConfig+0xf0>)
 801443c:	4293      	cmp	r3, r2
 801443e:	d108      	bne.n	8014452 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	68fa      	ldr	r2, [r7, #12]
 801444e:	4313      	orrs	r3, r2
 8014450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	4a25      	ldr	r2, [pc, #148]	; (80144ec <TIM_Base_SetConfig+0xe4>)
 8014456:	4293      	cmp	r3, r2
 8014458:	d01b      	beq.n	8014492 <TIM_Base_SetConfig+0x8a>
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014460:	d017      	beq.n	8014492 <TIM_Base_SetConfig+0x8a>
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	4a22      	ldr	r2, [pc, #136]	; (80144f0 <TIM_Base_SetConfig+0xe8>)
 8014466:	4293      	cmp	r3, r2
 8014468:	d013      	beq.n	8014492 <TIM_Base_SetConfig+0x8a>
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	4a21      	ldr	r2, [pc, #132]	; (80144f4 <TIM_Base_SetConfig+0xec>)
 801446e:	4293      	cmp	r3, r2
 8014470:	d00f      	beq.n	8014492 <TIM_Base_SetConfig+0x8a>
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	4a20      	ldr	r2, [pc, #128]	; (80144f8 <TIM_Base_SetConfig+0xf0>)
 8014476:	4293      	cmp	r3, r2
 8014478:	d00b      	beq.n	8014492 <TIM_Base_SetConfig+0x8a>
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	4a1f      	ldr	r2, [pc, #124]	; (80144fc <TIM_Base_SetConfig+0xf4>)
 801447e:	4293      	cmp	r3, r2
 8014480:	d007      	beq.n	8014492 <TIM_Base_SetConfig+0x8a>
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	4a1e      	ldr	r2, [pc, #120]	; (8014500 <TIM_Base_SetConfig+0xf8>)
 8014486:	4293      	cmp	r3, r2
 8014488:	d003      	beq.n	8014492 <TIM_Base_SetConfig+0x8a>
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	4a1d      	ldr	r2, [pc, #116]	; (8014504 <TIM_Base_SetConfig+0xfc>)
 801448e:	4293      	cmp	r3, r2
 8014490:	d108      	bne.n	80144a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	68db      	ldr	r3, [r3, #12]
 801449e:	68fa      	ldr	r2, [r7, #12]
 80144a0:	4313      	orrs	r3, r2
 80144a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	695b      	ldr	r3, [r3, #20]
 80144ae:	4313      	orrs	r3, r2
 80144b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	68fa      	ldr	r2, [r7, #12]
 80144b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	689a      	ldr	r2, [r3, #8]
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	681a      	ldr	r2, [r3, #0]
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	4a08      	ldr	r2, [pc, #32]	; (80144ec <TIM_Base_SetConfig+0xe4>)
 80144cc:	4293      	cmp	r3, r2
 80144ce:	d103      	bne.n	80144d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80144d0:	683b      	ldr	r3, [r7, #0]
 80144d2:	691a      	ldr	r2, [r3, #16]
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2201      	movs	r2, #1
 80144dc:	615a      	str	r2, [r3, #20]
}
 80144de:	bf00      	nop
 80144e0:	3714      	adds	r7, #20
 80144e2:	46bd      	mov	sp, r7
 80144e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e8:	4770      	bx	lr
 80144ea:	bf00      	nop
 80144ec:	40010000 	.word	0x40010000
 80144f0:	40000400 	.word	0x40000400
 80144f4:	40000800 	.word	0x40000800
 80144f8:	40000c00 	.word	0x40000c00
 80144fc:	40014000 	.word	0x40014000
 8014500:	40014400 	.word	0x40014400
 8014504:	40014800 	.word	0x40014800

08014508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014508:	b480      	push	{r7}
 801450a:	b087      	sub	sp, #28
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
 8014510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	6a1b      	ldr	r3, [r3, #32]
 8014516:	f023 0201 	bic.w	r2, r3, #1
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	6a1b      	ldr	r3, [r3, #32]
 8014522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	685b      	ldr	r3, [r3, #4]
 8014528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	699b      	ldr	r3, [r3, #24]
 801452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	f023 0303 	bic.w	r3, r3, #3
 801453e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	68fa      	ldr	r2, [r7, #12]
 8014546:	4313      	orrs	r3, r2
 8014548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	f023 0302 	bic.w	r3, r3, #2
 8014550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	689b      	ldr	r3, [r3, #8]
 8014556:	697a      	ldr	r2, [r7, #20]
 8014558:	4313      	orrs	r3, r2
 801455a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	4a1c      	ldr	r2, [pc, #112]	; (80145d0 <TIM_OC1_SetConfig+0xc8>)
 8014560:	4293      	cmp	r3, r2
 8014562:	d10c      	bne.n	801457e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014564:	697b      	ldr	r3, [r7, #20]
 8014566:	f023 0308 	bic.w	r3, r3, #8
 801456a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	68db      	ldr	r3, [r3, #12]
 8014570:	697a      	ldr	r2, [r7, #20]
 8014572:	4313      	orrs	r3, r2
 8014574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014576:	697b      	ldr	r3, [r7, #20]
 8014578:	f023 0304 	bic.w	r3, r3, #4
 801457c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	4a13      	ldr	r2, [pc, #76]	; (80145d0 <TIM_OC1_SetConfig+0xc8>)
 8014582:	4293      	cmp	r3, r2
 8014584:	d111      	bne.n	80145aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801458c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014596:	683b      	ldr	r3, [r7, #0]
 8014598:	695b      	ldr	r3, [r3, #20]
 801459a:	693a      	ldr	r2, [r7, #16]
 801459c:	4313      	orrs	r3, r2
 801459e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80145a0:	683b      	ldr	r3, [r7, #0]
 80145a2:	699b      	ldr	r3, [r3, #24]
 80145a4:	693a      	ldr	r2, [r7, #16]
 80145a6:	4313      	orrs	r3, r2
 80145a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	693a      	ldr	r2, [r7, #16]
 80145ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	68fa      	ldr	r2, [r7, #12]
 80145b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	685a      	ldr	r2, [r3, #4]
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	697a      	ldr	r2, [r7, #20]
 80145c2:	621a      	str	r2, [r3, #32]
}
 80145c4:	bf00      	nop
 80145c6:	371c      	adds	r7, #28
 80145c8:	46bd      	mov	sp, r7
 80145ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ce:	4770      	bx	lr
 80145d0:	40010000 	.word	0x40010000

080145d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80145d4:	b480      	push	{r7}
 80145d6:	b087      	sub	sp, #28
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
 80145dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	6a1b      	ldr	r3, [r3, #32]
 80145e2:	f023 0210 	bic.w	r2, r3, #16
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	6a1b      	ldr	r3, [r3, #32]
 80145ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	685b      	ldr	r3, [r3, #4]
 80145f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	699b      	ldr	r3, [r3, #24]
 80145fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801460a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	021b      	lsls	r3, r3, #8
 8014612:	68fa      	ldr	r2, [r7, #12]
 8014614:	4313      	orrs	r3, r2
 8014616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014618:	697b      	ldr	r3, [r7, #20]
 801461a:	f023 0320 	bic.w	r3, r3, #32
 801461e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	689b      	ldr	r3, [r3, #8]
 8014624:	011b      	lsls	r3, r3, #4
 8014626:	697a      	ldr	r2, [r7, #20]
 8014628:	4313      	orrs	r3, r2
 801462a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	4a1e      	ldr	r2, [pc, #120]	; (80146a8 <TIM_OC2_SetConfig+0xd4>)
 8014630:	4293      	cmp	r3, r2
 8014632:	d10d      	bne.n	8014650 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014634:	697b      	ldr	r3, [r7, #20]
 8014636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801463a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801463c:	683b      	ldr	r3, [r7, #0]
 801463e:	68db      	ldr	r3, [r3, #12]
 8014640:	011b      	lsls	r3, r3, #4
 8014642:	697a      	ldr	r2, [r7, #20]
 8014644:	4313      	orrs	r3, r2
 8014646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801464e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	4a15      	ldr	r2, [pc, #84]	; (80146a8 <TIM_OC2_SetConfig+0xd4>)
 8014654:	4293      	cmp	r3, r2
 8014656:	d113      	bne.n	8014680 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014658:	693b      	ldr	r3, [r7, #16]
 801465a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801465e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014660:	693b      	ldr	r3, [r7, #16]
 8014662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	695b      	ldr	r3, [r3, #20]
 801466c:	009b      	lsls	r3, r3, #2
 801466e:	693a      	ldr	r2, [r7, #16]
 8014670:	4313      	orrs	r3, r2
 8014672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	699b      	ldr	r3, [r3, #24]
 8014678:	009b      	lsls	r3, r3, #2
 801467a:	693a      	ldr	r2, [r7, #16]
 801467c:	4313      	orrs	r3, r2
 801467e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	693a      	ldr	r2, [r7, #16]
 8014684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	68fa      	ldr	r2, [r7, #12]
 801468a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	685a      	ldr	r2, [r3, #4]
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	697a      	ldr	r2, [r7, #20]
 8014698:	621a      	str	r2, [r3, #32]
}
 801469a:	bf00      	nop
 801469c:	371c      	adds	r7, #28
 801469e:	46bd      	mov	sp, r7
 80146a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a4:	4770      	bx	lr
 80146a6:	bf00      	nop
 80146a8:	40010000 	.word	0x40010000

080146ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80146ac:	b480      	push	{r7}
 80146ae:	b087      	sub	sp, #28
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
 80146b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	6a1b      	ldr	r3, [r3, #32]
 80146ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6a1b      	ldr	r3, [r3, #32]
 80146c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	685b      	ldr	r3, [r3, #4]
 80146cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	69db      	ldr	r3, [r3, #28]
 80146d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80146da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	f023 0303 	bic.w	r3, r3, #3
 80146e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	68fa      	ldr	r2, [r7, #12]
 80146ea:	4313      	orrs	r3, r2
 80146ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80146ee:	697b      	ldr	r3, [r7, #20]
 80146f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80146f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80146f6:	683b      	ldr	r3, [r7, #0]
 80146f8:	689b      	ldr	r3, [r3, #8]
 80146fa:	021b      	lsls	r3, r3, #8
 80146fc:	697a      	ldr	r2, [r7, #20]
 80146fe:	4313      	orrs	r3, r2
 8014700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	4a1d      	ldr	r2, [pc, #116]	; (801477c <TIM_OC3_SetConfig+0xd0>)
 8014706:	4293      	cmp	r3, r2
 8014708:	d10d      	bne.n	8014726 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014712:	683b      	ldr	r3, [r7, #0]
 8014714:	68db      	ldr	r3, [r3, #12]
 8014716:	021b      	lsls	r3, r3, #8
 8014718:	697a      	ldr	r2, [r7, #20]
 801471a:	4313      	orrs	r3, r2
 801471c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801471e:	697b      	ldr	r3, [r7, #20]
 8014720:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	4a14      	ldr	r2, [pc, #80]	; (801477c <TIM_OC3_SetConfig+0xd0>)
 801472a:	4293      	cmp	r3, r2
 801472c:	d113      	bne.n	8014756 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801472e:	693b      	ldr	r3, [r7, #16]
 8014730:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014736:	693b      	ldr	r3, [r7, #16]
 8014738:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801473c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801473e:	683b      	ldr	r3, [r7, #0]
 8014740:	695b      	ldr	r3, [r3, #20]
 8014742:	011b      	lsls	r3, r3, #4
 8014744:	693a      	ldr	r2, [r7, #16]
 8014746:	4313      	orrs	r3, r2
 8014748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	699b      	ldr	r3, [r3, #24]
 801474e:	011b      	lsls	r3, r3, #4
 8014750:	693a      	ldr	r2, [r7, #16]
 8014752:	4313      	orrs	r3, r2
 8014754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	693a      	ldr	r2, [r7, #16]
 801475a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	68fa      	ldr	r2, [r7, #12]
 8014760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014762:	683b      	ldr	r3, [r7, #0]
 8014764:	685a      	ldr	r2, [r3, #4]
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	697a      	ldr	r2, [r7, #20]
 801476e:	621a      	str	r2, [r3, #32]
}
 8014770:	bf00      	nop
 8014772:	371c      	adds	r7, #28
 8014774:	46bd      	mov	sp, r7
 8014776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477a:	4770      	bx	lr
 801477c:	40010000 	.word	0x40010000

08014780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014780:	b480      	push	{r7}
 8014782:	b087      	sub	sp, #28
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	6a1b      	ldr	r3, [r3, #32]
 801478e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	6a1b      	ldr	r3, [r3, #32]
 801479a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	685b      	ldr	r3, [r3, #4]
 80147a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	69db      	ldr	r3, [r3, #28]
 80147a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80147ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80147b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	021b      	lsls	r3, r3, #8
 80147be:	68fa      	ldr	r2, [r7, #12]
 80147c0:	4313      	orrs	r3, r2
 80147c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80147c4:	693b      	ldr	r3, [r7, #16]
 80147c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80147ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	689b      	ldr	r3, [r3, #8]
 80147d0:	031b      	lsls	r3, r3, #12
 80147d2:	693a      	ldr	r2, [r7, #16]
 80147d4:	4313      	orrs	r3, r2
 80147d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	4a10      	ldr	r2, [pc, #64]	; (801481c <TIM_OC4_SetConfig+0x9c>)
 80147dc:	4293      	cmp	r3, r2
 80147de:	d109      	bne.n	80147f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80147e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80147e8:	683b      	ldr	r3, [r7, #0]
 80147ea:	695b      	ldr	r3, [r3, #20]
 80147ec:	019b      	lsls	r3, r3, #6
 80147ee:	697a      	ldr	r2, [r7, #20]
 80147f0:	4313      	orrs	r3, r2
 80147f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	697a      	ldr	r2, [r7, #20]
 80147f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	68fa      	ldr	r2, [r7, #12]
 80147fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	685a      	ldr	r2, [r3, #4]
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	693a      	ldr	r2, [r7, #16]
 801480c:	621a      	str	r2, [r3, #32]
}
 801480e:	bf00      	nop
 8014810:	371c      	adds	r7, #28
 8014812:	46bd      	mov	sp, r7
 8014814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014818:	4770      	bx	lr
 801481a:	bf00      	nop
 801481c:	40010000 	.word	0x40010000

08014820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014820:	b480      	push	{r7}
 8014822:	b087      	sub	sp, #28
 8014824:	af00      	add	r7, sp, #0
 8014826:	60f8      	str	r0, [r7, #12]
 8014828:	60b9      	str	r1, [r7, #8]
 801482a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	f003 031f 	and.w	r3, r3, #31
 8014832:	2201      	movs	r2, #1
 8014834:	fa02 f303 	lsl.w	r3, r2, r3
 8014838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	6a1a      	ldr	r2, [r3, #32]
 801483e:	697b      	ldr	r3, [r7, #20]
 8014840:	43db      	mvns	r3, r3
 8014842:	401a      	ands	r2, r3
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	6a1a      	ldr	r2, [r3, #32]
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	f003 031f 	and.w	r3, r3, #31
 8014852:	6879      	ldr	r1, [r7, #4]
 8014854:	fa01 f303 	lsl.w	r3, r1, r3
 8014858:	431a      	orrs	r2, r3
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	621a      	str	r2, [r3, #32]
}
 801485e:	bf00      	nop
 8014860:	371c      	adds	r7, #28
 8014862:	46bd      	mov	sp, r7
 8014864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014868:	4770      	bx	lr
	...

0801486c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801486c:	b480      	push	{r7}
 801486e:	b085      	sub	sp, #20
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801487c:	2b01      	cmp	r3, #1
 801487e:	d101      	bne.n	8014884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014880:	2302      	movs	r3, #2
 8014882:	e050      	b.n	8014926 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	2201      	movs	r2, #1
 8014888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	2202      	movs	r2, #2
 8014890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	685b      	ldr	r3, [r3, #4]
 801489a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	689b      	ldr	r3, [r3, #8]
 80148a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80148aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80148ac:	683b      	ldr	r3, [r7, #0]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	68fa      	ldr	r2, [r7, #12]
 80148b2:	4313      	orrs	r3, r2
 80148b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	68fa      	ldr	r2, [r7, #12]
 80148bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	4a1c      	ldr	r2, [pc, #112]	; (8014934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80148c4:	4293      	cmp	r3, r2
 80148c6:	d018      	beq.n	80148fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80148d0:	d013      	beq.n	80148fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	4a18      	ldr	r2, [pc, #96]	; (8014938 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80148d8:	4293      	cmp	r3, r2
 80148da:	d00e      	beq.n	80148fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	4a16      	ldr	r2, [pc, #88]	; (801493c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80148e2:	4293      	cmp	r3, r2
 80148e4:	d009      	beq.n	80148fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	4a15      	ldr	r2, [pc, #84]	; (8014940 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80148ec:	4293      	cmp	r3, r2
 80148ee:	d004      	beq.n	80148fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	4a13      	ldr	r2, [pc, #76]	; (8014944 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80148f6:	4293      	cmp	r3, r2
 80148f8:	d10c      	bne.n	8014914 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80148fa:	68bb      	ldr	r3, [r7, #8]
 80148fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	685b      	ldr	r3, [r3, #4]
 8014906:	68ba      	ldr	r2, [r7, #8]
 8014908:	4313      	orrs	r3, r2
 801490a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	68ba      	ldr	r2, [r7, #8]
 8014912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	2201      	movs	r2, #1
 8014918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	2200      	movs	r2, #0
 8014920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014924:	2300      	movs	r3, #0
}
 8014926:	4618      	mov	r0, r3
 8014928:	3714      	adds	r7, #20
 801492a:	46bd      	mov	sp, r7
 801492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014930:	4770      	bx	lr
 8014932:	bf00      	nop
 8014934:	40010000 	.word	0x40010000
 8014938:	40000400 	.word	0x40000400
 801493c:	40000800 	.word	0x40000800
 8014940:	40000c00 	.word	0x40000c00
 8014944:	40014000 	.word	0x40014000

08014948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014948:	b480      	push	{r7}
 801494a:	b083      	sub	sp, #12
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014950:	bf00      	nop
 8014952:	370c      	adds	r7, #12
 8014954:	46bd      	mov	sp, r7
 8014956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495a:	4770      	bx	lr

0801495c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801495c:	b480      	push	{r7}
 801495e:	b083      	sub	sp, #12
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014964:	bf00      	nop
 8014966:	370c      	adds	r7, #12
 8014968:	46bd      	mov	sp, r7
 801496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496e:	4770      	bx	lr

08014970 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b082      	sub	sp, #8
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d101      	bne.n	8014982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801497e:	2301      	movs	r3, #1
 8014980:	e03f      	b.n	8014a02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014988:	b2db      	uxtb	r3, r3
 801498a:	2b00      	cmp	r3, #0
 801498c:	d106      	bne.n	801499c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	2200      	movs	r2, #0
 8014992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014996:	6878      	ldr	r0, [r7, #4]
 8014998:	f7f9 fee2 	bl	800e760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	2224      	movs	r2, #36	; 0x24
 80149a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	68da      	ldr	r2, [r3, #12]
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80149b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f000 f829 	bl	8014a0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	691a      	ldr	r2, [r3, #16]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80149c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	695a      	ldr	r2, [r3, #20]
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80149d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	68da      	ldr	r2, [r3, #12]
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80149e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	2200      	movs	r2, #0
 80149ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2220      	movs	r2, #32
 80149f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	2220      	movs	r2, #32
 80149fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014a00:	2300      	movs	r3, #0
}
 8014a02:	4618      	mov	r0, r3
 8014a04:	3708      	adds	r7, #8
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}
	...

08014a0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a10:	b09f      	sub	sp, #124	; 0x7c
 8014a12:	af00      	add	r7, sp, #0
 8014a14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	691b      	ldr	r3, [r3, #16]
 8014a1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8014a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a22:	68d9      	ldr	r1, [r3, #12]
 8014a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a26:	681a      	ldr	r2, [r3, #0]
 8014a28:	ea40 0301 	orr.w	r3, r0, r1
 8014a2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8014a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a30:	689a      	ldr	r2, [r3, #8]
 8014a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a34:	691b      	ldr	r3, [r3, #16]
 8014a36:	431a      	orrs	r2, r3
 8014a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a3a:	695b      	ldr	r3, [r3, #20]
 8014a3c:	431a      	orrs	r2, r3
 8014a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a40:	69db      	ldr	r3, [r3, #28]
 8014a42:	4313      	orrs	r3, r2
 8014a44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8014a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	68db      	ldr	r3, [r3, #12]
 8014a4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8014a50:	f021 010c 	bic.w	r1, r1, #12
 8014a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a56:	681a      	ldr	r2, [r3, #0]
 8014a58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014a5a:	430b      	orrs	r3, r1
 8014a5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8014a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	695b      	ldr	r3, [r3, #20]
 8014a64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8014a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a6a:	6999      	ldr	r1, [r3, #24]
 8014a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a6e:	681a      	ldr	r2, [r3, #0]
 8014a70:	ea40 0301 	orr.w	r3, r0, r1
 8014a74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a78:	681a      	ldr	r2, [r3, #0]
 8014a7a:	4bc5      	ldr	r3, [pc, #788]	; (8014d90 <UART_SetConfig+0x384>)
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d004      	beq.n	8014a8a <UART_SetConfig+0x7e>
 8014a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a82:	681a      	ldr	r2, [r3, #0]
 8014a84:	4bc3      	ldr	r3, [pc, #780]	; (8014d94 <UART_SetConfig+0x388>)
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d103      	bne.n	8014a92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014a8a:	f7fe fabd 	bl	8013008 <HAL_RCC_GetPCLK2Freq>
 8014a8e:	6778      	str	r0, [r7, #116]	; 0x74
 8014a90:	e002      	b.n	8014a98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014a92:	f7fe faa5 	bl	8012fe0 <HAL_RCC_GetPCLK1Freq>
 8014a96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a9a:	69db      	ldr	r3, [r3, #28]
 8014a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014aa0:	f040 80b6 	bne.w	8014c10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014aa6:	461c      	mov	r4, r3
 8014aa8:	f04f 0500 	mov.w	r5, #0
 8014aac:	4622      	mov	r2, r4
 8014aae:	462b      	mov	r3, r5
 8014ab0:	1891      	adds	r1, r2, r2
 8014ab2:	6439      	str	r1, [r7, #64]	; 0x40
 8014ab4:	415b      	adcs	r3, r3
 8014ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8014ab8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8014abc:	1912      	adds	r2, r2, r4
 8014abe:	eb45 0303 	adc.w	r3, r5, r3
 8014ac2:	f04f 0000 	mov.w	r0, #0
 8014ac6:	f04f 0100 	mov.w	r1, #0
 8014aca:	00d9      	lsls	r1, r3, #3
 8014acc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014ad0:	00d0      	lsls	r0, r2, #3
 8014ad2:	4602      	mov	r2, r0
 8014ad4:	460b      	mov	r3, r1
 8014ad6:	1911      	adds	r1, r2, r4
 8014ad8:	6639      	str	r1, [r7, #96]	; 0x60
 8014ada:	416b      	adcs	r3, r5
 8014adc:	667b      	str	r3, [r7, #100]	; 0x64
 8014ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014ae0:	685b      	ldr	r3, [r3, #4]
 8014ae2:	461a      	mov	r2, r3
 8014ae4:	f04f 0300 	mov.w	r3, #0
 8014ae8:	1891      	adds	r1, r2, r2
 8014aea:	63b9      	str	r1, [r7, #56]	; 0x38
 8014aec:	415b      	adcs	r3, r3
 8014aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014af0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8014af4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8014af8:	f7f7 fafa 	bl	800c0f0 <__aeabi_uldivmod>
 8014afc:	4602      	mov	r2, r0
 8014afe:	460b      	mov	r3, r1
 8014b00:	4ba5      	ldr	r3, [pc, #660]	; (8014d98 <UART_SetConfig+0x38c>)
 8014b02:	fba3 2302 	umull	r2, r3, r3, r2
 8014b06:	095b      	lsrs	r3, r3, #5
 8014b08:	011e      	lsls	r6, r3, #4
 8014b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014b0c:	461c      	mov	r4, r3
 8014b0e:	f04f 0500 	mov.w	r5, #0
 8014b12:	4622      	mov	r2, r4
 8014b14:	462b      	mov	r3, r5
 8014b16:	1891      	adds	r1, r2, r2
 8014b18:	6339      	str	r1, [r7, #48]	; 0x30
 8014b1a:	415b      	adcs	r3, r3
 8014b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8014b1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8014b22:	1912      	adds	r2, r2, r4
 8014b24:	eb45 0303 	adc.w	r3, r5, r3
 8014b28:	f04f 0000 	mov.w	r0, #0
 8014b2c:	f04f 0100 	mov.w	r1, #0
 8014b30:	00d9      	lsls	r1, r3, #3
 8014b32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014b36:	00d0      	lsls	r0, r2, #3
 8014b38:	4602      	mov	r2, r0
 8014b3a:	460b      	mov	r3, r1
 8014b3c:	1911      	adds	r1, r2, r4
 8014b3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8014b40:	416b      	adcs	r3, r5
 8014b42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b46:	685b      	ldr	r3, [r3, #4]
 8014b48:	461a      	mov	r2, r3
 8014b4a:	f04f 0300 	mov.w	r3, #0
 8014b4e:	1891      	adds	r1, r2, r2
 8014b50:	62b9      	str	r1, [r7, #40]	; 0x28
 8014b52:	415b      	adcs	r3, r3
 8014b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014b56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014b5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8014b5e:	f7f7 fac7 	bl	800c0f0 <__aeabi_uldivmod>
 8014b62:	4602      	mov	r2, r0
 8014b64:	460b      	mov	r3, r1
 8014b66:	4b8c      	ldr	r3, [pc, #560]	; (8014d98 <UART_SetConfig+0x38c>)
 8014b68:	fba3 1302 	umull	r1, r3, r3, r2
 8014b6c:	095b      	lsrs	r3, r3, #5
 8014b6e:	2164      	movs	r1, #100	; 0x64
 8014b70:	fb01 f303 	mul.w	r3, r1, r3
 8014b74:	1ad3      	subs	r3, r2, r3
 8014b76:	00db      	lsls	r3, r3, #3
 8014b78:	3332      	adds	r3, #50	; 0x32
 8014b7a:	4a87      	ldr	r2, [pc, #540]	; (8014d98 <UART_SetConfig+0x38c>)
 8014b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8014b80:	095b      	lsrs	r3, r3, #5
 8014b82:	005b      	lsls	r3, r3, #1
 8014b84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014b88:	441e      	add	r6, r3
 8014b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f04f 0100 	mov.w	r1, #0
 8014b92:	4602      	mov	r2, r0
 8014b94:	460b      	mov	r3, r1
 8014b96:	1894      	adds	r4, r2, r2
 8014b98:	623c      	str	r4, [r7, #32]
 8014b9a:	415b      	adcs	r3, r3
 8014b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8014b9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014ba2:	1812      	adds	r2, r2, r0
 8014ba4:	eb41 0303 	adc.w	r3, r1, r3
 8014ba8:	f04f 0400 	mov.w	r4, #0
 8014bac:	f04f 0500 	mov.w	r5, #0
 8014bb0:	00dd      	lsls	r5, r3, #3
 8014bb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014bb6:	00d4      	lsls	r4, r2, #3
 8014bb8:	4622      	mov	r2, r4
 8014bba:	462b      	mov	r3, r5
 8014bbc:	1814      	adds	r4, r2, r0
 8014bbe:	653c      	str	r4, [r7, #80]	; 0x50
 8014bc0:	414b      	adcs	r3, r1
 8014bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8014bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bc6:	685b      	ldr	r3, [r3, #4]
 8014bc8:	461a      	mov	r2, r3
 8014bca:	f04f 0300 	mov.w	r3, #0
 8014bce:	1891      	adds	r1, r2, r2
 8014bd0:	61b9      	str	r1, [r7, #24]
 8014bd2:	415b      	adcs	r3, r3
 8014bd4:	61fb      	str	r3, [r7, #28]
 8014bd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014bda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8014bde:	f7f7 fa87 	bl	800c0f0 <__aeabi_uldivmod>
 8014be2:	4602      	mov	r2, r0
 8014be4:	460b      	mov	r3, r1
 8014be6:	4b6c      	ldr	r3, [pc, #432]	; (8014d98 <UART_SetConfig+0x38c>)
 8014be8:	fba3 1302 	umull	r1, r3, r3, r2
 8014bec:	095b      	lsrs	r3, r3, #5
 8014bee:	2164      	movs	r1, #100	; 0x64
 8014bf0:	fb01 f303 	mul.w	r3, r1, r3
 8014bf4:	1ad3      	subs	r3, r2, r3
 8014bf6:	00db      	lsls	r3, r3, #3
 8014bf8:	3332      	adds	r3, #50	; 0x32
 8014bfa:	4a67      	ldr	r2, [pc, #412]	; (8014d98 <UART_SetConfig+0x38c>)
 8014bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8014c00:	095b      	lsrs	r3, r3, #5
 8014c02:	f003 0207 	and.w	r2, r3, #7
 8014c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	4432      	add	r2, r6
 8014c0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8014c0e:	e0b9      	b.n	8014d84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014c12:	461c      	mov	r4, r3
 8014c14:	f04f 0500 	mov.w	r5, #0
 8014c18:	4622      	mov	r2, r4
 8014c1a:	462b      	mov	r3, r5
 8014c1c:	1891      	adds	r1, r2, r2
 8014c1e:	6139      	str	r1, [r7, #16]
 8014c20:	415b      	adcs	r3, r3
 8014c22:	617b      	str	r3, [r7, #20]
 8014c24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014c28:	1912      	adds	r2, r2, r4
 8014c2a:	eb45 0303 	adc.w	r3, r5, r3
 8014c2e:	f04f 0000 	mov.w	r0, #0
 8014c32:	f04f 0100 	mov.w	r1, #0
 8014c36:	00d9      	lsls	r1, r3, #3
 8014c38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014c3c:	00d0      	lsls	r0, r2, #3
 8014c3e:	4602      	mov	r2, r0
 8014c40:	460b      	mov	r3, r1
 8014c42:	eb12 0804 	adds.w	r8, r2, r4
 8014c46:	eb43 0905 	adc.w	r9, r3, r5
 8014c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c4c:	685b      	ldr	r3, [r3, #4]
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f04f 0100 	mov.w	r1, #0
 8014c54:	f04f 0200 	mov.w	r2, #0
 8014c58:	f04f 0300 	mov.w	r3, #0
 8014c5c:	008b      	lsls	r3, r1, #2
 8014c5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014c62:	0082      	lsls	r2, r0, #2
 8014c64:	4640      	mov	r0, r8
 8014c66:	4649      	mov	r1, r9
 8014c68:	f7f7 fa42 	bl	800c0f0 <__aeabi_uldivmod>
 8014c6c:	4602      	mov	r2, r0
 8014c6e:	460b      	mov	r3, r1
 8014c70:	4b49      	ldr	r3, [pc, #292]	; (8014d98 <UART_SetConfig+0x38c>)
 8014c72:	fba3 2302 	umull	r2, r3, r3, r2
 8014c76:	095b      	lsrs	r3, r3, #5
 8014c78:	011e      	lsls	r6, r3, #4
 8014c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f04f 0100 	mov.w	r1, #0
 8014c82:	4602      	mov	r2, r0
 8014c84:	460b      	mov	r3, r1
 8014c86:	1894      	adds	r4, r2, r2
 8014c88:	60bc      	str	r4, [r7, #8]
 8014c8a:	415b      	adcs	r3, r3
 8014c8c:	60fb      	str	r3, [r7, #12]
 8014c8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014c92:	1812      	adds	r2, r2, r0
 8014c94:	eb41 0303 	adc.w	r3, r1, r3
 8014c98:	f04f 0400 	mov.w	r4, #0
 8014c9c:	f04f 0500 	mov.w	r5, #0
 8014ca0:	00dd      	lsls	r5, r3, #3
 8014ca2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014ca6:	00d4      	lsls	r4, r2, #3
 8014ca8:	4622      	mov	r2, r4
 8014caa:	462b      	mov	r3, r5
 8014cac:	1814      	adds	r4, r2, r0
 8014cae:	64bc      	str	r4, [r7, #72]	; 0x48
 8014cb0:	414b      	adcs	r3, r1
 8014cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014cb6:	685b      	ldr	r3, [r3, #4]
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f04f 0100 	mov.w	r1, #0
 8014cbe:	f04f 0200 	mov.w	r2, #0
 8014cc2:	f04f 0300 	mov.w	r3, #0
 8014cc6:	008b      	lsls	r3, r1, #2
 8014cc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014ccc:	0082      	lsls	r2, r0, #2
 8014cce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8014cd2:	f7f7 fa0d 	bl	800c0f0 <__aeabi_uldivmod>
 8014cd6:	4602      	mov	r2, r0
 8014cd8:	460b      	mov	r3, r1
 8014cda:	4b2f      	ldr	r3, [pc, #188]	; (8014d98 <UART_SetConfig+0x38c>)
 8014cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8014ce0:	095b      	lsrs	r3, r3, #5
 8014ce2:	2164      	movs	r1, #100	; 0x64
 8014ce4:	fb01 f303 	mul.w	r3, r1, r3
 8014ce8:	1ad3      	subs	r3, r2, r3
 8014cea:	011b      	lsls	r3, r3, #4
 8014cec:	3332      	adds	r3, #50	; 0x32
 8014cee:	4a2a      	ldr	r2, [pc, #168]	; (8014d98 <UART_SetConfig+0x38c>)
 8014cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8014cf4:	095b      	lsrs	r3, r3, #5
 8014cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014cfa:	441e      	add	r6, r3
 8014cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f04f 0100 	mov.w	r1, #0
 8014d04:	4602      	mov	r2, r0
 8014d06:	460b      	mov	r3, r1
 8014d08:	1894      	adds	r4, r2, r2
 8014d0a:	603c      	str	r4, [r7, #0]
 8014d0c:	415b      	adcs	r3, r3
 8014d0e:	607b      	str	r3, [r7, #4]
 8014d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014d14:	1812      	adds	r2, r2, r0
 8014d16:	eb41 0303 	adc.w	r3, r1, r3
 8014d1a:	f04f 0400 	mov.w	r4, #0
 8014d1e:	f04f 0500 	mov.w	r5, #0
 8014d22:	00dd      	lsls	r5, r3, #3
 8014d24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014d28:	00d4      	lsls	r4, r2, #3
 8014d2a:	4622      	mov	r2, r4
 8014d2c:	462b      	mov	r3, r5
 8014d2e:	eb12 0a00 	adds.w	sl, r2, r0
 8014d32:	eb43 0b01 	adc.w	fp, r3, r1
 8014d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d38:	685b      	ldr	r3, [r3, #4]
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	f04f 0100 	mov.w	r1, #0
 8014d40:	f04f 0200 	mov.w	r2, #0
 8014d44:	f04f 0300 	mov.w	r3, #0
 8014d48:	008b      	lsls	r3, r1, #2
 8014d4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014d4e:	0082      	lsls	r2, r0, #2
 8014d50:	4650      	mov	r0, sl
 8014d52:	4659      	mov	r1, fp
 8014d54:	f7f7 f9cc 	bl	800c0f0 <__aeabi_uldivmod>
 8014d58:	4602      	mov	r2, r0
 8014d5a:	460b      	mov	r3, r1
 8014d5c:	4b0e      	ldr	r3, [pc, #56]	; (8014d98 <UART_SetConfig+0x38c>)
 8014d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8014d62:	095b      	lsrs	r3, r3, #5
 8014d64:	2164      	movs	r1, #100	; 0x64
 8014d66:	fb01 f303 	mul.w	r3, r1, r3
 8014d6a:	1ad3      	subs	r3, r2, r3
 8014d6c:	011b      	lsls	r3, r3, #4
 8014d6e:	3332      	adds	r3, #50	; 0x32
 8014d70:	4a09      	ldr	r2, [pc, #36]	; (8014d98 <UART_SetConfig+0x38c>)
 8014d72:	fba2 2303 	umull	r2, r3, r2, r3
 8014d76:	095b      	lsrs	r3, r3, #5
 8014d78:	f003 020f 	and.w	r2, r3, #15
 8014d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	4432      	add	r2, r6
 8014d82:	609a      	str	r2, [r3, #8]
}
 8014d84:	bf00      	nop
 8014d86:	377c      	adds	r7, #124	; 0x7c
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d8e:	bf00      	nop
 8014d90:	40011000 	.word	0x40011000
 8014d94:	40011400 	.word	0x40011400
 8014d98:	51eb851f 	.word	0x51eb851f

08014d9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014d9c:	b084      	sub	sp, #16
 8014d9e:	b580      	push	{r7, lr}
 8014da0:	b084      	sub	sp, #16
 8014da2:	af00      	add	r7, sp, #0
 8014da4:	6078      	str	r0, [r7, #4]
 8014da6:	f107 001c 	add.w	r0, r7, #28
 8014daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014db0:	2b01      	cmp	r3, #1
 8014db2:	d122      	bne.n	8014dfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014db8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	68db      	ldr	r3, [r3, #12]
 8014dc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8014dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014dcc:	687a      	ldr	r2, [r7, #4]
 8014dce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	68db      	ldr	r3, [r3, #12]
 8014dd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dde:	2b01      	cmp	r3, #1
 8014de0:	d105      	bne.n	8014dee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	68db      	ldr	r3, [r3, #12]
 8014de6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014dee:	6878      	ldr	r0, [r7, #4]
 8014df0:	f001 fb1c 	bl	801642c <USB_CoreReset>
 8014df4:	4603      	mov	r3, r0
 8014df6:	73fb      	strb	r3, [r7, #15]
 8014df8:	e01a      	b.n	8014e30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	68db      	ldr	r3, [r3, #12]
 8014dfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014e06:	6878      	ldr	r0, [r7, #4]
 8014e08:	f001 fb10 	bl	801642c <USB_CoreReset>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8014e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d106      	bne.n	8014e24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	639a      	str	r2, [r3, #56]	; 0x38
 8014e22:	e005      	b.n	8014e30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e32:	2b01      	cmp	r3, #1
 8014e34:	d10b      	bne.n	8014e4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	689b      	ldr	r3, [r3, #8]
 8014e3a:	f043 0206 	orr.w	r2, r3, #6
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	689b      	ldr	r3, [r3, #8]
 8014e46:	f043 0220 	orr.w	r2, r3, #32
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3710      	adds	r7, #16
 8014e54:	46bd      	mov	sp, r7
 8014e56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014e5a:	b004      	add	sp, #16
 8014e5c:	4770      	bx	lr
	...

08014e60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8014e60:	b480      	push	{r7}
 8014e62:	b087      	sub	sp, #28
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	60f8      	str	r0, [r7, #12]
 8014e68:	60b9      	str	r1, [r7, #8]
 8014e6a:	4613      	mov	r3, r2
 8014e6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8014e6e:	79fb      	ldrb	r3, [r7, #7]
 8014e70:	2b02      	cmp	r3, #2
 8014e72:	d165      	bne.n	8014f40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014e74:	68bb      	ldr	r3, [r7, #8]
 8014e76:	4a41      	ldr	r2, [pc, #260]	; (8014f7c <USB_SetTurnaroundTime+0x11c>)
 8014e78:	4293      	cmp	r3, r2
 8014e7a:	d906      	bls.n	8014e8a <USB_SetTurnaroundTime+0x2a>
 8014e7c:	68bb      	ldr	r3, [r7, #8]
 8014e7e:	4a40      	ldr	r2, [pc, #256]	; (8014f80 <USB_SetTurnaroundTime+0x120>)
 8014e80:	4293      	cmp	r3, r2
 8014e82:	d202      	bcs.n	8014e8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014e84:	230f      	movs	r3, #15
 8014e86:	617b      	str	r3, [r7, #20]
 8014e88:	e062      	b.n	8014f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014e8a:	68bb      	ldr	r3, [r7, #8]
 8014e8c:	4a3c      	ldr	r2, [pc, #240]	; (8014f80 <USB_SetTurnaroundTime+0x120>)
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	d306      	bcc.n	8014ea0 <USB_SetTurnaroundTime+0x40>
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	4a3b      	ldr	r2, [pc, #236]	; (8014f84 <USB_SetTurnaroundTime+0x124>)
 8014e96:	4293      	cmp	r3, r2
 8014e98:	d202      	bcs.n	8014ea0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014e9a:	230e      	movs	r3, #14
 8014e9c:	617b      	str	r3, [r7, #20]
 8014e9e:	e057      	b.n	8014f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8014ea0:	68bb      	ldr	r3, [r7, #8]
 8014ea2:	4a38      	ldr	r2, [pc, #224]	; (8014f84 <USB_SetTurnaroundTime+0x124>)
 8014ea4:	4293      	cmp	r3, r2
 8014ea6:	d306      	bcc.n	8014eb6 <USB_SetTurnaroundTime+0x56>
 8014ea8:	68bb      	ldr	r3, [r7, #8]
 8014eaa:	4a37      	ldr	r2, [pc, #220]	; (8014f88 <USB_SetTurnaroundTime+0x128>)
 8014eac:	4293      	cmp	r3, r2
 8014eae:	d202      	bcs.n	8014eb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8014eb0:	230d      	movs	r3, #13
 8014eb2:	617b      	str	r3, [r7, #20]
 8014eb4:	e04c      	b.n	8014f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014eb6:	68bb      	ldr	r3, [r7, #8]
 8014eb8:	4a33      	ldr	r2, [pc, #204]	; (8014f88 <USB_SetTurnaroundTime+0x128>)
 8014eba:	4293      	cmp	r3, r2
 8014ebc:	d306      	bcc.n	8014ecc <USB_SetTurnaroundTime+0x6c>
 8014ebe:	68bb      	ldr	r3, [r7, #8]
 8014ec0:	4a32      	ldr	r2, [pc, #200]	; (8014f8c <USB_SetTurnaroundTime+0x12c>)
 8014ec2:	4293      	cmp	r3, r2
 8014ec4:	d802      	bhi.n	8014ecc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8014ec6:	230c      	movs	r3, #12
 8014ec8:	617b      	str	r3, [r7, #20]
 8014eca:	e041      	b.n	8014f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	4a2f      	ldr	r2, [pc, #188]	; (8014f8c <USB_SetTurnaroundTime+0x12c>)
 8014ed0:	4293      	cmp	r3, r2
 8014ed2:	d906      	bls.n	8014ee2 <USB_SetTurnaroundTime+0x82>
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	4a2e      	ldr	r2, [pc, #184]	; (8014f90 <USB_SetTurnaroundTime+0x130>)
 8014ed8:	4293      	cmp	r3, r2
 8014eda:	d802      	bhi.n	8014ee2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014edc:	230b      	movs	r3, #11
 8014ede:	617b      	str	r3, [r7, #20]
 8014ee0:	e036      	b.n	8014f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8014ee2:	68bb      	ldr	r3, [r7, #8]
 8014ee4:	4a2a      	ldr	r2, [pc, #168]	; (8014f90 <USB_SetTurnaroundTime+0x130>)
 8014ee6:	4293      	cmp	r3, r2
 8014ee8:	d906      	bls.n	8014ef8 <USB_SetTurnaroundTime+0x98>
 8014eea:	68bb      	ldr	r3, [r7, #8]
 8014eec:	4a29      	ldr	r2, [pc, #164]	; (8014f94 <USB_SetTurnaroundTime+0x134>)
 8014eee:	4293      	cmp	r3, r2
 8014ef0:	d802      	bhi.n	8014ef8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8014ef2:	230a      	movs	r3, #10
 8014ef4:	617b      	str	r3, [r7, #20]
 8014ef6:	e02b      	b.n	8014f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014ef8:	68bb      	ldr	r3, [r7, #8]
 8014efa:	4a26      	ldr	r2, [pc, #152]	; (8014f94 <USB_SetTurnaroundTime+0x134>)
 8014efc:	4293      	cmp	r3, r2
 8014efe:	d906      	bls.n	8014f0e <USB_SetTurnaroundTime+0xae>
 8014f00:	68bb      	ldr	r3, [r7, #8]
 8014f02:	4a25      	ldr	r2, [pc, #148]	; (8014f98 <USB_SetTurnaroundTime+0x138>)
 8014f04:	4293      	cmp	r3, r2
 8014f06:	d202      	bcs.n	8014f0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014f08:	2309      	movs	r3, #9
 8014f0a:	617b      	str	r3, [r7, #20]
 8014f0c:	e020      	b.n	8014f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	4a21      	ldr	r2, [pc, #132]	; (8014f98 <USB_SetTurnaroundTime+0x138>)
 8014f12:	4293      	cmp	r3, r2
 8014f14:	d306      	bcc.n	8014f24 <USB_SetTurnaroundTime+0xc4>
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	4a20      	ldr	r2, [pc, #128]	; (8014f9c <USB_SetTurnaroundTime+0x13c>)
 8014f1a:	4293      	cmp	r3, r2
 8014f1c:	d802      	bhi.n	8014f24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8014f1e:	2308      	movs	r3, #8
 8014f20:	617b      	str	r3, [r7, #20]
 8014f22:	e015      	b.n	8014f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	4a1d      	ldr	r2, [pc, #116]	; (8014f9c <USB_SetTurnaroundTime+0x13c>)
 8014f28:	4293      	cmp	r3, r2
 8014f2a:	d906      	bls.n	8014f3a <USB_SetTurnaroundTime+0xda>
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	4a1c      	ldr	r2, [pc, #112]	; (8014fa0 <USB_SetTurnaroundTime+0x140>)
 8014f30:	4293      	cmp	r3, r2
 8014f32:	d202      	bcs.n	8014f3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014f34:	2307      	movs	r3, #7
 8014f36:	617b      	str	r3, [r7, #20]
 8014f38:	e00a      	b.n	8014f50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014f3a:	2306      	movs	r3, #6
 8014f3c:	617b      	str	r3, [r7, #20]
 8014f3e:	e007      	b.n	8014f50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8014f40:	79fb      	ldrb	r3, [r7, #7]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d102      	bne.n	8014f4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014f46:	2309      	movs	r3, #9
 8014f48:	617b      	str	r3, [r7, #20]
 8014f4a:	e001      	b.n	8014f50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014f4c:	2309      	movs	r3, #9
 8014f4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	68db      	ldr	r3, [r3, #12]
 8014f54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	68da      	ldr	r2, [r3, #12]
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	029b      	lsls	r3, r3, #10
 8014f64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8014f68:	431a      	orrs	r2, r3
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014f6e:	2300      	movs	r3, #0
}
 8014f70:	4618      	mov	r0, r3
 8014f72:	371c      	adds	r7, #28
 8014f74:	46bd      	mov	sp, r7
 8014f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7a:	4770      	bx	lr
 8014f7c:	00d8acbf 	.word	0x00d8acbf
 8014f80:	00e4e1c0 	.word	0x00e4e1c0
 8014f84:	00f42400 	.word	0x00f42400
 8014f88:	01067380 	.word	0x01067380
 8014f8c:	011a499f 	.word	0x011a499f
 8014f90:	01312cff 	.word	0x01312cff
 8014f94:	014ca43f 	.word	0x014ca43f
 8014f98:	016e3600 	.word	0x016e3600
 8014f9c:	01a6ab1f 	.word	0x01a6ab1f
 8014fa0:	01e84800 	.word	0x01e84800

08014fa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014fa4:	b480      	push	{r7}
 8014fa6:	b083      	sub	sp, #12
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	689b      	ldr	r3, [r3, #8]
 8014fb0:	f043 0201 	orr.w	r2, r3, #1
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014fb8:	2300      	movs	r3, #0
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	370c      	adds	r7, #12
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc4:	4770      	bx	lr

08014fc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014fc6:	b480      	push	{r7}
 8014fc8:	b083      	sub	sp, #12
 8014fca:	af00      	add	r7, sp, #0
 8014fcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	689b      	ldr	r3, [r3, #8]
 8014fd2:	f023 0201 	bic.w	r2, r3, #1
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014fda:	2300      	movs	r3, #0
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	370c      	adds	r7, #12
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe6:	4770      	bx	lr

08014fe8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b084      	sub	sp, #16
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
 8014ff0:	460b      	mov	r3, r1
 8014ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	68db      	ldr	r3, [r3, #12]
 8014ffc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8015004:	78fb      	ldrb	r3, [r7, #3]
 8015006:	2b01      	cmp	r3, #1
 8015008:	d115      	bne.n	8015036 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	68db      	ldr	r3, [r3, #12]
 801500e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8015016:	2001      	movs	r0, #1
 8015018:	f7fa ffec 	bl	800fff4 <HAL_Delay>
      ms++;
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	3301      	adds	r3, #1
 8015020:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8015022:	6878      	ldr	r0, [r7, #4]
 8015024:	f001 f972 	bl	801630c <USB_GetMode>
 8015028:	4603      	mov	r3, r0
 801502a:	2b01      	cmp	r3, #1
 801502c:	d01e      	beq.n	801506c <USB_SetCurrentMode+0x84>
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	2b31      	cmp	r3, #49	; 0x31
 8015032:	d9f0      	bls.n	8015016 <USB_SetCurrentMode+0x2e>
 8015034:	e01a      	b.n	801506c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8015036:	78fb      	ldrb	r3, [r7, #3]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d115      	bne.n	8015068 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	68db      	ldr	r3, [r3, #12]
 8015040:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8015048:	2001      	movs	r0, #1
 801504a:	f7fa ffd3 	bl	800fff4 <HAL_Delay>
      ms++;
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	3301      	adds	r3, #1
 8015052:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8015054:	6878      	ldr	r0, [r7, #4]
 8015056:	f001 f959 	bl	801630c <USB_GetMode>
 801505a:	4603      	mov	r3, r0
 801505c:	2b00      	cmp	r3, #0
 801505e:	d005      	beq.n	801506c <USB_SetCurrentMode+0x84>
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	2b31      	cmp	r3, #49	; 0x31
 8015064:	d9f0      	bls.n	8015048 <USB_SetCurrentMode+0x60>
 8015066:	e001      	b.n	801506c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8015068:	2301      	movs	r3, #1
 801506a:	e005      	b.n	8015078 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	2b32      	cmp	r3, #50	; 0x32
 8015070:	d101      	bne.n	8015076 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8015072:	2301      	movs	r3, #1
 8015074:	e000      	b.n	8015078 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8015076:	2300      	movs	r3, #0
}
 8015078:	4618      	mov	r0, r3
 801507a:	3710      	adds	r7, #16
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}

08015080 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015080:	b084      	sub	sp, #16
 8015082:	b580      	push	{r7, lr}
 8015084:	b086      	sub	sp, #24
 8015086:	af00      	add	r7, sp, #0
 8015088:	6078      	str	r0, [r7, #4]
 801508a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801508e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8015092:	2300      	movs	r3, #0
 8015094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801509a:	2300      	movs	r3, #0
 801509c:	613b      	str	r3, [r7, #16]
 801509e:	e009      	b.n	80150b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80150a0:	687a      	ldr	r2, [r7, #4]
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	3340      	adds	r3, #64	; 0x40
 80150a6:	009b      	lsls	r3, r3, #2
 80150a8:	4413      	add	r3, r2
 80150aa:	2200      	movs	r2, #0
 80150ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	3301      	adds	r3, #1
 80150b2:	613b      	str	r3, [r7, #16]
 80150b4:	693b      	ldr	r3, [r7, #16]
 80150b6:	2b0e      	cmp	r3, #14
 80150b8:	d9f2      	bls.n	80150a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80150ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d11c      	bne.n	80150fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80150c6:	685b      	ldr	r3, [r3, #4]
 80150c8:	68fa      	ldr	r2, [r7, #12]
 80150ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80150ce:	f043 0302 	orr.w	r3, r3, #2
 80150d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	639a      	str	r2, [r3, #56]	; 0x38
 80150f8:	e00b      	b.n	8015112 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801510a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015118:	461a      	mov	r2, r3
 801511a:	2300      	movs	r3, #0
 801511c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015124:	4619      	mov	r1, r3
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801512c:	461a      	mov	r2, r3
 801512e:	680b      	ldr	r3, [r1, #0]
 8015130:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015134:	2b01      	cmp	r3, #1
 8015136:	d10c      	bne.n	8015152 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8015138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801513a:	2b00      	cmp	r3, #0
 801513c:	d104      	bne.n	8015148 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801513e:	2100      	movs	r1, #0
 8015140:	6878      	ldr	r0, [r7, #4]
 8015142:	f000 f945 	bl	80153d0 <USB_SetDevSpeed>
 8015146:	e008      	b.n	801515a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8015148:	2101      	movs	r1, #1
 801514a:	6878      	ldr	r0, [r7, #4]
 801514c:	f000 f940 	bl	80153d0 <USB_SetDevSpeed>
 8015150:	e003      	b.n	801515a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8015152:	2103      	movs	r1, #3
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	f000 f93b 	bl	80153d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801515a:	2110      	movs	r1, #16
 801515c:	6878      	ldr	r0, [r7, #4]
 801515e:	f000 f8f3 	bl	8015348 <USB_FlushTxFifo>
 8015162:	4603      	mov	r3, r0
 8015164:	2b00      	cmp	r3, #0
 8015166:	d001      	beq.n	801516c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8015168:	2301      	movs	r3, #1
 801516a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801516c:	6878      	ldr	r0, [r7, #4]
 801516e:	f000 f90f 	bl	8015390 <USB_FlushRxFifo>
 8015172:	4603      	mov	r3, r0
 8015174:	2b00      	cmp	r3, #0
 8015176:	d001      	beq.n	801517c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8015178:	2301      	movs	r3, #1
 801517a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015182:	461a      	mov	r2, r3
 8015184:	2300      	movs	r3, #0
 8015186:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801518e:	461a      	mov	r2, r3
 8015190:	2300      	movs	r3, #0
 8015192:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801519a:	461a      	mov	r2, r3
 801519c:	2300      	movs	r3, #0
 801519e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80151a0:	2300      	movs	r3, #0
 80151a2:	613b      	str	r3, [r7, #16]
 80151a4:	e043      	b.n	801522e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80151a6:	693b      	ldr	r3, [r7, #16]
 80151a8:	015a      	lsls	r2, r3, #5
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	4413      	add	r3, r2
 80151ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80151b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80151bc:	d118      	bne.n	80151f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80151be:	693b      	ldr	r3, [r7, #16]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d10a      	bne.n	80151da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	015a      	lsls	r2, r3, #5
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	4413      	add	r3, r2
 80151cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151d0:	461a      	mov	r2, r3
 80151d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80151d6:	6013      	str	r3, [r2, #0]
 80151d8:	e013      	b.n	8015202 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80151da:	693b      	ldr	r3, [r7, #16]
 80151dc:	015a      	lsls	r2, r3, #5
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	4413      	add	r3, r2
 80151e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151e6:	461a      	mov	r2, r3
 80151e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80151ec:	6013      	str	r3, [r2, #0]
 80151ee:	e008      	b.n	8015202 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80151f0:	693b      	ldr	r3, [r7, #16]
 80151f2:	015a      	lsls	r2, r3, #5
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	4413      	add	r3, r2
 80151f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151fc:	461a      	mov	r2, r3
 80151fe:	2300      	movs	r3, #0
 8015200:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	015a      	lsls	r2, r3, #5
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	4413      	add	r3, r2
 801520a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801520e:	461a      	mov	r2, r3
 8015210:	2300      	movs	r3, #0
 8015212:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	015a      	lsls	r2, r3, #5
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	4413      	add	r3, r2
 801521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015220:	461a      	mov	r2, r3
 8015222:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8015226:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015228:	693b      	ldr	r3, [r7, #16]
 801522a:	3301      	adds	r3, #1
 801522c:	613b      	str	r3, [r7, #16]
 801522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015230:	693a      	ldr	r2, [r7, #16]
 8015232:	429a      	cmp	r2, r3
 8015234:	d3b7      	bcc.n	80151a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015236:	2300      	movs	r3, #0
 8015238:	613b      	str	r3, [r7, #16]
 801523a:	e043      	b.n	80152c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801523c:	693b      	ldr	r3, [r7, #16]
 801523e:	015a      	lsls	r2, r3, #5
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	4413      	add	r3, r2
 8015244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801524e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015252:	d118      	bne.n	8015286 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8015254:	693b      	ldr	r3, [r7, #16]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d10a      	bne.n	8015270 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801525a:	693b      	ldr	r3, [r7, #16]
 801525c:	015a      	lsls	r2, r3, #5
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	4413      	add	r3, r2
 8015262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015266:	461a      	mov	r2, r3
 8015268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801526c:	6013      	str	r3, [r2, #0]
 801526e:	e013      	b.n	8015298 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8015270:	693b      	ldr	r3, [r7, #16]
 8015272:	015a      	lsls	r2, r3, #5
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	4413      	add	r3, r2
 8015278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801527c:	461a      	mov	r2, r3
 801527e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8015282:	6013      	str	r3, [r2, #0]
 8015284:	e008      	b.n	8015298 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8015286:	693b      	ldr	r3, [r7, #16]
 8015288:	015a      	lsls	r2, r3, #5
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	4413      	add	r3, r2
 801528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015292:	461a      	mov	r2, r3
 8015294:	2300      	movs	r3, #0
 8015296:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8015298:	693b      	ldr	r3, [r7, #16]
 801529a:	015a      	lsls	r2, r3, #5
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	4413      	add	r3, r2
 80152a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80152a4:	461a      	mov	r2, r3
 80152a6:	2300      	movs	r3, #0
 80152a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	015a      	lsls	r2, r3, #5
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	4413      	add	r3, r2
 80152b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80152b6:	461a      	mov	r2, r3
 80152b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80152bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80152be:	693b      	ldr	r3, [r7, #16]
 80152c0:	3301      	adds	r3, #1
 80152c2:	613b      	str	r3, [r7, #16]
 80152c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c6:	693a      	ldr	r2, [r7, #16]
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d3b7      	bcc.n	801523c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152d2:	691b      	ldr	r3, [r3, #16]
 80152d4:	68fa      	ldr	r2, [r7, #12]
 80152d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80152da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80152de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2200      	movs	r2, #0
 80152e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80152ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80152ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d105      	bne.n	8015300 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	699b      	ldr	r3, [r3, #24]
 80152f8:	f043 0210 	orr.w	r2, r3, #16
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	699a      	ldr	r2, [r3, #24]
 8015304:	4b0f      	ldr	r3, [pc, #60]	; (8015344 <USB_DevInit+0x2c4>)
 8015306:	4313      	orrs	r3, r2
 8015308:	687a      	ldr	r2, [r7, #4]
 801530a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801530c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801530e:	2b00      	cmp	r3, #0
 8015310:	d005      	beq.n	801531e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	699b      	ldr	r3, [r3, #24]
 8015316:	f043 0208 	orr.w	r2, r3, #8
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801531e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015320:	2b01      	cmp	r3, #1
 8015322:	d107      	bne.n	8015334 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	699b      	ldr	r3, [r3, #24]
 8015328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801532c:	f043 0304 	orr.w	r3, r3, #4
 8015330:	687a      	ldr	r2, [r7, #4]
 8015332:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8015334:	7dfb      	ldrb	r3, [r7, #23]
}
 8015336:	4618      	mov	r0, r3
 8015338:	3718      	adds	r7, #24
 801533a:	46bd      	mov	sp, r7
 801533c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015340:	b004      	add	sp, #16
 8015342:	4770      	bx	lr
 8015344:	803c3800 	.word	0x803c3800

08015348 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8015348:	b480      	push	{r7}
 801534a:	b085      	sub	sp, #20
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
 8015350:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015352:	2300      	movs	r3, #0
 8015354:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	019b      	lsls	r3, r3, #6
 801535a:	f043 0220 	orr.w	r2, r3, #32
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	3301      	adds	r3, #1
 8015366:	60fb      	str	r3, [r7, #12]
 8015368:	4a08      	ldr	r2, [pc, #32]	; (801538c <USB_FlushTxFifo+0x44>)
 801536a:	4293      	cmp	r3, r2
 801536c:	d901      	bls.n	8015372 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 801536e:	2303      	movs	r3, #3
 8015370:	e006      	b.n	8015380 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	691b      	ldr	r3, [r3, #16]
 8015376:	f003 0320 	and.w	r3, r3, #32
 801537a:	2b20      	cmp	r3, #32
 801537c:	d0f1      	beq.n	8015362 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801537e:	2300      	movs	r3, #0
}
 8015380:	4618      	mov	r0, r3
 8015382:	3714      	adds	r7, #20
 8015384:	46bd      	mov	sp, r7
 8015386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538a:	4770      	bx	lr
 801538c:	00030d40 	.word	0x00030d40

08015390 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8015390:	b480      	push	{r7}
 8015392:	b085      	sub	sp, #20
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015398:	2300      	movs	r3, #0
 801539a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	2210      	movs	r2, #16
 80153a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	3301      	adds	r3, #1
 80153a6:	60fb      	str	r3, [r7, #12]
 80153a8:	4a08      	ldr	r2, [pc, #32]	; (80153cc <USB_FlushRxFifo+0x3c>)
 80153aa:	4293      	cmp	r3, r2
 80153ac:	d901      	bls.n	80153b2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80153ae:	2303      	movs	r3, #3
 80153b0:	e006      	b.n	80153c0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	691b      	ldr	r3, [r3, #16]
 80153b6:	f003 0310 	and.w	r3, r3, #16
 80153ba:	2b10      	cmp	r3, #16
 80153bc:	d0f1      	beq.n	80153a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80153be:	2300      	movs	r3, #0
}
 80153c0:	4618      	mov	r0, r3
 80153c2:	3714      	adds	r7, #20
 80153c4:	46bd      	mov	sp, r7
 80153c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ca:	4770      	bx	lr
 80153cc:	00030d40 	.word	0x00030d40

080153d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80153d0:	b480      	push	{r7}
 80153d2:	b085      	sub	sp, #20
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
 80153d8:	460b      	mov	r3, r1
 80153da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80153e6:	681a      	ldr	r2, [r3, #0]
 80153e8:	78fb      	ldrb	r3, [r7, #3]
 80153ea:	68f9      	ldr	r1, [r7, #12]
 80153ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80153f0:	4313      	orrs	r3, r2
 80153f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80153f4:	2300      	movs	r3, #0
}
 80153f6:	4618      	mov	r0, r3
 80153f8:	3714      	adds	r7, #20
 80153fa:	46bd      	mov	sp, r7
 80153fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015400:	4770      	bx	lr

08015402 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8015402:	b480      	push	{r7}
 8015404:	b087      	sub	sp, #28
 8015406:	af00      	add	r7, sp, #0
 8015408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801540e:	693b      	ldr	r3, [r7, #16]
 8015410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015414:	689b      	ldr	r3, [r3, #8]
 8015416:	f003 0306 	and.w	r3, r3, #6
 801541a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d102      	bne.n	8015428 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8015422:	2300      	movs	r3, #0
 8015424:	75fb      	strb	r3, [r7, #23]
 8015426:	e00a      	b.n	801543e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	2b02      	cmp	r3, #2
 801542c:	d002      	beq.n	8015434 <USB_GetDevSpeed+0x32>
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	2b06      	cmp	r3, #6
 8015432:	d102      	bne.n	801543a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8015434:	2302      	movs	r3, #2
 8015436:	75fb      	strb	r3, [r7, #23]
 8015438:	e001      	b.n	801543e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801543a:	230f      	movs	r3, #15
 801543c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801543e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015440:	4618      	mov	r0, r3
 8015442:	371c      	adds	r7, #28
 8015444:	46bd      	mov	sp, r7
 8015446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544a:	4770      	bx	lr

0801544c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801544c:	b480      	push	{r7}
 801544e:	b085      	sub	sp, #20
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
 8015454:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	781b      	ldrb	r3, [r3, #0]
 801545e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015460:	683b      	ldr	r3, [r7, #0]
 8015462:	785b      	ldrb	r3, [r3, #1]
 8015464:	2b01      	cmp	r3, #1
 8015466:	d13a      	bne.n	80154de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801546e:	69da      	ldr	r2, [r3, #28]
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	781b      	ldrb	r3, [r3, #0]
 8015474:	f003 030f 	and.w	r3, r3, #15
 8015478:	2101      	movs	r1, #1
 801547a:	fa01 f303 	lsl.w	r3, r1, r3
 801547e:	b29b      	uxth	r3, r3
 8015480:	68f9      	ldr	r1, [r7, #12]
 8015482:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015486:	4313      	orrs	r3, r2
 8015488:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	015a      	lsls	r2, r3, #5
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	4413      	add	r3, r2
 8015492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801549c:	2b00      	cmp	r3, #0
 801549e:	d155      	bne.n	801554c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	015a      	lsls	r2, r3, #5
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	4413      	add	r3, r2
 80154a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80154ac:	681a      	ldr	r2, [r3, #0]
 80154ae:	683b      	ldr	r3, [r7, #0]
 80154b0:	689b      	ldr	r3, [r3, #8]
 80154b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80154b6:	683b      	ldr	r3, [r7, #0]
 80154b8:	78db      	ldrb	r3, [r3, #3]
 80154ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80154bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80154be:	68bb      	ldr	r3, [r7, #8]
 80154c0:	059b      	lsls	r3, r3, #22
 80154c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80154c4:	4313      	orrs	r3, r2
 80154c6:	68ba      	ldr	r2, [r7, #8]
 80154c8:	0151      	lsls	r1, r2, #5
 80154ca:	68fa      	ldr	r2, [r7, #12]
 80154cc:	440a      	add	r2, r1
 80154ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80154d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80154d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80154da:	6013      	str	r3, [r2, #0]
 80154dc:	e036      	b.n	801554c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154e4:	69da      	ldr	r2, [r3, #28]
 80154e6:	683b      	ldr	r3, [r7, #0]
 80154e8:	781b      	ldrb	r3, [r3, #0]
 80154ea:	f003 030f 	and.w	r3, r3, #15
 80154ee:	2101      	movs	r1, #1
 80154f0:	fa01 f303 	lsl.w	r3, r1, r3
 80154f4:	041b      	lsls	r3, r3, #16
 80154f6:	68f9      	ldr	r1, [r7, #12]
 80154f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80154fc:	4313      	orrs	r3, r2
 80154fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8015500:	68bb      	ldr	r3, [r7, #8]
 8015502:	015a      	lsls	r2, r3, #5
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	4413      	add	r3, r2
 8015508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015512:	2b00      	cmp	r3, #0
 8015514:	d11a      	bne.n	801554c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015516:	68bb      	ldr	r3, [r7, #8]
 8015518:	015a      	lsls	r2, r3, #5
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	4413      	add	r3, r2
 801551e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015522:	681a      	ldr	r2, [r3, #0]
 8015524:	683b      	ldr	r3, [r7, #0]
 8015526:	689b      	ldr	r3, [r3, #8]
 8015528:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801552c:	683b      	ldr	r3, [r7, #0]
 801552e:	78db      	ldrb	r3, [r3, #3]
 8015530:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015532:	430b      	orrs	r3, r1
 8015534:	4313      	orrs	r3, r2
 8015536:	68ba      	ldr	r2, [r7, #8]
 8015538:	0151      	lsls	r1, r2, #5
 801553a:	68fa      	ldr	r2, [r7, #12]
 801553c:	440a      	add	r2, r1
 801553e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801554a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801554c:	2300      	movs	r3, #0
}
 801554e:	4618      	mov	r0, r3
 8015550:	3714      	adds	r7, #20
 8015552:	46bd      	mov	sp, r7
 8015554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015558:	4770      	bx	lr
	...

0801555c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801555c:	b480      	push	{r7}
 801555e:	b085      	sub	sp, #20
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
 8015564:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801556a:	683b      	ldr	r3, [r7, #0]
 801556c:	781b      	ldrb	r3, [r3, #0]
 801556e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	785b      	ldrb	r3, [r3, #1]
 8015574:	2b01      	cmp	r3, #1
 8015576:	d161      	bne.n	801563c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	015a      	lsls	r2, r3, #5
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	4413      	add	r3, r2
 8015580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801558a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801558e:	d11f      	bne.n	80155d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	015a      	lsls	r2, r3, #5
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	4413      	add	r3, r2
 8015598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	68ba      	ldr	r2, [r7, #8]
 80155a0:	0151      	lsls	r1, r2, #5
 80155a2:	68fa      	ldr	r2, [r7, #12]
 80155a4:	440a      	add	r2, r1
 80155a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80155aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80155ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80155b0:	68bb      	ldr	r3, [r7, #8]
 80155b2:	015a      	lsls	r2, r3, #5
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	4413      	add	r3, r2
 80155b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	68ba      	ldr	r2, [r7, #8]
 80155c0:	0151      	lsls	r1, r2, #5
 80155c2:	68fa      	ldr	r2, [r7, #12]
 80155c4:	440a      	add	r2, r1
 80155c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80155ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80155ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80155d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	781b      	ldrb	r3, [r3, #0]
 80155dc:	f003 030f 	and.w	r3, r3, #15
 80155e0:	2101      	movs	r1, #1
 80155e2:	fa01 f303 	lsl.w	r3, r1, r3
 80155e6:	b29b      	uxth	r3, r3
 80155e8:	43db      	mvns	r3, r3
 80155ea:	68f9      	ldr	r1, [r7, #12]
 80155ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80155f0:	4013      	ands	r3, r2
 80155f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80155fa:	69da      	ldr	r2, [r3, #28]
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	781b      	ldrb	r3, [r3, #0]
 8015600:	f003 030f 	and.w	r3, r3, #15
 8015604:	2101      	movs	r1, #1
 8015606:	fa01 f303 	lsl.w	r3, r1, r3
 801560a:	b29b      	uxth	r3, r3
 801560c:	43db      	mvns	r3, r3
 801560e:	68f9      	ldr	r1, [r7, #12]
 8015610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015614:	4013      	ands	r3, r2
 8015616:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	015a      	lsls	r2, r3, #5
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	4413      	add	r3, r2
 8015620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015624:	681a      	ldr	r2, [r3, #0]
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	0159      	lsls	r1, r3, #5
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	440b      	add	r3, r1
 801562e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015632:	4619      	mov	r1, r3
 8015634:	4b35      	ldr	r3, [pc, #212]	; (801570c <USB_DeactivateEndpoint+0x1b0>)
 8015636:	4013      	ands	r3, r2
 8015638:	600b      	str	r3, [r1, #0]
 801563a:	e060      	b.n	80156fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	015a      	lsls	r2, r3, #5
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	4413      	add	r3, r2
 8015644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801564e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015652:	d11f      	bne.n	8015694 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	015a      	lsls	r2, r3, #5
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	4413      	add	r3, r2
 801565c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	68ba      	ldr	r2, [r7, #8]
 8015664:	0151      	lsls	r1, r2, #5
 8015666:	68fa      	ldr	r2, [r7, #12]
 8015668:	440a      	add	r2, r1
 801566a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801566e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015672:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	015a      	lsls	r2, r3, #5
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	4413      	add	r3, r2
 801567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	68ba      	ldr	r2, [r7, #8]
 8015684:	0151      	lsls	r1, r2, #5
 8015686:	68fa      	ldr	r2, [r7, #12]
 8015688:	440a      	add	r2, r1
 801568a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801568e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015692:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801569a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	781b      	ldrb	r3, [r3, #0]
 80156a0:	f003 030f 	and.w	r3, r3, #15
 80156a4:	2101      	movs	r1, #1
 80156a6:	fa01 f303 	lsl.w	r3, r1, r3
 80156aa:	041b      	lsls	r3, r3, #16
 80156ac:	43db      	mvns	r3, r3
 80156ae:	68f9      	ldr	r1, [r7, #12]
 80156b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80156b4:	4013      	ands	r3, r2
 80156b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80156be:	69da      	ldr	r2, [r3, #28]
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	f003 030f 	and.w	r3, r3, #15
 80156c8:	2101      	movs	r1, #1
 80156ca:	fa01 f303 	lsl.w	r3, r1, r3
 80156ce:	041b      	lsls	r3, r3, #16
 80156d0:	43db      	mvns	r3, r3
 80156d2:	68f9      	ldr	r1, [r7, #12]
 80156d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80156d8:	4013      	ands	r3, r2
 80156da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	015a      	lsls	r2, r3, #5
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	4413      	add	r3, r2
 80156e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80156e8:	681a      	ldr	r2, [r3, #0]
 80156ea:	68bb      	ldr	r3, [r7, #8]
 80156ec:	0159      	lsls	r1, r3, #5
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	440b      	add	r3, r1
 80156f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80156f6:	4619      	mov	r1, r3
 80156f8:	4b05      	ldr	r3, [pc, #20]	; (8015710 <USB_DeactivateEndpoint+0x1b4>)
 80156fa:	4013      	ands	r3, r2
 80156fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80156fe:	2300      	movs	r3, #0
}
 8015700:	4618      	mov	r0, r3
 8015702:	3714      	adds	r7, #20
 8015704:	46bd      	mov	sp, r7
 8015706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570a:	4770      	bx	lr
 801570c:	ec337800 	.word	0xec337800
 8015710:	eff37800 	.word	0xeff37800

08015714 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b08a      	sub	sp, #40	; 0x28
 8015718:	af02      	add	r7, sp, #8
 801571a:	60f8      	str	r0, [r7, #12]
 801571c:	60b9      	str	r1, [r7, #8]
 801571e:	4613      	mov	r3, r2
 8015720:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	781b      	ldrb	r3, [r3, #0]
 801572a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801572c:	68bb      	ldr	r3, [r7, #8]
 801572e:	785b      	ldrb	r3, [r3, #1]
 8015730:	2b01      	cmp	r3, #1
 8015732:	f040 815c 	bne.w	80159ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	695b      	ldr	r3, [r3, #20]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d132      	bne.n	80157a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801573e:	69bb      	ldr	r3, [r7, #24]
 8015740:	015a      	lsls	r2, r3, #5
 8015742:	69fb      	ldr	r3, [r7, #28]
 8015744:	4413      	add	r3, r2
 8015746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801574a:	691b      	ldr	r3, [r3, #16]
 801574c:	69ba      	ldr	r2, [r7, #24]
 801574e:	0151      	lsls	r1, r2, #5
 8015750:	69fa      	ldr	r2, [r7, #28]
 8015752:	440a      	add	r2, r1
 8015754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015758:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801575c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015760:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015762:	69bb      	ldr	r3, [r7, #24]
 8015764:	015a      	lsls	r2, r3, #5
 8015766:	69fb      	ldr	r3, [r7, #28]
 8015768:	4413      	add	r3, r2
 801576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801576e:	691b      	ldr	r3, [r3, #16]
 8015770:	69ba      	ldr	r2, [r7, #24]
 8015772:	0151      	lsls	r1, r2, #5
 8015774:	69fa      	ldr	r2, [r7, #28]
 8015776:	440a      	add	r2, r1
 8015778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801577c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015780:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015782:	69bb      	ldr	r3, [r7, #24]
 8015784:	015a      	lsls	r2, r3, #5
 8015786:	69fb      	ldr	r3, [r7, #28]
 8015788:	4413      	add	r3, r2
 801578a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801578e:	691b      	ldr	r3, [r3, #16]
 8015790:	69ba      	ldr	r2, [r7, #24]
 8015792:	0151      	lsls	r1, r2, #5
 8015794:	69fa      	ldr	r2, [r7, #28]
 8015796:	440a      	add	r2, r1
 8015798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801579c:	0cdb      	lsrs	r3, r3, #19
 801579e:	04db      	lsls	r3, r3, #19
 80157a0:	6113      	str	r3, [r2, #16]
 80157a2:	e074      	b.n	801588e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80157a4:	69bb      	ldr	r3, [r7, #24]
 80157a6:	015a      	lsls	r2, r3, #5
 80157a8:	69fb      	ldr	r3, [r7, #28]
 80157aa:	4413      	add	r3, r2
 80157ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157b0:	691b      	ldr	r3, [r3, #16]
 80157b2:	69ba      	ldr	r2, [r7, #24]
 80157b4:	0151      	lsls	r1, r2, #5
 80157b6:	69fa      	ldr	r2, [r7, #28]
 80157b8:	440a      	add	r2, r1
 80157ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80157be:	0cdb      	lsrs	r3, r3, #19
 80157c0:	04db      	lsls	r3, r3, #19
 80157c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80157c4:	69bb      	ldr	r3, [r7, #24]
 80157c6:	015a      	lsls	r2, r3, #5
 80157c8:	69fb      	ldr	r3, [r7, #28]
 80157ca:	4413      	add	r3, r2
 80157cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157d0:	691b      	ldr	r3, [r3, #16]
 80157d2:	69ba      	ldr	r2, [r7, #24]
 80157d4:	0151      	lsls	r1, r2, #5
 80157d6:	69fa      	ldr	r2, [r7, #28]
 80157d8:	440a      	add	r2, r1
 80157da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80157de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80157e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80157e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80157e8:	69bb      	ldr	r3, [r7, #24]
 80157ea:	015a      	lsls	r2, r3, #5
 80157ec:	69fb      	ldr	r3, [r7, #28]
 80157ee:	4413      	add	r3, r2
 80157f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157f4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	6959      	ldr	r1, [r3, #20]
 80157fa:	68bb      	ldr	r3, [r7, #8]
 80157fc:	689b      	ldr	r3, [r3, #8]
 80157fe:	440b      	add	r3, r1
 8015800:	1e59      	subs	r1, r3, #1
 8015802:	68bb      	ldr	r3, [r7, #8]
 8015804:	689b      	ldr	r3, [r3, #8]
 8015806:	fbb1 f3f3 	udiv	r3, r1, r3
 801580a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801580c:	4b9d      	ldr	r3, [pc, #628]	; (8015a84 <USB_EPStartXfer+0x370>)
 801580e:	400b      	ands	r3, r1
 8015810:	69b9      	ldr	r1, [r7, #24]
 8015812:	0148      	lsls	r0, r1, #5
 8015814:	69f9      	ldr	r1, [r7, #28]
 8015816:	4401      	add	r1, r0
 8015818:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801581c:	4313      	orrs	r3, r2
 801581e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015820:	69bb      	ldr	r3, [r7, #24]
 8015822:	015a      	lsls	r2, r3, #5
 8015824:	69fb      	ldr	r3, [r7, #28]
 8015826:	4413      	add	r3, r2
 8015828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801582c:	691a      	ldr	r2, [r3, #16]
 801582e:	68bb      	ldr	r3, [r7, #8]
 8015830:	695b      	ldr	r3, [r3, #20]
 8015832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015836:	69b9      	ldr	r1, [r7, #24]
 8015838:	0148      	lsls	r0, r1, #5
 801583a:	69f9      	ldr	r1, [r7, #28]
 801583c:	4401      	add	r1, r0
 801583e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015842:	4313      	orrs	r3, r2
 8015844:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8015846:	68bb      	ldr	r3, [r7, #8]
 8015848:	78db      	ldrb	r3, [r3, #3]
 801584a:	2b01      	cmp	r3, #1
 801584c:	d11f      	bne.n	801588e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801584e:	69bb      	ldr	r3, [r7, #24]
 8015850:	015a      	lsls	r2, r3, #5
 8015852:	69fb      	ldr	r3, [r7, #28]
 8015854:	4413      	add	r3, r2
 8015856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801585a:	691b      	ldr	r3, [r3, #16]
 801585c:	69ba      	ldr	r2, [r7, #24]
 801585e:	0151      	lsls	r1, r2, #5
 8015860:	69fa      	ldr	r2, [r7, #28]
 8015862:	440a      	add	r2, r1
 8015864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015868:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801586c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801586e:	69bb      	ldr	r3, [r7, #24]
 8015870:	015a      	lsls	r2, r3, #5
 8015872:	69fb      	ldr	r3, [r7, #28]
 8015874:	4413      	add	r3, r2
 8015876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801587a:	691b      	ldr	r3, [r3, #16]
 801587c:	69ba      	ldr	r2, [r7, #24]
 801587e:	0151      	lsls	r1, r2, #5
 8015880:	69fa      	ldr	r2, [r7, #28]
 8015882:	440a      	add	r2, r1
 8015884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015888:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801588c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801588e:	79fb      	ldrb	r3, [r7, #7]
 8015890:	2b01      	cmp	r3, #1
 8015892:	d14b      	bne.n	801592c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	691b      	ldr	r3, [r3, #16]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d009      	beq.n	80158b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801589c:	69bb      	ldr	r3, [r7, #24]
 801589e:	015a      	lsls	r2, r3, #5
 80158a0:	69fb      	ldr	r3, [r7, #28]
 80158a2:	4413      	add	r3, r2
 80158a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80158a8:	461a      	mov	r2, r3
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	691b      	ldr	r3, [r3, #16]
 80158ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	78db      	ldrb	r3, [r3, #3]
 80158b4:	2b01      	cmp	r3, #1
 80158b6:	d128      	bne.n	801590a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80158b8:	69fb      	ldr	r3, [r7, #28]
 80158ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80158be:	689b      	ldr	r3, [r3, #8]
 80158c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d110      	bne.n	80158ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80158c8:	69bb      	ldr	r3, [r7, #24]
 80158ca:	015a      	lsls	r2, r3, #5
 80158cc:	69fb      	ldr	r3, [r7, #28]
 80158ce:	4413      	add	r3, r2
 80158d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	69ba      	ldr	r2, [r7, #24]
 80158d8:	0151      	lsls	r1, r2, #5
 80158da:	69fa      	ldr	r2, [r7, #28]
 80158dc:	440a      	add	r2, r1
 80158de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80158e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80158e6:	6013      	str	r3, [r2, #0]
 80158e8:	e00f      	b.n	801590a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80158ea:	69bb      	ldr	r3, [r7, #24]
 80158ec:	015a      	lsls	r2, r3, #5
 80158ee:	69fb      	ldr	r3, [r7, #28]
 80158f0:	4413      	add	r3, r2
 80158f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	69ba      	ldr	r2, [r7, #24]
 80158fa:	0151      	lsls	r1, r2, #5
 80158fc:	69fa      	ldr	r2, [r7, #28]
 80158fe:	440a      	add	r2, r1
 8015900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015908:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801590a:	69bb      	ldr	r3, [r7, #24]
 801590c:	015a      	lsls	r2, r3, #5
 801590e:	69fb      	ldr	r3, [r7, #28]
 8015910:	4413      	add	r3, r2
 8015912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	69ba      	ldr	r2, [r7, #24]
 801591a:	0151      	lsls	r1, r2, #5
 801591c:	69fa      	ldr	r2, [r7, #28]
 801591e:	440a      	add	r2, r1
 8015920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015924:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015928:	6013      	str	r3, [r2, #0]
 801592a:	e12f      	b.n	8015b8c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801592c:	69bb      	ldr	r3, [r7, #24]
 801592e:	015a      	lsls	r2, r3, #5
 8015930:	69fb      	ldr	r3, [r7, #28]
 8015932:	4413      	add	r3, r2
 8015934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	69ba      	ldr	r2, [r7, #24]
 801593c:	0151      	lsls	r1, r2, #5
 801593e:	69fa      	ldr	r2, [r7, #28]
 8015940:	440a      	add	r2, r1
 8015942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015946:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801594a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801594c:	68bb      	ldr	r3, [r7, #8]
 801594e:	78db      	ldrb	r3, [r3, #3]
 8015950:	2b01      	cmp	r3, #1
 8015952:	d015      	beq.n	8015980 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8015954:	68bb      	ldr	r3, [r7, #8]
 8015956:	695b      	ldr	r3, [r3, #20]
 8015958:	2b00      	cmp	r3, #0
 801595a:	f000 8117 	beq.w	8015b8c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801595e:	69fb      	ldr	r3, [r7, #28]
 8015960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015966:	68bb      	ldr	r3, [r7, #8]
 8015968:	781b      	ldrb	r3, [r3, #0]
 801596a:	f003 030f 	and.w	r3, r3, #15
 801596e:	2101      	movs	r1, #1
 8015970:	fa01 f303 	lsl.w	r3, r1, r3
 8015974:	69f9      	ldr	r1, [r7, #28]
 8015976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801597a:	4313      	orrs	r3, r2
 801597c:	634b      	str	r3, [r1, #52]	; 0x34
 801597e:	e105      	b.n	8015b8c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015980:	69fb      	ldr	r3, [r7, #28]
 8015982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015986:	689b      	ldr	r3, [r3, #8]
 8015988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801598c:	2b00      	cmp	r3, #0
 801598e:	d110      	bne.n	80159b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015990:	69bb      	ldr	r3, [r7, #24]
 8015992:	015a      	lsls	r2, r3, #5
 8015994:	69fb      	ldr	r3, [r7, #28]
 8015996:	4413      	add	r3, r2
 8015998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	69ba      	ldr	r2, [r7, #24]
 80159a0:	0151      	lsls	r1, r2, #5
 80159a2:	69fa      	ldr	r2, [r7, #28]
 80159a4:	440a      	add	r2, r1
 80159a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80159aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80159ae:	6013      	str	r3, [r2, #0]
 80159b0:	e00f      	b.n	80159d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80159b2:	69bb      	ldr	r3, [r7, #24]
 80159b4:	015a      	lsls	r2, r3, #5
 80159b6:	69fb      	ldr	r3, [r7, #28]
 80159b8:	4413      	add	r3, r2
 80159ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	69ba      	ldr	r2, [r7, #24]
 80159c2:	0151      	lsls	r1, r2, #5
 80159c4:	69fa      	ldr	r2, [r7, #28]
 80159c6:	440a      	add	r2, r1
 80159c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80159cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80159d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80159d2:	68bb      	ldr	r3, [r7, #8]
 80159d4:	68d9      	ldr	r1, [r3, #12]
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	781a      	ldrb	r2, [r3, #0]
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	695b      	ldr	r3, [r3, #20]
 80159de:	b298      	uxth	r0, r3
 80159e0:	79fb      	ldrb	r3, [r7, #7]
 80159e2:	9300      	str	r3, [sp, #0]
 80159e4:	4603      	mov	r3, r0
 80159e6:	68f8      	ldr	r0, [r7, #12]
 80159e8:	f000 fa2b 	bl	8015e42 <USB_WritePacket>
 80159ec:	e0ce      	b.n	8015b8c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80159ee:	69bb      	ldr	r3, [r7, #24]
 80159f0:	015a      	lsls	r2, r3, #5
 80159f2:	69fb      	ldr	r3, [r7, #28]
 80159f4:	4413      	add	r3, r2
 80159f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80159fa:	691b      	ldr	r3, [r3, #16]
 80159fc:	69ba      	ldr	r2, [r7, #24]
 80159fe:	0151      	lsls	r1, r2, #5
 8015a00:	69fa      	ldr	r2, [r7, #28]
 8015a02:	440a      	add	r2, r1
 8015a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015a08:	0cdb      	lsrs	r3, r3, #19
 8015a0a:	04db      	lsls	r3, r3, #19
 8015a0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8015a0e:	69bb      	ldr	r3, [r7, #24]
 8015a10:	015a      	lsls	r2, r3, #5
 8015a12:	69fb      	ldr	r3, [r7, #28]
 8015a14:	4413      	add	r3, r2
 8015a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a1a:	691b      	ldr	r3, [r3, #16]
 8015a1c:	69ba      	ldr	r2, [r7, #24]
 8015a1e:	0151      	lsls	r1, r2, #5
 8015a20:	69fa      	ldr	r2, [r7, #28]
 8015a22:	440a      	add	r2, r1
 8015a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015a28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015a2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015a30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8015a32:	68bb      	ldr	r3, [r7, #8]
 8015a34:	695b      	ldr	r3, [r3, #20]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d126      	bne.n	8015a88 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8015a3a:	69bb      	ldr	r3, [r7, #24]
 8015a3c:	015a      	lsls	r2, r3, #5
 8015a3e:	69fb      	ldr	r3, [r7, #28]
 8015a40:	4413      	add	r3, r2
 8015a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a46:	691a      	ldr	r2, [r3, #16]
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	689b      	ldr	r3, [r3, #8]
 8015a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015a50:	69b9      	ldr	r1, [r7, #24]
 8015a52:	0148      	lsls	r0, r1, #5
 8015a54:	69f9      	ldr	r1, [r7, #28]
 8015a56:	4401      	add	r1, r0
 8015a58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015a5c:	4313      	orrs	r3, r2
 8015a5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015a60:	69bb      	ldr	r3, [r7, #24]
 8015a62:	015a      	lsls	r2, r3, #5
 8015a64:	69fb      	ldr	r3, [r7, #28]
 8015a66:	4413      	add	r3, r2
 8015a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a6c:	691b      	ldr	r3, [r3, #16]
 8015a6e:	69ba      	ldr	r2, [r7, #24]
 8015a70:	0151      	lsls	r1, r2, #5
 8015a72:	69fa      	ldr	r2, [r7, #28]
 8015a74:	440a      	add	r2, r1
 8015a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015a7e:	6113      	str	r3, [r2, #16]
 8015a80:	e036      	b.n	8015af0 <USB_EPStartXfer+0x3dc>
 8015a82:	bf00      	nop
 8015a84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8015a88:	68bb      	ldr	r3, [r7, #8]
 8015a8a:	695a      	ldr	r2, [r3, #20]
 8015a8c:	68bb      	ldr	r3, [r7, #8]
 8015a8e:	689b      	ldr	r3, [r3, #8]
 8015a90:	4413      	add	r3, r2
 8015a92:	1e5a      	subs	r2, r3, #1
 8015a94:	68bb      	ldr	r3, [r7, #8]
 8015a96:	689b      	ldr	r3, [r3, #8]
 8015a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8015a9c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8015a9e:	69bb      	ldr	r3, [r7, #24]
 8015aa0:	015a      	lsls	r2, r3, #5
 8015aa2:	69fb      	ldr	r3, [r7, #28]
 8015aa4:	4413      	add	r3, r2
 8015aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015aaa:	691a      	ldr	r2, [r3, #16]
 8015aac:	8afb      	ldrh	r3, [r7, #22]
 8015aae:	04d9      	lsls	r1, r3, #19
 8015ab0:	4b39      	ldr	r3, [pc, #228]	; (8015b98 <USB_EPStartXfer+0x484>)
 8015ab2:	400b      	ands	r3, r1
 8015ab4:	69b9      	ldr	r1, [r7, #24]
 8015ab6:	0148      	lsls	r0, r1, #5
 8015ab8:	69f9      	ldr	r1, [r7, #28]
 8015aba:	4401      	add	r1, r0
 8015abc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015ac0:	4313      	orrs	r3, r2
 8015ac2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8015ac4:	69bb      	ldr	r3, [r7, #24]
 8015ac6:	015a      	lsls	r2, r3, #5
 8015ac8:	69fb      	ldr	r3, [r7, #28]
 8015aca:	4413      	add	r3, r2
 8015acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015ad0:	691a      	ldr	r2, [r3, #16]
 8015ad2:	68bb      	ldr	r3, [r7, #8]
 8015ad4:	689b      	ldr	r3, [r3, #8]
 8015ad6:	8af9      	ldrh	r1, [r7, #22]
 8015ad8:	fb01 f303 	mul.w	r3, r1, r3
 8015adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015ae0:	69b9      	ldr	r1, [r7, #24]
 8015ae2:	0148      	lsls	r0, r1, #5
 8015ae4:	69f9      	ldr	r1, [r7, #28]
 8015ae6:	4401      	add	r1, r0
 8015ae8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015aec:	4313      	orrs	r3, r2
 8015aee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8015af0:	79fb      	ldrb	r3, [r7, #7]
 8015af2:	2b01      	cmp	r3, #1
 8015af4:	d10d      	bne.n	8015b12 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8015af6:	68bb      	ldr	r3, [r7, #8]
 8015af8:	68db      	ldr	r3, [r3, #12]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d009      	beq.n	8015b12 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8015afe:	68bb      	ldr	r3, [r7, #8]
 8015b00:	68d9      	ldr	r1, [r3, #12]
 8015b02:	69bb      	ldr	r3, [r7, #24]
 8015b04:	015a      	lsls	r2, r3, #5
 8015b06:	69fb      	ldr	r3, [r7, #28]
 8015b08:	4413      	add	r3, r2
 8015b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015b0e:	460a      	mov	r2, r1
 8015b10:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8015b12:	68bb      	ldr	r3, [r7, #8]
 8015b14:	78db      	ldrb	r3, [r3, #3]
 8015b16:	2b01      	cmp	r3, #1
 8015b18:	d128      	bne.n	8015b6c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015b1a:	69fb      	ldr	r3, [r7, #28]
 8015b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015b20:	689b      	ldr	r3, [r3, #8]
 8015b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d110      	bne.n	8015b4c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8015b2a:	69bb      	ldr	r3, [r7, #24]
 8015b2c:	015a      	lsls	r2, r3, #5
 8015b2e:	69fb      	ldr	r3, [r7, #28]
 8015b30:	4413      	add	r3, r2
 8015b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	69ba      	ldr	r2, [r7, #24]
 8015b3a:	0151      	lsls	r1, r2, #5
 8015b3c:	69fa      	ldr	r2, [r7, #28]
 8015b3e:	440a      	add	r2, r1
 8015b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015b44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015b48:	6013      	str	r3, [r2, #0]
 8015b4a:	e00f      	b.n	8015b6c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8015b4c:	69bb      	ldr	r3, [r7, #24]
 8015b4e:	015a      	lsls	r2, r3, #5
 8015b50:	69fb      	ldr	r3, [r7, #28]
 8015b52:	4413      	add	r3, r2
 8015b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	69ba      	ldr	r2, [r7, #24]
 8015b5c:	0151      	lsls	r1, r2, #5
 8015b5e:	69fa      	ldr	r2, [r7, #28]
 8015b60:	440a      	add	r2, r1
 8015b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015b6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015b6c:	69bb      	ldr	r3, [r7, #24]
 8015b6e:	015a      	lsls	r2, r3, #5
 8015b70:	69fb      	ldr	r3, [r7, #28]
 8015b72:	4413      	add	r3, r2
 8015b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	69ba      	ldr	r2, [r7, #24]
 8015b7c:	0151      	lsls	r1, r2, #5
 8015b7e:	69fa      	ldr	r2, [r7, #28]
 8015b80:	440a      	add	r2, r1
 8015b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015b86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015b8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015b8c:	2300      	movs	r3, #0
}
 8015b8e:	4618      	mov	r0, r3
 8015b90:	3720      	adds	r7, #32
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}
 8015b96:	bf00      	nop
 8015b98:	1ff80000 	.word	0x1ff80000

08015b9c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8015b9c:	b480      	push	{r7}
 8015b9e:	b087      	sub	sp, #28
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	60f8      	str	r0, [r7, #12]
 8015ba4:	60b9      	str	r1, [r7, #8]
 8015ba6:	4613      	mov	r3, r2
 8015ba8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8015bae:	68bb      	ldr	r3, [r7, #8]
 8015bb0:	781b      	ldrb	r3, [r3, #0]
 8015bb2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015bb4:	68bb      	ldr	r3, [r7, #8]
 8015bb6:	785b      	ldrb	r3, [r3, #1]
 8015bb8:	2b01      	cmp	r3, #1
 8015bba:	f040 80cd 	bne.w	8015d58 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015bbe:	68bb      	ldr	r3, [r7, #8]
 8015bc0:	695b      	ldr	r3, [r3, #20]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d132      	bne.n	8015c2c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015bc6:	693b      	ldr	r3, [r7, #16]
 8015bc8:	015a      	lsls	r2, r3, #5
 8015bca:	697b      	ldr	r3, [r7, #20]
 8015bcc:	4413      	add	r3, r2
 8015bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015bd2:	691b      	ldr	r3, [r3, #16]
 8015bd4:	693a      	ldr	r2, [r7, #16]
 8015bd6:	0151      	lsls	r1, r2, #5
 8015bd8:	697a      	ldr	r2, [r7, #20]
 8015bda:	440a      	add	r2, r1
 8015bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015be0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015be4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015be8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015bea:	693b      	ldr	r3, [r7, #16]
 8015bec:	015a      	lsls	r2, r3, #5
 8015bee:	697b      	ldr	r3, [r7, #20]
 8015bf0:	4413      	add	r3, r2
 8015bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015bf6:	691b      	ldr	r3, [r3, #16]
 8015bf8:	693a      	ldr	r2, [r7, #16]
 8015bfa:	0151      	lsls	r1, r2, #5
 8015bfc:	697a      	ldr	r2, [r7, #20]
 8015bfe:	440a      	add	r2, r1
 8015c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015c08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	015a      	lsls	r2, r3, #5
 8015c0e:	697b      	ldr	r3, [r7, #20]
 8015c10:	4413      	add	r3, r2
 8015c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c16:	691b      	ldr	r3, [r3, #16]
 8015c18:	693a      	ldr	r2, [r7, #16]
 8015c1a:	0151      	lsls	r1, r2, #5
 8015c1c:	697a      	ldr	r2, [r7, #20]
 8015c1e:	440a      	add	r2, r1
 8015c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c24:	0cdb      	lsrs	r3, r3, #19
 8015c26:	04db      	lsls	r3, r3, #19
 8015c28:	6113      	str	r3, [r2, #16]
 8015c2a:	e04e      	b.n	8015cca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015c2c:	693b      	ldr	r3, [r7, #16]
 8015c2e:	015a      	lsls	r2, r3, #5
 8015c30:	697b      	ldr	r3, [r7, #20]
 8015c32:	4413      	add	r3, r2
 8015c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c38:	691b      	ldr	r3, [r3, #16]
 8015c3a:	693a      	ldr	r2, [r7, #16]
 8015c3c:	0151      	lsls	r1, r2, #5
 8015c3e:	697a      	ldr	r2, [r7, #20]
 8015c40:	440a      	add	r2, r1
 8015c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c46:	0cdb      	lsrs	r3, r3, #19
 8015c48:	04db      	lsls	r3, r3, #19
 8015c4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015c4c:	693b      	ldr	r3, [r7, #16]
 8015c4e:	015a      	lsls	r2, r3, #5
 8015c50:	697b      	ldr	r3, [r7, #20]
 8015c52:	4413      	add	r3, r2
 8015c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c58:	691b      	ldr	r3, [r3, #16]
 8015c5a:	693a      	ldr	r2, [r7, #16]
 8015c5c:	0151      	lsls	r1, r2, #5
 8015c5e:	697a      	ldr	r2, [r7, #20]
 8015c60:	440a      	add	r2, r1
 8015c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015c6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015c6e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8015c70:	68bb      	ldr	r3, [r7, #8]
 8015c72:	695a      	ldr	r2, [r3, #20]
 8015c74:	68bb      	ldr	r3, [r7, #8]
 8015c76:	689b      	ldr	r3, [r3, #8]
 8015c78:	429a      	cmp	r2, r3
 8015c7a:	d903      	bls.n	8015c84 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8015c7c:	68bb      	ldr	r3, [r7, #8]
 8015c7e:	689a      	ldr	r2, [r3, #8]
 8015c80:	68bb      	ldr	r3, [r7, #8]
 8015c82:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015c84:	693b      	ldr	r3, [r7, #16]
 8015c86:	015a      	lsls	r2, r3, #5
 8015c88:	697b      	ldr	r3, [r7, #20]
 8015c8a:	4413      	add	r3, r2
 8015c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c90:	691b      	ldr	r3, [r3, #16]
 8015c92:	693a      	ldr	r2, [r7, #16]
 8015c94:	0151      	lsls	r1, r2, #5
 8015c96:	697a      	ldr	r2, [r7, #20]
 8015c98:	440a      	add	r2, r1
 8015c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015ca2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015ca4:	693b      	ldr	r3, [r7, #16]
 8015ca6:	015a      	lsls	r2, r3, #5
 8015ca8:	697b      	ldr	r3, [r7, #20]
 8015caa:	4413      	add	r3, r2
 8015cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015cb0:	691a      	ldr	r2, [r3, #16]
 8015cb2:	68bb      	ldr	r3, [r7, #8]
 8015cb4:	695b      	ldr	r3, [r3, #20]
 8015cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015cba:	6939      	ldr	r1, [r7, #16]
 8015cbc:	0148      	lsls	r0, r1, #5
 8015cbe:	6979      	ldr	r1, [r7, #20]
 8015cc0:	4401      	add	r1, r0
 8015cc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015cc6:	4313      	orrs	r3, r2
 8015cc8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8015cca:	79fb      	ldrb	r3, [r7, #7]
 8015ccc:	2b01      	cmp	r3, #1
 8015cce:	d11e      	bne.n	8015d0e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8015cd0:	68bb      	ldr	r3, [r7, #8]
 8015cd2:	691b      	ldr	r3, [r3, #16]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d009      	beq.n	8015cec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8015cd8:	693b      	ldr	r3, [r7, #16]
 8015cda:	015a      	lsls	r2, r3, #5
 8015cdc:	697b      	ldr	r3, [r7, #20]
 8015cde:	4413      	add	r3, r2
 8015ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015ce4:	461a      	mov	r2, r3
 8015ce6:	68bb      	ldr	r3, [r7, #8]
 8015ce8:	691b      	ldr	r3, [r3, #16]
 8015cea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015cec:	693b      	ldr	r3, [r7, #16]
 8015cee:	015a      	lsls	r2, r3, #5
 8015cf0:	697b      	ldr	r3, [r7, #20]
 8015cf2:	4413      	add	r3, r2
 8015cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	693a      	ldr	r2, [r7, #16]
 8015cfc:	0151      	lsls	r1, r2, #5
 8015cfe:	697a      	ldr	r2, [r7, #20]
 8015d00:	440a      	add	r2, r1
 8015d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015d06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015d0a:	6013      	str	r3, [r2, #0]
 8015d0c:	e092      	b.n	8015e34 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015d0e:	693b      	ldr	r3, [r7, #16]
 8015d10:	015a      	lsls	r2, r3, #5
 8015d12:	697b      	ldr	r3, [r7, #20]
 8015d14:	4413      	add	r3, r2
 8015d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	693a      	ldr	r2, [r7, #16]
 8015d1e:	0151      	lsls	r1, r2, #5
 8015d20:	697a      	ldr	r2, [r7, #20]
 8015d22:	440a      	add	r2, r1
 8015d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015d28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015d2c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8015d2e:	68bb      	ldr	r3, [r7, #8]
 8015d30:	695b      	ldr	r3, [r3, #20]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d07e      	beq.n	8015e34 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015d36:	697b      	ldr	r3, [r7, #20]
 8015d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015d3e:	68bb      	ldr	r3, [r7, #8]
 8015d40:	781b      	ldrb	r3, [r3, #0]
 8015d42:	f003 030f 	and.w	r3, r3, #15
 8015d46:	2101      	movs	r1, #1
 8015d48:	fa01 f303 	lsl.w	r3, r1, r3
 8015d4c:	6979      	ldr	r1, [r7, #20]
 8015d4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015d52:	4313      	orrs	r3, r2
 8015d54:	634b      	str	r3, [r1, #52]	; 0x34
 8015d56:	e06d      	b.n	8015e34 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015d58:	693b      	ldr	r3, [r7, #16]
 8015d5a:	015a      	lsls	r2, r3, #5
 8015d5c:	697b      	ldr	r3, [r7, #20]
 8015d5e:	4413      	add	r3, r2
 8015d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015d64:	691b      	ldr	r3, [r3, #16]
 8015d66:	693a      	ldr	r2, [r7, #16]
 8015d68:	0151      	lsls	r1, r2, #5
 8015d6a:	697a      	ldr	r2, [r7, #20]
 8015d6c:	440a      	add	r2, r1
 8015d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015d72:	0cdb      	lsrs	r3, r3, #19
 8015d74:	04db      	lsls	r3, r3, #19
 8015d76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8015d78:	693b      	ldr	r3, [r7, #16]
 8015d7a:	015a      	lsls	r2, r3, #5
 8015d7c:	697b      	ldr	r3, [r7, #20]
 8015d7e:	4413      	add	r3, r2
 8015d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015d84:	691b      	ldr	r3, [r3, #16]
 8015d86:	693a      	ldr	r2, [r7, #16]
 8015d88:	0151      	lsls	r1, r2, #5
 8015d8a:	697a      	ldr	r2, [r7, #20]
 8015d8c:	440a      	add	r2, r1
 8015d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015d92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015d96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015d9a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8015d9c:	68bb      	ldr	r3, [r7, #8]
 8015d9e:	695b      	ldr	r3, [r3, #20]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d003      	beq.n	8015dac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8015da4:	68bb      	ldr	r3, [r7, #8]
 8015da6:	689a      	ldr	r2, [r3, #8]
 8015da8:	68bb      	ldr	r3, [r7, #8]
 8015daa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015dac:	693b      	ldr	r3, [r7, #16]
 8015dae:	015a      	lsls	r2, r3, #5
 8015db0:	697b      	ldr	r3, [r7, #20]
 8015db2:	4413      	add	r3, r2
 8015db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015db8:	691b      	ldr	r3, [r3, #16]
 8015dba:	693a      	ldr	r2, [r7, #16]
 8015dbc:	0151      	lsls	r1, r2, #5
 8015dbe:	697a      	ldr	r2, [r7, #20]
 8015dc0:	440a      	add	r2, r1
 8015dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015dc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015dca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8015dcc:	693b      	ldr	r3, [r7, #16]
 8015dce:	015a      	lsls	r2, r3, #5
 8015dd0:	697b      	ldr	r3, [r7, #20]
 8015dd2:	4413      	add	r3, r2
 8015dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015dd8:	691a      	ldr	r2, [r3, #16]
 8015dda:	68bb      	ldr	r3, [r7, #8]
 8015ddc:	689b      	ldr	r3, [r3, #8]
 8015dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015de2:	6939      	ldr	r1, [r7, #16]
 8015de4:	0148      	lsls	r0, r1, #5
 8015de6:	6979      	ldr	r1, [r7, #20]
 8015de8:	4401      	add	r1, r0
 8015dea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015dee:	4313      	orrs	r3, r2
 8015df0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8015df2:	79fb      	ldrb	r3, [r7, #7]
 8015df4:	2b01      	cmp	r3, #1
 8015df6:	d10d      	bne.n	8015e14 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8015df8:	68bb      	ldr	r3, [r7, #8]
 8015dfa:	68db      	ldr	r3, [r3, #12]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d009      	beq.n	8015e14 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8015e00:	68bb      	ldr	r3, [r7, #8]
 8015e02:	68d9      	ldr	r1, [r3, #12]
 8015e04:	693b      	ldr	r3, [r7, #16]
 8015e06:	015a      	lsls	r2, r3, #5
 8015e08:	697b      	ldr	r3, [r7, #20]
 8015e0a:	4413      	add	r3, r2
 8015e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e10:	460a      	mov	r2, r1
 8015e12:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015e14:	693b      	ldr	r3, [r7, #16]
 8015e16:	015a      	lsls	r2, r3, #5
 8015e18:	697b      	ldr	r3, [r7, #20]
 8015e1a:	4413      	add	r3, r2
 8015e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	693a      	ldr	r2, [r7, #16]
 8015e24:	0151      	lsls	r1, r2, #5
 8015e26:	697a      	ldr	r2, [r7, #20]
 8015e28:	440a      	add	r2, r1
 8015e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015e2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015e32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015e34:	2300      	movs	r3, #0
}
 8015e36:	4618      	mov	r0, r3
 8015e38:	371c      	adds	r7, #28
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e40:	4770      	bx	lr

08015e42 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015e42:	b480      	push	{r7}
 8015e44:	b089      	sub	sp, #36	; 0x24
 8015e46:	af00      	add	r7, sp, #0
 8015e48:	60f8      	str	r0, [r7, #12]
 8015e4a:	60b9      	str	r1, [r7, #8]
 8015e4c:	4611      	mov	r1, r2
 8015e4e:	461a      	mov	r2, r3
 8015e50:	460b      	mov	r3, r1
 8015e52:	71fb      	strb	r3, [r7, #7]
 8015e54:	4613      	mov	r3, r2
 8015e56:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8015e5c:	68bb      	ldr	r3, [r7, #8]
 8015e5e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8015e60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d123      	bne.n	8015eb0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8015e68:	88bb      	ldrh	r3, [r7, #4]
 8015e6a:	3303      	adds	r3, #3
 8015e6c:	089b      	lsrs	r3, r3, #2
 8015e6e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8015e70:	2300      	movs	r3, #0
 8015e72:	61bb      	str	r3, [r7, #24]
 8015e74:	e018      	b.n	8015ea8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015e76:	79fb      	ldrb	r3, [r7, #7]
 8015e78:	031a      	lsls	r2, r3, #12
 8015e7a:	697b      	ldr	r3, [r7, #20]
 8015e7c:	4413      	add	r3, r2
 8015e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e82:	461a      	mov	r2, r3
 8015e84:	69fb      	ldr	r3, [r7, #28]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015e8a:	69fb      	ldr	r3, [r7, #28]
 8015e8c:	3301      	adds	r3, #1
 8015e8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015e90:	69fb      	ldr	r3, [r7, #28]
 8015e92:	3301      	adds	r3, #1
 8015e94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015e96:	69fb      	ldr	r3, [r7, #28]
 8015e98:	3301      	adds	r3, #1
 8015e9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015e9c:	69fb      	ldr	r3, [r7, #28]
 8015e9e:	3301      	adds	r3, #1
 8015ea0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015ea2:	69bb      	ldr	r3, [r7, #24]
 8015ea4:	3301      	adds	r3, #1
 8015ea6:	61bb      	str	r3, [r7, #24]
 8015ea8:	69ba      	ldr	r2, [r7, #24]
 8015eaa:	693b      	ldr	r3, [r7, #16]
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d3e2      	bcc.n	8015e76 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015eb0:	2300      	movs	r3, #0
}
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	3724      	adds	r7, #36	; 0x24
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ebc:	4770      	bx	lr

08015ebe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015ebe:	b480      	push	{r7}
 8015ec0:	b08b      	sub	sp, #44	; 0x2c
 8015ec2:	af00      	add	r7, sp, #0
 8015ec4:	60f8      	str	r0, [r7, #12]
 8015ec6:	60b9      	str	r1, [r7, #8]
 8015ec8:	4613      	mov	r3, r2
 8015eca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015ed0:	68bb      	ldr	r3, [r7, #8]
 8015ed2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8015ed4:	88fb      	ldrh	r3, [r7, #6]
 8015ed6:	089b      	lsrs	r3, r3, #2
 8015ed8:	b29b      	uxth	r3, r3
 8015eda:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015edc:	88fb      	ldrh	r3, [r7, #6]
 8015ede:	f003 0303 	and.w	r3, r3, #3
 8015ee2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	623b      	str	r3, [r7, #32]
 8015ee8:	e014      	b.n	8015f14 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015eea:	69bb      	ldr	r3, [r7, #24]
 8015eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ef0:	681a      	ldr	r2, [r3, #0]
 8015ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef4:	601a      	str	r2, [r3, #0]
    pDest++;
 8015ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef8:	3301      	adds	r3, #1
 8015efa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015efe:	3301      	adds	r3, #1
 8015f00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f04:	3301      	adds	r3, #1
 8015f06:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f0a:	3301      	adds	r3, #1
 8015f0c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8015f0e:	6a3b      	ldr	r3, [r7, #32]
 8015f10:	3301      	adds	r3, #1
 8015f12:	623b      	str	r3, [r7, #32]
 8015f14:	6a3a      	ldr	r2, [r7, #32]
 8015f16:	697b      	ldr	r3, [r7, #20]
 8015f18:	429a      	cmp	r2, r3
 8015f1a:	d3e6      	bcc.n	8015eea <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015f1c:	8bfb      	ldrh	r3, [r7, #30]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d01e      	beq.n	8015f60 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015f22:	2300      	movs	r3, #0
 8015f24:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8015f26:	69bb      	ldr	r3, [r7, #24]
 8015f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f2c:	461a      	mov	r2, r3
 8015f2e:	f107 0310 	add.w	r3, r7, #16
 8015f32:	6812      	ldr	r2, [r2, #0]
 8015f34:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8015f36:	693a      	ldr	r2, [r7, #16]
 8015f38:	6a3b      	ldr	r3, [r7, #32]
 8015f3a:	b2db      	uxtb	r3, r3
 8015f3c:	00db      	lsls	r3, r3, #3
 8015f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8015f42:	b2da      	uxtb	r2, r3
 8015f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f46:	701a      	strb	r2, [r3, #0]
      i++;
 8015f48:	6a3b      	ldr	r3, [r7, #32]
 8015f4a:	3301      	adds	r3, #1
 8015f4c:	623b      	str	r3, [r7, #32]
      pDest++;
 8015f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f50:	3301      	adds	r3, #1
 8015f52:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8015f54:	8bfb      	ldrh	r3, [r7, #30]
 8015f56:	3b01      	subs	r3, #1
 8015f58:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015f5a:	8bfb      	ldrh	r3, [r7, #30]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d1ea      	bne.n	8015f36 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015f62:	4618      	mov	r0, r3
 8015f64:	372c      	adds	r7, #44	; 0x2c
 8015f66:	46bd      	mov	sp, r7
 8015f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6c:	4770      	bx	lr

08015f6e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015f6e:	b480      	push	{r7}
 8015f70:	b085      	sub	sp, #20
 8015f72:	af00      	add	r7, sp, #0
 8015f74:	6078      	str	r0, [r7, #4]
 8015f76:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015f7c:	683b      	ldr	r3, [r7, #0]
 8015f7e:	781b      	ldrb	r3, [r3, #0]
 8015f80:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	785b      	ldrb	r3, [r3, #1]
 8015f86:	2b01      	cmp	r3, #1
 8015f88:	d12c      	bne.n	8015fe4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015f8a:	68bb      	ldr	r3, [r7, #8]
 8015f8c:	015a      	lsls	r2, r3, #5
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	4413      	add	r3, r2
 8015f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	db12      	blt.n	8015fc2 <USB_EPSetStall+0x54>
 8015f9c:	68bb      	ldr	r3, [r7, #8]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d00f      	beq.n	8015fc2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015fa2:	68bb      	ldr	r3, [r7, #8]
 8015fa4:	015a      	lsls	r2, r3, #5
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	4413      	add	r3, r2
 8015faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	68ba      	ldr	r2, [r7, #8]
 8015fb2:	0151      	lsls	r1, r2, #5
 8015fb4:	68fa      	ldr	r2, [r7, #12]
 8015fb6:	440a      	add	r2, r1
 8015fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015fbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015fc0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015fc2:	68bb      	ldr	r3, [r7, #8]
 8015fc4:	015a      	lsls	r2, r3, #5
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	4413      	add	r3, r2
 8015fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	68ba      	ldr	r2, [r7, #8]
 8015fd2:	0151      	lsls	r1, r2, #5
 8015fd4:	68fa      	ldr	r2, [r7, #12]
 8015fd6:	440a      	add	r2, r1
 8015fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015fdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015fe0:	6013      	str	r3, [r2, #0]
 8015fe2:	e02b      	b.n	801603c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015fe4:	68bb      	ldr	r3, [r7, #8]
 8015fe6:	015a      	lsls	r2, r3, #5
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	4413      	add	r3, r2
 8015fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	db12      	blt.n	801601c <USB_EPSetStall+0xae>
 8015ff6:	68bb      	ldr	r3, [r7, #8]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d00f      	beq.n	801601c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015ffc:	68bb      	ldr	r3, [r7, #8]
 8015ffe:	015a      	lsls	r2, r3, #5
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	4413      	add	r3, r2
 8016004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	68ba      	ldr	r2, [r7, #8]
 801600c:	0151      	lsls	r1, r2, #5
 801600e:	68fa      	ldr	r2, [r7, #12]
 8016010:	440a      	add	r2, r1
 8016012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016016:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801601a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	015a      	lsls	r2, r3, #5
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	4413      	add	r3, r2
 8016024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	68ba      	ldr	r2, [r7, #8]
 801602c:	0151      	lsls	r1, r2, #5
 801602e:	68fa      	ldr	r2, [r7, #12]
 8016030:	440a      	add	r2, r1
 8016032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016036:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801603a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801603c:	2300      	movs	r3, #0
}
 801603e:	4618      	mov	r0, r3
 8016040:	3714      	adds	r7, #20
 8016042:	46bd      	mov	sp, r7
 8016044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016048:	4770      	bx	lr

0801604a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801604a:	b480      	push	{r7}
 801604c:	b085      	sub	sp, #20
 801604e:	af00      	add	r7, sp, #0
 8016050:	6078      	str	r0, [r7, #4]
 8016052:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016058:	683b      	ldr	r3, [r7, #0]
 801605a:	781b      	ldrb	r3, [r3, #0]
 801605c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801605e:	683b      	ldr	r3, [r7, #0]
 8016060:	785b      	ldrb	r3, [r3, #1]
 8016062:	2b01      	cmp	r3, #1
 8016064:	d128      	bne.n	80160b8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8016066:	68bb      	ldr	r3, [r7, #8]
 8016068:	015a      	lsls	r2, r3, #5
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	4413      	add	r3, r2
 801606e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	68ba      	ldr	r2, [r7, #8]
 8016076:	0151      	lsls	r1, r2, #5
 8016078:	68fa      	ldr	r2, [r7, #12]
 801607a:	440a      	add	r2, r1
 801607c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016080:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8016084:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016086:	683b      	ldr	r3, [r7, #0]
 8016088:	78db      	ldrb	r3, [r3, #3]
 801608a:	2b03      	cmp	r3, #3
 801608c:	d003      	beq.n	8016096 <USB_EPClearStall+0x4c>
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	78db      	ldrb	r3, [r3, #3]
 8016092:	2b02      	cmp	r3, #2
 8016094:	d138      	bne.n	8016108 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016096:	68bb      	ldr	r3, [r7, #8]
 8016098:	015a      	lsls	r2, r3, #5
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	4413      	add	r3, r2
 801609e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	68ba      	ldr	r2, [r7, #8]
 80160a6:	0151      	lsls	r1, r2, #5
 80160a8:	68fa      	ldr	r2, [r7, #12]
 80160aa:	440a      	add	r2, r1
 80160ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80160b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80160b4:	6013      	str	r3, [r2, #0]
 80160b6:	e027      	b.n	8016108 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	015a      	lsls	r2, r3, #5
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	4413      	add	r3, r2
 80160c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	68ba      	ldr	r2, [r7, #8]
 80160c8:	0151      	lsls	r1, r2, #5
 80160ca:	68fa      	ldr	r2, [r7, #12]
 80160cc:	440a      	add	r2, r1
 80160ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80160d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80160d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	78db      	ldrb	r3, [r3, #3]
 80160dc:	2b03      	cmp	r3, #3
 80160de:	d003      	beq.n	80160e8 <USB_EPClearStall+0x9e>
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	78db      	ldrb	r3, [r3, #3]
 80160e4:	2b02      	cmp	r3, #2
 80160e6:	d10f      	bne.n	8016108 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80160e8:	68bb      	ldr	r3, [r7, #8]
 80160ea:	015a      	lsls	r2, r3, #5
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	4413      	add	r3, r2
 80160f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	68ba      	ldr	r2, [r7, #8]
 80160f8:	0151      	lsls	r1, r2, #5
 80160fa:	68fa      	ldr	r2, [r7, #12]
 80160fc:	440a      	add	r2, r1
 80160fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016106:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8016108:	2300      	movs	r3, #0
}
 801610a:	4618      	mov	r0, r3
 801610c:	3714      	adds	r7, #20
 801610e:	46bd      	mov	sp, r7
 8016110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016114:	4770      	bx	lr

08016116 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8016116:	b480      	push	{r7}
 8016118:	b085      	sub	sp, #20
 801611a:	af00      	add	r7, sp, #0
 801611c:	6078      	str	r0, [r7, #4]
 801611e:	460b      	mov	r3, r1
 8016120:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	68fa      	ldr	r2, [r7, #12]
 8016130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016134:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8016138:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016140:	681a      	ldr	r2, [r3, #0]
 8016142:	78fb      	ldrb	r3, [r7, #3]
 8016144:	011b      	lsls	r3, r3, #4
 8016146:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801614a:	68f9      	ldr	r1, [r7, #12]
 801614c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016150:	4313      	orrs	r3, r2
 8016152:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8016154:	2300      	movs	r3, #0
}
 8016156:	4618      	mov	r0, r3
 8016158:	3714      	adds	r7, #20
 801615a:	46bd      	mov	sp, r7
 801615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016160:	4770      	bx	lr

08016162 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016162:	b480      	push	{r7}
 8016164:	b085      	sub	sp, #20
 8016166:	af00      	add	r7, sp, #0
 8016168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	68fa      	ldr	r2, [r7, #12]
 8016178:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801617c:	f023 0303 	bic.w	r3, r3, #3
 8016180:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016188:	685b      	ldr	r3, [r3, #4]
 801618a:	68fa      	ldr	r2, [r7, #12]
 801618c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016190:	f023 0302 	bic.w	r3, r3, #2
 8016194:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016196:	2300      	movs	r3, #0
}
 8016198:	4618      	mov	r0, r3
 801619a:	3714      	adds	r7, #20
 801619c:	46bd      	mov	sp, r7
 801619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a2:	4770      	bx	lr

080161a4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80161a4:	b480      	push	{r7}
 80161a6:	b085      	sub	sp, #20
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	68fa      	ldr	r2, [r7, #12]
 80161ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80161be:	f023 0303 	bic.w	r3, r3, #3
 80161c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80161ca:	685b      	ldr	r3, [r3, #4]
 80161cc:	68fa      	ldr	r2, [r7, #12]
 80161ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80161d2:	f043 0302 	orr.w	r3, r3, #2
 80161d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80161d8:	2300      	movs	r3, #0
}
 80161da:	4618      	mov	r0, r3
 80161dc:	3714      	adds	r7, #20
 80161de:	46bd      	mov	sp, r7
 80161e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e4:	4770      	bx	lr

080161e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80161e6:	b480      	push	{r7}
 80161e8:	b085      	sub	sp, #20
 80161ea:	af00      	add	r7, sp, #0
 80161ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	695b      	ldr	r3, [r3, #20]
 80161f2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	699b      	ldr	r3, [r3, #24]
 80161f8:	68fa      	ldr	r2, [r7, #12]
 80161fa:	4013      	ands	r3, r2
 80161fc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80161fe:	68fb      	ldr	r3, [r7, #12]
}
 8016200:	4618      	mov	r0, r3
 8016202:	3714      	adds	r7, #20
 8016204:	46bd      	mov	sp, r7
 8016206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620a:	4770      	bx	lr

0801620c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801620c:	b480      	push	{r7}
 801620e:	b085      	sub	sp, #20
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801621e:	699b      	ldr	r3, [r3, #24]
 8016220:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016228:	69db      	ldr	r3, [r3, #28]
 801622a:	68ba      	ldr	r2, [r7, #8]
 801622c:	4013      	ands	r3, r2
 801622e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8016230:	68bb      	ldr	r3, [r7, #8]
 8016232:	0c1b      	lsrs	r3, r3, #16
}
 8016234:	4618      	mov	r0, r3
 8016236:	3714      	adds	r7, #20
 8016238:	46bd      	mov	sp, r7
 801623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801623e:	4770      	bx	lr

08016240 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8016240:	b480      	push	{r7}
 8016242:	b085      	sub	sp, #20
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016252:	699b      	ldr	r3, [r3, #24]
 8016254:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801625c:	69db      	ldr	r3, [r3, #28]
 801625e:	68ba      	ldr	r2, [r7, #8]
 8016260:	4013      	ands	r3, r2
 8016262:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8016264:	68bb      	ldr	r3, [r7, #8]
 8016266:	b29b      	uxth	r3, r3
}
 8016268:	4618      	mov	r0, r3
 801626a:	3714      	adds	r7, #20
 801626c:	46bd      	mov	sp, r7
 801626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016272:	4770      	bx	lr

08016274 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016274:	b480      	push	{r7}
 8016276:	b085      	sub	sp, #20
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
 801627c:	460b      	mov	r3, r1
 801627e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8016284:	78fb      	ldrb	r3, [r7, #3]
 8016286:	015a      	lsls	r2, r3, #5
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	4413      	add	r3, r2
 801628c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016290:	689b      	ldr	r3, [r3, #8]
 8016292:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801629a:	695b      	ldr	r3, [r3, #20]
 801629c:	68ba      	ldr	r2, [r7, #8]
 801629e:	4013      	ands	r3, r2
 80162a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80162a2:	68bb      	ldr	r3, [r7, #8]
}
 80162a4:	4618      	mov	r0, r3
 80162a6:	3714      	adds	r7, #20
 80162a8:	46bd      	mov	sp, r7
 80162aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ae:	4770      	bx	lr

080162b0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80162b0:	b480      	push	{r7}
 80162b2:	b087      	sub	sp, #28
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
 80162b8:	460b      	mov	r3, r1
 80162ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80162c0:	697b      	ldr	r3, [r7, #20]
 80162c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80162c6:	691b      	ldr	r3, [r3, #16]
 80162c8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80162ca:	697b      	ldr	r3, [r7, #20]
 80162cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80162d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162d2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80162d4:	78fb      	ldrb	r3, [r7, #3]
 80162d6:	f003 030f 	and.w	r3, r3, #15
 80162da:	68fa      	ldr	r2, [r7, #12]
 80162dc:	fa22 f303 	lsr.w	r3, r2, r3
 80162e0:	01db      	lsls	r3, r3, #7
 80162e2:	b2db      	uxtb	r3, r3
 80162e4:	693a      	ldr	r2, [r7, #16]
 80162e6:	4313      	orrs	r3, r2
 80162e8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80162ea:	78fb      	ldrb	r3, [r7, #3]
 80162ec:	015a      	lsls	r2, r3, #5
 80162ee:	697b      	ldr	r3, [r7, #20]
 80162f0:	4413      	add	r3, r2
 80162f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80162f6:	689b      	ldr	r3, [r3, #8]
 80162f8:	693a      	ldr	r2, [r7, #16]
 80162fa:	4013      	ands	r3, r2
 80162fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80162fe:	68bb      	ldr	r3, [r7, #8]
}
 8016300:	4618      	mov	r0, r3
 8016302:	371c      	adds	r7, #28
 8016304:	46bd      	mov	sp, r7
 8016306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630a:	4770      	bx	lr

0801630c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801630c:	b480      	push	{r7}
 801630e:	b083      	sub	sp, #12
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	695b      	ldr	r3, [r3, #20]
 8016318:	f003 0301 	and.w	r3, r3, #1
}
 801631c:	4618      	mov	r0, r3
 801631e:	370c      	adds	r7, #12
 8016320:	46bd      	mov	sp, r7
 8016322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016326:	4770      	bx	lr

08016328 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8016328:	b480      	push	{r7}
 801632a:	b085      	sub	sp, #20
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	68fa      	ldr	r2, [r7, #12]
 801633e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016342:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8016346:	f023 0307 	bic.w	r3, r3, #7
 801634a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016352:	685b      	ldr	r3, [r3, #4]
 8016354:	68fa      	ldr	r2, [r7, #12]
 8016356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801635a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801635e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016360:	2300      	movs	r3, #0
}
 8016362:	4618      	mov	r0, r3
 8016364:	3714      	adds	r7, #20
 8016366:	46bd      	mov	sp, r7
 8016368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636c:	4770      	bx	lr
	...

08016370 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8016370:	b480      	push	{r7}
 8016372:	b087      	sub	sp, #28
 8016374:	af00      	add	r7, sp, #0
 8016376:	60f8      	str	r0, [r7, #12]
 8016378:	460b      	mov	r3, r1
 801637a:	607a      	str	r2, [r7, #4]
 801637c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	333c      	adds	r3, #60	; 0x3c
 8016386:	3304      	adds	r3, #4
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801638c:	693b      	ldr	r3, [r7, #16]
 801638e:	4a26      	ldr	r2, [pc, #152]	; (8016428 <USB_EP0_OutStart+0xb8>)
 8016390:	4293      	cmp	r3, r2
 8016392:	d90a      	bls.n	80163aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016394:	697b      	ldr	r3, [r7, #20]
 8016396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80163a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80163a4:	d101      	bne.n	80163aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80163a6:	2300      	movs	r3, #0
 80163a8:	e037      	b.n	801641a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80163aa:	697b      	ldr	r3, [r7, #20]
 80163ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80163b0:	461a      	mov	r2, r3
 80163b2:	2300      	movs	r3, #0
 80163b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80163b6:	697b      	ldr	r3, [r7, #20]
 80163b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80163bc:	691b      	ldr	r3, [r3, #16]
 80163be:	697a      	ldr	r2, [r7, #20]
 80163c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80163c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80163c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80163ca:	697b      	ldr	r3, [r7, #20]
 80163cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80163d0:	691b      	ldr	r3, [r3, #16]
 80163d2:	697a      	ldr	r2, [r7, #20]
 80163d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80163d8:	f043 0318 	orr.w	r3, r3, #24
 80163dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80163de:	697b      	ldr	r3, [r7, #20]
 80163e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80163e4:	691b      	ldr	r3, [r3, #16]
 80163e6:	697a      	ldr	r2, [r7, #20]
 80163e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80163ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80163f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80163f2:	7afb      	ldrb	r3, [r7, #11]
 80163f4:	2b01      	cmp	r3, #1
 80163f6:	d10f      	bne.n	8016418 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80163f8:	697b      	ldr	r3, [r7, #20]
 80163fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80163fe:	461a      	mov	r2, r3
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8016404:	697b      	ldr	r3, [r7, #20]
 8016406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	697a      	ldr	r2, [r7, #20]
 801640e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016412:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8016416:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016418:	2300      	movs	r3, #0
}
 801641a:	4618      	mov	r0, r3
 801641c:	371c      	adds	r7, #28
 801641e:	46bd      	mov	sp, r7
 8016420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016424:	4770      	bx	lr
 8016426:	bf00      	nop
 8016428:	4f54300a 	.word	0x4f54300a

0801642c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801642c:	b480      	push	{r7}
 801642e:	b085      	sub	sp, #20
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016434:	2300      	movs	r3, #0
 8016436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	3301      	adds	r3, #1
 801643c:	60fb      	str	r3, [r7, #12]
 801643e:	4a13      	ldr	r2, [pc, #76]	; (801648c <USB_CoreReset+0x60>)
 8016440:	4293      	cmp	r3, r2
 8016442:	d901      	bls.n	8016448 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8016444:	2303      	movs	r3, #3
 8016446:	e01a      	b.n	801647e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	691b      	ldr	r3, [r3, #16]
 801644c:	2b00      	cmp	r3, #0
 801644e:	daf3      	bge.n	8016438 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8016450:	2300      	movs	r3, #0
 8016452:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	691b      	ldr	r3, [r3, #16]
 8016458:	f043 0201 	orr.w	r2, r3, #1
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	3301      	adds	r3, #1
 8016464:	60fb      	str	r3, [r7, #12]
 8016466:	4a09      	ldr	r2, [pc, #36]	; (801648c <USB_CoreReset+0x60>)
 8016468:	4293      	cmp	r3, r2
 801646a:	d901      	bls.n	8016470 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801646c:	2303      	movs	r3, #3
 801646e:	e006      	b.n	801647e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	691b      	ldr	r3, [r3, #16]
 8016474:	f003 0301 	and.w	r3, r3, #1
 8016478:	2b01      	cmp	r3, #1
 801647a:	d0f1      	beq.n	8016460 <USB_CoreReset+0x34>

  return HAL_OK;
 801647c:	2300      	movs	r3, #0
}
 801647e:	4618      	mov	r0, r3
 8016480:	3714      	adds	r7, #20
 8016482:	46bd      	mov	sp, r7
 8016484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016488:	4770      	bx	lr
 801648a:	bf00      	nop
 801648c:	00030d40 	.word	0x00030d40

08016490 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016490:	b580      	push	{r7, lr}
 8016492:	b084      	sub	sp, #16
 8016494:	af00      	add	r7, sp, #0
 8016496:	6078      	str	r0, [r7, #4]
 8016498:	460b      	mov	r3, r1
 801649a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801649c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80164a0:	f006 f8ee 	bl	801c680 <USBD_static_malloc>
 80164a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d105      	bne.n	80164b8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	2200      	movs	r2, #0
 80164b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80164b4:	2302      	movs	r3, #2
 80164b6:	e066      	b.n	8016586 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	68fa      	ldr	r2, [r7, #12]
 80164bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	7c1b      	ldrb	r3, [r3, #16]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d119      	bne.n	80164fc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80164c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80164cc:	2202      	movs	r2, #2
 80164ce:	2181      	movs	r1, #129	; 0x81
 80164d0:	6878      	ldr	r0, [r7, #4]
 80164d2:	f005 ffb2 	bl	801c43a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	2201      	movs	r2, #1
 80164da:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80164dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80164e0:	2202      	movs	r2, #2
 80164e2:	2101      	movs	r1, #1
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f005 ffa8 	bl	801c43a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	2201      	movs	r2, #1
 80164ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	2210      	movs	r2, #16
 80164f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80164fa:	e016      	b.n	801652a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80164fc:	2340      	movs	r3, #64	; 0x40
 80164fe:	2202      	movs	r2, #2
 8016500:	2181      	movs	r1, #129	; 0x81
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f005 ff99 	bl	801c43a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	2201      	movs	r2, #1
 801650c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801650e:	2340      	movs	r3, #64	; 0x40
 8016510:	2202      	movs	r2, #2
 8016512:	2101      	movs	r1, #1
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	f005 ff90 	bl	801c43a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	2201      	movs	r2, #1
 801651e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	2210      	movs	r2, #16
 8016526:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801652a:	2308      	movs	r3, #8
 801652c:	2203      	movs	r2, #3
 801652e:	2182      	movs	r1, #130	; 0x82
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	f005 ff82 	bl	801c43a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	2201      	movs	r2, #1
 801653a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	2200      	movs	r2, #0
 801654c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	2200      	movs	r2, #0
 8016554:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	7c1b      	ldrb	r3, [r3, #16]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d109      	bne.n	8016574 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016566:	f44f 7300 	mov.w	r3, #512	; 0x200
 801656a:	2101      	movs	r1, #1
 801656c:	6878      	ldr	r0, [r7, #4]
 801656e:	f006 f853 	bl	801c618 <USBD_LL_PrepareReceive>
 8016572:	e007      	b.n	8016584 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801657a:	2340      	movs	r3, #64	; 0x40
 801657c:	2101      	movs	r1, #1
 801657e:	6878      	ldr	r0, [r7, #4]
 8016580:	f006 f84a 	bl	801c618 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016584:	2300      	movs	r3, #0
}
 8016586:	4618      	mov	r0, r3
 8016588:	3710      	adds	r7, #16
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}

0801658e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801658e:	b580      	push	{r7, lr}
 8016590:	b082      	sub	sp, #8
 8016592:	af00      	add	r7, sp, #0
 8016594:	6078      	str	r0, [r7, #4]
 8016596:	460b      	mov	r3, r1
 8016598:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801659a:	2181      	movs	r1, #129	; 0x81
 801659c:	6878      	ldr	r0, [r7, #4]
 801659e:	f005 ff72 	bl	801c486 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	2200      	movs	r2, #0
 80165a6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80165a8:	2101      	movs	r1, #1
 80165aa:	6878      	ldr	r0, [r7, #4]
 80165ac:	f005 ff6b 	bl	801c486 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	2200      	movs	r2, #0
 80165b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80165b8:	2182      	movs	r1, #130	; 0x82
 80165ba:	6878      	ldr	r0, [r7, #4]
 80165bc:	f005 ff63 	bl	801c486 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	2200      	movs	r2, #0
 80165c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2200      	movs	r2, #0
 80165cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d00e      	beq.n	80165f8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80165e0:	685b      	ldr	r3, [r3, #4]
 80165e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80165ea:	4618      	mov	r0, r3
 80165ec:	f006 f856 	bl	801c69c <USBD_static_free>
    pdev->pClassData = NULL;
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	2200      	movs	r2, #0
 80165f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80165f8:	2300      	movs	r3, #0
}
 80165fa:	4618      	mov	r0, r3
 80165fc:	3708      	adds	r7, #8
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}
	...

08016604 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b086      	sub	sp, #24
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
 801660c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016614:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8016616:	2300      	movs	r3, #0
 8016618:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801661a:	2300      	movs	r3, #0
 801661c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801661e:	2300      	movs	r3, #0
 8016620:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8016622:	693b      	ldr	r3, [r7, #16]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d101      	bne.n	801662c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8016628:	2303      	movs	r3, #3
 801662a:	e0af      	b.n	801678c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801662c:	683b      	ldr	r3, [r7, #0]
 801662e:	781b      	ldrb	r3, [r3, #0]
 8016630:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016634:	2b00      	cmp	r3, #0
 8016636:	d03f      	beq.n	80166b8 <USBD_CDC_Setup+0xb4>
 8016638:	2b20      	cmp	r3, #32
 801663a:	f040 809f 	bne.w	801677c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801663e:	683b      	ldr	r3, [r7, #0]
 8016640:	88db      	ldrh	r3, [r3, #6]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d02e      	beq.n	80166a4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8016646:	683b      	ldr	r3, [r7, #0]
 8016648:	781b      	ldrb	r3, [r3, #0]
 801664a:	b25b      	sxtb	r3, r3
 801664c:	2b00      	cmp	r3, #0
 801664e:	da16      	bge.n	801667e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016656:	689b      	ldr	r3, [r3, #8]
 8016658:	683a      	ldr	r2, [r7, #0]
 801665a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 801665c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801665e:	683a      	ldr	r2, [r7, #0]
 8016660:	88d2      	ldrh	r2, [r2, #6]
 8016662:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8016664:	683b      	ldr	r3, [r7, #0]
 8016666:	88db      	ldrh	r3, [r3, #6]
 8016668:	2b07      	cmp	r3, #7
 801666a:	bf28      	it	cs
 801666c:	2307      	movcs	r3, #7
 801666e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	89fa      	ldrh	r2, [r7, #14]
 8016674:	4619      	mov	r1, r3
 8016676:	6878      	ldr	r0, [r7, #4]
 8016678:	f001 fb19 	bl	8017cae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 801667c:	e085      	b.n	801678a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801667e:	683b      	ldr	r3, [r7, #0]
 8016680:	785a      	ldrb	r2, [r3, #1]
 8016682:	693b      	ldr	r3, [r7, #16]
 8016684:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8016688:	683b      	ldr	r3, [r7, #0]
 801668a:	88db      	ldrh	r3, [r3, #6]
 801668c:	b2da      	uxtb	r2, r3
 801668e:	693b      	ldr	r3, [r7, #16]
 8016690:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8016694:	6939      	ldr	r1, [r7, #16]
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	88db      	ldrh	r3, [r3, #6]
 801669a:	461a      	mov	r2, r3
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f001 fb32 	bl	8017d06 <USBD_CtlPrepareRx>
      break;
 80166a2:	e072      	b.n	801678a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80166aa:	689b      	ldr	r3, [r3, #8]
 80166ac:	683a      	ldr	r2, [r7, #0]
 80166ae:	7850      	ldrb	r0, [r2, #1]
 80166b0:	2200      	movs	r2, #0
 80166b2:	6839      	ldr	r1, [r7, #0]
 80166b4:	4798      	blx	r3
      break;
 80166b6:	e068      	b.n	801678a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80166b8:	683b      	ldr	r3, [r7, #0]
 80166ba:	785b      	ldrb	r3, [r3, #1]
 80166bc:	2b0b      	cmp	r3, #11
 80166be:	d852      	bhi.n	8016766 <USBD_CDC_Setup+0x162>
 80166c0:	a201      	add	r2, pc, #4	; (adr r2, 80166c8 <USBD_CDC_Setup+0xc4>)
 80166c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166c6:	bf00      	nop
 80166c8:	080166f9 	.word	0x080166f9
 80166cc:	08016775 	.word	0x08016775
 80166d0:	08016767 	.word	0x08016767
 80166d4:	08016767 	.word	0x08016767
 80166d8:	08016767 	.word	0x08016767
 80166dc:	08016767 	.word	0x08016767
 80166e0:	08016767 	.word	0x08016767
 80166e4:	08016767 	.word	0x08016767
 80166e8:	08016767 	.word	0x08016767
 80166ec:	08016767 	.word	0x08016767
 80166f0:	08016723 	.word	0x08016723
 80166f4:	0801674d 	.word	0x0801674d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166fe:	b2db      	uxtb	r3, r3
 8016700:	2b03      	cmp	r3, #3
 8016702:	d107      	bne.n	8016714 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016704:	f107 030a 	add.w	r3, r7, #10
 8016708:	2202      	movs	r2, #2
 801670a:	4619      	mov	r1, r3
 801670c:	6878      	ldr	r0, [r7, #4]
 801670e:	f001 face 	bl	8017cae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016712:	e032      	b.n	801677a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016714:	6839      	ldr	r1, [r7, #0]
 8016716:	6878      	ldr	r0, [r7, #4]
 8016718:	f001 fa58 	bl	8017bcc <USBD_CtlError>
            ret = USBD_FAIL;
 801671c:	2303      	movs	r3, #3
 801671e:	75fb      	strb	r3, [r7, #23]
          break;
 8016720:	e02b      	b.n	801677a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016728:	b2db      	uxtb	r3, r3
 801672a:	2b03      	cmp	r3, #3
 801672c:	d107      	bne.n	801673e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801672e:	f107 030d 	add.w	r3, r7, #13
 8016732:	2201      	movs	r2, #1
 8016734:	4619      	mov	r1, r3
 8016736:	6878      	ldr	r0, [r7, #4]
 8016738:	f001 fab9 	bl	8017cae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801673c:	e01d      	b.n	801677a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801673e:	6839      	ldr	r1, [r7, #0]
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	f001 fa43 	bl	8017bcc <USBD_CtlError>
            ret = USBD_FAIL;
 8016746:	2303      	movs	r3, #3
 8016748:	75fb      	strb	r3, [r7, #23]
          break;
 801674a:	e016      	b.n	801677a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016752:	b2db      	uxtb	r3, r3
 8016754:	2b03      	cmp	r3, #3
 8016756:	d00f      	beq.n	8016778 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8016758:	6839      	ldr	r1, [r7, #0]
 801675a:	6878      	ldr	r0, [r7, #4]
 801675c:	f001 fa36 	bl	8017bcc <USBD_CtlError>
            ret = USBD_FAIL;
 8016760:	2303      	movs	r3, #3
 8016762:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016764:	e008      	b.n	8016778 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8016766:	6839      	ldr	r1, [r7, #0]
 8016768:	6878      	ldr	r0, [r7, #4]
 801676a:	f001 fa2f 	bl	8017bcc <USBD_CtlError>
          ret = USBD_FAIL;
 801676e:	2303      	movs	r3, #3
 8016770:	75fb      	strb	r3, [r7, #23]
          break;
 8016772:	e002      	b.n	801677a <USBD_CDC_Setup+0x176>
          break;
 8016774:	bf00      	nop
 8016776:	e008      	b.n	801678a <USBD_CDC_Setup+0x186>
          break;
 8016778:	bf00      	nop
      }
      break;
 801677a:	e006      	b.n	801678a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 801677c:	6839      	ldr	r1, [r7, #0]
 801677e:	6878      	ldr	r0, [r7, #4]
 8016780:	f001 fa24 	bl	8017bcc <USBD_CtlError>
      ret = USBD_FAIL;
 8016784:	2303      	movs	r3, #3
 8016786:	75fb      	strb	r3, [r7, #23]
      break;
 8016788:	bf00      	nop
  }

  return (uint8_t)ret;
 801678a:	7dfb      	ldrb	r3, [r7, #23]
}
 801678c:	4618      	mov	r0, r3
 801678e:	3718      	adds	r7, #24
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}

08016794 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b084      	sub	sp, #16
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
 801679c:	460b      	mov	r3, r1
 801679e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80167a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d101      	bne.n	80167b6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80167b2:	2303      	movs	r3, #3
 80167b4:	e04f      	b.n	8016856 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80167bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80167be:	78fa      	ldrb	r2, [r7, #3]
 80167c0:	6879      	ldr	r1, [r7, #4]
 80167c2:	4613      	mov	r3, r2
 80167c4:	009b      	lsls	r3, r3, #2
 80167c6:	4413      	add	r3, r2
 80167c8:	009b      	lsls	r3, r3, #2
 80167ca:	440b      	add	r3, r1
 80167cc:	3318      	adds	r3, #24
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d029      	beq.n	8016828 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80167d4:	78fa      	ldrb	r2, [r7, #3]
 80167d6:	6879      	ldr	r1, [r7, #4]
 80167d8:	4613      	mov	r3, r2
 80167da:	009b      	lsls	r3, r3, #2
 80167dc:	4413      	add	r3, r2
 80167de:	009b      	lsls	r3, r3, #2
 80167e0:	440b      	add	r3, r1
 80167e2:	3318      	adds	r3, #24
 80167e4:	681a      	ldr	r2, [r3, #0]
 80167e6:	78f9      	ldrb	r1, [r7, #3]
 80167e8:	68f8      	ldr	r0, [r7, #12]
 80167ea:	460b      	mov	r3, r1
 80167ec:	00db      	lsls	r3, r3, #3
 80167ee:	1a5b      	subs	r3, r3, r1
 80167f0:	009b      	lsls	r3, r3, #2
 80167f2:	4403      	add	r3, r0
 80167f4:	3344      	adds	r3, #68	; 0x44
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80167fc:	fb03 f301 	mul.w	r3, r3, r1
 8016800:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8016802:	2b00      	cmp	r3, #0
 8016804:	d110      	bne.n	8016828 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8016806:	78fa      	ldrb	r2, [r7, #3]
 8016808:	6879      	ldr	r1, [r7, #4]
 801680a:	4613      	mov	r3, r2
 801680c:	009b      	lsls	r3, r3, #2
 801680e:	4413      	add	r3, r2
 8016810:	009b      	lsls	r3, r3, #2
 8016812:	440b      	add	r3, r1
 8016814:	3318      	adds	r3, #24
 8016816:	2200      	movs	r2, #0
 8016818:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801681a:	78f9      	ldrb	r1, [r7, #3]
 801681c:	2300      	movs	r3, #0
 801681e:	2200      	movs	r2, #0
 8016820:	6878      	ldr	r0, [r7, #4]
 8016822:	f005 fed8 	bl	801c5d6 <USBD_LL_Transmit>
 8016826:	e015      	b.n	8016854 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8016828:	68bb      	ldr	r3, [r7, #8]
 801682a:	2200      	movs	r2, #0
 801682c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016836:	691b      	ldr	r3, [r3, #16]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d00b      	beq.n	8016854 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016842:	691b      	ldr	r3, [r3, #16]
 8016844:	68ba      	ldr	r2, [r7, #8]
 8016846:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801684a:	68ba      	ldr	r2, [r7, #8]
 801684c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8016850:	78fa      	ldrb	r2, [r7, #3]
 8016852:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016854:	2300      	movs	r3, #0
}
 8016856:	4618      	mov	r0, r3
 8016858:	3710      	adds	r7, #16
 801685a:	46bd      	mov	sp, r7
 801685c:	bd80      	pop	{r7, pc}

0801685e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801685e:	b580      	push	{r7, lr}
 8016860:	b084      	sub	sp, #16
 8016862:	af00      	add	r7, sp, #0
 8016864:	6078      	str	r0, [r7, #4]
 8016866:	460b      	mov	r3, r1
 8016868:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016870:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016878:	2b00      	cmp	r3, #0
 801687a:	d101      	bne.n	8016880 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801687c:	2303      	movs	r3, #3
 801687e:	e015      	b.n	80168ac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016880:	78fb      	ldrb	r3, [r7, #3]
 8016882:	4619      	mov	r1, r3
 8016884:	6878      	ldr	r0, [r7, #4]
 8016886:	f005 fee8 	bl	801c65a <USBD_LL_GetRxDataSize>
 801688a:	4602      	mov	r2, r0
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016898:	68db      	ldr	r3, [r3, #12]
 801689a:	68fa      	ldr	r2, [r7, #12]
 801689c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80168a0:	68fa      	ldr	r2, [r7, #12]
 80168a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80168a6:	4611      	mov	r1, r2
 80168a8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80168aa:	2300      	movs	r3, #0
}
 80168ac:	4618      	mov	r0, r3
 80168ae:	3710      	adds	r7, #16
 80168b0:	46bd      	mov	sp, r7
 80168b2:	bd80      	pop	{r7, pc}

080168b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b084      	sub	sp, #16
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80168c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d101      	bne.n	80168ce <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80168ca:	2303      	movs	r3, #3
 80168cc:	e01b      	b.n	8016906 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d015      	beq.n	8016904 <USBD_CDC_EP0_RxReady+0x50>
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80168de:	2bff      	cmp	r3, #255	; 0xff
 80168e0:	d010      	beq.n	8016904 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80168e8:	689b      	ldr	r3, [r3, #8]
 80168ea:	68fa      	ldr	r2, [r7, #12]
 80168ec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80168f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80168f2:	68fa      	ldr	r2, [r7, #12]
 80168f4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80168f8:	b292      	uxth	r2, r2
 80168fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	22ff      	movs	r2, #255	; 0xff
 8016900:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8016904:	2300      	movs	r3, #0
}
 8016906:	4618      	mov	r0, r3
 8016908:	3710      	adds	r7, #16
 801690a:	46bd      	mov	sp, r7
 801690c:	bd80      	pop	{r7, pc}
	...

08016910 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016910:	b480      	push	{r7}
 8016912:	b083      	sub	sp, #12
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2243      	movs	r2, #67	; 0x43
 801691c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801691e:	4b03      	ldr	r3, [pc, #12]	; (801692c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8016920:	4618      	mov	r0, r3
 8016922:	370c      	adds	r7, #12
 8016924:	46bd      	mov	sp, r7
 8016926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692a:	4770      	bx	lr
 801692c:	200000d8 	.word	0x200000d8

08016930 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016930:	b480      	push	{r7}
 8016932:	b083      	sub	sp, #12
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2243      	movs	r2, #67	; 0x43
 801693c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801693e:	4b03      	ldr	r3, [pc, #12]	; (801694c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8016940:	4618      	mov	r0, r3
 8016942:	370c      	adds	r7, #12
 8016944:	46bd      	mov	sp, r7
 8016946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694a:	4770      	bx	lr
 801694c:	20000094 	.word	0x20000094

08016950 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016950:	b480      	push	{r7}
 8016952:	b083      	sub	sp, #12
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	2243      	movs	r2, #67	; 0x43
 801695c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801695e:	4b03      	ldr	r3, [pc, #12]	; (801696c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8016960:	4618      	mov	r0, r3
 8016962:	370c      	adds	r7, #12
 8016964:	46bd      	mov	sp, r7
 8016966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696a:	4770      	bx	lr
 801696c:	2000011c 	.word	0x2000011c

08016970 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016970:	b480      	push	{r7}
 8016972:	b083      	sub	sp, #12
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	220a      	movs	r2, #10
 801697c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801697e:	4b03      	ldr	r3, [pc, #12]	; (801698c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016980:	4618      	mov	r0, r3
 8016982:	370c      	adds	r7, #12
 8016984:	46bd      	mov	sp, r7
 8016986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698a:	4770      	bx	lr
 801698c:	20000050 	.word	0x20000050

08016990 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016990:	b480      	push	{r7}
 8016992:	b083      	sub	sp, #12
 8016994:	af00      	add	r7, sp, #0
 8016996:	6078      	str	r0, [r7, #4]
 8016998:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801699a:	683b      	ldr	r3, [r7, #0]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d101      	bne.n	80169a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80169a0:	2303      	movs	r3, #3
 80169a2:	e004      	b.n	80169ae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	683a      	ldr	r2, [r7, #0]
 80169a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80169ac:	2300      	movs	r3, #0
}
 80169ae:	4618      	mov	r0, r3
 80169b0:	370c      	adds	r7, #12
 80169b2:	46bd      	mov	sp, r7
 80169b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b8:	4770      	bx	lr

080169ba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80169ba:	b480      	push	{r7}
 80169bc:	b087      	sub	sp, #28
 80169be:	af00      	add	r7, sp, #0
 80169c0:	60f8      	str	r0, [r7, #12]
 80169c2:	60b9      	str	r1, [r7, #8]
 80169c4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80169cc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80169ce:	697b      	ldr	r3, [r7, #20]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d101      	bne.n	80169d8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80169d4:	2303      	movs	r3, #3
 80169d6:	e008      	b.n	80169ea <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80169d8:	697b      	ldr	r3, [r7, #20]
 80169da:	68ba      	ldr	r2, [r7, #8]
 80169dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80169e0:	697b      	ldr	r3, [r7, #20]
 80169e2:	687a      	ldr	r2, [r7, #4]
 80169e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80169e8:	2300      	movs	r3, #0
}
 80169ea:	4618      	mov	r0, r3
 80169ec:	371c      	adds	r7, #28
 80169ee:	46bd      	mov	sp, r7
 80169f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f4:	4770      	bx	lr

080169f6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80169f6:	b480      	push	{r7}
 80169f8:	b085      	sub	sp, #20
 80169fa:	af00      	add	r7, sp, #0
 80169fc:	6078      	str	r0, [r7, #4]
 80169fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016a06:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d101      	bne.n	8016a12 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8016a0e:	2303      	movs	r3, #3
 8016a10:	e004      	b.n	8016a1c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	683a      	ldr	r2, [r7, #0]
 8016a16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8016a1a:	2300      	movs	r3, #0
}
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	3714      	adds	r7, #20
 8016a20:	46bd      	mov	sp, r7
 8016a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a26:	4770      	bx	lr

08016a28 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b084      	sub	sp, #16
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016a36:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8016a38:	2301      	movs	r3, #1
 8016a3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d101      	bne.n	8016a4a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016a46:	2303      	movs	r3, #3
 8016a48:	e01a      	b.n	8016a80 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8016a4a:	68bb      	ldr	r3, [r7, #8]
 8016a4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d114      	bne.n	8016a7e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016a54:	68bb      	ldr	r3, [r7, #8]
 8016a56:	2201      	movs	r2, #1
 8016a58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8016a5c:	68bb      	ldr	r3, [r7, #8]
 8016a5e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8016a66:	68bb      	ldr	r3, [r7, #8]
 8016a68:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016a6c:	68bb      	ldr	r3, [r7, #8]
 8016a6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8016a72:	2181      	movs	r1, #129	; 0x81
 8016a74:	6878      	ldr	r0, [r7, #4]
 8016a76:	f005 fdae 	bl	801c5d6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8016a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a80:	4618      	mov	r0, r3
 8016a82:	3710      	adds	r7, #16
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd80      	pop	{r7, pc}

08016a88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b084      	sub	sp, #16
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016a96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d101      	bne.n	8016aa6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016aa2:	2303      	movs	r3, #3
 8016aa4:	e016      	b.n	8016ad4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	7c1b      	ldrb	r3, [r3, #16]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d109      	bne.n	8016ac2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016ab8:	2101      	movs	r1, #1
 8016aba:	6878      	ldr	r0, [r7, #4]
 8016abc:	f005 fdac 	bl	801c618 <USBD_LL_PrepareReceive>
 8016ac0:	e007      	b.n	8016ad2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016ac8:	2340      	movs	r3, #64	; 0x40
 8016aca:	2101      	movs	r1, #1
 8016acc:	6878      	ldr	r0, [r7, #4]
 8016ace:	f005 fda3 	bl	801c618 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016ad2:	2300      	movs	r3, #0
}
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	3710      	adds	r7, #16
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	bd80      	pop	{r7, pc}

08016adc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b086      	sub	sp, #24
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	60f8      	str	r0, [r7, #12]
 8016ae4:	60b9      	str	r1, [r7, #8]
 8016ae6:	4613      	mov	r3, r2
 8016ae8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d101      	bne.n	8016af4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8016af0:	2303      	movs	r3, #3
 8016af2:	e01f      	b.n	8016b34 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	2200      	movs	r2, #0
 8016af8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	2200      	movs	r2, #0
 8016b00:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	2200      	movs	r2, #0
 8016b08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d003      	beq.n	8016b1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	68ba      	ldr	r2, [r7, #8]
 8016b16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	2201      	movs	r2, #1
 8016b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	79fa      	ldrb	r2, [r7, #7]
 8016b26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016b28:	68f8      	ldr	r0, [r7, #12]
 8016b2a:	f005 fc1f 	bl	801c36c <USBD_LL_Init>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b34:	4618      	mov	r0, r3
 8016b36:	3718      	adds	r7, #24
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}

08016b3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b084      	sub	sp, #16
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
 8016b44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016b46:	2300      	movs	r3, #0
 8016b48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016b4a:	683b      	ldr	r3, [r7, #0]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d101      	bne.n	8016b54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8016b50:	2303      	movs	r3, #3
 8016b52:	e016      	b.n	8016b82 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	683a      	ldr	r2, [r7, #0]
 8016b58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d00b      	beq.n	8016b80 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b70:	f107 020e 	add.w	r2, r7, #14
 8016b74:	4610      	mov	r0, r2
 8016b76:	4798      	blx	r3
 8016b78:	4602      	mov	r2, r0
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8016b80:	2300      	movs	r3, #0
}
 8016b82:	4618      	mov	r0, r3
 8016b84:	3710      	adds	r7, #16
 8016b86:	46bd      	mov	sp, r7
 8016b88:	bd80      	pop	{r7, pc}

08016b8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016b8a:	b580      	push	{r7, lr}
 8016b8c:	b082      	sub	sp, #8
 8016b8e:	af00      	add	r7, sp, #0
 8016b90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016b92:	6878      	ldr	r0, [r7, #4]
 8016b94:	f005 fc36 	bl	801c404 <USBD_LL_Start>
 8016b98:	4603      	mov	r3, r0
}
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	3708      	adds	r7, #8
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}

08016ba2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016ba2:	b480      	push	{r7}
 8016ba4:	b083      	sub	sp, #12
 8016ba6:	af00      	add	r7, sp, #0
 8016ba8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016baa:	2300      	movs	r3, #0
}
 8016bac:	4618      	mov	r0, r3
 8016bae:	370c      	adds	r7, #12
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb6:	4770      	bx	lr

08016bb8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b084      	sub	sp, #16
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
 8016bc0:	460b      	mov	r3, r1
 8016bc2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8016bc4:	2303      	movs	r3, #3
 8016bc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d009      	beq.n	8016be6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	78fa      	ldrb	r2, [r7, #3]
 8016bdc:	4611      	mov	r1, r2
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	4798      	blx	r3
 8016be2:	4603      	mov	r3, r0
 8016be4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8016be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016be8:	4618      	mov	r0, r3
 8016bea:	3710      	adds	r7, #16
 8016bec:	46bd      	mov	sp, r7
 8016bee:	bd80      	pop	{r7, pc}

08016bf0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b082      	sub	sp, #8
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
 8016bf8:	460b      	mov	r3, r1
 8016bfa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d007      	beq.n	8016c16 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016c0c:	685b      	ldr	r3, [r3, #4]
 8016c0e:	78fa      	ldrb	r2, [r7, #3]
 8016c10:	4611      	mov	r1, r2
 8016c12:	6878      	ldr	r0, [r7, #4]
 8016c14:	4798      	blx	r3
  }

  return USBD_OK;
 8016c16:	2300      	movs	r3, #0
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	3708      	adds	r7, #8
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}

08016c20 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b084      	sub	sp, #16
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
 8016c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016c30:	6839      	ldr	r1, [r7, #0]
 8016c32:	4618      	mov	r0, r3
 8016c34:	f000 ff90 	bl	8017b58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	2201      	movs	r2, #1
 8016c3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8016c46:	461a      	mov	r2, r3
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016c54:	f003 031f 	and.w	r3, r3, #31
 8016c58:	2b02      	cmp	r3, #2
 8016c5a:	d01a      	beq.n	8016c92 <USBD_LL_SetupStage+0x72>
 8016c5c:	2b02      	cmp	r3, #2
 8016c5e:	d822      	bhi.n	8016ca6 <USBD_LL_SetupStage+0x86>
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d002      	beq.n	8016c6a <USBD_LL_SetupStage+0x4a>
 8016c64:	2b01      	cmp	r3, #1
 8016c66:	d00a      	beq.n	8016c7e <USBD_LL_SetupStage+0x5e>
 8016c68:	e01d      	b.n	8016ca6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016c70:	4619      	mov	r1, r3
 8016c72:	6878      	ldr	r0, [r7, #4]
 8016c74:	f000 fa62 	bl	801713c <USBD_StdDevReq>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8016c7c:	e020      	b.n	8016cc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016c84:	4619      	mov	r1, r3
 8016c86:	6878      	ldr	r0, [r7, #4]
 8016c88:	f000 fac6 	bl	8017218 <USBD_StdItfReq>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8016c90:	e016      	b.n	8016cc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016c98:	4619      	mov	r1, r3
 8016c9a:	6878      	ldr	r0, [r7, #4]
 8016c9c:	f000 fb05 	bl	80172aa <USBD_StdEPReq>
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8016ca4:	e00c      	b.n	8016cc0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016cac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016cb0:	b2db      	uxtb	r3, r3
 8016cb2:	4619      	mov	r1, r3
 8016cb4:	6878      	ldr	r0, [r7, #4]
 8016cb6:	f005 fc05 	bl	801c4c4 <USBD_LL_StallEP>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8016cbe:	bf00      	nop
  }

  return ret;
 8016cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	3710      	adds	r7, #16
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	bd80      	pop	{r7, pc}

08016cca <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016cca:	b580      	push	{r7, lr}
 8016ccc:	b086      	sub	sp, #24
 8016cce:	af00      	add	r7, sp, #0
 8016cd0:	60f8      	str	r0, [r7, #12]
 8016cd2:	460b      	mov	r3, r1
 8016cd4:	607a      	str	r2, [r7, #4]
 8016cd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8016cd8:	7afb      	ldrb	r3, [r7, #11]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d138      	bne.n	8016d50 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016ce4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016cec:	2b03      	cmp	r3, #3
 8016cee:	d14a      	bne.n	8016d86 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8016cf0:	693b      	ldr	r3, [r7, #16]
 8016cf2:	689a      	ldr	r2, [r3, #8]
 8016cf4:	693b      	ldr	r3, [r7, #16]
 8016cf6:	68db      	ldr	r3, [r3, #12]
 8016cf8:	429a      	cmp	r2, r3
 8016cfa:	d913      	bls.n	8016d24 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016cfc:	693b      	ldr	r3, [r7, #16]
 8016cfe:	689a      	ldr	r2, [r3, #8]
 8016d00:	693b      	ldr	r3, [r7, #16]
 8016d02:	68db      	ldr	r3, [r3, #12]
 8016d04:	1ad2      	subs	r2, r2, r3
 8016d06:	693b      	ldr	r3, [r7, #16]
 8016d08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016d0a:	693b      	ldr	r3, [r7, #16]
 8016d0c:	68da      	ldr	r2, [r3, #12]
 8016d0e:	693b      	ldr	r3, [r7, #16]
 8016d10:	689b      	ldr	r3, [r3, #8]
 8016d12:	4293      	cmp	r3, r2
 8016d14:	bf28      	it	cs
 8016d16:	4613      	movcs	r3, r2
 8016d18:	461a      	mov	r2, r3
 8016d1a:	6879      	ldr	r1, [r7, #4]
 8016d1c:	68f8      	ldr	r0, [r7, #12]
 8016d1e:	f001 f80f 	bl	8017d40 <USBD_CtlContinueRx>
 8016d22:	e030      	b.n	8016d86 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d2a:	b2db      	uxtb	r3, r3
 8016d2c:	2b03      	cmp	r3, #3
 8016d2e:	d10b      	bne.n	8016d48 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d36:	691b      	ldr	r3, [r3, #16]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d005      	beq.n	8016d48 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d42:	691b      	ldr	r3, [r3, #16]
 8016d44:	68f8      	ldr	r0, [r7, #12]
 8016d46:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016d48:	68f8      	ldr	r0, [r7, #12]
 8016d4a:	f001 f80a 	bl	8017d62 <USBD_CtlSendStatus>
 8016d4e:	e01a      	b.n	8016d86 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d56:	b2db      	uxtb	r3, r3
 8016d58:	2b03      	cmp	r3, #3
 8016d5a:	d114      	bne.n	8016d86 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d62:	699b      	ldr	r3, [r3, #24]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d00e      	beq.n	8016d86 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d6e:	699b      	ldr	r3, [r3, #24]
 8016d70:	7afa      	ldrb	r2, [r7, #11]
 8016d72:	4611      	mov	r1, r2
 8016d74:	68f8      	ldr	r0, [r7, #12]
 8016d76:	4798      	blx	r3
 8016d78:	4603      	mov	r3, r0
 8016d7a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8016d7c:	7dfb      	ldrb	r3, [r7, #23]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d001      	beq.n	8016d86 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8016d82:	7dfb      	ldrb	r3, [r7, #23]
 8016d84:	e000      	b.n	8016d88 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8016d86:	2300      	movs	r3, #0
}
 8016d88:	4618      	mov	r0, r3
 8016d8a:	3718      	adds	r7, #24
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd80      	pop	{r7, pc}

08016d90 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b086      	sub	sp, #24
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	60f8      	str	r0, [r7, #12]
 8016d98:	460b      	mov	r3, r1
 8016d9a:	607a      	str	r2, [r7, #4]
 8016d9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8016d9e:	7afb      	ldrb	r3, [r7, #11]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d16b      	bne.n	8016e7c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	3314      	adds	r3, #20
 8016da8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016db0:	2b02      	cmp	r3, #2
 8016db2:	d156      	bne.n	8016e62 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8016db4:	693b      	ldr	r3, [r7, #16]
 8016db6:	689a      	ldr	r2, [r3, #8]
 8016db8:	693b      	ldr	r3, [r7, #16]
 8016dba:	68db      	ldr	r3, [r3, #12]
 8016dbc:	429a      	cmp	r2, r3
 8016dbe:	d914      	bls.n	8016dea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016dc0:	693b      	ldr	r3, [r7, #16]
 8016dc2:	689a      	ldr	r2, [r3, #8]
 8016dc4:	693b      	ldr	r3, [r7, #16]
 8016dc6:	68db      	ldr	r3, [r3, #12]
 8016dc8:	1ad2      	subs	r2, r2, r3
 8016dca:	693b      	ldr	r3, [r7, #16]
 8016dcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016dce:	693b      	ldr	r3, [r7, #16]
 8016dd0:	689b      	ldr	r3, [r3, #8]
 8016dd2:	461a      	mov	r2, r3
 8016dd4:	6879      	ldr	r1, [r7, #4]
 8016dd6:	68f8      	ldr	r0, [r7, #12]
 8016dd8:	f000 ff84 	bl	8017ce4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016ddc:	2300      	movs	r3, #0
 8016dde:	2200      	movs	r2, #0
 8016de0:	2100      	movs	r1, #0
 8016de2:	68f8      	ldr	r0, [r7, #12]
 8016de4:	f005 fc18 	bl	801c618 <USBD_LL_PrepareReceive>
 8016de8:	e03b      	b.n	8016e62 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016dea:	693b      	ldr	r3, [r7, #16]
 8016dec:	68da      	ldr	r2, [r3, #12]
 8016dee:	693b      	ldr	r3, [r7, #16]
 8016df0:	689b      	ldr	r3, [r3, #8]
 8016df2:	429a      	cmp	r2, r3
 8016df4:	d11c      	bne.n	8016e30 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016df6:	693b      	ldr	r3, [r7, #16]
 8016df8:	685a      	ldr	r2, [r3, #4]
 8016dfa:	693b      	ldr	r3, [r7, #16]
 8016dfc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016dfe:	429a      	cmp	r2, r3
 8016e00:	d316      	bcc.n	8016e30 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016e02:	693b      	ldr	r3, [r7, #16]
 8016e04:	685a      	ldr	r2, [r3, #4]
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016e0c:	429a      	cmp	r2, r3
 8016e0e:	d20f      	bcs.n	8016e30 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016e10:	2200      	movs	r2, #0
 8016e12:	2100      	movs	r1, #0
 8016e14:	68f8      	ldr	r0, [r7, #12]
 8016e16:	f000 ff65 	bl	8017ce4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	2200      	movs	r2, #0
 8016e1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016e22:	2300      	movs	r3, #0
 8016e24:	2200      	movs	r2, #0
 8016e26:	2100      	movs	r1, #0
 8016e28:	68f8      	ldr	r0, [r7, #12]
 8016e2a:	f005 fbf5 	bl	801c618 <USBD_LL_PrepareReceive>
 8016e2e:	e018      	b.n	8016e62 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e36:	b2db      	uxtb	r3, r3
 8016e38:	2b03      	cmp	r3, #3
 8016e3a:	d10b      	bne.n	8016e54 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e42:	68db      	ldr	r3, [r3, #12]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d005      	beq.n	8016e54 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e4e:	68db      	ldr	r3, [r3, #12]
 8016e50:	68f8      	ldr	r0, [r7, #12]
 8016e52:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016e54:	2180      	movs	r1, #128	; 0x80
 8016e56:	68f8      	ldr	r0, [r7, #12]
 8016e58:	f005 fb34 	bl	801c4c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016e5c:	68f8      	ldr	r0, [r7, #12]
 8016e5e:	f000 ff93 	bl	8017d88 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016e68:	2b01      	cmp	r3, #1
 8016e6a:	d122      	bne.n	8016eb2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8016e6c:	68f8      	ldr	r0, [r7, #12]
 8016e6e:	f7ff fe98 	bl	8016ba2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	2200      	movs	r2, #0
 8016e76:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016e7a:	e01a      	b.n	8016eb2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e82:	b2db      	uxtb	r3, r3
 8016e84:	2b03      	cmp	r3, #3
 8016e86:	d114      	bne.n	8016eb2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e8e:	695b      	ldr	r3, [r3, #20]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d00e      	beq.n	8016eb2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e9a:	695b      	ldr	r3, [r3, #20]
 8016e9c:	7afa      	ldrb	r2, [r7, #11]
 8016e9e:	4611      	mov	r1, r2
 8016ea0:	68f8      	ldr	r0, [r7, #12]
 8016ea2:	4798      	blx	r3
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8016ea8:	7dfb      	ldrb	r3, [r7, #23]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d001      	beq.n	8016eb2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8016eae:	7dfb      	ldrb	r3, [r7, #23]
 8016eb0:	e000      	b.n	8016eb4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8016eb2:	2300      	movs	r3, #0
}
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	3718      	adds	r7, #24
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	bd80      	pop	{r7, pc}

08016ebc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b082      	sub	sp, #8
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	2201      	movs	r2, #1
 8016ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	2200      	movs	r2, #0
 8016ed0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	2200      	movs	r2, #0
 8016ede:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d101      	bne.n	8016ef0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8016eec:	2303      	movs	r3, #3
 8016eee:	e02f      	b.n	8016f50 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d00f      	beq.n	8016f1a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f00:	685b      	ldr	r3, [r3, #4]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d009      	beq.n	8016f1a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f0c:	685b      	ldr	r3, [r3, #4]
 8016f0e:	687a      	ldr	r2, [r7, #4]
 8016f10:	6852      	ldr	r2, [r2, #4]
 8016f12:	b2d2      	uxtb	r2, r2
 8016f14:	4611      	mov	r1, r2
 8016f16:	6878      	ldr	r0, [r7, #4]
 8016f18:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016f1a:	2340      	movs	r3, #64	; 0x40
 8016f1c:	2200      	movs	r2, #0
 8016f1e:	2100      	movs	r1, #0
 8016f20:	6878      	ldr	r0, [r7, #4]
 8016f22:	f005 fa8a 	bl	801c43a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	2201      	movs	r2, #1
 8016f2a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	2240      	movs	r2, #64	; 0x40
 8016f32:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016f36:	2340      	movs	r3, #64	; 0x40
 8016f38:	2200      	movs	r2, #0
 8016f3a:	2180      	movs	r1, #128	; 0x80
 8016f3c:	6878      	ldr	r0, [r7, #4]
 8016f3e:	f005 fa7c 	bl	801c43a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	2201      	movs	r2, #1
 8016f46:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	2240      	movs	r2, #64	; 0x40
 8016f4c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8016f4e:	2300      	movs	r3, #0
}
 8016f50:	4618      	mov	r0, r3
 8016f52:	3708      	adds	r7, #8
 8016f54:	46bd      	mov	sp, r7
 8016f56:	bd80      	pop	{r7, pc}

08016f58 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016f58:	b480      	push	{r7}
 8016f5a:	b083      	sub	sp, #12
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	6078      	str	r0, [r7, #4]
 8016f60:	460b      	mov	r3, r1
 8016f62:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	78fa      	ldrb	r2, [r7, #3]
 8016f68:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016f6a:	2300      	movs	r3, #0
}
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	370c      	adds	r7, #12
 8016f70:	46bd      	mov	sp, r7
 8016f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f76:	4770      	bx	lr

08016f78 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016f78:	b480      	push	{r7}
 8016f7a:	b083      	sub	sp, #12
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f86:	b2da      	uxtb	r2, r3
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	2204      	movs	r2, #4
 8016f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016f96:	2300      	movs	r3, #0
}
 8016f98:	4618      	mov	r0, r3
 8016f9a:	370c      	adds	r7, #12
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa2:	4770      	bx	lr

08016fa4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016fa4:	b480      	push	{r7}
 8016fa6:	b083      	sub	sp, #12
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016fb2:	b2db      	uxtb	r3, r3
 8016fb4:	2b04      	cmp	r3, #4
 8016fb6:	d106      	bne.n	8016fc6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8016fbe:	b2da      	uxtb	r2, r3
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016fc6:	2300      	movs	r3, #0
}
 8016fc8:	4618      	mov	r0, r3
 8016fca:	370c      	adds	r7, #12
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd2:	4770      	bx	lr

08016fd4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b082      	sub	sp, #8
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d101      	bne.n	8016fea <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8016fe6:	2303      	movs	r3, #3
 8016fe8:	e012      	b.n	8017010 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ff0:	b2db      	uxtb	r3, r3
 8016ff2:	2b03      	cmp	r3, #3
 8016ff4:	d10b      	bne.n	801700e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ffc:	69db      	ldr	r3, [r3, #28]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d005      	beq.n	801700e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017008:	69db      	ldr	r3, [r3, #28]
 801700a:	6878      	ldr	r0, [r7, #4]
 801700c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801700e:	2300      	movs	r3, #0
}
 8017010:	4618      	mov	r0, r3
 8017012:	3708      	adds	r7, #8
 8017014:	46bd      	mov	sp, r7
 8017016:	bd80      	pop	{r7, pc}

08017018 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8017018:	b580      	push	{r7, lr}
 801701a:	b082      	sub	sp, #8
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
 8017020:	460b      	mov	r3, r1
 8017022:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801702a:	2b00      	cmp	r3, #0
 801702c:	d101      	bne.n	8017032 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801702e:	2303      	movs	r3, #3
 8017030:	e014      	b.n	801705c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017038:	b2db      	uxtb	r3, r3
 801703a:	2b03      	cmp	r3, #3
 801703c:	d10d      	bne.n	801705a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017044:	6a1b      	ldr	r3, [r3, #32]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d007      	beq.n	801705a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017050:	6a1b      	ldr	r3, [r3, #32]
 8017052:	78fa      	ldrb	r2, [r7, #3]
 8017054:	4611      	mov	r1, r2
 8017056:	6878      	ldr	r0, [r7, #4]
 8017058:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801705a:	2300      	movs	r3, #0
}
 801705c:	4618      	mov	r0, r3
 801705e:	3708      	adds	r7, #8
 8017060:	46bd      	mov	sp, r7
 8017062:	bd80      	pop	{r7, pc}

08017064 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b082      	sub	sp, #8
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
 801706c:	460b      	mov	r3, r1
 801706e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017076:	2b00      	cmp	r3, #0
 8017078:	d101      	bne.n	801707e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801707a:	2303      	movs	r3, #3
 801707c:	e014      	b.n	80170a8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017084:	b2db      	uxtb	r3, r3
 8017086:	2b03      	cmp	r3, #3
 8017088:	d10d      	bne.n	80170a6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017092:	2b00      	cmp	r3, #0
 8017094:	d007      	beq.n	80170a6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801709e:	78fa      	ldrb	r2, [r7, #3]
 80170a0:	4611      	mov	r1, r2
 80170a2:	6878      	ldr	r0, [r7, #4]
 80170a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80170a6:	2300      	movs	r3, #0
}
 80170a8:	4618      	mov	r0, r3
 80170aa:	3708      	adds	r7, #8
 80170ac:	46bd      	mov	sp, r7
 80170ae:	bd80      	pop	{r7, pc}

080170b0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80170b0:	b480      	push	{r7}
 80170b2:	b083      	sub	sp, #12
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80170b8:	2300      	movs	r3, #0
}
 80170ba:	4618      	mov	r0, r3
 80170bc:	370c      	adds	r7, #12
 80170be:	46bd      	mov	sp, r7
 80170c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c4:	4770      	bx	lr

080170c6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80170c6:	b580      	push	{r7, lr}
 80170c8:	b082      	sub	sp, #8
 80170ca:	af00      	add	r7, sp, #0
 80170cc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	2201      	movs	r2, #1
 80170d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d009      	beq.n	80170f4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170e6:	685b      	ldr	r3, [r3, #4]
 80170e8:	687a      	ldr	r2, [r7, #4]
 80170ea:	6852      	ldr	r2, [r2, #4]
 80170ec:	b2d2      	uxtb	r2, r2
 80170ee:	4611      	mov	r1, r2
 80170f0:	6878      	ldr	r0, [r7, #4]
 80170f2:	4798      	blx	r3
  }

  return USBD_OK;
 80170f4:	2300      	movs	r3, #0
}
 80170f6:	4618      	mov	r0, r3
 80170f8:	3708      	adds	r7, #8
 80170fa:	46bd      	mov	sp, r7
 80170fc:	bd80      	pop	{r7, pc}

080170fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80170fe:	b480      	push	{r7}
 8017100:	b087      	sub	sp, #28
 8017102:	af00      	add	r7, sp, #0
 8017104:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801710a:	697b      	ldr	r3, [r7, #20]
 801710c:	781b      	ldrb	r3, [r3, #0]
 801710e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8017110:	697b      	ldr	r3, [r7, #20]
 8017112:	3301      	adds	r3, #1
 8017114:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8017116:	697b      	ldr	r3, [r7, #20]
 8017118:	781b      	ldrb	r3, [r3, #0]
 801711a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801711c:	8a3b      	ldrh	r3, [r7, #16]
 801711e:	021b      	lsls	r3, r3, #8
 8017120:	b21a      	sxth	r2, r3
 8017122:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017126:	4313      	orrs	r3, r2
 8017128:	b21b      	sxth	r3, r3
 801712a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801712c:	89fb      	ldrh	r3, [r7, #14]
}
 801712e:	4618      	mov	r0, r3
 8017130:	371c      	adds	r7, #28
 8017132:	46bd      	mov	sp, r7
 8017134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017138:	4770      	bx	lr
	...

0801713c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b084      	sub	sp, #16
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
 8017144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017146:	2300      	movs	r3, #0
 8017148:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801714a:	683b      	ldr	r3, [r7, #0]
 801714c:	781b      	ldrb	r3, [r3, #0]
 801714e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017152:	2b40      	cmp	r3, #64	; 0x40
 8017154:	d005      	beq.n	8017162 <USBD_StdDevReq+0x26>
 8017156:	2b40      	cmp	r3, #64	; 0x40
 8017158:	d853      	bhi.n	8017202 <USBD_StdDevReq+0xc6>
 801715a:	2b00      	cmp	r3, #0
 801715c:	d00b      	beq.n	8017176 <USBD_StdDevReq+0x3a>
 801715e:	2b20      	cmp	r3, #32
 8017160:	d14f      	bne.n	8017202 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017168:	689b      	ldr	r3, [r3, #8]
 801716a:	6839      	ldr	r1, [r7, #0]
 801716c:	6878      	ldr	r0, [r7, #4]
 801716e:	4798      	blx	r3
 8017170:	4603      	mov	r3, r0
 8017172:	73fb      	strb	r3, [r7, #15]
      break;
 8017174:	e04a      	b.n	801720c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017176:	683b      	ldr	r3, [r7, #0]
 8017178:	785b      	ldrb	r3, [r3, #1]
 801717a:	2b09      	cmp	r3, #9
 801717c:	d83b      	bhi.n	80171f6 <USBD_StdDevReq+0xba>
 801717e:	a201      	add	r2, pc, #4	; (adr r2, 8017184 <USBD_StdDevReq+0x48>)
 8017180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017184:	080171d9 	.word	0x080171d9
 8017188:	080171ed 	.word	0x080171ed
 801718c:	080171f7 	.word	0x080171f7
 8017190:	080171e3 	.word	0x080171e3
 8017194:	080171f7 	.word	0x080171f7
 8017198:	080171b7 	.word	0x080171b7
 801719c:	080171ad 	.word	0x080171ad
 80171a0:	080171f7 	.word	0x080171f7
 80171a4:	080171cf 	.word	0x080171cf
 80171a8:	080171c1 	.word	0x080171c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80171ac:	6839      	ldr	r1, [r7, #0]
 80171ae:	6878      	ldr	r0, [r7, #4]
 80171b0:	f000 f9de 	bl	8017570 <USBD_GetDescriptor>
          break;
 80171b4:	e024      	b.n	8017200 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80171b6:	6839      	ldr	r1, [r7, #0]
 80171b8:	6878      	ldr	r0, [r7, #4]
 80171ba:	f000 fb43 	bl	8017844 <USBD_SetAddress>
          break;
 80171be:	e01f      	b.n	8017200 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80171c0:	6839      	ldr	r1, [r7, #0]
 80171c2:	6878      	ldr	r0, [r7, #4]
 80171c4:	f000 fb82 	bl	80178cc <USBD_SetConfig>
 80171c8:	4603      	mov	r3, r0
 80171ca:	73fb      	strb	r3, [r7, #15]
          break;
 80171cc:	e018      	b.n	8017200 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80171ce:	6839      	ldr	r1, [r7, #0]
 80171d0:	6878      	ldr	r0, [r7, #4]
 80171d2:	f000 fc21 	bl	8017a18 <USBD_GetConfig>
          break;
 80171d6:	e013      	b.n	8017200 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80171d8:	6839      	ldr	r1, [r7, #0]
 80171da:	6878      	ldr	r0, [r7, #4]
 80171dc:	f000 fc52 	bl	8017a84 <USBD_GetStatus>
          break;
 80171e0:	e00e      	b.n	8017200 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80171e2:	6839      	ldr	r1, [r7, #0]
 80171e4:	6878      	ldr	r0, [r7, #4]
 80171e6:	f000 fc81 	bl	8017aec <USBD_SetFeature>
          break;
 80171ea:	e009      	b.n	8017200 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80171ec:	6839      	ldr	r1, [r7, #0]
 80171ee:	6878      	ldr	r0, [r7, #4]
 80171f0:	f000 fc90 	bl	8017b14 <USBD_ClrFeature>
          break;
 80171f4:	e004      	b.n	8017200 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80171f6:	6839      	ldr	r1, [r7, #0]
 80171f8:	6878      	ldr	r0, [r7, #4]
 80171fa:	f000 fce7 	bl	8017bcc <USBD_CtlError>
          break;
 80171fe:	bf00      	nop
      }
      break;
 8017200:	e004      	b.n	801720c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8017202:	6839      	ldr	r1, [r7, #0]
 8017204:	6878      	ldr	r0, [r7, #4]
 8017206:	f000 fce1 	bl	8017bcc <USBD_CtlError>
      break;
 801720a:	bf00      	nop
  }

  return ret;
 801720c:	7bfb      	ldrb	r3, [r7, #15]
}
 801720e:	4618      	mov	r0, r3
 8017210:	3710      	adds	r7, #16
 8017212:	46bd      	mov	sp, r7
 8017214:	bd80      	pop	{r7, pc}
 8017216:	bf00      	nop

08017218 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017218:	b580      	push	{r7, lr}
 801721a:	b084      	sub	sp, #16
 801721c:	af00      	add	r7, sp, #0
 801721e:	6078      	str	r0, [r7, #4]
 8017220:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017222:	2300      	movs	r3, #0
 8017224:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	781b      	ldrb	r3, [r3, #0]
 801722a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801722e:	2b40      	cmp	r3, #64	; 0x40
 8017230:	d005      	beq.n	801723e <USBD_StdItfReq+0x26>
 8017232:	2b40      	cmp	r3, #64	; 0x40
 8017234:	d82f      	bhi.n	8017296 <USBD_StdItfReq+0x7e>
 8017236:	2b00      	cmp	r3, #0
 8017238:	d001      	beq.n	801723e <USBD_StdItfReq+0x26>
 801723a:	2b20      	cmp	r3, #32
 801723c:	d12b      	bne.n	8017296 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017244:	b2db      	uxtb	r3, r3
 8017246:	3b01      	subs	r3, #1
 8017248:	2b02      	cmp	r3, #2
 801724a:	d81d      	bhi.n	8017288 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	889b      	ldrh	r3, [r3, #4]
 8017250:	b2db      	uxtb	r3, r3
 8017252:	2b01      	cmp	r3, #1
 8017254:	d813      	bhi.n	801727e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801725c:	689b      	ldr	r3, [r3, #8]
 801725e:	6839      	ldr	r1, [r7, #0]
 8017260:	6878      	ldr	r0, [r7, #4]
 8017262:	4798      	blx	r3
 8017264:	4603      	mov	r3, r0
 8017266:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	88db      	ldrh	r3, [r3, #6]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d110      	bne.n	8017292 <USBD_StdItfReq+0x7a>
 8017270:	7bfb      	ldrb	r3, [r7, #15]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d10d      	bne.n	8017292 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8017276:	6878      	ldr	r0, [r7, #4]
 8017278:	f000 fd73 	bl	8017d62 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801727c:	e009      	b.n	8017292 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801727e:	6839      	ldr	r1, [r7, #0]
 8017280:	6878      	ldr	r0, [r7, #4]
 8017282:	f000 fca3 	bl	8017bcc <USBD_CtlError>
          break;
 8017286:	e004      	b.n	8017292 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8017288:	6839      	ldr	r1, [r7, #0]
 801728a:	6878      	ldr	r0, [r7, #4]
 801728c:	f000 fc9e 	bl	8017bcc <USBD_CtlError>
          break;
 8017290:	e000      	b.n	8017294 <USBD_StdItfReq+0x7c>
          break;
 8017292:	bf00      	nop
      }
      break;
 8017294:	e004      	b.n	80172a0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8017296:	6839      	ldr	r1, [r7, #0]
 8017298:	6878      	ldr	r0, [r7, #4]
 801729a:	f000 fc97 	bl	8017bcc <USBD_CtlError>
      break;
 801729e:	bf00      	nop
  }

  return ret;
 80172a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80172a2:	4618      	mov	r0, r3
 80172a4:	3710      	adds	r7, #16
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd80      	pop	{r7, pc}

080172aa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172aa:	b580      	push	{r7, lr}
 80172ac:	b084      	sub	sp, #16
 80172ae:	af00      	add	r7, sp, #0
 80172b0:	6078      	str	r0, [r7, #4]
 80172b2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80172b4:	2300      	movs	r3, #0
 80172b6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	889b      	ldrh	r3, [r3, #4]
 80172bc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80172be:	683b      	ldr	r3, [r7, #0]
 80172c0:	781b      	ldrb	r3, [r3, #0]
 80172c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80172c6:	2b40      	cmp	r3, #64	; 0x40
 80172c8:	d007      	beq.n	80172da <USBD_StdEPReq+0x30>
 80172ca:	2b40      	cmp	r3, #64	; 0x40
 80172cc:	f200 8145 	bhi.w	801755a <USBD_StdEPReq+0x2b0>
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d00c      	beq.n	80172ee <USBD_StdEPReq+0x44>
 80172d4:	2b20      	cmp	r3, #32
 80172d6:	f040 8140 	bne.w	801755a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80172e0:	689b      	ldr	r3, [r3, #8]
 80172e2:	6839      	ldr	r1, [r7, #0]
 80172e4:	6878      	ldr	r0, [r7, #4]
 80172e6:	4798      	blx	r3
 80172e8:	4603      	mov	r3, r0
 80172ea:	73fb      	strb	r3, [r7, #15]
      break;
 80172ec:	e13a      	b.n	8017564 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80172ee:	683b      	ldr	r3, [r7, #0]
 80172f0:	785b      	ldrb	r3, [r3, #1]
 80172f2:	2b03      	cmp	r3, #3
 80172f4:	d007      	beq.n	8017306 <USBD_StdEPReq+0x5c>
 80172f6:	2b03      	cmp	r3, #3
 80172f8:	f300 8129 	bgt.w	801754e <USBD_StdEPReq+0x2a4>
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d07f      	beq.n	8017400 <USBD_StdEPReq+0x156>
 8017300:	2b01      	cmp	r3, #1
 8017302:	d03c      	beq.n	801737e <USBD_StdEPReq+0xd4>
 8017304:	e123      	b.n	801754e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801730c:	b2db      	uxtb	r3, r3
 801730e:	2b02      	cmp	r3, #2
 8017310:	d002      	beq.n	8017318 <USBD_StdEPReq+0x6e>
 8017312:	2b03      	cmp	r3, #3
 8017314:	d016      	beq.n	8017344 <USBD_StdEPReq+0x9a>
 8017316:	e02c      	b.n	8017372 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017318:	7bbb      	ldrb	r3, [r7, #14]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d00d      	beq.n	801733a <USBD_StdEPReq+0x90>
 801731e:	7bbb      	ldrb	r3, [r7, #14]
 8017320:	2b80      	cmp	r3, #128	; 0x80
 8017322:	d00a      	beq.n	801733a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017324:	7bbb      	ldrb	r3, [r7, #14]
 8017326:	4619      	mov	r1, r3
 8017328:	6878      	ldr	r0, [r7, #4]
 801732a:	f005 f8cb 	bl	801c4c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801732e:	2180      	movs	r1, #128	; 0x80
 8017330:	6878      	ldr	r0, [r7, #4]
 8017332:	f005 f8c7 	bl	801c4c4 <USBD_LL_StallEP>
 8017336:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017338:	e020      	b.n	801737c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801733a:	6839      	ldr	r1, [r7, #0]
 801733c:	6878      	ldr	r0, [r7, #4]
 801733e:	f000 fc45 	bl	8017bcc <USBD_CtlError>
              break;
 8017342:	e01b      	b.n	801737c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017344:	683b      	ldr	r3, [r7, #0]
 8017346:	885b      	ldrh	r3, [r3, #2]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d10e      	bne.n	801736a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801734c:	7bbb      	ldrb	r3, [r7, #14]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d00b      	beq.n	801736a <USBD_StdEPReq+0xc0>
 8017352:	7bbb      	ldrb	r3, [r7, #14]
 8017354:	2b80      	cmp	r3, #128	; 0x80
 8017356:	d008      	beq.n	801736a <USBD_StdEPReq+0xc0>
 8017358:	683b      	ldr	r3, [r7, #0]
 801735a:	88db      	ldrh	r3, [r3, #6]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d104      	bne.n	801736a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017360:	7bbb      	ldrb	r3, [r7, #14]
 8017362:	4619      	mov	r1, r3
 8017364:	6878      	ldr	r0, [r7, #4]
 8017366:	f005 f8ad 	bl	801c4c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801736a:	6878      	ldr	r0, [r7, #4]
 801736c:	f000 fcf9 	bl	8017d62 <USBD_CtlSendStatus>

              break;
 8017370:	e004      	b.n	801737c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8017372:	6839      	ldr	r1, [r7, #0]
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f000 fc29 	bl	8017bcc <USBD_CtlError>
              break;
 801737a:	bf00      	nop
          }
          break;
 801737c:	e0ec      	b.n	8017558 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017384:	b2db      	uxtb	r3, r3
 8017386:	2b02      	cmp	r3, #2
 8017388:	d002      	beq.n	8017390 <USBD_StdEPReq+0xe6>
 801738a:	2b03      	cmp	r3, #3
 801738c:	d016      	beq.n	80173bc <USBD_StdEPReq+0x112>
 801738e:	e030      	b.n	80173f2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017390:	7bbb      	ldrb	r3, [r7, #14]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d00d      	beq.n	80173b2 <USBD_StdEPReq+0x108>
 8017396:	7bbb      	ldrb	r3, [r7, #14]
 8017398:	2b80      	cmp	r3, #128	; 0x80
 801739a:	d00a      	beq.n	80173b2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801739c:	7bbb      	ldrb	r3, [r7, #14]
 801739e:	4619      	mov	r1, r3
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f005 f88f 	bl	801c4c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80173a6:	2180      	movs	r1, #128	; 0x80
 80173a8:	6878      	ldr	r0, [r7, #4]
 80173aa:	f005 f88b 	bl	801c4c4 <USBD_LL_StallEP>
 80173ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80173b0:	e025      	b.n	80173fe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80173b2:	6839      	ldr	r1, [r7, #0]
 80173b4:	6878      	ldr	r0, [r7, #4]
 80173b6:	f000 fc09 	bl	8017bcc <USBD_CtlError>
              break;
 80173ba:	e020      	b.n	80173fe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80173bc:	683b      	ldr	r3, [r7, #0]
 80173be:	885b      	ldrh	r3, [r3, #2]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d11b      	bne.n	80173fc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80173c4:	7bbb      	ldrb	r3, [r7, #14]
 80173c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d004      	beq.n	80173d8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80173ce:	7bbb      	ldrb	r3, [r7, #14]
 80173d0:	4619      	mov	r1, r3
 80173d2:	6878      	ldr	r0, [r7, #4]
 80173d4:	f005 f895 	bl	801c502 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80173d8:	6878      	ldr	r0, [r7, #4]
 80173da:	f000 fcc2 	bl	8017d62 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80173e4:	689b      	ldr	r3, [r3, #8]
 80173e6:	6839      	ldr	r1, [r7, #0]
 80173e8:	6878      	ldr	r0, [r7, #4]
 80173ea:	4798      	blx	r3
 80173ec:	4603      	mov	r3, r0
 80173ee:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80173f0:	e004      	b.n	80173fc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80173f2:	6839      	ldr	r1, [r7, #0]
 80173f4:	6878      	ldr	r0, [r7, #4]
 80173f6:	f000 fbe9 	bl	8017bcc <USBD_CtlError>
              break;
 80173fa:	e000      	b.n	80173fe <USBD_StdEPReq+0x154>
              break;
 80173fc:	bf00      	nop
          }
          break;
 80173fe:	e0ab      	b.n	8017558 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017406:	b2db      	uxtb	r3, r3
 8017408:	2b02      	cmp	r3, #2
 801740a:	d002      	beq.n	8017412 <USBD_StdEPReq+0x168>
 801740c:	2b03      	cmp	r3, #3
 801740e:	d032      	beq.n	8017476 <USBD_StdEPReq+0x1cc>
 8017410:	e097      	b.n	8017542 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017412:	7bbb      	ldrb	r3, [r7, #14]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d007      	beq.n	8017428 <USBD_StdEPReq+0x17e>
 8017418:	7bbb      	ldrb	r3, [r7, #14]
 801741a:	2b80      	cmp	r3, #128	; 0x80
 801741c:	d004      	beq.n	8017428 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801741e:	6839      	ldr	r1, [r7, #0]
 8017420:	6878      	ldr	r0, [r7, #4]
 8017422:	f000 fbd3 	bl	8017bcc <USBD_CtlError>
                break;
 8017426:	e091      	b.n	801754c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801742c:	2b00      	cmp	r3, #0
 801742e:	da0b      	bge.n	8017448 <USBD_StdEPReq+0x19e>
 8017430:	7bbb      	ldrb	r3, [r7, #14]
 8017432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017436:	4613      	mov	r3, r2
 8017438:	009b      	lsls	r3, r3, #2
 801743a:	4413      	add	r3, r2
 801743c:	009b      	lsls	r3, r3, #2
 801743e:	3310      	adds	r3, #16
 8017440:	687a      	ldr	r2, [r7, #4]
 8017442:	4413      	add	r3, r2
 8017444:	3304      	adds	r3, #4
 8017446:	e00b      	b.n	8017460 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017448:	7bbb      	ldrb	r3, [r7, #14]
 801744a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801744e:	4613      	mov	r3, r2
 8017450:	009b      	lsls	r3, r3, #2
 8017452:	4413      	add	r3, r2
 8017454:	009b      	lsls	r3, r3, #2
 8017456:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801745a:	687a      	ldr	r2, [r7, #4]
 801745c:	4413      	add	r3, r2
 801745e:	3304      	adds	r3, #4
 8017460:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017462:	68bb      	ldr	r3, [r7, #8]
 8017464:	2200      	movs	r2, #0
 8017466:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017468:	68bb      	ldr	r3, [r7, #8]
 801746a:	2202      	movs	r2, #2
 801746c:	4619      	mov	r1, r3
 801746e:	6878      	ldr	r0, [r7, #4]
 8017470:	f000 fc1d 	bl	8017cae <USBD_CtlSendData>
              break;
 8017474:	e06a      	b.n	801754c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801747a:	2b00      	cmp	r3, #0
 801747c:	da11      	bge.n	80174a2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801747e:	7bbb      	ldrb	r3, [r7, #14]
 8017480:	f003 020f 	and.w	r2, r3, #15
 8017484:	6879      	ldr	r1, [r7, #4]
 8017486:	4613      	mov	r3, r2
 8017488:	009b      	lsls	r3, r3, #2
 801748a:	4413      	add	r3, r2
 801748c:	009b      	lsls	r3, r3, #2
 801748e:	440b      	add	r3, r1
 8017490:	3324      	adds	r3, #36	; 0x24
 8017492:	881b      	ldrh	r3, [r3, #0]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d117      	bne.n	80174c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8017498:	6839      	ldr	r1, [r7, #0]
 801749a:	6878      	ldr	r0, [r7, #4]
 801749c:	f000 fb96 	bl	8017bcc <USBD_CtlError>
                  break;
 80174a0:	e054      	b.n	801754c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80174a2:	7bbb      	ldrb	r3, [r7, #14]
 80174a4:	f003 020f 	and.w	r2, r3, #15
 80174a8:	6879      	ldr	r1, [r7, #4]
 80174aa:	4613      	mov	r3, r2
 80174ac:	009b      	lsls	r3, r3, #2
 80174ae:	4413      	add	r3, r2
 80174b0:	009b      	lsls	r3, r3, #2
 80174b2:	440b      	add	r3, r1
 80174b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80174b8:	881b      	ldrh	r3, [r3, #0]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d104      	bne.n	80174c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80174be:	6839      	ldr	r1, [r7, #0]
 80174c0:	6878      	ldr	r0, [r7, #4]
 80174c2:	f000 fb83 	bl	8017bcc <USBD_CtlError>
                  break;
 80174c6:	e041      	b.n	801754c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80174c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	da0b      	bge.n	80174e8 <USBD_StdEPReq+0x23e>
 80174d0:	7bbb      	ldrb	r3, [r7, #14]
 80174d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80174d6:	4613      	mov	r3, r2
 80174d8:	009b      	lsls	r3, r3, #2
 80174da:	4413      	add	r3, r2
 80174dc:	009b      	lsls	r3, r3, #2
 80174de:	3310      	adds	r3, #16
 80174e0:	687a      	ldr	r2, [r7, #4]
 80174e2:	4413      	add	r3, r2
 80174e4:	3304      	adds	r3, #4
 80174e6:	e00b      	b.n	8017500 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80174e8:	7bbb      	ldrb	r3, [r7, #14]
 80174ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80174ee:	4613      	mov	r3, r2
 80174f0:	009b      	lsls	r3, r3, #2
 80174f2:	4413      	add	r3, r2
 80174f4:	009b      	lsls	r3, r3, #2
 80174f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80174fa:	687a      	ldr	r2, [r7, #4]
 80174fc:	4413      	add	r3, r2
 80174fe:	3304      	adds	r3, #4
 8017500:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017502:	7bbb      	ldrb	r3, [r7, #14]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d002      	beq.n	801750e <USBD_StdEPReq+0x264>
 8017508:	7bbb      	ldrb	r3, [r7, #14]
 801750a:	2b80      	cmp	r3, #128	; 0x80
 801750c:	d103      	bne.n	8017516 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801750e:	68bb      	ldr	r3, [r7, #8]
 8017510:	2200      	movs	r2, #0
 8017512:	601a      	str	r2, [r3, #0]
 8017514:	e00e      	b.n	8017534 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017516:	7bbb      	ldrb	r3, [r7, #14]
 8017518:	4619      	mov	r1, r3
 801751a:	6878      	ldr	r0, [r7, #4]
 801751c:	f005 f810 	bl	801c540 <USBD_LL_IsStallEP>
 8017520:	4603      	mov	r3, r0
 8017522:	2b00      	cmp	r3, #0
 8017524:	d003      	beq.n	801752e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8017526:	68bb      	ldr	r3, [r7, #8]
 8017528:	2201      	movs	r2, #1
 801752a:	601a      	str	r2, [r3, #0]
 801752c:	e002      	b.n	8017534 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801752e:	68bb      	ldr	r3, [r7, #8]
 8017530:	2200      	movs	r2, #0
 8017532:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017534:	68bb      	ldr	r3, [r7, #8]
 8017536:	2202      	movs	r2, #2
 8017538:	4619      	mov	r1, r3
 801753a:	6878      	ldr	r0, [r7, #4]
 801753c:	f000 fbb7 	bl	8017cae <USBD_CtlSendData>
              break;
 8017540:	e004      	b.n	801754c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8017542:	6839      	ldr	r1, [r7, #0]
 8017544:	6878      	ldr	r0, [r7, #4]
 8017546:	f000 fb41 	bl	8017bcc <USBD_CtlError>
              break;
 801754a:	bf00      	nop
          }
          break;
 801754c:	e004      	b.n	8017558 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801754e:	6839      	ldr	r1, [r7, #0]
 8017550:	6878      	ldr	r0, [r7, #4]
 8017552:	f000 fb3b 	bl	8017bcc <USBD_CtlError>
          break;
 8017556:	bf00      	nop
      }
      break;
 8017558:	e004      	b.n	8017564 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801755a:	6839      	ldr	r1, [r7, #0]
 801755c:	6878      	ldr	r0, [r7, #4]
 801755e:	f000 fb35 	bl	8017bcc <USBD_CtlError>
      break;
 8017562:	bf00      	nop
  }

  return ret;
 8017564:	7bfb      	ldrb	r3, [r7, #15]
}
 8017566:	4618      	mov	r0, r3
 8017568:	3710      	adds	r7, #16
 801756a:	46bd      	mov	sp, r7
 801756c:	bd80      	pop	{r7, pc}
	...

08017570 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b084      	sub	sp, #16
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
 8017578:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801757a:	2300      	movs	r3, #0
 801757c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801757e:	2300      	movs	r3, #0
 8017580:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017582:	2300      	movs	r3, #0
 8017584:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017586:	683b      	ldr	r3, [r7, #0]
 8017588:	885b      	ldrh	r3, [r3, #2]
 801758a:	0a1b      	lsrs	r3, r3, #8
 801758c:	b29b      	uxth	r3, r3
 801758e:	3b01      	subs	r3, #1
 8017590:	2b06      	cmp	r3, #6
 8017592:	f200 8128 	bhi.w	80177e6 <USBD_GetDescriptor+0x276>
 8017596:	a201      	add	r2, pc, #4	; (adr r2, 801759c <USBD_GetDescriptor+0x2c>)
 8017598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801759c:	080175b9 	.word	0x080175b9
 80175a0:	080175d1 	.word	0x080175d1
 80175a4:	08017611 	.word	0x08017611
 80175a8:	080177e7 	.word	0x080177e7
 80175ac:	080177e7 	.word	0x080177e7
 80175b0:	08017787 	.word	0x08017787
 80175b4:	080177b3 	.word	0x080177b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	687a      	ldr	r2, [r7, #4]
 80175c2:	7c12      	ldrb	r2, [r2, #16]
 80175c4:	f107 0108 	add.w	r1, r7, #8
 80175c8:	4610      	mov	r0, r2
 80175ca:	4798      	blx	r3
 80175cc:	60f8      	str	r0, [r7, #12]
      break;
 80175ce:	e112      	b.n	80177f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	7c1b      	ldrb	r3, [r3, #16]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d10d      	bne.n	80175f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80175de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175e0:	f107 0208 	add.w	r2, r7, #8
 80175e4:	4610      	mov	r0, r2
 80175e6:	4798      	blx	r3
 80175e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	3301      	adds	r3, #1
 80175ee:	2202      	movs	r2, #2
 80175f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80175f2:	e100      	b.n	80177f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80175fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175fc:	f107 0208 	add.w	r2, r7, #8
 8017600:	4610      	mov	r0, r2
 8017602:	4798      	blx	r3
 8017604:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	3301      	adds	r3, #1
 801760a:	2202      	movs	r2, #2
 801760c:	701a      	strb	r2, [r3, #0]
      break;
 801760e:	e0f2      	b.n	80177f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	885b      	ldrh	r3, [r3, #2]
 8017614:	b2db      	uxtb	r3, r3
 8017616:	2b05      	cmp	r3, #5
 8017618:	f200 80ac 	bhi.w	8017774 <USBD_GetDescriptor+0x204>
 801761c:	a201      	add	r2, pc, #4	; (adr r2, 8017624 <USBD_GetDescriptor+0xb4>)
 801761e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017622:	bf00      	nop
 8017624:	0801763d 	.word	0x0801763d
 8017628:	08017671 	.word	0x08017671
 801762c:	080176a5 	.word	0x080176a5
 8017630:	080176d9 	.word	0x080176d9
 8017634:	0801770d 	.word	0x0801770d
 8017638:	08017741 	.word	0x08017741
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017642:	685b      	ldr	r3, [r3, #4]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d00b      	beq.n	8017660 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801764e:	685b      	ldr	r3, [r3, #4]
 8017650:	687a      	ldr	r2, [r7, #4]
 8017652:	7c12      	ldrb	r2, [r2, #16]
 8017654:	f107 0108 	add.w	r1, r7, #8
 8017658:	4610      	mov	r0, r2
 801765a:	4798      	blx	r3
 801765c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801765e:	e091      	b.n	8017784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017660:	6839      	ldr	r1, [r7, #0]
 8017662:	6878      	ldr	r0, [r7, #4]
 8017664:	f000 fab2 	bl	8017bcc <USBD_CtlError>
            err++;
 8017668:	7afb      	ldrb	r3, [r7, #11]
 801766a:	3301      	adds	r3, #1
 801766c:	72fb      	strb	r3, [r7, #11]
          break;
 801766e:	e089      	b.n	8017784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017676:	689b      	ldr	r3, [r3, #8]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d00b      	beq.n	8017694 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017682:	689b      	ldr	r3, [r3, #8]
 8017684:	687a      	ldr	r2, [r7, #4]
 8017686:	7c12      	ldrb	r2, [r2, #16]
 8017688:	f107 0108 	add.w	r1, r7, #8
 801768c:	4610      	mov	r0, r2
 801768e:	4798      	blx	r3
 8017690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017692:	e077      	b.n	8017784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017694:	6839      	ldr	r1, [r7, #0]
 8017696:	6878      	ldr	r0, [r7, #4]
 8017698:	f000 fa98 	bl	8017bcc <USBD_CtlError>
            err++;
 801769c:	7afb      	ldrb	r3, [r7, #11]
 801769e:	3301      	adds	r3, #1
 80176a0:	72fb      	strb	r3, [r7, #11]
          break;
 80176a2:	e06f      	b.n	8017784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176aa:	68db      	ldr	r3, [r3, #12]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d00b      	beq.n	80176c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176b6:	68db      	ldr	r3, [r3, #12]
 80176b8:	687a      	ldr	r2, [r7, #4]
 80176ba:	7c12      	ldrb	r2, [r2, #16]
 80176bc:	f107 0108 	add.w	r1, r7, #8
 80176c0:	4610      	mov	r0, r2
 80176c2:	4798      	blx	r3
 80176c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80176c6:	e05d      	b.n	8017784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80176c8:	6839      	ldr	r1, [r7, #0]
 80176ca:	6878      	ldr	r0, [r7, #4]
 80176cc:	f000 fa7e 	bl	8017bcc <USBD_CtlError>
            err++;
 80176d0:	7afb      	ldrb	r3, [r7, #11]
 80176d2:	3301      	adds	r3, #1
 80176d4:	72fb      	strb	r3, [r7, #11]
          break;
 80176d6:	e055      	b.n	8017784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176de:	691b      	ldr	r3, [r3, #16]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d00b      	beq.n	80176fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176ea:	691b      	ldr	r3, [r3, #16]
 80176ec:	687a      	ldr	r2, [r7, #4]
 80176ee:	7c12      	ldrb	r2, [r2, #16]
 80176f0:	f107 0108 	add.w	r1, r7, #8
 80176f4:	4610      	mov	r0, r2
 80176f6:	4798      	blx	r3
 80176f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80176fa:	e043      	b.n	8017784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80176fc:	6839      	ldr	r1, [r7, #0]
 80176fe:	6878      	ldr	r0, [r7, #4]
 8017700:	f000 fa64 	bl	8017bcc <USBD_CtlError>
            err++;
 8017704:	7afb      	ldrb	r3, [r7, #11]
 8017706:	3301      	adds	r3, #1
 8017708:	72fb      	strb	r3, [r7, #11]
          break;
 801770a:	e03b      	b.n	8017784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017712:	695b      	ldr	r3, [r3, #20]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d00b      	beq.n	8017730 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801771e:	695b      	ldr	r3, [r3, #20]
 8017720:	687a      	ldr	r2, [r7, #4]
 8017722:	7c12      	ldrb	r2, [r2, #16]
 8017724:	f107 0108 	add.w	r1, r7, #8
 8017728:	4610      	mov	r0, r2
 801772a:	4798      	blx	r3
 801772c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801772e:	e029      	b.n	8017784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017730:	6839      	ldr	r1, [r7, #0]
 8017732:	6878      	ldr	r0, [r7, #4]
 8017734:	f000 fa4a 	bl	8017bcc <USBD_CtlError>
            err++;
 8017738:	7afb      	ldrb	r3, [r7, #11]
 801773a:	3301      	adds	r3, #1
 801773c:	72fb      	strb	r3, [r7, #11]
          break;
 801773e:	e021      	b.n	8017784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017746:	699b      	ldr	r3, [r3, #24]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d00b      	beq.n	8017764 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017752:	699b      	ldr	r3, [r3, #24]
 8017754:	687a      	ldr	r2, [r7, #4]
 8017756:	7c12      	ldrb	r2, [r2, #16]
 8017758:	f107 0108 	add.w	r1, r7, #8
 801775c:	4610      	mov	r0, r2
 801775e:	4798      	blx	r3
 8017760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017762:	e00f      	b.n	8017784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017764:	6839      	ldr	r1, [r7, #0]
 8017766:	6878      	ldr	r0, [r7, #4]
 8017768:	f000 fa30 	bl	8017bcc <USBD_CtlError>
            err++;
 801776c:	7afb      	ldrb	r3, [r7, #11]
 801776e:	3301      	adds	r3, #1
 8017770:	72fb      	strb	r3, [r7, #11]
          break;
 8017772:	e007      	b.n	8017784 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017774:	6839      	ldr	r1, [r7, #0]
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	f000 fa28 	bl	8017bcc <USBD_CtlError>
          err++;
 801777c:	7afb      	ldrb	r3, [r7, #11]
 801777e:	3301      	adds	r3, #1
 8017780:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8017782:	bf00      	nop
      }
      break;
 8017784:	e037      	b.n	80177f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	7c1b      	ldrb	r3, [r3, #16]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d109      	bne.n	80177a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017796:	f107 0208 	add.w	r2, r7, #8
 801779a:	4610      	mov	r0, r2
 801779c:	4798      	blx	r3
 801779e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80177a0:	e029      	b.n	80177f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80177a2:	6839      	ldr	r1, [r7, #0]
 80177a4:	6878      	ldr	r0, [r7, #4]
 80177a6:	f000 fa11 	bl	8017bcc <USBD_CtlError>
        err++;
 80177aa:	7afb      	ldrb	r3, [r7, #11]
 80177ac:	3301      	adds	r3, #1
 80177ae:	72fb      	strb	r3, [r7, #11]
      break;
 80177b0:	e021      	b.n	80177f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	7c1b      	ldrb	r3, [r3, #16]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d10d      	bne.n	80177d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80177c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177c2:	f107 0208 	add.w	r2, r7, #8
 80177c6:	4610      	mov	r0, r2
 80177c8:	4798      	blx	r3
 80177ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	3301      	adds	r3, #1
 80177d0:	2207      	movs	r2, #7
 80177d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80177d4:	e00f      	b.n	80177f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80177d6:	6839      	ldr	r1, [r7, #0]
 80177d8:	6878      	ldr	r0, [r7, #4]
 80177da:	f000 f9f7 	bl	8017bcc <USBD_CtlError>
        err++;
 80177de:	7afb      	ldrb	r3, [r7, #11]
 80177e0:	3301      	adds	r3, #1
 80177e2:	72fb      	strb	r3, [r7, #11]
      break;
 80177e4:	e007      	b.n	80177f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80177e6:	6839      	ldr	r1, [r7, #0]
 80177e8:	6878      	ldr	r0, [r7, #4]
 80177ea:	f000 f9ef 	bl	8017bcc <USBD_CtlError>
      err++;
 80177ee:	7afb      	ldrb	r3, [r7, #11]
 80177f0:	3301      	adds	r3, #1
 80177f2:	72fb      	strb	r3, [r7, #11]
      break;
 80177f4:	bf00      	nop
  }

  if (err != 0U)
 80177f6:	7afb      	ldrb	r3, [r7, #11]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d11e      	bne.n	801783a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80177fc:	683b      	ldr	r3, [r7, #0]
 80177fe:	88db      	ldrh	r3, [r3, #6]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d016      	beq.n	8017832 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8017804:	893b      	ldrh	r3, [r7, #8]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d00e      	beq.n	8017828 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801780a:	683b      	ldr	r3, [r7, #0]
 801780c:	88da      	ldrh	r2, [r3, #6]
 801780e:	893b      	ldrh	r3, [r7, #8]
 8017810:	4293      	cmp	r3, r2
 8017812:	bf28      	it	cs
 8017814:	4613      	movcs	r3, r2
 8017816:	b29b      	uxth	r3, r3
 8017818:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801781a:	893b      	ldrh	r3, [r7, #8]
 801781c:	461a      	mov	r2, r3
 801781e:	68f9      	ldr	r1, [r7, #12]
 8017820:	6878      	ldr	r0, [r7, #4]
 8017822:	f000 fa44 	bl	8017cae <USBD_CtlSendData>
 8017826:	e009      	b.n	801783c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017828:	6839      	ldr	r1, [r7, #0]
 801782a:	6878      	ldr	r0, [r7, #4]
 801782c:	f000 f9ce 	bl	8017bcc <USBD_CtlError>
 8017830:	e004      	b.n	801783c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017832:	6878      	ldr	r0, [r7, #4]
 8017834:	f000 fa95 	bl	8017d62 <USBD_CtlSendStatus>
 8017838:	e000      	b.n	801783c <USBD_GetDescriptor+0x2cc>
    return;
 801783a:	bf00      	nop
  }
}
 801783c:	3710      	adds	r7, #16
 801783e:	46bd      	mov	sp, r7
 8017840:	bd80      	pop	{r7, pc}
 8017842:	bf00      	nop

08017844 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b084      	sub	sp, #16
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
 801784c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801784e:	683b      	ldr	r3, [r7, #0]
 8017850:	889b      	ldrh	r3, [r3, #4]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d131      	bne.n	80178ba <USBD_SetAddress+0x76>
 8017856:	683b      	ldr	r3, [r7, #0]
 8017858:	88db      	ldrh	r3, [r3, #6]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d12d      	bne.n	80178ba <USBD_SetAddress+0x76>
 801785e:	683b      	ldr	r3, [r7, #0]
 8017860:	885b      	ldrh	r3, [r3, #2]
 8017862:	2b7f      	cmp	r3, #127	; 0x7f
 8017864:	d829      	bhi.n	80178ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017866:	683b      	ldr	r3, [r7, #0]
 8017868:	885b      	ldrh	r3, [r3, #2]
 801786a:	b2db      	uxtb	r3, r3
 801786c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017870:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017878:	b2db      	uxtb	r3, r3
 801787a:	2b03      	cmp	r3, #3
 801787c:	d104      	bne.n	8017888 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801787e:	6839      	ldr	r1, [r7, #0]
 8017880:	6878      	ldr	r0, [r7, #4]
 8017882:	f000 f9a3 	bl	8017bcc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017886:	e01d      	b.n	80178c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	7bfa      	ldrb	r2, [r7, #15]
 801788c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017890:	7bfb      	ldrb	r3, [r7, #15]
 8017892:	4619      	mov	r1, r3
 8017894:	6878      	ldr	r0, [r7, #4]
 8017896:	f004 fe7f 	bl	801c598 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801789a:	6878      	ldr	r0, [r7, #4]
 801789c:	f000 fa61 	bl	8017d62 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80178a0:	7bfb      	ldrb	r3, [r7, #15]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d004      	beq.n	80178b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	2202      	movs	r2, #2
 80178aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80178ae:	e009      	b.n	80178c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	2201      	movs	r2, #1
 80178b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80178b8:	e004      	b.n	80178c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80178ba:	6839      	ldr	r1, [r7, #0]
 80178bc:	6878      	ldr	r0, [r7, #4]
 80178be:	f000 f985 	bl	8017bcc <USBD_CtlError>
  }
}
 80178c2:	bf00      	nop
 80178c4:	bf00      	nop
 80178c6:	3710      	adds	r7, #16
 80178c8:	46bd      	mov	sp, r7
 80178ca:	bd80      	pop	{r7, pc}

080178cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b084      	sub	sp, #16
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
 80178d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80178d6:	2300      	movs	r3, #0
 80178d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80178da:	683b      	ldr	r3, [r7, #0]
 80178dc:	885b      	ldrh	r3, [r3, #2]
 80178de:	b2da      	uxtb	r2, r3
 80178e0:	4b4c      	ldr	r3, [pc, #304]	; (8017a14 <USBD_SetConfig+0x148>)
 80178e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80178e4:	4b4b      	ldr	r3, [pc, #300]	; (8017a14 <USBD_SetConfig+0x148>)
 80178e6:	781b      	ldrb	r3, [r3, #0]
 80178e8:	2b01      	cmp	r3, #1
 80178ea:	d905      	bls.n	80178f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80178ec:	6839      	ldr	r1, [r7, #0]
 80178ee:	6878      	ldr	r0, [r7, #4]
 80178f0:	f000 f96c 	bl	8017bcc <USBD_CtlError>
    return USBD_FAIL;
 80178f4:	2303      	movs	r3, #3
 80178f6:	e088      	b.n	8017a0a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80178fe:	b2db      	uxtb	r3, r3
 8017900:	2b02      	cmp	r3, #2
 8017902:	d002      	beq.n	801790a <USBD_SetConfig+0x3e>
 8017904:	2b03      	cmp	r3, #3
 8017906:	d025      	beq.n	8017954 <USBD_SetConfig+0x88>
 8017908:	e071      	b.n	80179ee <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801790a:	4b42      	ldr	r3, [pc, #264]	; (8017a14 <USBD_SetConfig+0x148>)
 801790c:	781b      	ldrb	r3, [r3, #0]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d01c      	beq.n	801794c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8017912:	4b40      	ldr	r3, [pc, #256]	; (8017a14 <USBD_SetConfig+0x148>)
 8017914:	781b      	ldrb	r3, [r3, #0]
 8017916:	461a      	mov	r2, r3
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801791c:	4b3d      	ldr	r3, [pc, #244]	; (8017a14 <USBD_SetConfig+0x148>)
 801791e:	781b      	ldrb	r3, [r3, #0]
 8017920:	4619      	mov	r1, r3
 8017922:	6878      	ldr	r0, [r7, #4]
 8017924:	f7ff f948 	bl	8016bb8 <USBD_SetClassConfig>
 8017928:	4603      	mov	r3, r0
 801792a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801792c:	7bfb      	ldrb	r3, [r7, #15]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d004      	beq.n	801793c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8017932:	6839      	ldr	r1, [r7, #0]
 8017934:	6878      	ldr	r0, [r7, #4]
 8017936:	f000 f949 	bl	8017bcc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801793a:	e065      	b.n	8017a08 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801793c:	6878      	ldr	r0, [r7, #4]
 801793e:	f000 fa10 	bl	8017d62 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	2203      	movs	r2, #3
 8017946:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801794a:	e05d      	b.n	8017a08 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801794c:	6878      	ldr	r0, [r7, #4]
 801794e:	f000 fa08 	bl	8017d62 <USBD_CtlSendStatus>
      break;
 8017952:	e059      	b.n	8017a08 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017954:	4b2f      	ldr	r3, [pc, #188]	; (8017a14 <USBD_SetConfig+0x148>)
 8017956:	781b      	ldrb	r3, [r3, #0]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d112      	bne.n	8017982 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	2202      	movs	r2, #2
 8017960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8017964:	4b2b      	ldr	r3, [pc, #172]	; (8017a14 <USBD_SetConfig+0x148>)
 8017966:	781b      	ldrb	r3, [r3, #0]
 8017968:	461a      	mov	r2, r3
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801796e:	4b29      	ldr	r3, [pc, #164]	; (8017a14 <USBD_SetConfig+0x148>)
 8017970:	781b      	ldrb	r3, [r3, #0]
 8017972:	4619      	mov	r1, r3
 8017974:	6878      	ldr	r0, [r7, #4]
 8017976:	f7ff f93b 	bl	8016bf0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801797a:	6878      	ldr	r0, [r7, #4]
 801797c:	f000 f9f1 	bl	8017d62 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017980:	e042      	b.n	8017a08 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8017982:	4b24      	ldr	r3, [pc, #144]	; (8017a14 <USBD_SetConfig+0x148>)
 8017984:	781b      	ldrb	r3, [r3, #0]
 8017986:	461a      	mov	r2, r3
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	685b      	ldr	r3, [r3, #4]
 801798c:	429a      	cmp	r2, r3
 801798e:	d02a      	beq.n	80179e6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	685b      	ldr	r3, [r3, #4]
 8017994:	b2db      	uxtb	r3, r3
 8017996:	4619      	mov	r1, r3
 8017998:	6878      	ldr	r0, [r7, #4]
 801799a:	f7ff f929 	bl	8016bf0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801799e:	4b1d      	ldr	r3, [pc, #116]	; (8017a14 <USBD_SetConfig+0x148>)
 80179a0:	781b      	ldrb	r3, [r3, #0]
 80179a2:	461a      	mov	r2, r3
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80179a8:	4b1a      	ldr	r3, [pc, #104]	; (8017a14 <USBD_SetConfig+0x148>)
 80179aa:	781b      	ldrb	r3, [r3, #0]
 80179ac:	4619      	mov	r1, r3
 80179ae:	6878      	ldr	r0, [r7, #4]
 80179b0:	f7ff f902 	bl	8016bb8 <USBD_SetClassConfig>
 80179b4:	4603      	mov	r3, r0
 80179b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80179b8:	7bfb      	ldrb	r3, [r7, #15]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d00f      	beq.n	80179de <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80179be:	6839      	ldr	r1, [r7, #0]
 80179c0:	6878      	ldr	r0, [r7, #4]
 80179c2:	f000 f903 	bl	8017bcc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	685b      	ldr	r3, [r3, #4]
 80179ca:	b2db      	uxtb	r3, r3
 80179cc:	4619      	mov	r1, r3
 80179ce:	6878      	ldr	r0, [r7, #4]
 80179d0:	f7ff f90e 	bl	8016bf0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	2202      	movs	r2, #2
 80179d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80179dc:	e014      	b.n	8017a08 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80179de:	6878      	ldr	r0, [r7, #4]
 80179e0:	f000 f9bf 	bl	8017d62 <USBD_CtlSendStatus>
      break;
 80179e4:	e010      	b.n	8017a08 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80179e6:	6878      	ldr	r0, [r7, #4]
 80179e8:	f000 f9bb 	bl	8017d62 <USBD_CtlSendStatus>
      break;
 80179ec:	e00c      	b.n	8017a08 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80179ee:	6839      	ldr	r1, [r7, #0]
 80179f0:	6878      	ldr	r0, [r7, #4]
 80179f2:	f000 f8eb 	bl	8017bcc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80179f6:	4b07      	ldr	r3, [pc, #28]	; (8017a14 <USBD_SetConfig+0x148>)
 80179f8:	781b      	ldrb	r3, [r3, #0]
 80179fa:	4619      	mov	r1, r3
 80179fc:	6878      	ldr	r0, [r7, #4]
 80179fe:	f7ff f8f7 	bl	8016bf0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017a02:	2303      	movs	r3, #3
 8017a04:	73fb      	strb	r3, [r7, #15]
      break;
 8017a06:	bf00      	nop
  }

  return ret;
 8017a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	3710      	adds	r7, #16
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	bd80      	pop	{r7, pc}
 8017a12:	bf00      	nop
 8017a14:	20000652 	.word	0x20000652

08017a18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b082      	sub	sp, #8
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
 8017a20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017a22:	683b      	ldr	r3, [r7, #0]
 8017a24:	88db      	ldrh	r3, [r3, #6]
 8017a26:	2b01      	cmp	r3, #1
 8017a28:	d004      	beq.n	8017a34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017a2a:	6839      	ldr	r1, [r7, #0]
 8017a2c:	6878      	ldr	r0, [r7, #4]
 8017a2e:	f000 f8cd 	bl	8017bcc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017a32:	e023      	b.n	8017a7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017a3a:	b2db      	uxtb	r3, r3
 8017a3c:	2b02      	cmp	r3, #2
 8017a3e:	dc02      	bgt.n	8017a46 <USBD_GetConfig+0x2e>
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	dc03      	bgt.n	8017a4c <USBD_GetConfig+0x34>
 8017a44:	e015      	b.n	8017a72 <USBD_GetConfig+0x5a>
 8017a46:	2b03      	cmp	r3, #3
 8017a48:	d00b      	beq.n	8017a62 <USBD_GetConfig+0x4a>
 8017a4a:	e012      	b.n	8017a72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	2200      	movs	r2, #0
 8017a50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	3308      	adds	r3, #8
 8017a56:	2201      	movs	r2, #1
 8017a58:	4619      	mov	r1, r3
 8017a5a:	6878      	ldr	r0, [r7, #4]
 8017a5c:	f000 f927 	bl	8017cae <USBD_CtlSendData>
        break;
 8017a60:	e00c      	b.n	8017a7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	3304      	adds	r3, #4
 8017a66:	2201      	movs	r2, #1
 8017a68:	4619      	mov	r1, r3
 8017a6a:	6878      	ldr	r0, [r7, #4]
 8017a6c:	f000 f91f 	bl	8017cae <USBD_CtlSendData>
        break;
 8017a70:	e004      	b.n	8017a7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017a72:	6839      	ldr	r1, [r7, #0]
 8017a74:	6878      	ldr	r0, [r7, #4]
 8017a76:	f000 f8a9 	bl	8017bcc <USBD_CtlError>
        break;
 8017a7a:	bf00      	nop
}
 8017a7c:	bf00      	nop
 8017a7e:	3708      	adds	r7, #8
 8017a80:	46bd      	mov	sp, r7
 8017a82:	bd80      	pop	{r7, pc}

08017a84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b082      	sub	sp, #8
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	6078      	str	r0, [r7, #4]
 8017a8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017a94:	b2db      	uxtb	r3, r3
 8017a96:	3b01      	subs	r3, #1
 8017a98:	2b02      	cmp	r3, #2
 8017a9a:	d81e      	bhi.n	8017ada <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017a9c:	683b      	ldr	r3, [r7, #0]
 8017a9e:	88db      	ldrh	r3, [r3, #6]
 8017aa0:	2b02      	cmp	r3, #2
 8017aa2:	d004      	beq.n	8017aae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017aa4:	6839      	ldr	r1, [r7, #0]
 8017aa6:	6878      	ldr	r0, [r7, #4]
 8017aa8:	f000 f890 	bl	8017bcc <USBD_CtlError>
        break;
 8017aac:	e01a      	b.n	8017ae4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	2201      	movs	r2, #1
 8017ab2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d005      	beq.n	8017aca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	68db      	ldr	r3, [r3, #12]
 8017ac2:	f043 0202 	orr.w	r2, r3, #2
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	330c      	adds	r3, #12
 8017ace:	2202      	movs	r2, #2
 8017ad0:	4619      	mov	r1, r3
 8017ad2:	6878      	ldr	r0, [r7, #4]
 8017ad4:	f000 f8eb 	bl	8017cae <USBD_CtlSendData>
      break;
 8017ad8:	e004      	b.n	8017ae4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017ada:	6839      	ldr	r1, [r7, #0]
 8017adc:	6878      	ldr	r0, [r7, #4]
 8017ade:	f000 f875 	bl	8017bcc <USBD_CtlError>
      break;
 8017ae2:	bf00      	nop
  }
}
 8017ae4:	bf00      	nop
 8017ae6:	3708      	adds	r7, #8
 8017ae8:	46bd      	mov	sp, r7
 8017aea:	bd80      	pop	{r7, pc}

08017aec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b082      	sub	sp, #8
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	6078      	str	r0, [r7, #4]
 8017af4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017af6:	683b      	ldr	r3, [r7, #0]
 8017af8:	885b      	ldrh	r3, [r3, #2]
 8017afa:	2b01      	cmp	r3, #1
 8017afc:	d106      	bne.n	8017b0c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	2201      	movs	r2, #1
 8017b02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f000 f92b 	bl	8017d62 <USBD_CtlSendStatus>
  }
}
 8017b0c:	bf00      	nop
 8017b0e:	3708      	adds	r7, #8
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}

08017b14 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b082      	sub	sp, #8
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	6078      	str	r0, [r7, #4]
 8017b1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017b24:	b2db      	uxtb	r3, r3
 8017b26:	3b01      	subs	r3, #1
 8017b28:	2b02      	cmp	r3, #2
 8017b2a:	d80b      	bhi.n	8017b44 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017b2c:	683b      	ldr	r3, [r7, #0]
 8017b2e:	885b      	ldrh	r3, [r3, #2]
 8017b30:	2b01      	cmp	r3, #1
 8017b32:	d10c      	bne.n	8017b4e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	2200      	movs	r2, #0
 8017b38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017b3c:	6878      	ldr	r0, [r7, #4]
 8017b3e:	f000 f910 	bl	8017d62 <USBD_CtlSendStatus>
      }
      break;
 8017b42:	e004      	b.n	8017b4e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017b44:	6839      	ldr	r1, [r7, #0]
 8017b46:	6878      	ldr	r0, [r7, #4]
 8017b48:	f000 f840 	bl	8017bcc <USBD_CtlError>
      break;
 8017b4c:	e000      	b.n	8017b50 <USBD_ClrFeature+0x3c>
      break;
 8017b4e:	bf00      	nop
  }
}
 8017b50:	bf00      	nop
 8017b52:	3708      	adds	r7, #8
 8017b54:	46bd      	mov	sp, r7
 8017b56:	bd80      	pop	{r7, pc}

08017b58 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017b58:	b580      	push	{r7, lr}
 8017b5a:	b084      	sub	sp, #16
 8017b5c:	af00      	add	r7, sp, #0
 8017b5e:	6078      	str	r0, [r7, #4]
 8017b60:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017b62:	683b      	ldr	r3, [r7, #0]
 8017b64:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	781a      	ldrb	r2, [r3, #0]
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	3301      	adds	r3, #1
 8017b72:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	781a      	ldrb	r2, [r3, #0]
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	3301      	adds	r3, #1
 8017b80:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017b82:	68f8      	ldr	r0, [r7, #12]
 8017b84:	f7ff fabb 	bl	80170fe <SWAPBYTE>
 8017b88:	4603      	mov	r3, r0
 8017b8a:	461a      	mov	r2, r3
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	3301      	adds	r3, #1
 8017b94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	3301      	adds	r3, #1
 8017b9a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017b9c:	68f8      	ldr	r0, [r7, #12]
 8017b9e:	f7ff faae 	bl	80170fe <SWAPBYTE>
 8017ba2:	4603      	mov	r3, r0
 8017ba4:	461a      	mov	r2, r3
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	3301      	adds	r3, #1
 8017bae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	3301      	adds	r3, #1
 8017bb4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017bb6:	68f8      	ldr	r0, [r7, #12]
 8017bb8:	f7ff faa1 	bl	80170fe <SWAPBYTE>
 8017bbc:	4603      	mov	r3, r0
 8017bbe:	461a      	mov	r2, r3
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	80da      	strh	r2, [r3, #6]
}
 8017bc4:	bf00      	nop
 8017bc6:	3710      	adds	r7, #16
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	bd80      	pop	{r7, pc}

08017bcc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b082      	sub	sp, #8
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
 8017bd4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017bd6:	2180      	movs	r1, #128	; 0x80
 8017bd8:	6878      	ldr	r0, [r7, #4]
 8017bda:	f004 fc73 	bl	801c4c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017bde:	2100      	movs	r1, #0
 8017be0:	6878      	ldr	r0, [r7, #4]
 8017be2:	f004 fc6f 	bl	801c4c4 <USBD_LL_StallEP>
}
 8017be6:	bf00      	nop
 8017be8:	3708      	adds	r7, #8
 8017bea:	46bd      	mov	sp, r7
 8017bec:	bd80      	pop	{r7, pc}

08017bee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017bee:	b580      	push	{r7, lr}
 8017bf0:	b086      	sub	sp, #24
 8017bf2:	af00      	add	r7, sp, #0
 8017bf4:	60f8      	str	r0, [r7, #12]
 8017bf6:	60b9      	str	r1, [r7, #8]
 8017bf8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d036      	beq.n	8017c72 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017c08:	6938      	ldr	r0, [r7, #16]
 8017c0a:	f000 f836 	bl	8017c7a <USBD_GetLen>
 8017c0e:	4603      	mov	r3, r0
 8017c10:	3301      	adds	r3, #1
 8017c12:	b29b      	uxth	r3, r3
 8017c14:	005b      	lsls	r3, r3, #1
 8017c16:	b29a      	uxth	r2, r3
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017c1c:	7dfb      	ldrb	r3, [r7, #23]
 8017c1e:	68ba      	ldr	r2, [r7, #8]
 8017c20:	4413      	add	r3, r2
 8017c22:	687a      	ldr	r2, [r7, #4]
 8017c24:	7812      	ldrb	r2, [r2, #0]
 8017c26:	701a      	strb	r2, [r3, #0]
  idx++;
 8017c28:	7dfb      	ldrb	r3, [r7, #23]
 8017c2a:	3301      	adds	r3, #1
 8017c2c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017c2e:	7dfb      	ldrb	r3, [r7, #23]
 8017c30:	68ba      	ldr	r2, [r7, #8]
 8017c32:	4413      	add	r3, r2
 8017c34:	2203      	movs	r2, #3
 8017c36:	701a      	strb	r2, [r3, #0]
  idx++;
 8017c38:	7dfb      	ldrb	r3, [r7, #23]
 8017c3a:	3301      	adds	r3, #1
 8017c3c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017c3e:	e013      	b.n	8017c68 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017c40:	7dfb      	ldrb	r3, [r7, #23]
 8017c42:	68ba      	ldr	r2, [r7, #8]
 8017c44:	4413      	add	r3, r2
 8017c46:	693a      	ldr	r2, [r7, #16]
 8017c48:	7812      	ldrb	r2, [r2, #0]
 8017c4a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017c4c:	693b      	ldr	r3, [r7, #16]
 8017c4e:	3301      	adds	r3, #1
 8017c50:	613b      	str	r3, [r7, #16]
    idx++;
 8017c52:	7dfb      	ldrb	r3, [r7, #23]
 8017c54:	3301      	adds	r3, #1
 8017c56:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017c58:	7dfb      	ldrb	r3, [r7, #23]
 8017c5a:	68ba      	ldr	r2, [r7, #8]
 8017c5c:	4413      	add	r3, r2
 8017c5e:	2200      	movs	r2, #0
 8017c60:	701a      	strb	r2, [r3, #0]
    idx++;
 8017c62:	7dfb      	ldrb	r3, [r7, #23]
 8017c64:	3301      	adds	r3, #1
 8017c66:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017c68:	693b      	ldr	r3, [r7, #16]
 8017c6a:	781b      	ldrb	r3, [r3, #0]
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d1e7      	bne.n	8017c40 <USBD_GetString+0x52>
 8017c70:	e000      	b.n	8017c74 <USBD_GetString+0x86>
    return;
 8017c72:	bf00      	nop
  }
}
 8017c74:	3718      	adds	r7, #24
 8017c76:	46bd      	mov	sp, r7
 8017c78:	bd80      	pop	{r7, pc}

08017c7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017c7a:	b480      	push	{r7}
 8017c7c:	b085      	sub	sp, #20
 8017c7e:	af00      	add	r7, sp, #0
 8017c80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017c82:	2300      	movs	r3, #0
 8017c84:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017c8a:	e005      	b.n	8017c98 <USBD_GetLen+0x1e>
  {
    len++;
 8017c8c:	7bfb      	ldrb	r3, [r7, #15]
 8017c8e:	3301      	adds	r3, #1
 8017c90:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017c92:	68bb      	ldr	r3, [r7, #8]
 8017c94:	3301      	adds	r3, #1
 8017c96:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017c98:	68bb      	ldr	r3, [r7, #8]
 8017c9a:	781b      	ldrb	r3, [r3, #0]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d1f5      	bne.n	8017c8c <USBD_GetLen+0x12>
  }

  return len;
 8017ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	3714      	adds	r7, #20
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cac:	4770      	bx	lr

08017cae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017cae:	b580      	push	{r7, lr}
 8017cb0:	b084      	sub	sp, #16
 8017cb2:	af00      	add	r7, sp, #0
 8017cb4:	60f8      	str	r0, [r7, #12]
 8017cb6:	60b9      	str	r1, [r7, #8]
 8017cb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	2202      	movs	r2, #2
 8017cbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	687a      	ldr	r2, [r7, #4]
 8017cc6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	687a      	ldr	r2, [r7, #4]
 8017ccc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	68ba      	ldr	r2, [r7, #8]
 8017cd2:	2100      	movs	r1, #0
 8017cd4:	68f8      	ldr	r0, [r7, #12]
 8017cd6:	f004 fc7e 	bl	801c5d6 <USBD_LL_Transmit>

  return USBD_OK;
 8017cda:	2300      	movs	r3, #0
}
 8017cdc:	4618      	mov	r0, r3
 8017cde:	3710      	adds	r7, #16
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	bd80      	pop	{r7, pc}

08017ce4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b084      	sub	sp, #16
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	60f8      	str	r0, [r7, #12]
 8017cec:	60b9      	str	r1, [r7, #8]
 8017cee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	68ba      	ldr	r2, [r7, #8]
 8017cf4:	2100      	movs	r1, #0
 8017cf6:	68f8      	ldr	r0, [r7, #12]
 8017cf8:	f004 fc6d 	bl	801c5d6 <USBD_LL_Transmit>

  return USBD_OK;
 8017cfc:	2300      	movs	r3, #0
}
 8017cfe:	4618      	mov	r0, r3
 8017d00:	3710      	adds	r7, #16
 8017d02:	46bd      	mov	sp, r7
 8017d04:	bd80      	pop	{r7, pc}

08017d06 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017d06:	b580      	push	{r7, lr}
 8017d08:	b084      	sub	sp, #16
 8017d0a:	af00      	add	r7, sp, #0
 8017d0c:	60f8      	str	r0, [r7, #12]
 8017d0e:	60b9      	str	r1, [r7, #8]
 8017d10:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	2203      	movs	r2, #3
 8017d16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	687a      	ldr	r2, [r7, #4]
 8017d1e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	687a      	ldr	r2, [r7, #4]
 8017d26:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	68ba      	ldr	r2, [r7, #8]
 8017d2e:	2100      	movs	r1, #0
 8017d30:	68f8      	ldr	r0, [r7, #12]
 8017d32:	f004 fc71 	bl	801c618 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017d36:	2300      	movs	r3, #0
}
 8017d38:	4618      	mov	r0, r3
 8017d3a:	3710      	adds	r7, #16
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}

08017d40 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b084      	sub	sp, #16
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	60f8      	str	r0, [r7, #12]
 8017d48:	60b9      	str	r1, [r7, #8]
 8017d4a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	68ba      	ldr	r2, [r7, #8]
 8017d50:	2100      	movs	r1, #0
 8017d52:	68f8      	ldr	r0, [r7, #12]
 8017d54:	f004 fc60 	bl	801c618 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017d58:	2300      	movs	r3, #0
}
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	3710      	adds	r7, #16
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	bd80      	pop	{r7, pc}

08017d62 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017d62:	b580      	push	{r7, lr}
 8017d64:	b082      	sub	sp, #8
 8017d66:	af00      	add	r7, sp, #0
 8017d68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	2204      	movs	r2, #4
 8017d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017d72:	2300      	movs	r3, #0
 8017d74:	2200      	movs	r2, #0
 8017d76:	2100      	movs	r1, #0
 8017d78:	6878      	ldr	r0, [r7, #4]
 8017d7a:	f004 fc2c 	bl	801c5d6 <USBD_LL_Transmit>

  return USBD_OK;
 8017d7e:	2300      	movs	r3, #0
}
 8017d80:	4618      	mov	r0, r3
 8017d82:	3708      	adds	r7, #8
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}

08017d88 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b082      	sub	sp, #8
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	2205      	movs	r2, #5
 8017d94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017d98:	2300      	movs	r3, #0
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	2100      	movs	r1, #0
 8017d9e:	6878      	ldr	r0, [r7, #4]
 8017da0:	f004 fc3a 	bl	801c618 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017da4:	2300      	movs	r3, #0
}
 8017da6:	4618      	mov	r0, r3
 8017da8:	3708      	adds	r7, #8
 8017daa:	46bd      	mov	sp, r7
 8017dac:	bd80      	pop	{r7, pc}
	...

08017db0 <__NVIC_SetPriority>:
{
 8017db0:	b480      	push	{r7}
 8017db2:	b083      	sub	sp, #12
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	4603      	mov	r3, r0
 8017db8:	6039      	str	r1, [r7, #0]
 8017dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	db0a      	blt.n	8017dda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017dc4:	683b      	ldr	r3, [r7, #0]
 8017dc6:	b2da      	uxtb	r2, r3
 8017dc8:	490c      	ldr	r1, [pc, #48]	; (8017dfc <__NVIC_SetPriority+0x4c>)
 8017dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017dce:	0112      	lsls	r2, r2, #4
 8017dd0:	b2d2      	uxtb	r2, r2
 8017dd2:	440b      	add	r3, r1
 8017dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017dd8:	e00a      	b.n	8017df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017dda:	683b      	ldr	r3, [r7, #0]
 8017ddc:	b2da      	uxtb	r2, r3
 8017dde:	4908      	ldr	r1, [pc, #32]	; (8017e00 <__NVIC_SetPriority+0x50>)
 8017de0:	79fb      	ldrb	r3, [r7, #7]
 8017de2:	f003 030f 	and.w	r3, r3, #15
 8017de6:	3b04      	subs	r3, #4
 8017de8:	0112      	lsls	r2, r2, #4
 8017dea:	b2d2      	uxtb	r2, r2
 8017dec:	440b      	add	r3, r1
 8017dee:	761a      	strb	r2, [r3, #24]
}
 8017df0:	bf00      	nop
 8017df2:	370c      	adds	r7, #12
 8017df4:	46bd      	mov	sp, r7
 8017df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfa:	4770      	bx	lr
 8017dfc:	e000e100 	.word	0xe000e100
 8017e00:	e000ed00 	.word	0xe000ed00

08017e04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8017e04:	b580      	push	{r7, lr}
 8017e06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8017e08:	4b05      	ldr	r3, [pc, #20]	; (8017e20 <SysTick_Handler+0x1c>)
 8017e0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8017e0c:	f002 fd30 	bl	801a870 <xTaskGetSchedulerState>
 8017e10:	4603      	mov	r3, r0
 8017e12:	2b01      	cmp	r3, #1
 8017e14:	d001      	beq.n	8017e1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8017e16:	f003 fc4f 	bl	801b6b8 <xPortSysTickHandler>
  }
}
 8017e1a:	bf00      	nop
 8017e1c:	bd80      	pop	{r7, pc}
 8017e1e:	bf00      	nop
 8017e20:	e000e010 	.word	0xe000e010

08017e24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8017e24:	b580      	push	{r7, lr}
 8017e26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8017e28:	2100      	movs	r1, #0
 8017e2a:	f06f 0004 	mvn.w	r0, #4
 8017e2e:	f7ff ffbf 	bl	8017db0 <__NVIC_SetPriority>
#endif
}
 8017e32:	bf00      	nop
 8017e34:	bd80      	pop	{r7, pc}
	...

08017e38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8017e38:	b480      	push	{r7}
 8017e3a:	b083      	sub	sp, #12
 8017e3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017e3e:	f3ef 8305 	mrs	r3, IPSR
 8017e42:	603b      	str	r3, [r7, #0]
  return(result);
 8017e44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d003      	beq.n	8017e52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8017e4a:	f06f 0305 	mvn.w	r3, #5
 8017e4e:	607b      	str	r3, [r7, #4]
 8017e50:	e00c      	b.n	8017e6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8017e52:	4b0a      	ldr	r3, [pc, #40]	; (8017e7c <osKernelInitialize+0x44>)
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d105      	bne.n	8017e66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8017e5a:	4b08      	ldr	r3, [pc, #32]	; (8017e7c <osKernelInitialize+0x44>)
 8017e5c:	2201      	movs	r2, #1
 8017e5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017e60:	2300      	movs	r3, #0
 8017e62:	607b      	str	r3, [r7, #4]
 8017e64:	e002      	b.n	8017e6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8017e66:	f04f 33ff 	mov.w	r3, #4294967295
 8017e6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017e6c:	687b      	ldr	r3, [r7, #4]
}
 8017e6e:	4618      	mov	r0, r3
 8017e70:	370c      	adds	r7, #12
 8017e72:	46bd      	mov	sp, r7
 8017e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e78:	4770      	bx	lr
 8017e7a:	bf00      	nop
 8017e7c:	20000654 	.word	0x20000654

08017e80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b082      	sub	sp, #8
 8017e84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017e86:	f3ef 8305 	mrs	r3, IPSR
 8017e8a:	603b      	str	r3, [r7, #0]
  return(result);
 8017e8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d003      	beq.n	8017e9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8017e92:	f06f 0305 	mvn.w	r3, #5
 8017e96:	607b      	str	r3, [r7, #4]
 8017e98:	e010      	b.n	8017ebc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8017e9a:	4b0b      	ldr	r3, [pc, #44]	; (8017ec8 <osKernelStart+0x48>)
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	2b01      	cmp	r3, #1
 8017ea0:	d109      	bne.n	8017eb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8017ea2:	f7ff ffbf 	bl	8017e24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8017ea6:	4b08      	ldr	r3, [pc, #32]	; (8017ec8 <osKernelStart+0x48>)
 8017ea8:	2202      	movs	r2, #2
 8017eaa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017eac:	f001 ffd8 	bl	8019e60 <vTaskStartScheduler>
      stat = osOK;
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	607b      	str	r3, [r7, #4]
 8017eb4:	e002      	b.n	8017ebc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8017eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8017eba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017ebc:	687b      	ldr	r3, [r7, #4]
}
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	3708      	adds	r7, #8
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	bd80      	pop	{r7, pc}
 8017ec6:	bf00      	nop
 8017ec8:	20000654 	.word	0x20000654

08017ecc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b082      	sub	sp, #8
 8017ed0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017ed2:	f3ef 8305 	mrs	r3, IPSR
 8017ed6:	603b      	str	r3, [r7, #0]
  return(result);
 8017ed8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d003      	beq.n	8017ee6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8017ede:	f002 f8e1 	bl	801a0a4 <xTaskGetTickCountFromISR>
 8017ee2:	6078      	str	r0, [r7, #4]
 8017ee4:	e002      	b.n	8017eec <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8017ee6:	f002 f8cd 	bl	801a084 <xTaskGetTickCount>
 8017eea:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8017eec:	687b      	ldr	r3, [r7, #4]
}
 8017eee:	4618      	mov	r0, r3
 8017ef0:	3708      	adds	r7, #8
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	bd80      	pop	{r7, pc}

08017ef6 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8017ef6:	b480      	push	{r7}
 8017ef8:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8017efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8017efe:	4618      	mov	r0, r3
 8017f00:	46bd      	mov	sp, r7
 8017f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f06:	4770      	bx	lr

08017f08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b08e      	sub	sp, #56	; 0x38
 8017f0c:	af04      	add	r7, sp, #16
 8017f0e:	60f8      	str	r0, [r7, #12]
 8017f10:	60b9      	str	r1, [r7, #8]
 8017f12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8017f14:	2300      	movs	r3, #0
 8017f16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017f18:	f3ef 8305 	mrs	r3, IPSR
 8017f1c:	617b      	str	r3, [r7, #20]
  return(result);
 8017f1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d17e      	bne.n	8018022 <osThreadNew+0x11a>
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d07b      	beq.n	8018022 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8017f2a:	2380      	movs	r3, #128	; 0x80
 8017f2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8017f2e:	2318      	movs	r3, #24
 8017f30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8017f32:	2300      	movs	r3, #0
 8017f34:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8017f36:	f04f 33ff 	mov.w	r3, #4294967295
 8017f3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d045      	beq.n	8017fce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d002      	beq.n	8017f50 <osThreadNew+0x48>
        name = attr->name;
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	699b      	ldr	r3, [r3, #24]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d002      	beq.n	8017f5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	699b      	ldr	r3, [r3, #24]
 8017f5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017f5e:	69fb      	ldr	r3, [r7, #28]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d008      	beq.n	8017f76 <osThreadNew+0x6e>
 8017f64:	69fb      	ldr	r3, [r7, #28]
 8017f66:	2b38      	cmp	r3, #56	; 0x38
 8017f68:	d805      	bhi.n	8017f76 <osThreadNew+0x6e>
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	685b      	ldr	r3, [r3, #4]
 8017f6e:	f003 0301 	and.w	r3, r3, #1
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d001      	beq.n	8017f7a <osThreadNew+0x72>
        return (NULL);
 8017f76:	2300      	movs	r3, #0
 8017f78:	e054      	b.n	8018024 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	695b      	ldr	r3, [r3, #20]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d003      	beq.n	8017f8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	695b      	ldr	r3, [r3, #20]
 8017f86:	089b      	lsrs	r3, r3, #2
 8017f88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	689b      	ldr	r3, [r3, #8]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d00e      	beq.n	8017fb0 <osThreadNew+0xa8>
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	68db      	ldr	r3, [r3, #12]
 8017f96:	2b5b      	cmp	r3, #91	; 0x5b
 8017f98:	d90a      	bls.n	8017fb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d006      	beq.n	8017fb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	695b      	ldr	r3, [r3, #20]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d002      	beq.n	8017fb0 <osThreadNew+0xa8>
        mem = 1;
 8017faa:	2301      	movs	r3, #1
 8017fac:	61bb      	str	r3, [r7, #24]
 8017fae:	e010      	b.n	8017fd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	689b      	ldr	r3, [r3, #8]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d10c      	bne.n	8017fd2 <osThreadNew+0xca>
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	68db      	ldr	r3, [r3, #12]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d108      	bne.n	8017fd2 <osThreadNew+0xca>
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	691b      	ldr	r3, [r3, #16]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d104      	bne.n	8017fd2 <osThreadNew+0xca>
          mem = 0;
 8017fc8:	2300      	movs	r3, #0
 8017fca:	61bb      	str	r3, [r7, #24]
 8017fcc:	e001      	b.n	8017fd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8017fce:	2300      	movs	r3, #0
 8017fd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017fd2:	69bb      	ldr	r3, [r7, #24]
 8017fd4:	2b01      	cmp	r3, #1
 8017fd6:	d110      	bne.n	8017ffa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017fdc:	687a      	ldr	r2, [r7, #4]
 8017fde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017fe0:	9202      	str	r2, [sp, #8]
 8017fe2:	9301      	str	r3, [sp, #4]
 8017fe4:	69fb      	ldr	r3, [r7, #28]
 8017fe6:	9300      	str	r3, [sp, #0]
 8017fe8:	68bb      	ldr	r3, [r7, #8]
 8017fea:	6a3a      	ldr	r2, [r7, #32]
 8017fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017fee:	68f8      	ldr	r0, [r7, #12]
 8017ff0:	f001 fce2 	bl	80199b8 <xTaskCreateStatic>
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	613b      	str	r3, [r7, #16]
 8017ff8:	e013      	b.n	8018022 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8017ffa:	69bb      	ldr	r3, [r7, #24]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d110      	bne.n	8018022 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8018000:	6a3b      	ldr	r3, [r7, #32]
 8018002:	b29a      	uxth	r2, r3
 8018004:	f107 0310 	add.w	r3, r7, #16
 8018008:	9301      	str	r3, [sp, #4]
 801800a:	69fb      	ldr	r3, [r7, #28]
 801800c:	9300      	str	r3, [sp, #0]
 801800e:	68bb      	ldr	r3, [r7, #8]
 8018010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018012:	68f8      	ldr	r0, [r7, #12]
 8018014:	f001 fd2d 	bl	8019a72 <xTaskCreate>
 8018018:	4603      	mov	r3, r0
 801801a:	2b01      	cmp	r3, #1
 801801c:	d001      	beq.n	8018022 <osThreadNew+0x11a>
            hTask = NULL;
 801801e:	2300      	movs	r3, #0
 8018020:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8018022:	693b      	ldr	r3, [r7, #16]
}
 8018024:	4618      	mov	r0, r3
 8018026:	3728      	adds	r7, #40	; 0x28
 8018028:	46bd      	mov	sp, r7
 801802a:	bd80      	pop	{r7, pc}

0801802c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801802c:	b580      	push	{r7, lr}
 801802e:	b084      	sub	sp, #16
 8018030:	af00      	add	r7, sp, #0
 8018032:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018034:	f3ef 8305 	mrs	r3, IPSR
 8018038:	60bb      	str	r3, [r7, #8]
  return(result);
 801803a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801803c:	2b00      	cmp	r3, #0
 801803e:	d003      	beq.n	8018048 <osDelay+0x1c>
    stat = osErrorISR;
 8018040:	f06f 0305 	mvn.w	r3, #5
 8018044:	60fb      	str	r3, [r7, #12]
 8018046:	e007      	b.n	8018058 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8018048:	2300      	movs	r3, #0
 801804a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d002      	beq.n	8018058 <osDelay+0x2c>
      vTaskDelay(ticks);
 8018052:	6878      	ldr	r0, [r7, #4]
 8018054:	f001 fed0 	bl	8019df8 <vTaskDelay>
    }
  }

  return (stat);
 8018058:	68fb      	ldr	r3, [r7, #12]
}
 801805a:	4618      	mov	r0, r3
 801805c:	3710      	adds	r7, #16
 801805e:	46bd      	mov	sp, r7
 8018060:	bd80      	pop	{r7, pc}

08018062 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8018062:	b580      	push	{r7, lr}
 8018064:	b086      	sub	sp, #24
 8018066:	af00      	add	r7, sp, #0
 8018068:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801806a:	f3ef 8305 	mrs	r3, IPSR
 801806e:	60fb      	str	r3, [r7, #12]
  return(result);
 8018070:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8018072:	2b00      	cmp	r3, #0
 8018074:	d003      	beq.n	801807e <osDelayUntil+0x1c>
    stat = osErrorISR;
 8018076:	f06f 0305 	mvn.w	r3, #5
 801807a:	617b      	str	r3, [r7, #20]
 801807c:	e019      	b.n	80180b2 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 801807e:	2300      	movs	r3, #0
 8018080:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8018082:	f001 ffff 	bl	801a084 <xTaskGetTickCount>
 8018086:	4603      	mov	r3, r0
 8018088:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 801808a:	68bb      	ldr	r3, [r7, #8]
 801808c:	687a      	ldr	r2, [r7, #4]
 801808e:	1ad3      	subs	r3, r2, r3
 8018090:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8018092:	693b      	ldr	r3, [r7, #16]
 8018094:	2b00      	cmp	r3, #0
 8018096:	d009      	beq.n	80180ac <osDelayUntil+0x4a>
 8018098:	693b      	ldr	r3, [r7, #16]
 801809a:	2b00      	cmp	r3, #0
 801809c:	db06      	blt.n	80180ac <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 801809e:	f107 0308 	add.w	r3, r7, #8
 80180a2:	6939      	ldr	r1, [r7, #16]
 80180a4:	4618      	mov	r0, r3
 80180a6:	f001 fe29 	bl	8019cfc <vTaskDelayUntil>
 80180aa:	e002      	b.n	80180b2 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80180ac:	f06f 0303 	mvn.w	r3, #3
 80180b0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80180b2:	697b      	ldr	r3, [r7, #20]
}
 80180b4:	4618      	mov	r0, r3
 80180b6:	3718      	adds	r7, #24
 80180b8:	46bd      	mov	sp, r7
 80180ba:	bd80      	pop	{r7, pc}

080180bc <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80180bc:	b580      	push	{r7, lr}
 80180be:	b086      	sub	sp, #24
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80180c4:	2300      	movs	r3, #0
 80180c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80180c8:	f3ef 8305 	mrs	r3, IPSR
 80180cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80180ce:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d12d      	bne.n	8018130 <osEventFlagsNew+0x74>
    mem = -1;
 80180d4:	f04f 33ff 	mov.w	r3, #4294967295
 80180d8:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d015      	beq.n	801810c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	689b      	ldr	r3, [r3, #8]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d006      	beq.n	80180f6 <osEventFlagsNew+0x3a>
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	68db      	ldr	r3, [r3, #12]
 80180ec:	2b1f      	cmp	r3, #31
 80180ee:	d902      	bls.n	80180f6 <osEventFlagsNew+0x3a>
        mem = 1;
 80180f0:	2301      	movs	r3, #1
 80180f2:	613b      	str	r3, [r7, #16]
 80180f4:	e00c      	b.n	8018110 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	689b      	ldr	r3, [r3, #8]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d108      	bne.n	8018110 <osEventFlagsNew+0x54>
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	68db      	ldr	r3, [r3, #12]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d104      	bne.n	8018110 <osEventFlagsNew+0x54>
          mem = 0;
 8018106:	2300      	movs	r3, #0
 8018108:	613b      	str	r3, [r7, #16]
 801810a:	e001      	b.n	8018110 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801810c:	2300      	movs	r3, #0
 801810e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8018110:	693b      	ldr	r3, [r7, #16]
 8018112:	2b01      	cmp	r3, #1
 8018114:	d106      	bne.n	8018124 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	689b      	ldr	r3, [r3, #8]
 801811a:	4618      	mov	r0, r3
 801811c:	f000 fa2c 	bl	8018578 <xEventGroupCreateStatic>
 8018120:	6178      	str	r0, [r7, #20]
 8018122:	e005      	b.n	8018130 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8018124:	693b      	ldr	r3, [r7, #16]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d102      	bne.n	8018130 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801812a:	f000 fa5c 	bl	80185e6 <xEventGroupCreate>
 801812e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8018130:	697b      	ldr	r3, [r7, #20]
}
 8018132:	4618      	mov	r0, r3
 8018134:	3718      	adds	r7, #24
 8018136:	46bd      	mov	sp, r7
 8018138:	bd80      	pop	{r7, pc}
	...

0801813c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 801813c:	b580      	push	{r7, lr}
 801813e:	b086      	sub	sp, #24
 8018140:	af00      	add	r7, sp, #0
 8018142:	6078      	str	r0, [r7, #4]
 8018144:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801814a:	693b      	ldr	r3, [r7, #16]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d004      	beq.n	801815a <osEventFlagsSet+0x1e>
 8018150:	683b      	ldr	r3, [r7, #0]
 8018152:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018156:	2b00      	cmp	r3, #0
 8018158:	d003      	beq.n	8018162 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801815a:	f06f 0303 	mvn.w	r3, #3
 801815e:	617b      	str	r3, [r7, #20]
 8018160:	e028      	b.n	80181b4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018162:	f3ef 8305 	mrs	r3, IPSR
 8018166:	60fb      	str	r3, [r7, #12]
  return(result);
 8018168:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801816a:	2b00      	cmp	r3, #0
 801816c:	d01d      	beq.n	80181aa <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801816e:	2300      	movs	r3, #0
 8018170:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8018172:	f107 0308 	add.w	r3, r7, #8
 8018176:	461a      	mov	r2, r3
 8018178:	6839      	ldr	r1, [r7, #0]
 801817a:	6938      	ldr	r0, [r7, #16]
 801817c:	f000 fc54 	bl	8018a28 <xEventGroupSetBitsFromISR>
 8018180:	4603      	mov	r3, r0
 8018182:	2b00      	cmp	r3, #0
 8018184:	d103      	bne.n	801818e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8018186:	f06f 0302 	mvn.w	r3, #2
 801818a:	617b      	str	r3, [r7, #20]
 801818c:	e012      	b.n	80181b4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801818e:	683b      	ldr	r3, [r7, #0]
 8018190:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8018192:	68bb      	ldr	r3, [r7, #8]
 8018194:	2b00      	cmp	r3, #0
 8018196:	d00d      	beq.n	80181b4 <osEventFlagsSet+0x78>
 8018198:	4b09      	ldr	r3, [pc, #36]	; (80181c0 <osEventFlagsSet+0x84>)
 801819a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801819e:	601a      	str	r2, [r3, #0]
 80181a0:	f3bf 8f4f 	dsb	sy
 80181a4:	f3bf 8f6f 	isb	sy
 80181a8:	e004      	b.n	80181b4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80181aa:	6839      	ldr	r1, [r7, #0]
 80181ac:	6938      	ldr	r0, [r7, #16]
 80181ae:	f000 fb73 	bl	8018898 <xEventGroupSetBits>
 80181b2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80181b4:	697b      	ldr	r3, [r7, #20]
}
 80181b6:	4618      	mov	r0, r3
 80181b8:	3718      	adds	r7, #24
 80181ba:	46bd      	mov	sp, r7
 80181bc:	bd80      	pop	{r7, pc}
 80181be:	bf00      	nop
 80181c0:	e000ed04 	.word	0xe000ed04

080181c4 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b086      	sub	sp, #24
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
 80181cc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80181d2:	693b      	ldr	r3, [r7, #16]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d004      	beq.n	80181e2 <osEventFlagsClear+0x1e>
 80181d8:	683b      	ldr	r3, [r7, #0]
 80181da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d003      	beq.n	80181ea <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80181e2:	f06f 0303 	mvn.w	r3, #3
 80181e6:	617b      	str	r3, [r7, #20]
 80181e8:	e019      	b.n	801821e <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80181ea:	f3ef 8305 	mrs	r3, IPSR
 80181ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80181f0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d00e      	beq.n	8018214 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80181f6:	6938      	ldr	r0, [r7, #16]
 80181f8:	f000 fb2a 	bl	8018850 <xEventGroupGetBitsFromISR>
 80181fc:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80181fe:	6839      	ldr	r1, [r7, #0]
 8018200:	6938      	ldr	r0, [r7, #16]
 8018202:	f000 fb11 	bl	8018828 <xEventGroupClearBitsFromISR>
 8018206:	4603      	mov	r3, r0
 8018208:	2b00      	cmp	r3, #0
 801820a:	d108      	bne.n	801821e <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 801820c:	f06f 0302 	mvn.w	r3, #2
 8018210:	617b      	str	r3, [r7, #20]
 8018212:	e004      	b.n	801821e <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8018214:	6839      	ldr	r1, [r7, #0]
 8018216:	6938      	ldr	r0, [r7, #16]
 8018218:	f000 face 	bl	80187b8 <xEventGroupClearBits>
 801821c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801821e:	697b      	ldr	r3, [r7, #20]
}
 8018220:	4618      	mov	r0, r3
 8018222:	3718      	adds	r7, #24
 8018224:	46bd      	mov	sp, r7
 8018226:	bd80      	pop	{r7, pc}

08018228 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8018228:	b580      	push	{r7, lr}
 801822a:	b08c      	sub	sp, #48	; 0x30
 801822c:	af02      	add	r7, sp, #8
 801822e:	60f8      	str	r0, [r7, #12]
 8018230:	60b9      	str	r1, [r7, #8]
 8018232:	607a      	str	r2, [r7, #4]
 8018234:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8018236:	68fb      	ldr	r3, [r7, #12]
 8018238:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801823a:	69bb      	ldr	r3, [r7, #24]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d004      	beq.n	801824a <osEventFlagsWait+0x22>
 8018240:	68bb      	ldr	r3, [r7, #8]
 8018242:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018246:	2b00      	cmp	r3, #0
 8018248:	d003      	beq.n	8018252 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 801824a:	f06f 0303 	mvn.w	r3, #3
 801824e:	61fb      	str	r3, [r7, #28]
 8018250:	e04b      	b.n	80182ea <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018252:	f3ef 8305 	mrs	r3, IPSR
 8018256:	617b      	str	r3, [r7, #20]
  return(result);
 8018258:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801825a:	2b00      	cmp	r3, #0
 801825c:	d003      	beq.n	8018266 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801825e:	f06f 0305 	mvn.w	r3, #5
 8018262:	61fb      	str	r3, [r7, #28]
 8018264:	e041      	b.n	80182ea <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	f003 0301 	and.w	r3, r3, #1
 801826c:	2b00      	cmp	r3, #0
 801826e:	d002      	beq.n	8018276 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8018270:	2301      	movs	r3, #1
 8018272:	627b      	str	r3, [r7, #36]	; 0x24
 8018274:	e001      	b.n	801827a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8018276:	2300      	movs	r3, #0
 8018278:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	f003 0302 	and.w	r3, r3, #2
 8018280:	2b00      	cmp	r3, #0
 8018282:	d002      	beq.n	801828a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8018284:	2300      	movs	r3, #0
 8018286:	623b      	str	r3, [r7, #32]
 8018288:	e001      	b.n	801828e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 801828a:	2301      	movs	r3, #1
 801828c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801828e:	683b      	ldr	r3, [r7, #0]
 8018290:	9300      	str	r3, [sp, #0]
 8018292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018294:	6a3a      	ldr	r2, [r7, #32]
 8018296:	68b9      	ldr	r1, [r7, #8]
 8018298:	69b8      	ldr	r0, [r7, #24]
 801829a:	f000 f9bf 	bl	801861c <xEventGroupWaitBits>
 801829e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	f003 0301 	and.w	r3, r3, #1
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d010      	beq.n	80182cc <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80182aa:	68ba      	ldr	r2, [r7, #8]
 80182ac:	69fb      	ldr	r3, [r7, #28]
 80182ae:	4013      	ands	r3, r2
 80182b0:	68ba      	ldr	r2, [r7, #8]
 80182b2:	429a      	cmp	r2, r3
 80182b4:	d019      	beq.n	80182ea <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80182b6:	683b      	ldr	r3, [r7, #0]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d003      	beq.n	80182c4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80182bc:	f06f 0301 	mvn.w	r3, #1
 80182c0:	61fb      	str	r3, [r7, #28]
 80182c2:	e012      	b.n	80182ea <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80182c4:	f06f 0302 	mvn.w	r3, #2
 80182c8:	61fb      	str	r3, [r7, #28]
 80182ca:	e00e      	b.n	80182ea <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80182cc:	68ba      	ldr	r2, [r7, #8]
 80182ce:	69fb      	ldr	r3, [r7, #28]
 80182d0:	4013      	ands	r3, r2
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d109      	bne.n	80182ea <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80182d6:	683b      	ldr	r3, [r7, #0]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d003      	beq.n	80182e4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80182dc:	f06f 0301 	mvn.w	r3, #1
 80182e0:	61fb      	str	r3, [r7, #28]
 80182e2:	e002      	b.n	80182ea <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80182e4:	f06f 0302 	mvn.w	r3, #2
 80182e8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80182ea:	69fb      	ldr	r3, [r7, #28]
}
 80182ec:	4618      	mov	r0, r3
 80182ee:	3728      	adds	r7, #40	; 0x28
 80182f0:	46bd      	mov	sp, r7
 80182f2:	bd80      	pop	{r7, pc}

080182f4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80182f4:	b580      	push	{r7, lr}
 80182f6:	b088      	sub	sp, #32
 80182f8:	af00      	add	r7, sp, #0
 80182fa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80182fc:	2300      	movs	r3, #0
 80182fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018300:	f3ef 8305 	mrs	r3, IPSR
 8018304:	60bb      	str	r3, [r7, #8]
  return(result);
 8018306:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8018308:	2b00      	cmp	r3, #0
 801830a:	d174      	bne.n	80183f6 <osMutexNew+0x102>
    if (attr != NULL) {
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d003      	beq.n	801831a <osMutexNew+0x26>
      type = attr->attr_bits;
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	685b      	ldr	r3, [r3, #4]
 8018316:	61bb      	str	r3, [r7, #24]
 8018318:	e001      	b.n	801831e <osMutexNew+0x2a>
    } else {
      type = 0U;
 801831a:	2300      	movs	r3, #0
 801831c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801831e:	69bb      	ldr	r3, [r7, #24]
 8018320:	f003 0301 	and.w	r3, r3, #1
 8018324:	2b00      	cmp	r3, #0
 8018326:	d002      	beq.n	801832e <osMutexNew+0x3a>
      rmtx = 1U;
 8018328:	2301      	movs	r3, #1
 801832a:	617b      	str	r3, [r7, #20]
 801832c:	e001      	b.n	8018332 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 801832e:	2300      	movs	r3, #0
 8018330:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8018332:	69bb      	ldr	r3, [r7, #24]
 8018334:	f003 0308 	and.w	r3, r3, #8
 8018338:	2b00      	cmp	r3, #0
 801833a:	d15c      	bne.n	80183f6 <osMutexNew+0x102>
      mem = -1;
 801833c:	f04f 33ff 	mov.w	r3, #4294967295
 8018340:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d015      	beq.n	8018374 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	689b      	ldr	r3, [r3, #8]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d006      	beq.n	801835e <osMutexNew+0x6a>
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	68db      	ldr	r3, [r3, #12]
 8018354:	2b4f      	cmp	r3, #79	; 0x4f
 8018356:	d902      	bls.n	801835e <osMutexNew+0x6a>
          mem = 1;
 8018358:	2301      	movs	r3, #1
 801835a:	613b      	str	r3, [r7, #16]
 801835c:	e00c      	b.n	8018378 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	689b      	ldr	r3, [r3, #8]
 8018362:	2b00      	cmp	r3, #0
 8018364:	d108      	bne.n	8018378 <osMutexNew+0x84>
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	68db      	ldr	r3, [r3, #12]
 801836a:	2b00      	cmp	r3, #0
 801836c:	d104      	bne.n	8018378 <osMutexNew+0x84>
            mem = 0;
 801836e:	2300      	movs	r3, #0
 8018370:	613b      	str	r3, [r7, #16]
 8018372:	e001      	b.n	8018378 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8018374:	2300      	movs	r3, #0
 8018376:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8018378:	693b      	ldr	r3, [r7, #16]
 801837a:	2b01      	cmp	r3, #1
 801837c:	d112      	bne.n	80183a4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 801837e:	697b      	ldr	r3, [r7, #20]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d007      	beq.n	8018394 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	689b      	ldr	r3, [r3, #8]
 8018388:	4619      	mov	r1, r3
 801838a:	2004      	movs	r0, #4
 801838c:	f000 fd83 	bl	8018e96 <xQueueCreateMutexStatic>
 8018390:	61f8      	str	r0, [r7, #28]
 8018392:	e016      	b.n	80183c2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	689b      	ldr	r3, [r3, #8]
 8018398:	4619      	mov	r1, r3
 801839a:	2001      	movs	r0, #1
 801839c:	f000 fd7b 	bl	8018e96 <xQueueCreateMutexStatic>
 80183a0:	61f8      	str	r0, [r7, #28]
 80183a2:	e00e      	b.n	80183c2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80183a4:	693b      	ldr	r3, [r7, #16]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d10b      	bne.n	80183c2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80183aa:	697b      	ldr	r3, [r7, #20]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d004      	beq.n	80183ba <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80183b0:	2004      	movs	r0, #4
 80183b2:	f000 fd58 	bl	8018e66 <xQueueCreateMutex>
 80183b6:	61f8      	str	r0, [r7, #28]
 80183b8:	e003      	b.n	80183c2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80183ba:	2001      	movs	r0, #1
 80183bc:	f000 fd53 	bl	8018e66 <xQueueCreateMutex>
 80183c0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80183c2:	69fb      	ldr	r3, [r7, #28]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d00c      	beq.n	80183e2 <osMutexNew+0xee>
        if (attr != NULL) {
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d003      	beq.n	80183d6 <osMutexNew+0xe2>
          name = attr->name;
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	60fb      	str	r3, [r7, #12]
 80183d4:	e001      	b.n	80183da <osMutexNew+0xe6>
        } else {
          name = NULL;
 80183d6:	2300      	movs	r3, #0
 80183d8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80183da:	68f9      	ldr	r1, [r7, #12]
 80183dc:	69f8      	ldr	r0, [r7, #28]
 80183de:	f001 fa8d 	bl	80198fc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80183e2:	69fb      	ldr	r3, [r7, #28]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d006      	beq.n	80183f6 <osMutexNew+0x102>
 80183e8:	697b      	ldr	r3, [r7, #20]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d003      	beq.n	80183f6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80183ee:	69fb      	ldr	r3, [r7, #28]
 80183f0:	f043 0301 	orr.w	r3, r3, #1
 80183f4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80183f6:	69fb      	ldr	r3, [r7, #28]
}
 80183f8:	4618      	mov	r0, r3
 80183fa:	3720      	adds	r7, #32
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bd80      	pop	{r7, pc}

08018400 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8018400:	b580      	push	{r7, lr}
 8018402:	b086      	sub	sp, #24
 8018404:	af00      	add	r7, sp, #0
 8018406:	6078      	str	r0, [r7, #4]
 8018408:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	f023 0301 	bic.w	r3, r3, #1
 8018410:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	f003 0301 	and.w	r3, r3, #1
 8018418:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801841a:	2300      	movs	r3, #0
 801841c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801841e:	f3ef 8305 	mrs	r3, IPSR
 8018422:	60bb      	str	r3, [r7, #8]
  return(result);
 8018424:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8018426:	2b00      	cmp	r3, #0
 8018428:	d003      	beq.n	8018432 <osMutexAcquire+0x32>
    stat = osErrorISR;
 801842a:	f06f 0305 	mvn.w	r3, #5
 801842e:	617b      	str	r3, [r7, #20]
 8018430:	e02c      	b.n	801848c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8018432:	693b      	ldr	r3, [r7, #16]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d103      	bne.n	8018440 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8018438:	f06f 0303 	mvn.w	r3, #3
 801843c:	617b      	str	r3, [r7, #20]
 801843e:	e025      	b.n	801848c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d011      	beq.n	801846a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8018446:	6839      	ldr	r1, [r7, #0]
 8018448:	6938      	ldr	r0, [r7, #16]
 801844a:	f000 fd73 	bl	8018f34 <xQueueTakeMutexRecursive>
 801844e:	4603      	mov	r3, r0
 8018450:	2b01      	cmp	r3, #1
 8018452:	d01b      	beq.n	801848c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8018454:	683b      	ldr	r3, [r7, #0]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d003      	beq.n	8018462 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 801845a:	f06f 0301 	mvn.w	r3, #1
 801845e:	617b      	str	r3, [r7, #20]
 8018460:	e014      	b.n	801848c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8018462:	f06f 0302 	mvn.w	r3, #2
 8018466:	617b      	str	r3, [r7, #20]
 8018468:	e010      	b.n	801848c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801846a:	6839      	ldr	r1, [r7, #0]
 801846c:	6938      	ldr	r0, [r7, #16]
 801846e:	f001 f811 	bl	8019494 <xQueueSemaphoreTake>
 8018472:	4603      	mov	r3, r0
 8018474:	2b01      	cmp	r3, #1
 8018476:	d009      	beq.n	801848c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8018478:	683b      	ldr	r3, [r7, #0]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d003      	beq.n	8018486 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 801847e:	f06f 0301 	mvn.w	r3, #1
 8018482:	617b      	str	r3, [r7, #20]
 8018484:	e002      	b.n	801848c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8018486:	f06f 0302 	mvn.w	r3, #2
 801848a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 801848c:	697b      	ldr	r3, [r7, #20]
}
 801848e:	4618      	mov	r0, r3
 8018490:	3718      	adds	r7, #24
 8018492:	46bd      	mov	sp, r7
 8018494:	bd80      	pop	{r7, pc}

08018496 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8018496:	b580      	push	{r7, lr}
 8018498:	b086      	sub	sp, #24
 801849a:	af00      	add	r7, sp, #0
 801849c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	f023 0301 	bic.w	r3, r3, #1
 80184a4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	f003 0301 	and.w	r3, r3, #1
 80184ac:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80184ae:	2300      	movs	r3, #0
 80184b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80184b2:	f3ef 8305 	mrs	r3, IPSR
 80184b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80184b8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d003      	beq.n	80184c6 <osMutexRelease+0x30>
    stat = osErrorISR;
 80184be:	f06f 0305 	mvn.w	r3, #5
 80184c2:	617b      	str	r3, [r7, #20]
 80184c4:	e01f      	b.n	8018506 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80184c6:	693b      	ldr	r3, [r7, #16]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d103      	bne.n	80184d4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80184cc:	f06f 0303 	mvn.w	r3, #3
 80184d0:	617b      	str	r3, [r7, #20]
 80184d2:	e018      	b.n	8018506 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d009      	beq.n	80184ee <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80184da:	6938      	ldr	r0, [r7, #16]
 80184dc:	f000 fcf6 	bl	8018ecc <xQueueGiveMutexRecursive>
 80184e0:	4603      	mov	r3, r0
 80184e2:	2b01      	cmp	r3, #1
 80184e4:	d00f      	beq.n	8018506 <osMutexRelease+0x70>
        stat = osErrorResource;
 80184e6:	f06f 0302 	mvn.w	r3, #2
 80184ea:	617b      	str	r3, [r7, #20]
 80184ec:	e00b      	b.n	8018506 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80184ee:	2300      	movs	r3, #0
 80184f0:	2200      	movs	r2, #0
 80184f2:	2100      	movs	r1, #0
 80184f4:	6938      	ldr	r0, [r7, #16]
 80184f6:	f000 fd53 	bl	8018fa0 <xQueueGenericSend>
 80184fa:	4603      	mov	r3, r0
 80184fc:	2b01      	cmp	r3, #1
 80184fe:	d002      	beq.n	8018506 <osMutexRelease+0x70>
        stat = osErrorResource;
 8018500:	f06f 0302 	mvn.w	r3, #2
 8018504:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8018506:	697b      	ldr	r3, [r7, #20]
}
 8018508:	4618      	mov	r0, r3
 801850a:	3718      	adds	r7, #24
 801850c:	46bd      	mov	sp, r7
 801850e:	bd80      	pop	{r7, pc}

08018510 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8018510:	b480      	push	{r7}
 8018512:	b085      	sub	sp, #20
 8018514:	af00      	add	r7, sp, #0
 8018516:	60f8      	str	r0, [r7, #12]
 8018518:	60b9      	str	r1, [r7, #8]
 801851a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	4a07      	ldr	r2, [pc, #28]	; (801853c <vApplicationGetIdleTaskMemory+0x2c>)
 8018520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8018522:	68bb      	ldr	r3, [r7, #8]
 8018524:	4a06      	ldr	r2, [pc, #24]	; (8018540 <vApplicationGetIdleTaskMemory+0x30>)
 8018526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	2280      	movs	r2, #128	; 0x80
 801852c:	601a      	str	r2, [r3, #0]
}
 801852e:	bf00      	nop
 8018530:	3714      	adds	r7, #20
 8018532:	46bd      	mov	sp, r7
 8018534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018538:	4770      	bx	lr
 801853a:	bf00      	nop
 801853c:	20000658 	.word	0x20000658
 8018540:	200006b4 	.word	0x200006b4

08018544 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8018544:	b480      	push	{r7}
 8018546:	b085      	sub	sp, #20
 8018548:	af00      	add	r7, sp, #0
 801854a:	60f8      	str	r0, [r7, #12]
 801854c:	60b9      	str	r1, [r7, #8]
 801854e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	4a07      	ldr	r2, [pc, #28]	; (8018570 <vApplicationGetTimerTaskMemory+0x2c>)
 8018554:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8018556:	68bb      	ldr	r3, [r7, #8]
 8018558:	4a06      	ldr	r2, [pc, #24]	; (8018574 <vApplicationGetTimerTaskMemory+0x30>)
 801855a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018562:	601a      	str	r2, [r3, #0]
}
 8018564:	bf00      	nop
 8018566:	3714      	adds	r7, #20
 8018568:	46bd      	mov	sp, r7
 801856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801856e:	4770      	bx	lr
 8018570:	200008b4 	.word	0x200008b4
 8018574:	20000910 	.word	0x20000910

08018578 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8018578:	b580      	push	{r7, lr}
 801857a:	b086      	sub	sp, #24
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d10a      	bne.n	801859c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8018586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801858a:	f383 8811 	msr	BASEPRI, r3
 801858e:	f3bf 8f6f 	isb	sy
 8018592:	f3bf 8f4f 	dsb	sy
 8018596:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8018598:	bf00      	nop
 801859a:	e7fe      	b.n	801859a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 801859c:	2320      	movs	r3, #32
 801859e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80185a0:	68bb      	ldr	r3, [r7, #8]
 80185a2:	2b20      	cmp	r3, #32
 80185a4:	d00a      	beq.n	80185bc <xEventGroupCreateStatic+0x44>
	__asm volatile
 80185a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185aa:	f383 8811 	msr	BASEPRI, r3
 80185ae:	f3bf 8f6f 	isb	sy
 80185b2:	f3bf 8f4f 	dsb	sy
 80185b6:	60fb      	str	r3, [r7, #12]
}
 80185b8:	bf00      	nop
 80185ba:	e7fe      	b.n	80185ba <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80185c0:	697b      	ldr	r3, [r7, #20]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d00a      	beq.n	80185dc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80185c6:	697b      	ldr	r3, [r7, #20]
 80185c8:	2200      	movs	r2, #0
 80185ca:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80185cc:	697b      	ldr	r3, [r7, #20]
 80185ce:	3304      	adds	r3, #4
 80185d0:	4618      	mov	r0, r3
 80185d2:	f000 fa3d 	bl	8018a50 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80185d6:	697b      	ldr	r3, [r7, #20]
 80185d8:	2201      	movs	r2, #1
 80185da:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80185dc:	697b      	ldr	r3, [r7, #20]
	}
 80185de:	4618      	mov	r0, r3
 80185e0:	3718      	adds	r7, #24
 80185e2:	46bd      	mov	sp, r7
 80185e4:	bd80      	pop	{r7, pc}

080185e6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80185e6:	b580      	push	{r7, lr}
 80185e8:	b082      	sub	sp, #8
 80185ea:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80185ec:	2020      	movs	r0, #32
 80185ee:	f003 f8f3 	bl	801b7d8 <pvPortMalloc>
 80185f2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d00a      	beq.n	8018610 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	2200      	movs	r2, #0
 80185fe:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	3304      	adds	r3, #4
 8018604:	4618      	mov	r0, r3
 8018606:	f000 fa23 	bl	8018a50 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	2200      	movs	r2, #0
 801860e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8018610:	687b      	ldr	r3, [r7, #4]
	}
 8018612:	4618      	mov	r0, r3
 8018614:	3708      	adds	r7, #8
 8018616:	46bd      	mov	sp, r7
 8018618:	bd80      	pop	{r7, pc}
	...

0801861c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801861c:	b580      	push	{r7, lr}
 801861e:	b090      	sub	sp, #64	; 0x40
 8018620:	af00      	add	r7, sp, #0
 8018622:	60f8      	str	r0, [r7, #12]
 8018624:	60b9      	str	r1, [r7, #8]
 8018626:	607a      	str	r2, [r7, #4]
 8018628:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801862e:	2300      	movs	r3, #0
 8018630:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8018632:	2300      	movs	r3, #0
 8018634:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	2b00      	cmp	r3, #0
 801863a:	d10a      	bne.n	8018652 <xEventGroupWaitBits+0x36>
	__asm volatile
 801863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018640:	f383 8811 	msr	BASEPRI, r3
 8018644:	f3bf 8f6f 	isb	sy
 8018648:	f3bf 8f4f 	dsb	sy
 801864c:	623b      	str	r3, [r7, #32]
}
 801864e:	bf00      	nop
 8018650:	e7fe      	b.n	8018650 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8018652:	68bb      	ldr	r3, [r7, #8]
 8018654:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018658:	2b00      	cmp	r3, #0
 801865a:	d00a      	beq.n	8018672 <xEventGroupWaitBits+0x56>
	__asm volatile
 801865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018660:	f383 8811 	msr	BASEPRI, r3
 8018664:	f3bf 8f6f 	isb	sy
 8018668:	f3bf 8f4f 	dsb	sy
 801866c:	61fb      	str	r3, [r7, #28]
}
 801866e:	bf00      	nop
 8018670:	e7fe      	b.n	8018670 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8018672:	68bb      	ldr	r3, [r7, #8]
 8018674:	2b00      	cmp	r3, #0
 8018676:	d10a      	bne.n	801868e <xEventGroupWaitBits+0x72>
	__asm volatile
 8018678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801867c:	f383 8811 	msr	BASEPRI, r3
 8018680:	f3bf 8f6f 	isb	sy
 8018684:	f3bf 8f4f 	dsb	sy
 8018688:	61bb      	str	r3, [r7, #24]
}
 801868a:	bf00      	nop
 801868c:	e7fe      	b.n	801868c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801868e:	f002 f8ef 	bl	801a870 <xTaskGetSchedulerState>
 8018692:	4603      	mov	r3, r0
 8018694:	2b00      	cmp	r3, #0
 8018696:	d102      	bne.n	801869e <xEventGroupWaitBits+0x82>
 8018698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801869a:	2b00      	cmp	r3, #0
 801869c:	d101      	bne.n	80186a2 <xEventGroupWaitBits+0x86>
 801869e:	2301      	movs	r3, #1
 80186a0:	e000      	b.n	80186a4 <xEventGroupWaitBits+0x88>
 80186a2:	2300      	movs	r3, #0
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d10a      	bne.n	80186be <xEventGroupWaitBits+0xa2>
	__asm volatile
 80186a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186ac:	f383 8811 	msr	BASEPRI, r3
 80186b0:	f3bf 8f6f 	isb	sy
 80186b4:	f3bf 8f4f 	dsb	sy
 80186b8:	617b      	str	r3, [r7, #20]
}
 80186ba:	bf00      	nop
 80186bc:	e7fe      	b.n	80186bc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80186be:	f001 fc35 	bl	8019f2c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80186c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80186c8:	683a      	ldr	r2, [r7, #0]
 80186ca:	68b9      	ldr	r1, [r7, #8]
 80186cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80186ce:	f000 f988 	bl	80189e2 <prvTestWaitCondition>
 80186d2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80186d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d00e      	beq.n	80186f8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80186da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80186de:	2300      	movs	r3, #0
 80186e0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d028      	beq.n	801873a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80186e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186ea:	681a      	ldr	r2, [r3, #0]
 80186ec:	68bb      	ldr	r3, [r7, #8]
 80186ee:	43db      	mvns	r3, r3
 80186f0:	401a      	ands	r2, r3
 80186f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186f4:	601a      	str	r2, [r3, #0]
 80186f6:	e020      	b.n	801873a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80186f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d104      	bne.n	8018708 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80186fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018700:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8018702:	2301      	movs	r3, #1
 8018704:	633b      	str	r3, [r7, #48]	; 0x30
 8018706:	e018      	b.n	801873a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d003      	beq.n	8018716 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018710:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018714:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8018716:	683b      	ldr	r3, [r7, #0]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d003      	beq.n	8018724 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801871c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801871e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8018722:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8018724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018726:	1d18      	adds	r0, r3, #4
 8018728:	68ba      	ldr	r2, [r7, #8]
 801872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801872c:	4313      	orrs	r3, r2
 801872e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018730:	4619      	mov	r1, r3
 8018732:	f001 fe05 	bl	801a340 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8018736:	2300      	movs	r3, #0
 8018738:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801873a:	f001 fc05 	bl	8019f48 <xTaskResumeAll>
 801873e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8018740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018742:	2b00      	cmp	r3, #0
 8018744:	d031      	beq.n	80187aa <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8018746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018748:	2b00      	cmp	r3, #0
 801874a:	d107      	bne.n	801875c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801874c:	4b19      	ldr	r3, [pc, #100]	; (80187b4 <xEventGroupWaitBits+0x198>)
 801874e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018752:	601a      	str	r2, [r3, #0]
 8018754:	f3bf 8f4f 	dsb	sy
 8018758:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801875c:	f002 f9fe 	bl	801ab5c <uxTaskResetEventItemValue>
 8018760:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8018762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018768:	2b00      	cmp	r3, #0
 801876a:	d11a      	bne.n	80187a2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 801876c:	f002 ff12 	bl	801b594 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8018770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8018776:	683a      	ldr	r2, [r7, #0]
 8018778:	68b9      	ldr	r1, [r7, #8]
 801877a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801877c:	f000 f931 	bl	80189e2 <prvTestWaitCondition>
 8018780:	4603      	mov	r3, r0
 8018782:	2b00      	cmp	r3, #0
 8018784:	d009      	beq.n	801879a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	2b00      	cmp	r3, #0
 801878a:	d006      	beq.n	801879a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801878c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801878e:	681a      	ldr	r2, [r3, #0]
 8018790:	68bb      	ldr	r3, [r7, #8]
 8018792:	43db      	mvns	r3, r3
 8018794:	401a      	ands	r2, r3
 8018796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018798:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801879a:	2301      	movs	r3, #1
 801879c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801879e:	f002 ff29 	bl	801b5f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80187a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80187a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80187a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80187aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80187ac:	4618      	mov	r0, r3
 80187ae:	3740      	adds	r7, #64	; 0x40
 80187b0:	46bd      	mov	sp, r7
 80187b2:	bd80      	pop	{r7, pc}
 80187b4:	e000ed04 	.word	0xe000ed04

080187b8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b086      	sub	sp, #24
 80187bc:	af00      	add	r7, sp, #0
 80187be:	6078      	str	r0, [r7, #4]
 80187c0:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d10a      	bne.n	80187e2 <xEventGroupClearBits+0x2a>
	__asm volatile
 80187cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187d0:	f383 8811 	msr	BASEPRI, r3
 80187d4:	f3bf 8f6f 	isb	sy
 80187d8:	f3bf 8f4f 	dsb	sy
 80187dc:	60fb      	str	r3, [r7, #12]
}
 80187de:	bf00      	nop
 80187e0:	e7fe      	b.n	80187e0 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80187e2:	683b      	ldr	r3, [r7, #0]
 80187e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d00a      	beq.n	8018802 <xEventGroupClearBits+0x4a>
	__asm volatile
 80187ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187f0:	f383 8811 	msr	BASEPRI, r3
 80187f4:	f3bf 8f6f 	isb	sy
 80187f8:	f3bf 8f4f 	dsb	sy
 80187fc:	60bb      	str	r3, [r7, #8]
}
 80187fe:	bf00      	nop
 8018800:	e7fe      	b.n	8018800 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8018802:	f002 fec7 	bl	801b594 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8018806:	697b      	ldr	r3, [r7, #20]
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801880c:	697b      	ldr	r3, [r7, #20]
 801880e:	681a      	ldr	r2, [r3, #0]
 8018810:	683b      	ldr	r3, [r7, #0]
 8018812:	43db      	mvns	r3, r3
 8018814:	401a      	ands	r2, r3
 8018816:	697b      	ldr	r3, [r7, #20]
 8018818:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801881a:	f002 feeb 	bl	801b5f4 <vPortExitCritical>

	return uxReturn;
 801881e:	693b      	ldr	r3, [r7, #16]
}
 8018820:	4618      	mov	r0, r3
 8018822:	3718      	adds	r7, #24
 8018824:	46bd      	mov	sp, r7
 8018826:	bd80      	pop	{r7, pc}

08018828 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8018828:	b580      	push	{r7, lr}
 801882a:	b084      	sub	sp, #16
 801882c:	af00      	add	r7, sp, #0
 801882e:	6078      	str	r0, [r7, #4]
 8018830:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8018832:	2300      	movs	r3, #0
 8018834:	683a      	ldr	r2, [r7, #0]
 8018836:	6879      	ldr	r1, [r7, #4]
 8018838:	4804      	ldr	r0, [pc, #16]	; (801884c <xEventGroupClearBitsFromISR+0x24>)
 801883a:	f002 fd5d 	bl	801b2f8 <xTimerPendFunctionCallFromISR>
 801883e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8018840:	68fb      	ldr	r3, [r7, #12]
	}
 8018842:	4618      	mov	r0, r3
 8018844:	3710      	adds	r7, #16
 8018846:	46bd      	mov	sp, r7
 8018848:	bd80      	pop	{r7, pc}
 801884a:	bf00      	nop
 801884c:	080189c9 	.word	0x080189c9

08018850 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8018850:	b480      	push	{r7}
 8018852:	b089      	sub	sp, #36	; 0x24
 8018854:	af00      	add	r7, sp, #0
 8018856:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801885c:	f3ef 8211 	mrs	r2, BASEPRI
 8018860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018864:	f383 8811 	msr	BASEPRI, r3
 8018868:	f3bf 8f6f 	isb	sy
 801886c:	f3bf 8f4f 	dsb	sy
 8018870:	60fa      	str	r2, [r7, #12]
 8018872:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8018874:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018876:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8018878:	69fb      	ldr	r3, [r7, #28]
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	617b      	str	r3, [r7, #20]
 801887e:	69bb      	ldr	r3, [r7, #24]
 8018880:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018882:	693b      	ldr	r3, [r7, #16]
 8018884:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8018888:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 801888a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 801888c:	4618      	mov	r0, r3
 801888e:	3724      	adds	r7, #36	; 0x24
 8018890:	46bd      	mov	sp, r7
 8018892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018896:	4770      	bx	lr

08018898 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8018898:	b580      	push	{r7, lr}
 801889a:	b08e      	sub	sp, #56	; 0x38
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
 80188a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80188a2:	2300      	movs	r3, #0
 80188a4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80188aa:	2300      	movs	r3, #0
 80188ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d10a      	bne.n	80188ca <xEventGroupSetBits+0x32>
	__asm volatile
 80188b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188b8:	f383 8811 	msr	BASEPRI, r3
 80188bc:	f3bf 8f6f 	isb	sy
 80188c0:	f3bf 8f4f 	dsb	sy
 80188c4:	613b      	str	r3, [r7, #16]
}
 80188c6:	bf00      	nop
 80188c8:	e7fe      	b.n	80188c8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80188ca:	683b      	ldr	r3, [r7, #0]
 80188cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d00a      	beq.n	80188ea <xEventGroupSetBits+0x52>
	__asm volatile
 80188d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188d8:	f383 8811 	msr	BASEPRI, r3
 80188dc:	f3bf 8f6f 	isb	sy
 80188e0:	f3bf 8f4f 	dsb	sy
 80188e4:	60fb      	str	r3, [r7, #12]
}
 80188e6:	bf00      	nop
 80188e8:	e7fe      	b.n	80188e8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80188ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188ec:	3304      	adds	r3, #4
 80188ee:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80188f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f2:	3308      	adds	r3, #8
 80188f4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80188f6:	f001 fb19 	bl	8019f2c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80188fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188fc:	68db      	ldr	r3, [r3, #12]
 80188fe:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8018900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018902:	681a      	ldr	r2, [r3, #0]
 8018904:	683b      	ldr	r3, [r7, #0]
 8018906:	431a      	orrs	r2, r3
 8018908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801890a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 801890c:	e03c      	b.n	8018988 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801890e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018910:	685b      	ldr	r3, [r3, #4]
 8018912:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8018914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801891a:	2300      	movs	r3, #0
 801891c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801891e:	69bb      	ldr	r3, [r7, #24]
 8018920:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018924:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8018926:	69bb      	ldr	r3, [r7, #24]
 8018928:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801892c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801892e:	697b      	ldr	r3, [r7, #20]
 8018930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8018934:	2b00      	cmp	r3, #0
 8018936:	d108      	bne.n	801894a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8018938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801893a:	681a      	ldr	r2, [r3, #0]
 801893c:	69bb      	ldr	r3, [r7, #24]
 801893e:	4013      	ands	r3, r2
 8018940:	2b00      	cmp	r3, #0
 8018942:	d00b      	beq.n	801895c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8018944:	2301      	movs	r3, #1
 8018946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018948:	e008      	b.n	801895c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801894c:	681a      	ldr	r2, [r3, #0]
 801894e:	69bb      	ldr	r3, [r7, #24]
 8018950:	4013      	ands	r3, r2
 8018952:	69ba      	ldr	r2, [r7, #24]
 8018954:	429a      	cmp	r2, r3
 8018956:	d101      	bne.n	801895c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8018958:	2301      	movs	r3, #1
 801895a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 801895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801895e:	2b00      	cmp	r3, #0
 8018960:	d010      	beq.n	8018984 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8018962:	697b      	ldr	r3, [r7, #20]
 8018964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018968:	2b00      	cmp	r3, #0
 801896a:	d003      	beq.n	8018974 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 801896c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801896e:	69bb      	ldr	r3, [r7, #24]
 8018970:	4313      	orrs	r3, r2
 8018972:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8018974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801897c:	4619      	mov	r1, r3
 801897e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018980:	f001 fdaa 	bl	801a4d8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8018984:	69fb      	ldr	r3, [r7, #28]
 8018986:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8018988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801898a:	6a3b      	ldr	r3, [r7, #32]
 801898c:	429a      	cmp	r2, r3
 801898e:	d1be      	bne.n	801890e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8018990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018992:	681a      	ldr	r2, [r3, #0]
 8018994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018996:	43db      	mvns	r3, r3
 8018998:	401a      	ands	r2, r3
 801899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801899c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801899e:	f001 fad3 	bl	8019f48 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80189a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189a4:	681b      	ldr	r3, [r3, #0]
}
 80189a6:	4618      	mov	r0, r3
 80189a8:	3738      	adds	r7, #56	; 0x38
 80189aa:	46bd      	mov	sp, r7
 80189ac:	bd80      	pop	{r7, pc}

080189ae <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80189ae:	b580      	push	{r7, lr}
 80189b0:	b082      	sub	sp, #8
 80189b2:	af00      	add	r7, sp, #0
 80189b4:	6078      	str	r0, [r7, #4]
 80189b6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80189b8:	6839      	ldr	r1, [r7, #0]
 80189ba:	6878      	ldr	r0, [r7, #4]
 80189bc:	f7ff ff6c 	bl	8018898 <xEventGroupSetBits>
}
 80189c0:	bf00      	nop
 80189c2:	3708      	adds	r7, #8
 80189c4:	46bd      	mov	sp, r7
 80189c6:	bd80      	pop	{r7, pc}

080189c8 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b082      	sub	sp, #8
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
 80189d0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80189d2:	6839      	ldr	r1, [r7, #0]
 80189d4:	6878      	ldr	r0, [r7, #4]
 80189d6:	f7ff feef 	bl	80187b8 <xEventGroupClearBits>
}
 80189da:	bf00      	nop
 80189dc:	3708      	adds	r7, #8
 80189de:	46bd      	mov	sp, r7
 80189e0:	bd80      	pop	{r7, pc}

080189e2 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80189e2:	b480      	push	{r7}
 80189e4:	b087      	sub	sp, #28
 80189e6:	af00      	add	r7, sp, #0
 80189e8:	60f8      	str	r0, [r7, #12]
 80189ea:	60b9      	str	r1, [r7, #8]
 80189ec:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80189ee:	2300      	movs	r3, #0
 80189f0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d107      	bne.n	8018a08 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80189f8:	68fa      	ldr	r2, [r7, #12]
 80189fa:	68bb      	ldr	r3, [r7, #8]
 80189fc:	4013      	ands	r3, r2
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d00a      	beq.n	8018a18 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8018a02:	2301      	movs	r3, #1
 8018a04:	617b      	str	r3, [r7, #20]
 8018a06:	e007      	b.n	8018a18 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8018a08:	68fa      	ldr	r2, [r7, #12]
 8018a0a:	68bb      	ldr	r3, [r7, #8]
 8018a0c:	4013      	ands	r3, r2
 8018a0e:	68ba      	ldr	r2, [r7, #8]
 8018a10:	429a      	cmp	r2, r3
 8018a12:	d101      	bne.n	8018a18 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8018a14:	2301      	movs	r3, #1
 8018a16:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8018a18:	697b      	ldr	r3, [r7, #20]
}
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	371c      	adds	r7, #28
 8018a1e:	46bd      	mov	sp, r7
 8018a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a24:	4770      	bx	lr
	...

08018a28 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8018a28:	b580      	push	{r7, lr}
 8018a2a:	b086      	sub	sp, #24
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	60f8      	str	r0, [r7, #12]
 8018a30:	60b9      	str	r1, [r7, #8]
 8018a32:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	68ba      	ldr	r2, [r7, #8]
 8018a38:	68f9      	ldr	r1, [r7, #12]
 8018a3a:	4804      	ldr	r0, [pc, #16]	; (8018a4c <xEventGroupSetBitsFromISR+0x24>)
 8018a3c:	f002 fc5c 	bl	801b2f8 <xTimerPendFunctionCallFromISR>
 8018a40:	6178      	str	r0, [r7, #20]

		return xReturn;
 8018a42:	697b      	ldr	r3, [r7, #20]
	}
 8018a44:	4618      	mov	r0, r3
 8018a46:	3718      	adds	r7, #24
 8018a48:	46bd      	mov	sp, r7
 8018a4a:	bd80      	pop	{r7, pc}
 8018a4c:	080189af 	.word	0x080189af

08018a50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018a50:	b480      	push	{r7}
 8018a52:	b083      	sub	sp, #12
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	f103 0208 	add.w	r2, r3, #8
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	f04f 32ff 	mov.w	r2, #4294967295
 8018a68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	f103 0208 	add.w	r2, r3, #8
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	f103 0208 	add.w	r2, r3, #8
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	2200      	movs	r2, #0
 8018a82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018a84:	bf00      	nop
 8018a86:	370c      	adds	r7, #12
 8018a88:	46bd      	mov	sp, r7
 8018a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a8e:	4770      	bx	lr

08018a90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8018a90:	b480      	push	{r7}
 8018a92:	b083      	sub	sp, #12
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	2200      	movs	r2, #0
 8018a9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018a9e:	bf00      	nop
 8018aa0:	370c      	adds	r7, #12
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa8:	4770      	bx	lr

08018aaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018aaa:	b480      	push	{r7}
 8018aac:	b085      	sub	sp, #20
 8018aae:	af00      	add	r7, sp, #0
 8018ab0:	6078      	str	r0, [r7, #4]
 8018ab2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	685b      	ldr	r3, [r3, #4]
 8018ab8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018aba:	683b      	ldr	r3, [r7, #0]
 8018abc:	68fa      	ldr	r2, [r7, #12]
 8018abe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	689a      	ldr	r2, [r3, #8]
 8018ac4:	683b      	ldr	r3, [r7, #0]
 8018ac6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	689b      	ldr	r3, [r3, #8]
 8018acc:	683a      	ldr	r2, [r7, #0]
 8018ace:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	683a      	ldr	r2, [r7, #0]
 8018ad4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018ad6:	683b      	ldr	r3, [r7, #0]
 8018ad8:	687a      	ldr	r2, [r7, #4]
 8018ada:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	1c5a      	adds	r2, r3, #1
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	601a      	str	r2, [r3, #0]
}
 8018ae6:	bf00      	nop
 8018ae8:	3714      	adds	r7, #20
 8018aea:	46bd      	mov	sp, r7
 8018aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af0:	4770      	bx	lr

08018af2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018af2:	b480      	push	{r7}
 8018af4:	b085      	sub	sp, #20
 8018af6:	af00      	add	r7, sp, #0
 8018af8:	6078      	str	r0, [r7, #4]
 8018afa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018afc:	683b      	ldr	r3, [r7, #0]
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018b02:	68bb      	ldr	r3, [r7, #8]
 8018b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b08:	d103      	bne.n	8018b12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	691b      	ldr	r3, [r3, #16]
 8018b0e:	60fb      	str	r3, [r7, #12]
 8018b10:	e00c      	b.n	8018b2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	3308      	adds	r3, #8
 8018b16:	60fb      	str	r3, [r7, #12]
 8018b18:	e002      	b.n	8018b20 <vListInsert+0x2e>
 8018b1a:	68fb      	ldr	r3, [r7, #12]
 8018b1c:	685b      	ldr	r3, [r3, #4]
 8018b1e:	60fb      	str	r3, [r7, #12]
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	685b      	ldr	r3, [r3, #4]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	68ba      	ldr	r2, [r7, #8]
 8018b28:	429a      	cmp	r2, r3
 8018b2a:	d2f6      	bcs.n	8018b1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	685a      	ldr	r2, [r3, #4]
 8018b30:	683b      	ldr	r3, [r7, #0]
 8018b32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018b34:	683b      	ldr	r3, [r7, #0]
 8018b36:	685b      	ldr	r3, [r3, #4]
 8018b38:	683a      	ldr	r2, [r7, #0]
 8018b3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018b3c:	683b      	ldr	r3, [r7, #0]
 8018b3e:	68fa      	ldr	r2, [r7, #12]
 8018b40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	683a      	ldr	r2, [r7, #0]
 8018b46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018b48:	683b      	ldr	r3, [r7, #0]
 8018b4a:	687a      	ldr	r2, [r7, #4]
 8018b4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	1c5a      	adds	r2, r3, #1
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	601a      	str	r2, [r3, #0]
}
 8018b58:	bf00      	nop
 8018b5a:	3714      	adds	r7, #20
 8018b5c:	46bd      	mov	sp, r7
 8018b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b62:	4770      	bx	lr

08018b64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018b64:	b480      	push	{r7}
 8018b66:	b085      	sub	sp, #20
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	691b      	ldr	r3, [r3, #16]
 8018b70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	685b      	ldr	r3, [r3, #4]
 8018b76:	687a      	ldr	r2, [r7, #4]
 8018b78:	6892      	ldr	r2, [r2, #8]
 8018b7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	689b      	ldr	r3, [r3, #8]
 8018b80:	687a      	ldr	r2, [r7, #4]
 8018b82:	6852      	ldr	r2, [r2, #4]
 8018b84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	685b      	ldr	r3, [r3, #4]
 8018b8a:	687a      	ldr	r2, [r7, #4]
 8018b8c:	429a      	cmp	r2, r3
 8018b8e:	d103      	bne.n	8018b98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	689a      	ldr	r2, [r3, #8]
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	2200      	movs	r2, #0
 8018b9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	1e5a      	subs	r2, r3, #1
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	681b      	ldr	r3, [r3, #0]
}
 8018bac:	4618      	mov	r0, r3
 8018bae:	3714      	adds	r7, #20
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bb6:	4770      	bx	lr

08018bb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b084      	sub	sp, #16
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
 8018bc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d10a      	bne.n	8018be2 <xQueueGenericReset+0x2a>
	__asm volatile
 8018bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bd0:	f383 8811 	msr	BASEPRI, r3
 8018bd4:	f3bf 8f6f 	isb	sy
 8018bd8:	f3bf 8f4f 	dsb	sy
 8018bdc:	60bb      	str	r3, [r7, #8]
}
 8018bde:	bf00      	nop
 8018be0:	e7fe      	b.n	8018be0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8018be2:	f002 fcd7 	bl	801b594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	681a      	ldr	r2, [r3, #0]
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018bee:	68f9      	ldr	r1, [r7, #12]
 8018bf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018bf2:	fb01 f303 	mul.w	r3, r1, r3
 8018bf6:	441a      	add	r2, r3
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	2200      	movs	r2, #0
 8018c00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	681a      	ldr	r2, [r3, #0]
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	681a      	ldr	r2, [r3, #0]
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c12:	3b01      	subs	r3, #1
 8018c14:	68f9      	ldr	r1, [r7, #12]
 8018c16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018c18:	fb01 f303 	mul.w	r3, r1, r3
 8018c1c:	441a      	add	r2, r3
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018c22:	68fb      	ldr	r3, [r7, #12]
 8018c24:	22ff      	movs	r2, #255	; 0xff
 8018c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	22ff      	movs	r2, #255	; 0xff
 8018c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8018c32:	683b      	ldr	r3, [r7, #0]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d114      	bne.n	8018c62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	691b      	ldr	r3, [r3, #16]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d01a      	beq.n	8018c76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018c40:	68fb      	ldr	r3, [r7, #12]
 8018c42:	3310      	adds	r3, #16
 8018c44:	4618      	mov	r0, r3
 8018c46:	f001 fbe3 	bl	801a410 <xTaskRemoveFromEventList>
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d012      	beq.n	8018c76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018c50:	4b0c      	ldr	r3, [pc, #48]	; (8018c84 <xQueueGenericReset+0xcc>)
 8018c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c56:	601a      	str	r2, [r3, #0]
 8018c58:	f3bf 8f4f 	dsb	sy
 8018c5c:	f3bf 8f6f 	isb	sy
 8018c60:	e009      	b.n	8018c76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	3310      	adds	r3, #16
 8018c66:	4618      	mov	r0, r3
 8018c68:	f7ff fef2 	bl	8018a50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	3324      	adds	r3, #36	; 0x24
 8018c70:	4618      	mov	r0, r3
 8018c72:	f7ff feed 	bl	8018a50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8018c76:	f002 fcbd 	bl	801b5f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018c7a:	2301      	movs	r3, #1
}
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	3710      	adds	r7, #16
 8018c80:	46bd      	mov	sp, r7
 8018c82:	bd80      	pop	{r7, pc}
 8018c84:	e000ed04 	.word	0xe000ed04

08018c88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b08e      	sub	sp, #56	; 0x38
 8018c8c:	af02      	add	r7, sp, #8
 8018c8e:	60f8      	str	r0, [r7, #12]
 8018c90:	60b9      	str	r1, [r7, #8]
 8018c92:	607a      	str	r2, [r7, #4]
 8018c94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d10a      	bne.n	8018cb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8018c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ca0:	f383 8811 	msr	BASEPRI, r3
 8018ca4:	f3bf 8f6f 	isb	sy
 8018ca8:	f3bf 8f4f 	dsb	sy
 8018cac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8018cae:	bf00      	nop
 8018cb0:	e7fe      	b.n	8018cb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8018cb2:	683b      	ldr	r3, [r7, #0]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d10a      	bne.n	8018cce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8018cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cbc:	f383 8811 	msr	BASEPRI, r3
 8018cc0:	f3bf 8f6f 	isb	sy
 8018cc4:	f3bf 8f4f 	dsb	sy
 8018cc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018cca:	bf00      	nop
 8018ccc:	e7fe      	b.n	8018ccc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d002      	beq.n	8018cda <xQueueGenericCreateStatic+0x52>
 8018cd4:	68bb      	ldr	r3, [r7, #8]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d001      	beq.n	8018cde <xQueueGenericCreateStatic+0x56>
 8018cda:	2301      	movs	r3, #1
 8018cdc:	e000      	b.n	8018ce0 <xQueueGenericCreateStatic+0x58>
 8018cde:	2300      	movs	r3, #0
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d10a      	bne.n	8018cfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8018ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ce8:	f383 8811 	msr	BASEPRI, r3
 8018cec:	f3bf 8f6f 	isb	sy
 8018cf0:	f3bf 8f4f 	dsb	sy
 8018cf4:	623b      	str	r3, [r7, #32]
}
 8018cf6:	bf00      	nop
 8018cf8:	e7fe      	b.n	8018cf8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d102      	bne.n	8018d06 <xQueueGenericCreateStatic+0x7e>
 8018d00:	68bb      	ldr	r3, [r7, #8]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d101      	bne.n	8018d0a <xQueueGenericCreateStatic+0x82>
 8018d06:	2301      	movs	r3, #1
 8018d08:	e000      	b.n	8018d0c <xQueueGenericCreateStatic+0x84>
 8018d0a:	2300      	movs	r3, #0
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d10a      	bne.n	8018d26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8018d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d14:	f383 8811 	msr	BASEPRI, r3
 8018d18:	f3bf 8f6f 	isb	sy
 8018d1c:	f3bf 8f4f 	dsb	sy
 8018d20:	61fb      	str	r3, [r7, #28]
}
 8018d22:	bf00      	nop
 8018d24:	e7fe      	b.n	8018d24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018d26:	2350      	movs	r3, #80	; 0x50
 8018d28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018d2a:	697b      	ldr	r3, [r7, #20]
 8018d2c:	2b50      	cmp	r3, #80	; 0x50
 8018d2e:	d00a      	beq.n	8018d46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8018d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d34:	f383 8811 	msr	BASEPRI, r3
 8018d38:	f3bf 8f6f 	isb	sy
 8018d3c:	f3bf 8f4f 	dsb	sy
 8018d40:	61bb      	str	r3, [r7, #24]
}
 8018d42:	bf00      	nop
 8018d44:	e7fe      	b.n	8018d44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018d46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018d48:	683b      	ldr	r3, [r7, #0]
 8018d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8018d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d00d      	beq.n	8018d6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d54:	2201      	movs	r2, #1
 8018d56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018d5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8018d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d60:	9300      	str	r3, [sp, #0]
 8018d62:	4613      	mov	r3, r2
 8018d64:	687a      	ldr	r2, [r7, #4]
 8018d66:	68b9      	ldr	r1, [r7, #8]
 8018d68:	68f8      	ldr	r0, [r7, #12]
 8018d6a:	f000 f83f 	bl	8018dec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8018d70:	4618      	mov	r0, r3
 8018d72:	3730      	adds	r7, #48	; 0x30
 8018d74:	46bd      	mov	sp, r7
 8018d76:	bd80      	pop	{r7, pc}

08018d78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b08a      	sub	sp, #40	; 0x28
 8018d7c:	af02      	add	r7, sp, #8
 8018d7e:	60f8      	str	r0, [r7, #12]
 8018d80:	60b9      	str	r1, [r7, #8]
 8018d82:	4613      	mov	r3, r2
 8018d84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d10a      	bne.n	8018da2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8018d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d90:	f383 8811 	msr	BASEPRI, r3
 8018d94:	f3bf 8f6f 	isb	sy
 8018d98:	f3bf 8f4f 	dsb	sy
 8018d9c:	613b      	str	r3, [r7, #16]
}
 8018d9e:	bf00      	nop
 8018da0:	e7fe      	b.n	8018da0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	68ba      	ldr	r2, [r7, #8]
 8018da6:	fb02 f303 	mul.w	r3, r2, r3
 8018daa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018dac:	69fb      	ldr	r3, [r7, #28]
 8018dae:	3350      	adds	r3, #80	; 0x50
 8018db0:	4618      	mov	r0, r3
 8018db2:	f002 fd11 	bl	801b7d8 <pvPortMalloc>
 8018db6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8018db8:	69bb      	ldr	r3, [r7, #24]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d011      	beq.n	8018de2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8018dbe:	69bb      	ldr	r3, [r7, #24]
 8018dc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018dc2:	697b      	ldr	r3, [r7, #20]
 8018dc4:	3350      	adds	r3, #80	; 0x50
 8018dc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018dc8:	69bb      	ldr	r3, [r7, #24]
 8018dca:	2200      	movs	r2, #0
 8018dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018dd0:	79fa      	ldrb	r2, [r7, #7]
 8018dd2:	69bb      	ldr	r3, [r7, #24]
 8018dd4:	9300      	str	r3, [sp, #0]
 8018dd6:	4613      	mov	r3, r2
 8018dd8:	697a      	ldr	r2, [r7, #20]
 8018dda:	68b9      	ldr	r1, [r7, #8]
 8018ddc:	68f8      	ldr	r0, [r7, #12]
 8018dde:	f000 f805 	bl	8018dec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018de2:	69bb      	ldr	r3, [r7, #24]
	}
 8018de4:	4618      	mov	r0, r3
 8018de6:	3720      	adds	r7, #32
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd80      	pop	{r7, pc}

08018dec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	b084      	sub	sp, #16
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	60f8      	str	r0, [r7, #12]
 8018df4:	60b9      	str	r1, [r7, #8]
 8018df6:	607a      	str	r2, [r7, #4]
 8018df8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018dfa:	68bb      	ldr	r3, [r7, #8]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d103      	bne.n	8018e08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018e00:	69bb      	ldr	r3, [r7, #24]
 8018e02:	69ba      	ldr	r2, [r7, #24]
 8018e04:	601a      	str	r2, [r3, #0]
 8018e06:	e002      	b.n	8018e0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018e08:	69bb      	ldr	r3, [r7, #24]
 8018e0a:	687a      	ldr	r2, [r7, #4]
 8018e0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8018e0e:	69bb      	ldr	r3, [r7, #24]
 8018e10:	68fa      	ldr	r2, [r7, #12]
 8018e12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018e14:	69bb      	ldr	r3, [r7, #24]
 8018e16:	68ba      	ldr	r2, [r7, #8]
 8018e18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018e1a:	2101      	movs	r1, #1
 8018e1c:	69b8      	ldr	r0, [r7, #24]
 8018e1e:	f7ff fecb 	bl	8018bb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8018e22:	69bb      	ldr	r3, [r7, #24]
 8018e24:	78fa      	ldrb	r2, [r7, #3]
 8018e26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018e2a:	bf00      	nop
 8018e2c:	3710      	adds	r7, #16
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	bd80      	pop	{r7, pc}

08018e32 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8018e32:	b580      	push	{r7, lr}
 8018e34:	b082      	sub	sp, #8
 8018e36:	af00      	add	r7, sp, #0
 8018e38:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d00e      	beq.n	8018e5e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	2200      	movs	r2, #0
 8018e44:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	2200      	movs	r2, #0
 8018e4a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	2200      	movs	r2, #0
 8018e50:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8018e52:	2300      	movs	r3, #0
 8018e54:	2200      	movs	r2, #0
 8018e56:	2100      	movs	r1, #0
 8018e58:	6878      	ldr	r0, [r7, #4]
 8018e5a:	f000 f8a1 	bl	8018fa0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8018e5e:	bf00      	nop
 8018e60:	3708      	adds	r7, #8
 8018e62:	46bd      	mov	sp, r7
 8018e64:	bd80      	pop	{r7, pc}

08018e66 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8018e66:	b580      	push	{r7, lr}
 8018e68:	b086      	sub	sp, #24
 8018e6a:	af00      	add	r7, sp, #0
 8018e6c:	4603      	mov	r3, r0
 8018e6e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8018e70:	2301      	movs	r3, #1
 8018e72:	617b      	str	r3, [r7, #20]
 8018e74:	2300      	movs	r3, #0
 8018e76:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8018e78:	79fb      	ldrb	r3, [r7, #7]
 8018e7a:	461a      	mov	r2, r3
 8018e7c:	6939      	ldr	r1, [r7, #16]
 8018e7e:	6978      	ldr	r0, [r7, #20]
 8018e80:	f7ff ff7a 	bl	8018d78 <xQueueGenericCreate>
 8018e84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8018e86:	68f8      	ldr	r0, [r7, #12]
 8018e88:	f7ff ffd3 	bl	8018e32 <prvInitialiseMutex>

		return xNewQueue;
 8018e8c:	68fb      	ldr	r3, [r7, #12]
	}
 8018e8e:	4618      	mov	r0, r3
 8018e90:	3718      	adds	r7, #24
 8018e92:	46bd      	mov	sp, r7
 8018e94:	bd80      	pop	{r7, pc}

08018e96 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8018e96:	b580      	push	{r7, lr}
 8018e98:	b088      	sub	sp, #32
 8018e9a:	af02      	add	r7, sp, #8
 8018e9c:	4603      	mov	r3, r0
 8018e9e:	6039      	str	r1, [r7, #0]
 8018ea0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8018ea2:	2301      	movs	r3, #1
 8018ea4:	617b      	str	r3, [r7, #20]
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8018eaa:	79fb      	ldrb	r3, [r7, #7]
 8018eac:	9300      	str	r3, [sp, #0]
 8018eae:	683b      	ldr	r3, [r7, #0]
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	6939      	ldr	r1, [r7, #16]
 8018eb4:	6978      	ldr	r0, [r7, #20]
 8018eb6:	f7ff fee7 	bl	8018c88 <xQueueGenericCreateStatic>
 8018eba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8018ebc:	68f8      	ldr	r0, [r7, #12]
 8018ebe:	f7ff ffb8 	bl	8018e32 <prvInitialiseMutex>

		return xNewQueue;
 8018ec2:	68fb      	ldr	r3, [r7, #12]
	}
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	3718      	adds	r7, #24
 8018ec8:	46bd      	mov	sp, r7
 8018eca:	bd80      	pop	{r7, pc}

08018ecc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8018ecc:	b590      	push	{r4, r7, lr}
 8018ece:	b087      	sub	sp, #28
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8018ed8:	693b      	ldr	r3, [r7, #16]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d10a      	bne.n	8018ef4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8018ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ee2:	f383 8811 	msr	BASEPRI, r3
 8018ee6:	f3bf 8f6f 	isb	sy
 8018eea:	f3bf 8f4f 	dsb	sy
 8018eee:	60fb      	str	r3, [r7, #12]
}
 8018ef0:	bf00      	nop
 8018ef2:	e7fe      	b.n	8018ef2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8018ef4:	693b      	ldr	r3, [r7, #16]
 8018ef6:	689c      	ldr	r4, [r3, #8]
 8018ef8:	f001 fcaa 	bl	801a850 <xTaskGetCurrentTaskHandle>
 8018efc:	4603      	mov	r3, r0
 8018efe:	429c      	cmp	r4, r3
 8018f00:	d111      	bne.n	8018f26 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8018f02:	693b      	ldr	r3, [r7, #16]
 8018f04:	68db      	ldr	r3, [r3, #12]
 8018f06:	1e5a      	subs	r2, r3, #1
 8018f08:	693b      	ldr	r3, [r7, #16]
 8018f0a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8018f0c:	693b      	ldr	r3, [r7, #16]
 8018f0e:	68db      	ldr	r3, [r3, #12]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d105      	bne.n	8018f20 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8018f14:	2300      	movs	r3, #0
 8018f16:	2200      	movs	r2, #0
 8018f18:	2100      	movs	r1, #0
 8018f1a:	6938      	ldr	r0, [r7, #16]
 8018f1c:	f000 f840 	bl	8018fa0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8018f20:	2301      	movs	r3, #1
 8018f22:	617b      	str	r3, [r7, #20]
 8018f24:	e001      	b.n	8018f2a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8018f26:	2300      	movs	r3, #0
 8018f28:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8018f2a:	697b      	ldr	r3, [r7, #20]
	}
 8018f2c:	4618      	mov	r0, r3
 8018f2e:	371c      	adds	r7, #28
 8018f30:	46bd      	mov	sp, r7
 8018f32:	bd90      	pop	{r4, r7, pc}

08018f34 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8018f34:	b590      	push	{r4, r7, lr}
 8018f36:	b087      	sub	sp, #28
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	6078      	str	r0, [r7, #4]
 8018f3c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8018f42:	693b      	ldr	r3, [r7, #16]
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d10a      	bne.n	8018f5e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8018f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f4c:	f383 8811 	msr	BASEPRI, r3
 8018f50:	f3bf 8f6f 	isb	sy
 8018f54:	f3bf 8f4f 	dsb	sy
 8018f58:	60fb      	str	r3, [r7, #12]
}
 8018f5a:	bf00      	nop
 8018f5c:	e7fe      	b.n	8018f5c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8018f5e:	693b      	ldr	r3, [r7, #16]
 8018f60:	689c      	ldr	r4, [r3, #8]
 8018f62:	f001 fc75 	bl	801a850 <xTaskGetCurrentTaskHandle>
 8018f66:	4603      	mov	r3, r0
 8018f68:	429c      	cmp	r4, r3
 8018f6a:	d107      	bne.n	8018f7c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8018f6c:	693b      	ldr	r3, [r7, #16]
 8018f6e:	68db      	ldr	r3, [r3, #12]
 8018f70:	1c5a      	adds	r2, r3, #1
 8018f72:	693b      	ldr	r3, [r7, #16]
 8018f74:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8018f76:	2301      	movs	r3, #1
 8018f78:	617b      	str	r3, [r7, #20]
 8018f7a:	e00c      	b.n	8018f96 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8018f7c:	6839      	ldr	r1, [r7, #0]
 8018f7e:	6938      	ldr	r0, [r7, #16]
 8018f80:	f000 fa88 	bl	8019494 <xQueueSemaphoreTake>
 8018f84:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8018f86:	697b      	ldr	r3, [r7, #20]
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d004      	beq.n	8018f96 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8018f8c:	693b      	ldr	r3, [r7, #16]
 8018f8e:	68db      	ldr	r3, [r3, #12]
 8018f90:	1c5a      	adds	r2, r3, #1
 8018f92:	693b      	ldr	r3, [r7, #16]
 8018f94:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8018f96:	697b      	ldr	r3, [r7, #20]
	}
 8018f98:	4618      	mov	r0, r3
 8018f9a:	371c      	adds	r7, #28
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	bd90      	pop	{r4, r7, pc}

08018fa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b08e      	sub	sp, #56	; 0x38
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	60f8      	str	r0, [r7, #12]
 8018fa8:	60b9      	str	r1, [r7, #8]
 8018faa:	607a      	str	r2, [r7, #4]
 8018fac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8018fae:	2300      	movs	r3, #0
 8018fb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d10a      	bne.n	8018fd2 <xQueueGenericSend+0x32>
	__asm volatile
 8018fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fc0:	f383 8811 	msr	BASEPRI, r3
 8018fc4:	f3bf 8f6f 	isb	sy
 8018fc8:	f3bf 8f4f 	dsb	sy
 8018fcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8018fce:	bf00      	nop
 8018fd0:	e7fe      	b.n	8018fd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018fd2:	68bb      	ldr	r3, [r7, #8]
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d103      	bne.n	8018fe0 <xQueueGenericSend+0x40>
 8018fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d101      	bne.n	8018fe4 <xQueueGenericSend+0x44>
 8018fe0:	2301      	movs	r3, #1
 8018fe2:	e000      	b.n	8018fe6 <xQueueGenericSend+0x46>
 8018fe4:	2300      	movs	r3, #0
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d10a      	bne.n	8019000 <xQueueGenericSend+0x60>
	__asm volatile
 8018fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fee:	f383 8811 	msr	BASEPRI, r3
 8018ff2:	f3bf 8f6f 	isb	sy
 8018ff6:	f3bf 8f4f 	dsb	sy
 8018ffa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018ffc:	bf00      	nop
 8018ffe:	e7fe      	b.n	8018ffe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019000:	683b      	ldr	r3, [r7, #0]
 8019002:	2b02      	cmp	r3, #2
 8019004:	d103      	bne.n	801900e <xQueueGenericSend+0x6e>
 8019006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801900a:	2b01      	cmp	r3, #1
 801900c:	d101      	bne.n	8019012 <xQueueGenericSend+0x72>
 801900e:	2301      	movs	r3, #1
 8019010:	e000      	b.n	8019014 <xQueueGenericSend+0x74>
 8019012:	2300      	movs	r3, #0
 8019014:	2b00      	cmp	r3, #0
 8019016:	d10a      	bne.n	801902e <xQueueGenericSend+0x8e>
	__asm volatile
 8019018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801901c:	f383 8811 	msr	BASEPRI, r3
 8019020:	f3bf 8f6f 	isb	sy
 8019024:	f3bf 8f4f 	dsb	sy
 8019028:	623b      	str	r3, [r7, #32]
}
 801902a:	bf00      	nop
 801902c:	e7fe      	b.n	801902c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801902e:	f001 fc1f 	bl	801a870 <xTaskGetSchedulerState>
 8019032:	4603      	mov	r3, r0
 8019034:	2b00      	cmp	r3, #0
 8019036:	d102      	bne.n	801903e <xQueueGenericSend+0x9e>
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	2b00      	cmp	r3, #0
 801903c:	d101      	bne.n	8019042 <xQueueGenericSend+0xa2>
 801903e:	2301      	movs	r3, #1
 8019040:	e000      	b.n	8019044 <xQueueGenericSend+0xa4>
 8019042:	2300      	movs	r3, #0
 8019044:	2b00      	cmp	r3, #0
 8019046:	d10a      	bne.n	801905e <xQueueGenericSend+0xbe>
	__asm volatile
 8019048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801904c:	f383 8811 	msr	BASEPRI, r3
 8019050:	f3bf 8f6f 	isb	sy
 8019054:	f3bf 8f4f 	dsb	sy
 8019058:	61fb      	str	r3, [r7, #28]
}
 801905a:	bf00      	nop
 801905c:	e7fe      	b.n	801905c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801905e:	f002 fa99 	bl	801b594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801906a:	429a      	cmp	r2, r3
 801906c:	d302      	bcc.n	8019074 <xQueueGenericSend+0xd4>
 801906e:	683b      	ldr	r3, [r7, #0]
 8019070:	2b02      	cmp	r3, #2
 8019072:	d129      	bne.n	80190c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019074:	683a      	ldr	r2, [r7, #0]
 8019076:	68b9      	ldr	r1, [r7, #8]
 8019078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801907a:	f000 fb2f 	bl	80196dc <prvCopyDataToQueue>
 801907e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019084:	2b00      	cmp	r3, #0
 8019086:	d010      	beq.n	80190aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801908a:	3324      	adds	r3, #36	; 0x24
 801908c:	4618      	mov	r0, r3
 801908e:	f001 f9bf 	bl	801a410 <xTaskRemoveFromEventList>
 8019092:	4603      	mov	r3, r0
 8019094:	2b00      	cmp	r3, #0
 8019096:	d013      	beq.n	80190c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019098:	4b3f      	ldr	r3, [pc, #252]	; (8019198 <xQueueGenericSend+0x1f8>)
 801909a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801909e:	601a      	str	r2, [r3, #0]
 80190a0:	f3bf 8f4f 	dsb	sy
 80190a4:	f3bf 8f6f 	isb	sy
 80190a8:	e00a      	b.n	80190c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80190aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d007      	beq.n	80190c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80190b0:	4b39      	ldr	r3, [pc, #228]	; (8019198 <xQueueGenericSend+0x1f8>)
 80190b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80190b6:	601a      	str	r2, [r3, #0]
 80190b8:	f3bf 8f4f 	dsb	sy
 80190bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80190c0:	f002 fa98 	bl	801b5f4 <vPortExitCritical>
				return pdPASS;
 80190c4:	2301      	movs	r3, #1
 80190c6:	e063      	b.n	8019190 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d103      	bne.n	80190d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80190ce:	f002 fa91 	bl	801b5f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80190d2:	2300      	movs	r3, #0
 80190d4:	e05c      	b.n	8019190 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80190d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d106      	bne.n	80190ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80190dc:	f107 0314 	add.w	r3, r7, #20
 80190e0:	4618      	mov	r0, r3
 80190e2:	f001 fa5b 	bl	801a59c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80190e6:	2301      	movs	r3, #1
 80190e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80190ea:	f002 fa83 	bl	801b5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80190ee:	f000 ff1d 	bl	8019f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80190f2:	f002 fa4f 	bl	801b594 <vPortEnterCritical>
 80190f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80190fc:	b25b      	sxtb	r3, r3
 80190fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019102:	d103      	bne.n	801910c <xQueueGenericSend+0x16c>
 8019104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019106:	2200      	movs	r2, #0
 8019108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801910c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801910e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019112:	b25b      	sxtb	r3, r3
 8019114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019118:	d103      	bne.n	8019122 <xQueueGenericSend+0x182>
 801911a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801911c:	2200      	movs	r2, #0
 801911e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019122:	f002 fa67 	bl	801b5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019126:	1d3a      	adds	r2, r7, #4
 8019128:	f107 0314 	add.w	r3, r7, #20
 801912c:	4611      	mov	r1, r2
 801912e:	4618      	mov	r0, r3
 8019130:	f001 fa4a 	bl	801a5c8 <xTaskCheckForTimeOut>
 8019134:	4603      	mov	r3, r0
 8019136:	2b00      	cmp	r3, #0
 8019138:	d124      	bne.n	8019184 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801913a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801913c:	f000 fbc6 	bl	80198cc <prvIsQueueFull>
 8019140:	4603      	mov	r3, r0
 8019142:	2b00      	cmp	r3, #0
 8019144:	d018      	beq.n	8019178 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8019146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019148:	3310      	adds	r3, #16
 801914a:	687a      	ldr	r2, [r7, #4]
 801914c:	4611      	mov	r1, r2
 801914e:	4618      	mov	r0, r3
 8019150:	f001 f8d2 	bl	801a2f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8019154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019156:	f000 fb51 	bl	80197fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801915a:	f000 fef5 	bl	8019f48 <xTaskResumeAll>
 801915e:	4603      	mov	r3, r0
 8019160:	2b00      	cmp	r3, #0
 8019162:	f47f af7c 	bne.w	801905e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8019166:	4b0c      	ldr	r3, [pc, #48]	; (8019198 <xQueueGenericSend+0x1f8>)
 8019168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801916c:	601a      	str	r2, [r3, #0]
 801916e:	f3bf 8f4f 	dsb	sy
 8019172:	f3bf 8f6f 	isb	sy
 8019176:	e772      	b.n	801905e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801917a:	f000 fb3f 	bl	80197fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801917e:	f000 fee3 	bl	8019f48 <xTaskResumeAll>
 8019182:	e76c      	b.n	801905e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8019184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019186:	f000 fb39 	bl	80197fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801918a:	f000 fedd 	bl	8019f48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801918e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019190:	4618      	mov	r0, r3
 8019192:	3738      	adds	r7, #56	; 0x38
 8019194:	46bd      	mov	sp, r7
 8019196:	bd80      	pop	{r7, pc}
 8019198:	e000ed04 	.word	0xe000ed04

0801919c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801919c:	b580      	push	{r7, lr}
 801919e:	b090      	sub	sp, #64	; 0x40
 80191a0:	af00      	add	r7, sp, #0
 80191a2:	60f8      	str	r0, [r7, #12]
 80191a4:	60b9      	str	r1, [r7, #8]
 80191a6:	607a      	str	r2, [r7, #4]
 80191a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80191ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d10a      	bne.n	80191ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80191b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191b8:	f383 8811 	msr	BASEPRI, r3
 80191bc:	f3bf 8f6f 	isb	sy
 80191c0:	f3bf 8f4f 	dsb	sy
 80191c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80191c6:	bf00      	nop
 80191c8:	e7fe      	b.n	80191c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80191ca:	68bb      	ldr	r3, [r7, #8]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d103      	bne.n	80191d8 <xQueueGenericSendFromISR+0x3c>
 80191d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d101      	bne.n	80191dc <xQueueGenericSendFromISR+0x40>
 80191d8:	2301      	movs	r3, #1
 80191da:	e000      	b.n	80191de <xQueueGenericSendFromISR+0x42>
 80191dc:	2300      	movs	r3, #0
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d10a      	bne.n	80191f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80191e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191e6:	f383 8811 	msr	BASEPRI, r3
 80191ea:	f3bf 8f6f 	isb	sy
 80191ee:	f3bf 8f4f 	dsb	sy
 80191f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80191f4:	bf00      	nop
 80191f6:	e7fe      	b.n	80191f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80191f8:	683b      	ldr	r3, [r7, #0]
 80191fa:	2b02      	cmp	r3, #2
 80191fc:	d103      	bne.n	8019206 <xQueueGenericSendFromISR+0x6a>
 80191fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019202:	2b01      	cmp	r3, #1
 8019204:	d101      	bne.n	801920a <xQueueGenericSendFromISR+0x6e>
 8019206:	2301      	movs	r3, #1
 8019208:	e000      	b.n	801920c <xQueueGenericSendFromISR+0x70>
 801920a:	2300      	movs	r3, #0
 801920c:	2b00      	cmp	r3, #0
 801920e:	d10a      	bne.n	8019226 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8019210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019214:	f383 8811 	msr	BASEPRI, r3
 8019218:	f3bf 8f6f 	isb	sy
 801921c:	f3bf 8f4f 	dsb	sy
 8019220:	623b      	str	r3, [r7, #32]
}
 8019222:	bf00      	nop
 8019224:	e7fe      	b.n	8019224 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019226:	f002 fa97 	bl	801b758 <vPortValidateInterruptPriority>
	__asm volatile
 801922a:	f3ef 8211 	mrs	r2, BASEPRI
 801922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019232:	f383 8811 	msr	BASEPRI, r3
 8019236:	f3bf 8f6f 	isb	sy
 801923a:	f3bf 8f4f 	dsb	sy
 801923e:	61fa      	str	r2, [r7, #28]
 8019240:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8019242:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019244:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801924a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801924c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801924e:	429a      	cmp	r2, r3
 8019250:	d302      	bcc.n	8019258 <xQueueGenericSendFromISR+0xbc>
 8019252:	683b      	ldr	r3, [r7, #0]
 8019254:	2b02      	cmp	r3, #2
 8019256:	d12f      	bne.n	80192b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801925a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801925e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019266:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019268:	683a      	ldr	r2, [r7, #0]
 801926a:	68b9      	ldr	r1, [r7, #8]
 801926c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801926e:	f000 fa35 	bl	80196dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019272:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8019276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801927a:	d112      	bne.n	80192a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801927c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019280:	2b00      	cmp	r3, #0
 8019282:	d016      	beq.n	80192b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019286:	3324      	adds	r3, #36	; 0x24
 8019288:	4618      	mov	r0, r3
 801928a:	f001 f8c1 	bl	801a410 <xTaskRemoveFromEventList>
 801928e:	4603      	mov	r3, r0
 8019290:	2b00      	cmp	r3, #0
 8019292:	d00e      	beq.n	80192b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d00b      	beq.n	80192b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	2201      	movs	r2, #1
 801929e:	601a      	str	r2, [r3, #0]
 80192a0:	e007      	b.n	80192b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80192a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80192a6:	3301      	adds	r3, #1
 80192a8:	b2db      	uxtb	r3, r3
 80192aa:	b25a      	sxtb	r2, r3
 80192ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80192b2:	2301      	movs	r3, #1
 80192b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80192b6:	e001      	b.n	80192bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80192b8:	2300      	movs	r3, #0
 80192ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80192bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192be:	617b      	str	r3, [r7, #20]
	__asm volatile
 80192c0:	697b      	ldr	r3, [r7, #20]
 80192c2:	f383 8811 	msr	BASEPRI, r3
}
 80192c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80192c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80192ca:	4618      	mov	r0, r3
 80192cc:	3740      	adds	r7, #64	; 0x40
 80192ce:	46bd      	mov	sp, r7
 80192d0:	bd80      	pop	{r7, pc}
	...

080192d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b08c      	sub	sp, #48	; 0x30
 80192d8:	af00      	add	r7, sp, #0
 80192da:	60f8      	str	r0, [r7, #12]
 80192dc:	60b9      	str	r1, [r7, #8]
 80192de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80192e0:	2300      	movs	r3, #0
 80192e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80192e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d10a      	bne.n	8019304 <xQueueReceive+0x30>
	__asm volatile
 80192ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192f2:	f383 8811 	msr	BASEPRI, r3
 80192f6:	f3bf 8f6f 	isb	sy
 80192fa:	f3bf 8f4f 	dsb	sy
 80192fe:	623b      	str	r3, [r7, #32]
}
 8019300:	bf00      	nop
 8019302:	e7fe      	b.n	8019302 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019304:	68bb      	ldr	r3, [r7, #8]
 8019306:	2b00      	cmp	r3, #0
 8019308:	d103      	bne.n	8019312 <xQueueReceive+0x3e>
 801930a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801930c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801930e:	2b00      	cmp	r3, #0
 8019310:	d101      	bne.n	8019316 <xQueueReceive+0x42>
 8019312:	2301      	movs	r3, #1
 8019314:	e000      	b.n	8019318 <xQueueReceive+0x44>
 8019316:	2300      	movs	r3, #0
 8019318:	2b00      	cmp	r3, #0
 801931a:	d10a      	bne.n	8019332 <xQueueReceive+0x5e>
	__asm volatile
 801931c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019320:	f383 8811 	msr	BASEPRI, r3
 8019324:	f3bf 8f6f 	isb	sy
 8019328:	f3bf 8f4f 	dsb	sy
 801932c:	61fb      	str	r3, [r7, #28]
}
 801932e:	bf00      	nop
 8019330:	e7fe      	b.n	8019330 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019332:	f001 fa9d 	bl	801a870 <xTaskGetSchedulerState>
 8019336:	4603      	mov	r3, r0
 8019338:	2b00      	cmp	r3, #0
 801933a:	d102      	bne.n	8019342 <xQueueReceive+0x6e>
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d101      	bne.n	8019346 <xQueueReceive+0x72>
 8019342:	2301      	movs	r3, #1
 8019344:	e000      	b.n	8019348 <xQueueReceive+0x74>
 8019346:	2300      	movs	r3, #0
 8019348:	2b00      	cmp	r3, #0
 801934a:	d10a      	bne.n	8019362 <xQueueReceive+0x8e>
	__asm volatile
 801934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019350:	f383 8811 	msr	BASEPRI, r3
 8019354:	f3bf 8f6f 	isb	sy
 8019358:	f3bf 8f4f 	dsb	sy
 801935c:	61bb      	str	r3, [r7, #24]
}
 801935e:	bf00      	nop
 8019360:	e7fe      	b.n	8019360 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019362:	f002 f917 	bl	801b594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801936a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801936e:	2b00      	cmp	r3, #0
 8019370:	d01f      	beq.n	80193b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019372:	68b9      	ldr	r1, [r7, #8]
 8019374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019376:	f000 fa1b 	bl	80197b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801937a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801937c:	1e5a      	subs	r2, r3, #1
 801937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019380:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019384:	691b      	ldr	r3, [r3, #16]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d00f      	beq.n	80193aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801938a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801938c:	3310      	adds	r3, #16
 801938e:	4618      	mov	r0, r3
 8019390:	f001 f83e 	bl	801a410 <xTaskRemoveFromEventList>
 8019394:	4603      	mov	r3, r0
 8019396:	2b00      	cmp	r3, #0
 8019398:	d007      	beq.n	80193aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801939a:	4b3d      	ldr	r3, [pc, #244]	; (8019490 <xQueueReceive+0x1bc>)
 801939c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193a0:	601a      	str	r2, [r3, #0]
 80193a2:	f3bf 8f4f 	dsb	sy
 80193a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80193aa:	f002 f923 	bl	801b5f4 <vPortExitCritical>
				return pdPASS;
 80193ae:	2301      	movs	r3, #1
 80193b0:	e069      	b.n	8019486 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d103      	bne.n	80193c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80193b8:	f002 f91c 	bl	801b5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80193bc:	2300      	movs	r3, #0
 80193be:	e062      	b.n	8019486 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80193c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d106      	bne.n	80193d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80193c6:	f107 0310 	add.w	r3, r7, #16
 80193ca:	4618      	mov	r0, r3
 80193cc:	f001 f8e6 	bl	801a59c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80193d0:	2301      	movs	r3, #1
 80193d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80193d4:	f002 f90e 	bl	801b5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80193d8:	f000 fda8 	bl	8019f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80193dc:	f002 f8da 	bl	801b594 <vPortEnterCritical>
 80193e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80193e6:	b25b      	sxtb	r3, r3
 80193e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193ec:	d103      	bne.n	80193f6 <xQueueReceive+0x122>
 80193ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193f0:	2200      	movs	r2, #0
 80193f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80193f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80193fc:	b25b      	sxtb	r3, r3
 80193fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019402:	d103      	bne.n	801940c <xQueueReceive+0x138>
 8019404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019406:	2200      	movs	r2, #0
 8019408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801940c:	f002 f8f2 	bl	801b5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019410:	1d3a      	adds	r2, r7, #4
 8019412:	f107 0310 	add.w	r3, r7, #16
 8019416:	4611      	mov	r1, r2
 8019418:	4618      	mov	r0, r3
 801941a:	f001 f8d5 	bl	801a5c8 <xTaskCheckForTimeOut>
 801941e:	4603      	mov	r3, r0
 8019420:	2b00      	cmp	r3, #0
 8019422:	d123      	bne.n	801946c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019426:	f000 fa3b 	bl	80198a0 <prvIsQueueEmpty>
 801942a:	4603      	mov	r3, r0
 801942c:	2b00      	cmp	r3, #0
 801942e:	d017      	beq.n	8019460 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019432:	3324      	adds	r3, #36	; 0x24
 8019434:	687a      	ldr	r2, [r7, #4]
 8019436:	4611      	mov	r1, r2
 8019438:	4618      	mov	r0, r3
 801943a:	f000 ff5d 	bl	801a2f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801943e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019440:	f000 f9dc 	bl	80197fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019444:	f000 fd80 	bl	8019f48 <xTaskResumeAll>
 8019448:	4603      	mov	r3, r0
 801944a:	2b00      	cmp	r3, #0
 801944c:	d189      	bne.n	8019362 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801944e:	4b10      	ldr	r3, [pc, #64]	; (8019490 <xQueueReceive+0x1bc>)
 8019450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019454:	601a      	str	r2, [r3, #0]
 8019456:	f3bf 8f4f 	dsb	sy
 801945a:	f3bf 8f6f 	isb	sy
 801945e:	e780      	b.n	8019362 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8019460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019462:	f000 f9cb 	bl	80197fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019466:	f000 fd6f 	bl	8019f48 <xTaskResumeAll>
 801946a:	e77a      	b.n	8019362 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801946c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801946e:	f000 f9c5 	bl	80197fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019472:	f000 fd69 	bl	8019f48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019478:	f000 fa12 	bl	80198a0 <prvIsQueueEmpty>
 801947c:	4603      	mov	r3, r0
 801947e:	2b00      	cmp	r3, #0
 8019480:	f43f af6f 	beq.w	8019362 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019484:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019486:	4618      	mov	r0, r3
 8019488:	3730      	adds	r7, #48	; 0x30
 801948a:	46bd      	mov	sp, r7
 801948c:	bd80      	pop	{r7, pc}
 801948e:	bf00      	nop
 8019490:	e000ed04 	.word	0xe000ed04

08019494 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8019494:	b580      	push	{r7, lr}
 8019496:	b08e      	sub	sp, #56	; 0x38
 8019498:	af00      	add	r7, sp, #0
 801949a:	6078      	str	r0, [r7, #4]
 801949c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801949e:	2300      	movs	r3, #0
 80194a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80194a6:	2300      	movs	r3, #0
 80194a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80194aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d10a      	bne.n	80194c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80194b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194b4:	f383 8811 	msr	BASEPRI, r3
 80194b8:	f3bf 8f6f 	isb	sy
 80194bc:	f3bf 8f4f 	dsb	sy
 80194c0:	623b      	str	r3, [r7, #32]
}
 80194c2:	bf00      	nop
 80194c4:	e7fe      	b.n	80194c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80194c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d00a      	beq.n	80194e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80194ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194d2:	f383 8811 	msr	BASEPRI, r3
 80194d6:	f3bf 8f6f 	isb	sy
 80194da:	f3bf 8f4f 	dsb	sy
 80194de:	61fb      	str	r3, [r7, #28]
}
 80194e0:	bf00      	nop
 80194e2:	e7fe      	b.n	80194e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80194e4:	f001 f9c4 	bl	801a870 <xTaskGetSchedulerState>
 80194e8:	4603      	mov	r3, r0
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d102      	bne.n	80194f4 <xQueueSemaphoreTake+0x60>
 80194ee:	683b      	ldr	r3, [r7, #0]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d101      	bne.n	80194f8 <xQueueSemaphoreTake+0x64>
 80194f4:	2301      	movs	r3, #1
 80194f6:	e000      	b.n	80194fa <xQueueSemaphoreTake+0x66>
 80194f8:	2300      	movs	r3, #0
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d10a      	bne.n	8019514 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80194fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019502:	f383 8811 	msr	BASEPRI, r3
 8019506:	f3bf 8f6f 	isb	sy
 801950a:	f3bf 8f4f 	dsb	sy
 801950e:	61bb      	str	r3, [r7, #24]
}
 8019510:	bf00      	nop
 8019512:	e7fe      	b.n	8019512 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019514:	f002 f83e 	bl	801b594 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801951a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801951c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019520:	2b00      	cmp	r3, #0
 8019522:	d024      	beq.n	801956e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8019524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019526:	1e5a      	subs	r2, r3, #1
 8019528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801952a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801952c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d104      	bne.n	801953e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8019534:	f001 fb2a 	bl	801ab8c <pvTaskIncrementMutexHeldCount>
 8019538:	4602      	mov	r2, r0
 801953a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801953c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019540:	691b      	ldr	r3, [r3, #16]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d00f      	beq.n	8019566 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019548:	3310      	adds	r3, #16
 801954a:	4618      	mov	r0, r3
 801954c:	f000 ff60 	bl	801a410 <xTaskRemoveFromEventList>
 8019550:	4603      	mov	r3, r0
 8019552:	2b00      	cmp	r3, #0
 8019554:	d007      	beq.n	8019566 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019556:	4b54      	ldr	r3, [pc, #336]	; (80196a8 <xQueueSemaphoreTake+0x214>)
 8019558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801955c:	601a      	str	r2, [r3, #0]
 801955e:	f3bf 8f4f 	dsb	sy
 8019562:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019566:	f002 f845 	bl	801b5f4 <vPortExitCritical>
				return pdPASS;
 801956a:	2301      	movs	r3, #1
 801956c:	e097      	b.n	801969e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801956e:	683b      	ldr	r3, [r7, #0]
 8019570:	2b00      	cmp	r3, #0
 8019572:	d111      	bne.n	8019598 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8019574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019576:	2b00      	cmp	r3, #0
 8019578:	d00a      	beq.n	8019590 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801957a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801957e:	f383 8811 	msr	BASEPRI, r3
 8019582:	f3bf 8f6f 	isb	sy
 8019586:	f3bf 8f4f 	dsb	sy
 801958a:	617b      	str	r3, [r7, #20]
}
 801958c:	bf00      	nop
 801958e:	e7fe      	b.n	801958e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8019590:	f002 f830 	bl	801b5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019594:	2300      	movs	r3, #0
 8019596:	e082      	b.n	801969e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801959a:	2b00      	cmp	r3, #0
 801959c:	d106      	bne.n	80195ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801959e:	f107 030c 	add.w	r3, r7, #12
 80195a2:	4618      	mov	r0, r3
 80195a4:	f000 fffa 	bl	801a59c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80195a8:	2301      	movs	r3, #1
 80195aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80195ac:	f002 f822 	bl	801b5f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80195b0:	f000 fcbc 	bl	8019f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80195b4:	f001 ffee 	bl	801b594 <vPortEnterCritical>
 80195b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80195be:	b25b      	sxtb	r3, r3
 80195c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195c4:	d103      	bne.n	80195ce <xQueueSemaphoreTake+0x13a>
 80195c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195c8:	2200      	movs	r2, #0
 80195ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80195ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80195d4:	b25b      	sxtb	r3, r3
 80195d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195da:	d103      	bne.n	80195e4 <xQueueSemaphoreTake+0x150>
 80195dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195de:	2200      	movs	r2, #0
 80195e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80195e4:	f002 f806 	bl	801b5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80195e8:	463a      	mov	r2, r7
 80195ea:	f107 030c 	add.w	r3, r7, #12
 80195ee:	4611      	mov	r1, r2
 80195f0:	4618      	mov	r0, r3
 80195f2:	f000 ffe9 	bl	801a5c8 <xTaskCheckForTimeOut>
 80195f6:	4603      	mov	r3, r0
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d132      	bne.n	8019662 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80195fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80195fe:	f000 f94f 	bl	80198a0 <prvIsQueueEmpty>
 8019602:	4603      	mov	r3, r0
 8019604:	2b00      	cmp	r3, #0
 8019606:	d026      	beq.n	8019656 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	2b00      	cmp	r3, #0
 801960e:	d109      	bne.n	8019624 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8019610:	f001 ffc0 	bl	801b594 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019616:	689b      	ldr	r3, [r3, #8]
 8019618:	4618      	mov	r0, r3
 801961a:	f001 f947 	bl	801a8ac <xTaskPriorityInherit>
 801961e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8019620:	f001 ffe8 	bl	801b5f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019626:	3324      	adds	r3, #36	; 0x24
 8019628:	683a      	ldr	r2, [r7, #0]
 801962a:	4611      	mov	r1, r2
 801962c:	4618      	mov	r0, r3
 801962e:	f000 fe63 	bl	801a2f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019634:	f000 f8e2 	bl	80197fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019638:	f000 fc86 	bl	8019f48 <xTaskResumeAll>
 801963c:	4603      	mov	r3, r0
 801963e:	2b00      	cmp	r3, #0
 8019640:	f47f af68 	bne.w	8019514 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8019644:	4b18      	ldr	r3, [pc, #96]	; (80196a8 <xQueueSemaphoreTake+0x214>)
 8019646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801964a:	601a      	str	r2, [r3, #0]
 801964c:	f3bf 8f4f 	dsb	sy
 8019650:	f3bf 8f6f 	isb	sy
 8019654:	e75e      	b.n	8019514 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8019656:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019658:	f000 f8d0 	bl	80197fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801965c:	f000 fc74 	bl	8019f48 <xTaskResumeAll>
 8019660:	e758      	b.n	8019514 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8019662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019664:	f000 f8ca 	bl	80197fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019668:	f000 fc6e 	bl	8019f48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801966c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801966e:	f000 f917 	bl	80198a0 <prvIsQueueEmpty>
 8019672:	4603      	mov	r3, r0
 8019674:	2b00      	cmp	r3, #0
 8019676:	f43f af4d 	beq.w	8019514 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801967c:	2b00      	cmp	r3, #0
 801967e:	d00d      	beq.n	801969c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8019680:	f001 ff88 	bl	801b594 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8019684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019686:	f000 f811 	bl	80196ac <prvGetDisinheritPriorityAfterTimeout>
 801968a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801968e:	689b      	ldr	r3, [r3, #8]
 8019690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019692:	4618      	mov	r0, r3
 8019694:	f001 f9e0 	bl	801aa58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8019698:	f001 ffac 	bl	801b5f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801969c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801969e:	4618      	mov	r0, r3
 80196a0:	3738      	adds	r7, #56	; 0x38
 80196a2:	46bd      	mov	sp, r7
 80196a4:	bd80      	pop	{r7, pc}
 80196a6:	bf00      	nop
 80196a8:	e000ed04 	.word	0xe000ed04

080196ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80196ac:	b480      	push	{r7}
 80196ae:	b085      	sub	sp, #20
 80196b0:	af00      	add	r7, sp, #0
 80196b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d006      	beq.n	80196ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80196c6:	60fb      	str	r3, [r7, #12]
 80196c8:	e001      	b.n	80196ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80196ca:	2300      	movs	r3, #0
 80196cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80196ce:	68fb      	ldr	r3, [r7, #12]
	}
 80196d0:	4618      	mov	r0, r3
 80196d2:	3714      	adds	r7, #20
 80196d4:	46bd      	mov	sp, r7
 80196d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196da:	4770      	bx	lr

080196dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80196dc:	b580      	push	{r7, lr}
 80196de:	b086      	sub	sp, #24
 80196e0:	af00      	add	r7, sp, #0
 80196e2:	60f8      	str	r0, [r7, #12]
 80196e4:	60b9      	str	r1, [r7, #8]
 80196e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80196e8:	2300      	movs	r3, #0
 80196ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d10d      	bne.n	8019716 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d14d      	bne.n	801979e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	689b      	ldr	r3, [r3, #8]
 8019706:	4618      	mov	r0, r3
 8019708:	f001 f938 	bl	801a97c <xTaskPriorityDisinherit>
 801970c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801970e:	68fb      	ldr	r3, [r7, #12]
 8019710:	2200      	movs	r2, #0
 8019712:	609a      	str	r2, [r3, #8]
 8019714:	e043      	b.n	801979e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d119      	bne.n	8019750 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	6858      	ldr	r0, [r3, #4]
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019724:	461a      	mov	r2, r3
 8019726:	68b9      	ldr	r1, [r7, #8]
 8019728:	f003 f81c 	bl	801c764 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	685a      	ldr	r2, [r3, #4]
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019734:	441a      	add	r2, r3
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	685a      	ldr	r2, [r3, #4]
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	689b      	ldr	r3, [r3, #8]
 8019742:	429a      	cmp	r2, r3
 8019744:	d32b      	bcc.n	801979e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	681a      	ldr	r2, [r3, #0]
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	605a      	str	r2, [r3, #4]
 801974e:	e026      	b.n	801979e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	68d8      	ldr	r0, [r3, #12]
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019758:	461a      	mov	r2, r3
 801975a:	68b9      	ldr	r1, [r7, #8]
 801975c:	f003 f802 	bl	801c764 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	68da      	ldr	r2, [r3, #12]
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019768:	425b      	negs	r3, r3
 801976a:	441a      	add	r2, r3
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019770:	68fb      	ldr	r3, [r7, #12]
 8019772:	68da      	ldr	r2, [r3, #12]
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	429a      	cmp	r2, r3
 801977a:	d207      	bcs.n	801978c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801977c:	68fb      	ldr	r3, [r7, #12]
 801977e:	689a      	ldr	r2, [r3, #8]
 8019780:	68fb      	ldr	r3, [r7, #12]
 8019782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019784:	425b      	negs	r3, r3
 8019786:	441a      	add	r2, r3
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	2b02      	cmp	r3, #2
 8019790:	d105      	bne.n	801979e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019792:	693b      	ldr	r3, [r7, #16]
 8019794:	2b00      	cmp	r3, #0
 8019796:	d002      	beq.n	801979e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8019798:	693b      	ldr	r3, [r7, #16]
 801979a:	3b01      	subs	r3, #1
 801979c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801979e:	693b      	ldr	r3, [r7, #16]
 80197a0:	1c5a      	adds	r2, r3, #1
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80197a6:	697b      	ldr	r3, [r7, #20]
}
 80197a8:	4618      	mov	r0, r3
 80197aa:	3718      	adds	r7, #24
 80197ac:	46bd      	mov	sp, r7
 80197ae:	bd80      	pop	{r7, pc}

080197b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b082      	sub	sp, #8
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	6078      	str	r0, [r7, #4]
 80197b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d018      	beq.n	80197f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	68da      	ldr	r2, [r3, #12]
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197ca:	441a      	add	r2, r3
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	68da      	ldr	r2, [r3, #12]
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	689b      	ldr	r3, [r3, #8]
 80197d8:	429a      	cmp	r2, r3
 80197da:	d303      	bcc.n	80197e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	681a      	ldr	r2, [r3, #0]
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	68d9      	ldr	r1, [r3, #12]
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197ec:	461a      	mov	r2, r3
 80197ee:	6838      	ldr	r0, [r7, #0]
 80197f0:	f002 ffb8 	bl	801c764 <memcpy>
	}
}
 80197f4:	bf00      	nop
 80197f6:	3708      	adds	r7, #8
 80197f8:	46bd      	mov	sp, r7
 80197fa:	bd80      	pop	{r7, pc}

080197fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80197fc:	b580      	push	{r7, lr}
 80197fe:	b084      	sub	sp, #16
 8019800:	af00      	add	r7, sp, #0
 8019802:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019804:	f001 fec6 	bl	801b594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801980e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019810:	e011      	b.n	8019836 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019816:	2b00      	cmp	r3, #0
 8019818:	d012      	beq.n	8019840 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	3324      	adds	r3, #36	; 0x24
 801981e:	4618      	mov	r0, r3
 8019820:	f000 fdf6 	bl	801a410 <xTaskRemoveFromEventList>
 8019824:	4603      	mov	r3, r0
 8019826:	2b00      	cmp	r3, #0
 8019828:	d001      	beq.n	801982e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801982a:	f000 ff2f 	bl	801a68c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801982e:	7bfb      	ldrb	r3, [r7, #15]
 8019830:	3b01      	subs	r3, #1
 8019832:	b2db      	uxtb	r3, r3
 8019834:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801983a:	2b00      	cmp	r3, #0
 801983c:	dce9      	bgt.n	8019812 <prvUnlockQueue+0x16>
 801983e:	e000      	b.n	8019842 <prvUnlockQueue+0x46>
					break;
 8019840:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	22ff      	movs	r2, #255	; 0xff
 8019846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801984a:	f001 fed3 	bl	801b5f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801984e:	f001 fea1 	bl	801b594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019858:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801985a:	e011      	b.n	8019880 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	691b      	ldr	r3, [r3, #16]
 8019860:	2b00      	cmp	r3, #0
 8019862:	d012      	beq.n	801988a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	3310      	adds	r3, #16
 8019868:	4618      	mov	r0, r3
 801986a:	f000 fdd1 	bl	801a410 <xTaskRemoveFromEventList>
 801986e:	4603      	mov	r3, r0
 8019870:	2b00      	cmp	r3, #0
 8019872:	d001      	beq.n	8019878 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8019874:	f000 ff0a 	bl	801a68c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8019878:	7bbb      	ldrb	r3, [r7, #14]
 801987a:	3b01      	subs	r3, #1
 801987c:	b2db      	uxtb	r3, r3
 801987e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019880:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019884:	2b00      	cmp	r3, #0
 8019886:	dce9      	bgt.n	801985c <prvUnlockQueue+0x60>
 8019888:	e000      	b.n	801988c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801988a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	22ff      	movs	r2, #255	; 0xff
 8019890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8019894:	f001 feae 	bl	801b5f4 <vPortExitCritical>
}
 8019898:	bf00      	nop
 801989a:	3710      	adds	r7, #16
 801989c:	46bd      	mov	sp, r7
 801989e:	bd80      	pop	{r7, pc}

080198a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	b084      	sub	sp, #16
 80198a4:	af00      	add	r7, sp, #0
 80198a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80198a8:	f001 fe74 	bl	801b594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d102      	bne.n	80198ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80198b4:	2301      	movs	r3, #1
 80198b6:	60fb      	str	r3, [r7, #12]
 80198b8:	e001      	b.n	80198be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80198ba:	2300      	movs	r3, #0
 80198bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80198be:	f001 fe99 	bl	801b5f4 <vPortExitCritical>

	return xReturn;
 80198c2:	68fb      	ldr	r3, [r7, #12]
}
 80198c4:	4618      	mov	r0, r3
 80198c6:	3710      	adds	r7, #16
 80198c8:	46bd      	mov	sp, r7
 80198ca:	bd80      	pop	{r7, pc}

080198cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80198cc:	b580      	push	{r7, lr}
 80198ce:	b084      	sub	sp, #16
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80198d4:	f001 fe5e 	bl	801b594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198e0:	429a      	cmp	r2, r3
 80198e2:	d102      	bne.n	80198ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80198e4:	2301      	movs	r3, #1
 80198e6:	60fb      	str	r3, [r7, #12]
 80198e8:	e001      	b.n	80198ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80198ea:	2300      	movs	r3, #0
 80198ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80198ee:	f001 fe81 	bl	801b5f4 <vPortExitCritical>

	return xReturn;
 80198f2:	68fb      	ldr	r3, [r7, #12]
}
 80198f4:	4618      	mov	r0, r3
 80198f6:	3710      	adds	r7, #16
 80198f8:	46bd      	mov	sp, r7
 80198fa:	bd80      	pop	{r7, pc}

080198fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80198fc:	b480      	push	{r7}
 80198fe:	b085      	sub	sp, #20
 8019900:	af00      	add	r7, sp, #0
 8019902:	6078      	str	r0, [r7, #4]
 8019904:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019906:	2300      	movs	r3, #0
 8019908:	60fb      	str	r3, [r7, #12]
 801990a:	e014      	b.n	8019936 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801990c:	4a0f      	ldr	r2, [pc, #60]	; (801994c <vQueueAddToRegistry+0x50>)
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019914:	2b00      	cmp	r3, #0
 8019916:	d10b      	bne.n	8019930 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8019918:	490c      	ldr	r1, [pc, #48]	; (801994c <vQueueAddToRegistry+0x50>)
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	683a      	ldr	r2, [r7, #0]
 801991e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019922:	4a0a      	ldr	r2, [pc, #40]	; (801994c <vQueueAddToRegistry+0x50>)
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	00db      	lsls	r3, r3, #3
 8019928:	4413      	add	r3, r2
 801992a:	687a      	ldr	r2, [r7, #4]
 801992c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801992e:	e006      	b.n	801993e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	3301      	adds	r3, #1
 8019934:	60fb      	str	r3, [r7, #12]
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	2b07      	cmp	r3, #7
 801993a:	d9e7      	bls.n	801990c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801993c:	bf00      	nop
 801993e:	bf00      	nop
 8019940:	3714      	adds	r7, #20
 8019942:	46bd      	mov	sp, r7
 8019944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019948:	4770      	bx	lr
 801994a:	bf00      	nop
 801994c:	20007988 	.word	0x20007988

08019950 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019950:	b580      	push	{r7, lr}
 8019952:	b086      	sub	sp, #24
 8019954:	af00      	add	r7, sp, #0
 8019956:	60f8      	str	r0, [r7, #12]
 8019958:	60b9      	str	r1, [r7, #8]
 801995a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8019960:	f001 fe18 	bl	801b594 <vPortEnterCritical>
 8019964:	697b      	ldr	r3, [r7, #20]
 8019966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801996a:	b25b      	sxtb	r3, r3
 801996c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019970:	d103      	bne.n	801997a <vQueueWaitForMessageRestricted+0x2a>
 8019972:	697b      	ldr	r3, [r7, #20]
 8019974:	2200      	movs	r2, #0
 8019976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801997a:	697b      	ldr	r3, [r7, #20]
 801997c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019980:	b25b      	sxtb	r3, r3
 8019982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019986:	d103      	bne.n	8019990 <vQueueWaitForMessageRestricted+0x40>
 8019988:	697b      	ldr	r3, [r7, #20]
 801998a:	2200      	movs	r2, #0
 801998c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019990:	f001 fe30 	bl	801b5f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8019994:	697b      	ldr	r3, [r7, #20]
 8019996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019998:	2b00      	cmp	r3, #0
 801999a:	d106      	bne.n	80199aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801999c:	697b      	ldr	r3, [r7, #20]
 801999e:	3324      	adds	r3, #36	; 0x24
 80199a0:	687a      	ldr	r2, [r7, #4]
 80199a2:	68b9      	ldr	r1, [r7, #8]
 80199a4:	4618      	mov	r0, r3
 80199a6:	f000 fd07 	bl	801a3b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80199aa:	6978      	ldr	r0, [r7, #20]
 80199ac:	f7ff ff26 	bl	80197fc <prvUnlockQueue>
	}
 80199b0:	bf00      	nop
 80199b2:	3718      	adds	r7, #24
 80199b4:	46bd      	mov	sp, r7
 80199b6:	bd80      	pop	{r7, pc}

080199b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b08e      	sub	sp, #56	; 0x38
 80199bc:	af04      	add	r7, sp, #16
 80199be:	60f8      	str	r0, [r7, #12]
 80199c0:	60b9      	str	r1, [r7, #8]
 80199c2:	607a      	str	r2, [r7, #4]
 80199c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80199c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d10a      	bne.n	80199e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80199cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199d0:	f383 8811 	msr	BASEPRI, r3
 80199d4:	f3bf 8f6f 	isb	sy
 80199d8:	f3bf 8f4f 	dsb	sy
 80199dc:	623b      	str	r3, [r7, #32]
}
 80199de:	bf00      	nop
 80199e0:	e7fe      	b.n	80199e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80199e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d10a      	bne.n	80199fe <xTaskCreateStatic+0x46>
	__asm volatile
 80199e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199ec:	f383 8811 	msr	BASEPRI, r3
 80199f0:	f3bf 8f6f 	isb	sy
 80199f4:	f3bf 8f4f 	dsb	sy
 80199f8:	61fb      	str	r3, [r7, #28]
}
 80199fa:	bf00      	nop
 80199fc:	e7fe      	b.n	80199fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80199fe:	235c      	movs	r3, #92	; 0x5c
 8019a00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019a02:	693b      	ldr	r3, [r7, #16]
 8019a04:	2b5c      	cmp	r3, #92	; 0x5c
 8019a06:	d00a      	beq.n	8019a1e <xTaskCreateStatic+0x66>
	__asm volatile
 8019a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a0c:	f383 8811 	msr	BASEPRI, r3
 8019a10:	f3bf 8f6f 	isb	sy
 8019a14:	f3bf 8f4f 	dsb	sy
 8019a18:	61bb      	str	r3, [r7, #24]
}
 8019a1a:	bf00      	nop
 8019a1c:	e7fe      	b.n	8019a1c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019a1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8019a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d01e      	beq.n	8019a64 <xTaskCreateStatic+0xac>
 8019a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d01b      	beq.n	8019a64 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019a34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a38:	2202      	movs	r2, #2
 8019a3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019a3e:	2300      	movs	r3, #0
 8019a40:	9303      	str	r3, [sp, #12]
 8019a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a44:	9302      	str	r3, [sp, #8]
 8019a46:	f107 0314 	add.w	r3, r7, #20
 8019a4a:	9301      	str	r3, [sp, #4]
 8019a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a4e:	9300      	str	r3, [sp, #0]
 8019a50:	683b      	ldr	r3, [r7, #0]
 8019a52:	687a      	ldr	r2, [r7, #4]
 8019a54:	68b9      	ldr	r1, [r7, #8]
 8019a56:	68f8      	ldr	r0, [r7, #12]
 8019a58:	f000 f850 	bl	8019afc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019a5e:	f000 f8dd 	bl	8019c1c <prvAddNewTaskToReadyList>
 8019a62:	e001      	b.n	8019a68 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8019a64:	2300      	movs	r3, #0
 8019a66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8019a68:	697b      	ldr	r3, [r7, #20]
	}
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	3728      	adds	r7, #40	; 0x28
 8019a6e:	46bd      	mov	sp, r7
 8019a70:	bd80      	pop	{r7, pc}

08019a72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019a72:	b580      	push	{r7, lr}
 8019a74:	b08c      	sub	sp, #48	; 0x30
 8019a76:	af04      	add	r7, sp, #16
 8019a78:	60f8      	str	r0, [r7, #12]
 8019a7a:	60b9      	str	r1, [r7, #8]
 8019a7c:	603b      	str	r3, [r7, #0]
 8019a7e:	4613      	mov	r3, r2
 8019a80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019a82:	88fb      	ldrh	r3, [r7, #6]
 8019a84:	009b      	lsls	r3, r3, #2
 8019a86:	4618      	mov	r0, r3
 8019a88:	f001 fea6 	bl	801b7d8 <pvPortMalloc>
 8019a8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019a8e:	697b      	ldr	r3, [r7, #20]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d00e      	beq.n	8019ab2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019a94:	205c      	movs	r0, #92	; 0x5c
 8019a96:	f001 fe9f 	bl	801b7d8 <pvPortMalloc>
 8019a9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019a9c:	69fb      	ldr	r3, [r7, #28]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d003      	beq.n	8019aaa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019aa2:	69fb      	ldr	r3, [r7, #28]
 8019aa4:	697a      	ldr	r2, [r7, #20]
 8019aa6:	631a      	str	r2, [r3, #48]	; 0x30
 8019aa8:	e005      	b.n	8019ab6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019aaa:	6978      	ldr	r0, [r7, #20]
 8019aac:	f001 ff60 	bl	801b970 <vPortFree>
 8019ab0:	e001      	b.n	8019ab6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019ab2:	2300      	movs	r3, #0
 8019ab4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019ab6:	69fb      	ldr	r3, [r7, #28]
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d017      	beq.n	8019aec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019abc:	69fb      	ldr	r3, [r7, #28]
 8019abe:	2200      	movs	r2, #0
 8019ac0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019ac4:	88fa      	ldrh	r2, [r7, #6]
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	9303      	str	r3, [sp, #12]
 8019aca:	69fb      	ldr	r3, [r7, #28]
 8019acc:	9302      	str	r3, [sp, #8]
 8019ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ad0:	9301      	str	r3, [sp, #4]
 8019ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ad4:	9300      	str	r3, [sp, #0]
 8019ad6:	683b      	ldr	r3, [r7, #0]
 8019ad8:	68b9      	ldr	r1, [r7, #8]
 8019ada:	68f8      	ldr	r0, [r7, #12]
 8019adc:	f000 f80e 	bl	8019afc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019ae0:	69f8      	ldr	r0, [r7, #28]
 8019ae2:	f000 f89b 	bl	8019c1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019ae6:	2301      	movs	r3, #1
 8019ae8:	61bb      	str	r3, [r7, #24]
 8019aea:	e002      	b.n	8019af2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019aec:	f04f 33ff 	mov.w	r3, #4294967295
 8019af0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019af2:	69bb      	ldr	r3, [r7, #24]
	}
 8019af4:	4618      	mov	r0, r3
 8019af6:	3720      	adds	r7, #32
 8019af8:	46bd      	mov	sp, r7
 8019afa:	bd80      	pop	{r7, pc}

08019afc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019afc:	b580      	push	{r7, lr}
 8019afe:	b088      	sub	sp, #32
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	60f8      	str	r0, [r7, #12]
 8019b04:	60b9      	str	r1, [r7, #8]
 8019b06:	607a      	str	r2, [r7, #4]
 8019b08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	009b      	lsls	r3, r3, #2
 8019b12:	461a      	mov	r2, r3
 8019b14:	21a5      	movs	r1, #165	; 0xa5
 8019b16:	f002 fe33 	bl	801c780 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019b24:	3b01      	subs	r3, #1
 8019b26:	009b      	lsls	r3, r3, #2
 8019b28:	4413      	add	r3, r2
 8019b2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019b2c:	69bb      	ldr	r3, [r7, #24]
 8019b2e:	f023 0307 	bic.w	r3, r3, #7
 8019b32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019b34:	69bb      	ldr	r3, [r7, #24]
 8019b36:	f003 0307 	and.w	r3, r3, #7
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d00a      	beq.n	8019b54 <prvInitialiseNewTask+0x58>
	__asm volatile
 8019b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b42:	f383 8811 	msr	BASEPRI, r3
 8019b46:	f3bf 8f6f 	isb	sy
 8019b4a:	f3bf 8f4f 	dsb	sy
 8019b4e:	617b      	str	r3, [r7, #20]
}
 8019b50:	bf00      	nop
 8019b52:	e7fe      	b.n	8019b52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019b54:	68bb      	ldr	r3, [r7, #8]
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d01f      	beq.n	8019b9a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019b5a:	2300      	movs	r3, #0
 8019b5c:	61fb      	str	r3, [r7, #28]
 8019b5e:	e012      	b.n	8019b86 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019b60:	68ba      	ldr	r2, [r7, #8]
 8019b62:	69fb      	ldr	r3, [r7, #28]
 8019b64:	4413      	add	r3, r2
 8019b66:	7819      	ldrb	r1, [r3, #0]
 8019b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b6a:	69fb      	ldr	r3, [r7, #28]
 8019b6c:	4413      	add	r3, r2
 8019b6e:	3334      	adds	r3, #52	; 0x34
 8019b70:	460a      	mov	r2, r1
 8019b72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019b74:	68ba      	ldr	r2, [r7, #8]
 8019b76:	69fb      	ldr	r3, [r7, #28]
 8019b78:	4413      	add	r3, r2
 8019b7a:	781b      	ldrb	r3, [r3, #0]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d006      	beq.n	8019b8e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019b80:	69fb      	ldr	r3, [r7, #28]
 8019b82:	3301      	adds	r3, #1
 8019b84:	61fb      	str	r3, [r7, #28]
 8019b86:	69fb      	ldr	r3, [r7, #28]
 8019b88:	2b0f      	cmp	r3, #15
 8019b8a:	d9e9      	bls.n	8019b60 <prvInitialiseNewTask+0x64>
 8019b8c:	e000      	b.n	8019b90 <prvInitialiseNewTask+0x94>
			{
				break;
 8019b8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b92:	2200      	movs	r2, #0
 8019b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019b98:	e003      	b.n	8019ba2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b9c:	2200      	movs	r2, #0
 8019b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ba4:	2b37      	cmp	r3, #55	; 0x37
 8019ba6:	d901      	bls.n	8019bac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019ba8:	2337      	movs	r3, #55	; 0x37
 8019baa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8019bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8019bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bba:	2200      	movs	r2, #0
 8019bbc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bc0:	3304      	adds	r3, #4
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	f7fe ff64 	bl	8018a90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bca:	3318      	adds	r3, #24
 8019bcc:	4618      	mov	r0, r3
 8019bce:	f7fe ff5f 	bl	8018a90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019bd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019be0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019be6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bea:	2200      	movs	r2, #0
 8019bec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bf0:	2200      	movs	r2, #0
 8019bf2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019bf6:	683a      	ldr	r2, [r7, #0]
 8019bf8:	68f9      	ldr	r1, [r7, #12]
 8019bfa:	69b8      	ldr	r0, [r7, #24]
 8019bfc:	f001 fb9c 	bl	801b338 <pxPortInitialiseStack>
 8019c00:	4602      	mov	r2, r0
 8019c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d002      	beq.n	8019c12 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019c12:	bf00      	nop
 8019c14:	3720      	adds	r7, #32
 8019c16:	46bd      	mov	sp, r7
 8019c18:	bd80      	pop	{r7, pc}
	...

08019c1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019c1c:	b580      	push	{r7, lr}
 8019c1e:	b082      	sub	sp, #8
 8019c20:	af00      	add	r7, sp, #0
 8019c22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019c24:	f001 fcb6 	bl	801b594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019c28:	4b2d      	ldr	r3, [pc, #180]	; (8019ce0 <prvAddNewTaskToReadyList+0xc4>)
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	3301      	adds	r3, #1
 8019c2e:	4a2c      	ldr	r2, [pc, #176]	; (8019ce0 <prvAddNewTaskToReadyList+0xc4>)
 8019c30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019c32:	4b2c      	ldr	r3, [pc, #176]	; (8019ce4 <prvAddNewTaskToReadyList+0xc8>)
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d109      	bne.n	8019c4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8019c3a:	4a2a      	ldr	r2, [pc, #168]	; (8019ce4 <prvAddNewTaskToReadyList+0xc8>)
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019c40:	4b27      	ldr	r3, [pc, #156]	; (8019ce0 <prvAddNewTaskToReadyList+0xc4>)
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	2b01      	cmp	r3, #1
 8019c46:	d110      	bne.n	8019c6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019c48:	f000 fd44 	bl	801a6d4 <prvInitialiseTaskLists>
 8019c4c:	e00d      	b.n	8019c6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8019c4e:	4b26      	ldr	r3, [pc, #152]	; (8019ce8 <prvAddNewTaskToReadyList+0xcc>)
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d109      	bne.n	8019c6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019c56:	4b23      	ldr	r3, [pc, #140]	; (8019ce4 <prvAddNewTaskToReadyList+0xc8>)
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c60:	429a      	cmp	r2, r3
 8019c62:	d802      	bhi.n	8019c6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019c64:	4a1f      	ldr	r2, [pc, #124]	; (8019ce4 <prvAddNewTaskToReadyList+0xc8>)
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8019c6a:	4b20      	ldr	r3, [pc, #128]	; (8019cec <prvAddNewTaskToReadyList+0xd0>)
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	3301      	adds	r3, #1
 8019c70:	4a1e      	ldr	r2, [pc, #120]	; (8019cec <prvAddNewTaskToReadyList+0xd0>)
 8019c72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8019c74:	4b1d      	ldr	r3, [pc, #116]	; (8019cec <prvAddNewTaskToReadyList+0xd0>)
 8019c76:	681a      	ldr	r2, [r3, #0]
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c80:	4b1b      	ldr	r3, [pc, #108]	; (8019cf0 <prvAddNewTaskToReadyList+0xd4>)
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	429a      	cmp	r2, r3
 8019c86:	d903      	bls.n	8019c90 <prvAddNewTaskToReadyList+0x74>
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c8c:	4a18      	ldr	r2, [pc, #96]	; (8019cf0 <prvAddNewTaskToReadyList+0xd4>)
 8019c8e:	6013      	str	r3, [r2, #0]
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c94:	4613      	mov	r3, r2
 8019c96:	009b      	lsls	r3, r3, #2
 8019c98:	4413      	add	r3, r2
 8019c9a:	009b      	lsls	r3, r3, #2
 8019c9c:	4a15      	ldr	r2, [pc, #84]	; (8019cf4 <prvAddNewTaskToReadyList+0xd8>)
 8019c9e:	441a      	add	r2, r3
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	3304      	adds	r3, #4
 8019ca4:	4619      	mov	r1, r3
 8019ca6:	4610      	mov	r0, r2
 8019ca8:	f7fe feff 	bl	8018aaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019cac:	f001 fca2 	bl	801b5f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8019cb0:	4b0d      	ldr	r3, [pc, #52]	; (8019ce8 <prvAddNewTaskToReadyList+0xcc>)
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d00e      	beq.n	8019cd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019cb8:	4b0a      	ldr	r3, [pc, #40]	; (8019ce4 <prvAddNewTaskToReadyList+0xc8>)
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cc2:	429a      	cmp	r2, r3
 8019cc4:	d207      	bcs.n	8019cd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019cc6:	4b0c      	ldr	r3, [pc, #48]	; (8019cf8 <prvAddNewTaskToReadyList+0xdc>)
 8019cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019ccc:	601a      	str	r2, [r3, #0]
 8019cce:	f3bf 8f4f 	dsb	sy
 8019cd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019cd6:	bf00      	nop
 8019cd8:	3708      	adds	r7, #8
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	bd80      	pop	{r7, pc}
 8019cde:	bf00      	nop
 8019ce0:	200011e4 	.word	0x200011e4
 8019ce4:	20000d10 	.word	0x20000d10
 8019ce8:	200011f0 	.word	0x200011f0
 8019cec:	20001200 	.word	0x20001200
 8019cf0:	200011ec 	.word	0x200011ec
 8019cf4:	20000d14 	.word	0x20000d14
 8019cf8:	e000ed04 	.word	0xe000ed04

08019cfc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8019cfc:	b580      	push	{r7, lr}
 8019cfe:	b08a      	sub	sp, #40	; 0x28
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	6078      	str	r0, [r7, #4]
 8019d04:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8019d06:	2300      	movs	r3, #0
 8019d08:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d10a      	bne.n	8019d26 <vTaskDelayUntil+0x2a>
	__asm volatile
 8019d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d14:	f383 8811 	msr	BASEPRI, r3
 8019d18:	f3bf 8f6f 	isb	sy
 8019d1c:	f3bf 8f4f 	dsb	sy
 8019d20:	617b      	str	r3, [r7, #20]
}
 8019d22:	bf00      	nop
 8019d24:	e7fe      	b.n	8019d24 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d10a      	bne.n	8019d42 <vTaskDelayUntil+0x46>
	__asm volatile
 8019d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d30:	f383 8811 	msr	BASEPRI, r3
 8019d34:	f3bf 8f6f 	isb	sy
 8019d38:	f3bf 8f4f 	dsb	sy
 8019d3c:	613b      	str	r3, [r7, #16]
}
 8019d3e:	bf00      	nop
 8019d40:	e7fe      	b.n	8019d40 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8019d42:	4b2a      	ldr	r3, [pc, #168]	; (8019dec <vTaskDelayUntil+0xf0>)
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d00a      	beq.n	8019d60 <vTaskDelayUntil+0x64>
	__asm volatile
 8019d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d4e:	f383 8811 	msr	BASEPRI, r3
 8019d52:	f3bf 8f6f 	isb	sy
 8019d56:	f3bf 8f4f 	dsb	sy
 8019d5a:	60fb      	str	r3, [r7, #12]
}
 8019d5c:	bf00      	nop
 8019d5e:	e7fe      	b.n	8019d5e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8019d60:	f000 f8e4 	bl	8019f2c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8019d64:	4b22      	ldr	r3, [pc, #136]	; (8019df0 <vTaskDelayUntil+0xf4>)
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	683a      	ldr	r2, [r7, #0]
 8019d70:	4413      	add	r3, r2
 8019d72:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	6a3a      	ldr	r2, [r7, #32]
 8019d7a:	429a      	cmp	r2, r3
 8019d7c:	d20b      	bcs.n	8019d96 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	69fa      	ldr	r2, [r7, #28]
 8019d84:	429a      	cmp	r2, r3
 8019d86:	d211      	bcs.n	8019dac <vTaskDelayUntil+0xb0>
 8019d88:	69fa      	ldr	r2, [r7, #28]
 8019d8a:	6a3b      	ldr	r3, [r7, #32]
 8019d8c:	429a      	cmp	r2, r3
 8019d8e:	d90d      	bls.n	8019dac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8019d90:	2301      	movs	r3, #1
 8019d92:	627b      	str	r3, [r7, #36]	; 0x24
 8019d94:	e00a      	b.n	8019dac <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	69fa      	ldr	r2, [r7, #28]
 8019d9c:	429a      	cmp	r2, r3
 8019d9e:	d303      	bcc.n	8019da8 <vTaskDelayUntil+0xac>
 8019da0:	69fa      	ldr	r2, [r7, #28]
 8019da2:	6a3b      	ldr	r3, [r7, #32]
 8019da4:	429a      	cmp	r2, r3
 8019da6:	d901      	bls.n	8019dac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8019da8:	2301      	movs	r3, #1
 8019daa:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	69fa      	ldr	r2, [r7, #28]
 8019db0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8019db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	d006      	beq.n	8019dc6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8019db8:	69fa      	ldr	r2, [r7, #28]
 8019dba:	6a3b      	ldr	r3, [r7, #32]
 8019dbc:	1ad3      	subs	r3, r2, r3
 8019dbe:	2100      	movs	r1, #0
 8019dc0:	4618      	mov	r0, r3
 8019dc2:	f000 fef7 	bl	801abb4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8019dc6:	f000 f8bf 	bl	8019f48 <xTaskResumeAll>
 8019dca:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019dcc:	69bb      	ldr	r3, [r7, #24]
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d107      	bne.n	8019de2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8019dd2:	4b08      	ldr	r3, [pc, #32]	; (8019df4 <vTaskDelayUntil+0xf8>)
 8019dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019dd8:	601a      	str	r2, [r3, #0]
 8019dda:	f3bf 8f4f 	dsb	sy
 8019dde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019de2:	bf00      	nop
 8019de4:	3728      	adds	r7, #40	; 0x28
 8019de6:	46bd      	mov	sp, r7
 8019de8:	bd80      	pop	{r7, pc}
 8019dea:	bf00      	nop
 8019dec:	2000120c 	.word	0x2000120c
 8019df0:	200011e8 	.word	0x200011e8
 8019df4:	e000ed04 	.word	0xe000ed04

08019df8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	b084      	sub	sp, #16
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8019e00:	2300      	movs	r3, #0
 8019e02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d017      	beq.n	8019e3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8019e0a:	4b13      	ldr	r3, [pc, #76]	; (8019e58 <vTaskDelay+0x60>)
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d00a      	beq.n	8019e28 <vTaskDelay+0x30>
	__asm volatile
 8019e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e16:	f383 8811 	msr	BASEPRI, r3
 8019e1a:	f3bf 8f6f 	isb	sy
 8019e1e:	f3bf 8f4f 	dsb	sy
 8019e22:	60bb      	str	r3, [r7, #8]
}
 8019e24:	bf00      	nop
 8019e26:	e7fe      	b.n	8019e26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8019e28:	f000 f880 	bl	8019f2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019e2c:	2100      	movs	r1, #0
 8019e2e:	6878      	ldr	r0, [r7, #4]
 8019e30:	f000 fec0 	bl	801abb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019e34:	f000 f888 	bl	8019f48 <xTaskResumeAll>
 8019e38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d107      	bne.n	8019e50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8019e40:	4b06      	ldr	r3, [pc, #24]	; (8019e5c <vTaskDelay+0x64>)
 8019e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e46:	601a      	str	r2, [r3, #0]
 8019e48:	f3bf 8f4f 	dsb	sy
 8019e4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019e50:	bf00      	nop
 8019e52:	3710      	adds	r7, #16
 8019e54:	46bd      	mov	sp, r7
 8019e56:	bd80      	pop	{r7, pc}
 8019e58:	2000120c 	.word	0x2000120c
 8019e5c:	e000ed04 	.word	0xe000ed04

08019e60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019e60:	b580      	push	{r7, lr}
 8019e62:	b08a      	sub	sp, #40	; 0x28
 8019e64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019e66:	2300      	movs	r3, #0
 8019e68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019e6e:	463a      	mov	r2, r7
 8019e70:	1d39      	adds	r1, r7, #4
 8019e72:	f107 0308 	add.w	r3, r7, #8
 8019e76:	4618      	mov	r0, r3
 8019e78:	f7fe fb4a 	bl	8018510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019e7c:	6839      	ldr	r1, [r7, #0]
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	68ba      	ldr	r2, [r7, #8]
 8019e82:	9202      	str	r2, [sp, #8]
 8019e84:	9301      	str	r3, [sp, #4]
 8019e86:	2300      	movs	r3, #0
 8019e88:	9300      	str	r3, [sp, #0]
 8019e8a:	2300      	movs	r3, #0
 8019e8c:	460a      	mov	r2, r1
 8019e8e:	4921      	ldr	r1, [pc, #132]	; (8019f14 <vTaskStartScheduler+0xb4>)
 8019e90:	4821      	ldr	r0, [pc, #132]	; (8019f18 <vTaskStartScheduler+0xb8>)
 8019e92:	f7ff fd91 	bl	80199b8 <xTaskCreateStatic>
 8019e96:	4603      	mov	r3, r0
 8019e98:	4a20      	ldr	r2, [pc, #128]	; (8019f1c <vTaskStartScheduler+0xbc>)
 8019e9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019e9c:	4b1f      	ldr	r3, [pc, #124]	; (8019f1c <vTaskStartScheduler+0xbc>)
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d002      	beq.n	8019eaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8019ea4:	2301      	movs	r3, #1
 8019ea6:	617b      	str	r3, [r7, #20]
 8019ea8:	e001      	b.n	8019eae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8019eaa:	2300      	movs	r3, #0
 8019eac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8019eae:	697b      	ldr	r3, [r7, #20]
 8019eb0:	2b01      	cmp	r3, #1
 8019eb2:	d102      	bne.n	8019eba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8019eb4:	f000 fed2 	bl	801ac5c <xTimerCreateTimerTask>
 8019eb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8019eba:	697b      	ldr	r3, [r7, #20]
 8019ebc:	2b01      	cmp	r3, #1
 8019ebe:	d116      	bne.n	8019eee <vTaskStartScheduler+0x8e>
	__asm volatile
 8019ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ec4:	f383 8811 	msr	BASEPRI, r3
 8019ec8:	f3bf 8f6f 	isb	sy
 8019ecc:	f3bf 8f4f 	dsb	sy
 8019ed0:	613b      	str	r3, [r7, #16]
}
 8019ed2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8019ed4:	4b12      	ldr	r3, [pc, #72]	; (8019f20 <vTaskStartScheduler+0xc0>)
 8019ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8019eda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019edc:	4b11      	ldr	r3, [pc, #68]	; (8019f24 <vTaskStartScheduler+0xc4>)
 8019ede:	2201      	movs	r2, #1
 8019ee0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8019ee2:	4b11      	ldr	r3, [pc, #68]	; (8019f28 <vTaskStartScheduler+0xc8>)
 8019ee4:	2200      	movs	r2, #0
 8019ee6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019ee8:	f001 fab2 	bl	801b450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019eec:	e00e      	b.n	8019f0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019eee:	697b      	ldr	r3, [r7, #20]
 8019ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ef4:	d10a      	bne.n	8019f0c <vTaskStartScheduler+0xac>
	__asm volatile
 8019ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019efa:	f383 8811 	msr	BASEPRI, r3
 8019efe:	f3bf 8f6f 	isb	sy
 8019f02:	f3bf 8f4f 	dsb	sy
 8019f06:	60fb      	str	r3, [r7, #12]
}
 8019f08:	bf00      	nop
 8019f0a:	e7fe      	b.n	8019f0a <vTaskStartScheduler+0xaa>
}
 8019f0c:	bf00      	nop
 8019f0e:	3718      	adds	r7, #24
 8019f10:	46bd      	mov	sp, r7
 8019f12:	bd80      	pop	{r7, pc}
 8019f14:	0801daf0 	.word	0x0801daf0
 8019f18:	0801a6a5 	.word	0x0801a6a5
 8019f1c:	20001208 	.word	0x20001208
 8019f20:	20001204 	.word	0x20001204
 8019f24:	200011f0 	.word	0x200011f0
 8019f28:	200011e8 	.word	0x200011e8

08019f2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019f2c:	b480      	push	{r7}
 8019f2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8019f30:	4b04      	ldr	r3, [pc, #16]	; (8019f44 <vTaskSuspendAll+0x18>)
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	3301      	adds	r3, #1
 8019f36:	4a03      	ldr	r2, [pc, #12]	; (8019f44 <vTaskSuspendAll+0x18>)
 8019f38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8019f3a:	bf00      	nop
 8019f3c:	46bd      	mov	sp, r7
 8019f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f42:	4770      	bx	lr
 8019f44:	2000120c 	.word	0x2000120c

08019f48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	b084      	sub	sp, #16
 8019f4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8019f4e:	2300      	movs	r3, #0
 8019f50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8019f52:	2300      	movs	r3, #0
 8019f54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8019f56:	4b42      	ldr	r3, [pc, #264]	; (801a060 <xTaskResumeAll+0x118>)
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d10a      	bne.n	8019f74 <xTaskResumeAll+0x2c>
	__asm volatile
 8019f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f62:	f383 8811 	msr	BASEPRI, r3
 8019f66:	f3bf 8f6f 	isb	sy
 8019f6a:	f3bf 8f4f 	dsb	sy
 8019f6e:	603b      	str	r3, [r7, #0]
}
 8019f70:	bf00      	nop
 8019f72:	e7fe      	b.n	8019f72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019f74:	f001 fb0e 	bl	801b594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019f78:	4b39      	ldr	r3, [pc, #228]	; (801a060 <xTaskResumeAll+0x118>)
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	3b01      	subs	r3, #1
 8019f7e:	4a38      	ldr	r2, [pc, #224]	; (801a060 <xTaskResumeAll+0x118>)
 8019f80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019f82:	4b37      	ldr	r3, [pc, #220]	; (801a060 <xTaskResumeAll+0x118>)
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d162      	bne.n	801a050 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019f8a:	4b36      	ldr	r3, [pc, #216]	; (801a064 <xTaskResumeAll+0x11c>)
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d05e      	beq.n	801a050 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019f92:	e02f      	b.n	8019ff4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019f94:	4b34      	ldr	r3, [pc, #208]	; (801a068 <xTaskResumeAll+0x120>)
 8019f96:	68db      	ldr	r3, [r3, #12]
 8019f98:	68db      	ldr	r3, [r3, #12]
 8019f9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	3318      	adds	r3, #24
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	f7fe fddf 	bl	8018b64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019fa6:	68fb      	ldr	r3, [r7, #12]
 8019fa8:	3304      	adds	r3, #4
 8019faa:	4618      	mov	r0, r3
 8019fac:	f7fe fdda 	bl	8018b64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019fb4:	4b2d      	ldr	r3, [pc, #180]	; (801a06c <xTaskResumeAll+0x124>)
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	429a      	cmp	r2, r3
 8019fba:	d903      	bls.n	8019fc4 <xTaskResumeAll+0x7c>
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fc0:	4a2a      	ldr	r2, [pc, #168]	; (801a06c <xTaskResumeAll+0x124>)
 8019fc2:	6013      	str	r3, [r2, #0]
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019fc8:	4613      	mov	r3, r2
 8019fca:	009b      	lsls	r3, r3, #2
 8019fcc:	4413      	add	r3, r2
 8019fce:	009b      	lsls	r3, r3, #2
 8019fd0:	4a27      	ldr	r2, [pc, #156]	; (801a070 <xTaskResumeAll+0x128>)
 8019fd2:	441a      	add	r2, r3
 8019fd4:	68fb      	ldr	r3, [r7, #12]
 8019fd6:	3304      	adds	r3, #4
 8019fd8:	4619      	mov	r1, r3
 8019fda:	4610      	mov	r0, r2
 8019fdc:	f7fe fd65 	bl	8018aaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019fe4:	4b23      	ldr	r3, [pc, #140]	; (801a074 <xTaskResumeAll+0x12c>)
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fea:	429a      	cmp	r2, r3
 8019fec:	d302      	bcc.n	8019ff4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8019fee:	4b22      	ldr	r3, [pc, #136]	; (801a078 <xTaskResumeAll+0x130>)
 8019ff0:	2201      	movs	r2, #1
 8019ff2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019ff4:	4b1c      	ldr	r3, [pc, #112]	; (801a068 <xTaskResumeAll+0x120>)
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d1cb      	bne.n	8019f94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d001      	beq.n	801a006 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a002:	f000 fc05 	bl	801a810 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801a006:	4b1d      	ldr	r3, [pc, #116]	; (801a07c <xTaskResumeAll+0x134>)
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d010      	beq.n	801a034 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a012:	f000 f859 	bl	801a0c8 <xTaskIncrementTick>
 801a016:	4603      	mov	r3, r0
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d002      	beq.n	801a022 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801a01c:	4b16      	ldr	r3, [pc, #88]	; (801a078 <xTaskResumeAll+0x130>)
 801a01e:	2201      	movs	r2, #1
 801a020:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	3b01      	subs	r3, #1
 801a026:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d1f1      	bne.n	801a012 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801a02e:	4b13      	ldr	r3, [pc, #76]	; (801a07c <xTaskResumeAll+0x134>)
 801a030:	2200      	movs	r2, #0
 801a032:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a034:	4b10      	ldr	r3, [pc, #64]	; (801a078 <xTaskResumeAll+0x130>)
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d009      	beq.n	801a050 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a03c:	2301      	movs	r3, #1
 801a03e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a040:	4b0f      	ldr	r3, [pc, #60]	; (801a080 <xTaskResumeAll+0x138>)
 801a042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a046:	601a      	str	r2, [r3, #0]
 801a048:	f3bf 8f4f 	dsb	sy
 801a04c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a050:	f001 fad0 	bl	801b5f4 <vPortExitCritical>

	return xAlreadyYielded;
 801a054:	68bb      	ldr	r3, [r7, #8]
}
 801a056:	4618      	mov	r0, r3
 801a058:	3710      	adds	r7, #16
 801a05a:	46bd      	mov	sp, r7
 801a05c:	bd80      	pop	{r7, pc}
 801a05e:	bf00      	nop
 801a060:	2000120c 	.word	0x2000120c
 801a064:	200011e4 	.word	0x200011e4
 801a068:	200011a4 	.word	0x200011a4
 801a06c:	200011ec 	.word	0x200011ec
 801a070:	20000d14 	.word	0x20000d14
 801a074:	20000d10 	.word	0x20000d10
 801a078:	200011f8 	.word	0x200011f8
 801a07c:	200011f4 	.word	0x200011f4
 801a080:	e000ed04 	.word	0xe000ed04

0801a084 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801a084:	b480      	push	{r7}
 801a086:	b083      	sub	sp, #12
 801a088:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801a08a:	4b05      	ldr	r3, [pc, #20]	; (801a0a0 <xTaskGetTickCount+0x1c>)
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801a090:	687b      	ldr	r3, [r7, #4]
}
 801a092:	4618      	mov	r0, r3
 801a094:	370c      	adds	r7, #12
 801a096:	46bd      	mov	sp, r7
 801a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a09c:	4770      	bx	lr
 801a09e:	bf00      	nop
 801a0a0:	200011e8 	.word	0x200011e8

0801a0a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801a0a4:	b580      	push	{r7, lr}
 801a0a6:	b082      	sub	sp, #8
 801a0a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a0aa:	f001 fb55 	bl	801b758 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801a0ae:	2300      	movs	r3, #0
 801a0b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801a0b2:	4b04      	ldr	r3, [pc, #16]	; (801a0c4 <xTaskGetTickCountFromISR+0x20>)
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a0b8:	683b      	ldr	r3, [r7, #0]
}
 801a0ba:	4618      	mov	r0, r3
 801a0bc:	3708      	adds	r7, #8
 801a0be:	46bd      	mov	sp, r7
 801a0c0:	bd80      	pop	{r7, pc}
 801a0c2:	bf00      	nop
 801a0c4:	200011e8 	.word	0x200011e8

0801a0c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a0c8:	b580      	push	{r7, lr}
 801a0ca:	b086      	sub	sp, #24
 801a0cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a0ce:	2300      	movs	r3, #0
 801a0d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a0d2:	4b4f      	ldr	r3, [pc, #316]	; (801a210 <xTaskIncrementTick+0x148>)
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	f040 808f 	bne.w	801a1fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a0dc:	4b4d      	ldr	r3, [pc, #308]	; (801a214 <xTaskIncrementTick+0x14c>)
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	3301      	adds	r3, #1
 801a0e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a0e4:	4a4b      	ldr	r2, [pc, #300]	; (801a214 <xTaskIncrementTick+0x14c>)
 801a0e6:	693b      	ldr	r3, [r7, #16]
 801a0e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a0ea:	693b      	ldr	r3, [r7, #16]
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d120      	bne.n	801a132 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801a0f0:	4b49      	ldr	r3, [pc, #292]	; (801a218 <xTaskIncrementTick+0x150>)
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d00a      	beq.n	801a110 <xTaskIncrementTick+0x48>
	__asm volatile
 801a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0fe:	f383 8811 	msr	BASEPRI, r3
 801a102:	f3bf 8f6f 	isb	sy
 801a106:	f3bf 8f4f 	dsb	sy
 801a10a:	603b      	str	r3, [r7, #0]
}
 801a10c:	bf00      	nop
 801a10e:	e7fe      	b.n	801a10e <xTaskIncrementTick+0x46>
 801a110:	4b41      	ldr	r3, [pc, #260]	; (801a218 <xTaskIncrementTick+0x150>)
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	60fb      	str	r3, [r7, #12]
 801a116:	4b41      	ldr	r3, [pc, #260]	; (801a21c <xTaskIncrementTick+0x154>)
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	4a3f      	ldr	r2, [pc, #252]	; (801a218 <xTaskIncrementTick+0x150>)
 801a11c:	6013      	str	r3, [r2, #0]
 801a11e:	4a3f      	ldr	r2, [pc, #252]	; (801a21c <xTaskIncrementTick+0x154>)
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	6013      	str	r3, [r2, #0]
 801a124:	4b3e      	ldr	r3, [pc, #248]	; (801a220 <xTaskIncrementTick+0x158>)
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	3301      	adds	r3, #1
 801a12a:	4a3d      	ldr	r2, [pc, #244]	; (801a220 <xTaskIncrementTick+0x158>)
 801a12c:	6013      	str	r3, [r2, #0]
 801a12e:	f000 fb6f 	bl	801a810 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a132:	4b3c      	ldr	r3, [pc, #240]	; (801a224 <xTaskIncrementTick+0x15c>)
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	693a      	ldr	r2, [r7, #16]
 801a138:	429a      	cmp	r2, r3
 801a13a:	d349      	bcc.n	801a1d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a13c:	4b36      	ldr	r3, [pc, #216]	; (801a218 <xTaskIncrementTick+0x150>)
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	2b00      	cmp	r3, #0
 801a144:	d104      	bne.n	801a150 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a146:	4b37      	ldr	r3, [pc, #220]	; (801a224 <xTaskIncrementTick+0x15c>)
 801a148:	f04f 32ff 	mov.w	r2, #4294967295
 801a14c:	601a      	str	r2, [r3, #0]
					break;
 801a14e:	e03f      	b.n	801a1d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a150:	4b31      	ldr	r3, [pc, #196]	; (801a218 <xTaskIncrementTick+0x150>)
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	68db      	ldr	r3, [r3, #12]
 801a156:	68db      	ldr	r3, [r3, #12]
 801a158:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a15a:	68bb      	ldr	r3, [r7, #8]
 801a15c:	685b      	ldr	r3, [r3, #4]
 801a15e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a160:	693a      	ldr	r2, [r7, #16]
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	429a      	cmp	r2, r3
 801a166:	d203      	bcs.n	801a170 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a168:	4a2e      	ldr	r2, [pc, #184]	; (801a224 <xTaskIncrementTick+0x15c>)
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a16e:	e02f      	b.n	801a1d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a170:	68bb      	ldr	r3, [r7, #8]
 801a172:	3304      	adds	r3, #4
 801a174:	4618      	mov	r0, r3
 801a176:	f7fe fcf5 	bl	8018b64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a17a:	68bb      	ldr	r3, [r7, #8]
 801a17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d004      	beq.n	801a18c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a182:	68bb      	ldr	r3, [r7, #8]
 801a184:	3318      	adds	r3, #24
 801a186:	4618      	mov	r0, r3
 801a188:	f7fe fcec 	bl	8018b64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a18c:	68bb      	ldr	r3, [r7, #8]
 801a18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a190:	4b25      	ldr	r3, [pc, #148]	; (801a228 <xTaskIncrementTick+0x160>)
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	429a      	cmp	r2, r3
 801a196:	d903      	bls.n	801a1a0 <xTaskIncrementTick+0xd8>
 801a198:	68bb      	ldr	r3, [r7, #8]
 801a19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a19c:	4a22      	ldr	r2, [pc, #136]	; (801a228 <xTaskIncrementTick+0x160>)
 801a19e:	6013      	str	r3, [r2, #0]
 801a1a0:	68bb      	ldr	r3, [r7, #8]
 801a1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a1a4:	4613      	mov	r3, r2
 801a1a6:	009b      	lsls	r3, r3, #2
 801a1a8:	4413      	add	r3, r2
 801a1aa:	009b      	lsls	r3, r3, #2
 801a1ac:	4a1f      	ldr	r2, [pc, #124]	; (801a22c <xTaskIncrementTick+0x164>)
 801a1ae:	441a      	add	r2, r3
 801a1b0:	68bb      	ldr	r3, [r7, #8]
 801a1b2:	3304      	adds	r3, #4
 801a1b4:	4619      	mov	r1, r3
 801a1b6:	4610      	mov	r0, r2
 801a1b8:	f7fe fc77 	bl	8018aaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a1bc:	68bb      	ldr	r3, [r7, #8]
 801a1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a1c0:	4b1b      	ldr	r3, [pc, #108]	; (801a230 <xTaskIncrementTick+0x168>)
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1c6:	429a      	cmp	r2, r3
 801a1c8:	d3b8      	bcc.n	801a13c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801a1ca:	2301      	movs	r3, #1
 801a1cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a1ce:	e7b5      	b.n	801a13c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a1d0:	4b17      	ldr	r3, [pc, #92]	; (801a230 <xTaskIncrementTick+0x168>)
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a1d6:	4915      	ldr	r1, [pc, #84]	; (801a22c <xTaskIncrementTick+0x164>)
 801a1d8:	4613      	mov	r3, r2
 801a1da:	009b      	lsls	r3, r3, #2
 801a1dc:	4413      	add	r3, r2
 801a1de:	009b      	lsls	r3, r3, #2
 801a1e0:	440b      	add	r3, r1
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	2b01      	cmp	r3, #1
 801a1e6:	d901      	bls.n	801a1ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801a1e8:	2301      	movs	r3, #1
 801a1ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801a1ec:	4b11      	ldr	r3, [pc, #68]	; (801a234 <xTaskIncrementTick+0x16c>)
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d007      	beq.n	801a204 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801a1f4:	2301      	movs	r3, #1
 801a1f6:	617b      	str	r3, [r7, #20]
 801a1f8:	e004      	b.n	801a204 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801a1fa:	4b0f      	ldr	r3, [pc, #60]	; (801a238 <xTaskIncrementTick+0x170>)
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	3301      	adds	r3, #1
 801a200:	4a0d      	ldr	r2, [pc, #52]	; (801a238 <xTaskIncrementTick+0x170>)
 801a202:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801a204:	697b      	ldr	r3, [r7, #20]
}
 801a206:	4618      	mov	r0, r3
 801a208:	3718      	adds	r7, #24
 801a20a:	46bd      	mov	sp, r7
 801a20c:	bd80      	pop	{r7, pc}
 801a20e:	bf00      	nop
 801a210:	2000120c 	.word	0x2000120c
 801a214:	200011e8 	.word	0x200011e8
 801a218:	2000119c 	.word	0x2000119c
 801a21c:	200011a0 	.word	0x200011a0
 801a220:	200011fc 	.word	0x200011fc
 801a224:	20001204 	.word	0x20001204
 801a228:	200011ec 	.word	0x200011ec
 801a22c:	20000d14 	.word	0x20000d14
 801a230:	20000d10 	.word	0x20000d10
 801a234:	200011f8 	.word	0x200011f8
 801a238:	200011f4 	.word	0x200011f4

0801a23c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a23c:	b480      	push	{r7}
 801a23e:	b085      	sub	sp, #20
 801a240:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a242:	4b28      	ldr	r3, [pc, #160]	; (801a2e4 <vTaskSwitchContext+0xa8>)
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d003      	beq.n	801a252 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a24a:	4b27      	ldr	r3, [pc, #156]	; (801a2e8 <vTaskSwitchContext+0xac>)
 801a24c:	2201      	movs	r2, #1
 801a24e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a250:	e041      	b.n	801a2d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801a252:	4b25      	ldr	r3, [pc, #148]	; (801a2e8 <vTaskSwitchContext+0xac>)
 801a254:	2200      	movs	r2, #0
 801a256:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a258:	4b24      	ldr	r3, [pc, #144]	; (801a2ec <vTaskSwitchContext+0xb0>)
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	60fb      	str	r3, [r7, #12]
 801a25e:	e010      	b.n	801a282 <vTaskSwitchContext+0x46>
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	2b00      	cmp	r3, #0
 801a264:	d10a      	bne.n	801a27c <vTaskSwitchContext+0x40>
	__asm volatile
 801a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a26a:	f383 8811 	msr	BASEPRI, r3
 801a26e:	f3bf 8f6f 	isb	sy
 801a272:	f3bf 8f4f 	dsb	sy
 801a276:	607b      	str	r3, [r7, #4]
}
 801a278:	bf00      	nop
 801a27a:	e7fe      	b.n	801a27a <vTaskSwitchContext+0x3e>
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	3b01      	subs	r3, #1
 801a280:	60fb      	str	r3, [r7, #12]
 801a282:	491b      	ldr	r1, [pc, #108]	; (801a2f0 <vTaskSwitchContext+0xb4>)
 801a284:	68fa      	ldr	r2, [r7, #12]
 801a286:	4613      	mov	r3, r2
 801a288:	009b      	lsls	r3, r3, #2
 801a28a:	4413      	add	r3, r2
 801a28c:	009b      	lsls	r3, r3, #2
 801a28e:	440b      	add	r3, r1
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	2b00      	cmp	r3, #0
 801a294:	d0e4      	beq.n	801a260 <vTaskSwitchContext+0x24>
 801a296:	68fa      	ldr	r2, [r7, #12]
 801a298:	4613      	mov	r3, r2
 801a29a:	009b      	lsls	r3, r3, #2
 801a29c:	4413      	add	r3, r2
 801a29e:	009b      	lsls	r3, r3, #2
 801a2a0:	4a13      	ldr	r2, [pc, #76]	; (801a2f0 <vTaskSwitchContext+0xb4>)
 801a2a2:	4413      	add	r3, r2
 801a2a4:	60bb      	str	r3, [r7, #8]
 801a2a6:	68bb      	ldr	r3, [r7, #8]
 801a2a8:	685b      	ldr	r3, [r3, #4]
 801a2aa:	685a      	ldr	r2, [r3, #4]
 801a2ac:	68bb      	ldr	r3, [r7, #8]
 801a2ae:	605a      	str	r2, [r3, #4]
 801a2b0:	68bb      	ldr	r3, [r7, #8]
 801a2b2:	685a      	ldr	r2, [r3, #4]
 801a2b4:	68bb      	ldr	r3, [r7, #8]
 801a2b6:	3308      	adds	r3, #8
 801a2b8:	429a      	cmp	r2, r3
 801a2ba:	d104      	bne.n	801a2c6 <vTaskSwitchContext+0x8a>
 801a2bc:	68bb      	ldr	r3, [r7, #8]
 801a2be:	685b      	ldr	r3, [r3, #4]
 801a2c0:	685a      	ldr	r2, [r3, #4]
 801a2c2:	68bb      	ldr	r3, [r7, #8]
 801a2c4:	605a      	str	r2, [r3, #4]
 801a2c6:	68bb      	ldr	r3, [r7, #8]
 801a2c8:	685b      	ldr	r3, [r3, #4]
 801a2ca:	68db      	ldr	r3, [r3, #12]
 801a2cc:	4a09      	ldr	r2, [pc, #36]	; (801a2f4 <vTaskSwitchContext+0xb8>)
 801a2ce:	6013      	str	r3, [r2, #0]
 801a2d0:	4a06      	ldr	r2, [pc, #24]	; (801a2ec <vTaskSwitchContext+0xb0>)
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	6013      	str	r3, [r2, #0]
}
 801a2d6:	bf00      	nop
 801a2d8:	3714      	adds	r7, #20
 801a2da:	46bd      	mov	sp, r7
 801a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e0:	4770      	bx	lr
 801a2e2:	bf00      	nop
 801a2e4:	2000120c 	.word	0x2000120c
 801a2e8:	200011f8 	.word	0x200011f8
 801a2ec:	200011ec 	.word	0x200011ec
 801a2f0:	20000d14 	.word	0x20000d14
 801a2f4:	20000d10 	.word	0x20000d10

0801a2f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a2f8:	b580      	push	{r7, lr}
 801a2fa:	b084      	sub	sp, #16
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
 801a300:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	2b00      	cmp	r3, #0
 801a306:	d10a      	bne.n	801a31e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a30c:	f383 8811 	msr	BASEPRI, r3
 801a310:	f3bf 8f6f 	isb	sy
 801a314:	f3bf 8f4f 	dsb	sy
 801a318:	60fb      	str	r3, [r7, #12]
}
 801a31a:	bf00      	nop
 801a31c:	e7fe      	b.n	801a31c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a31e:	4b07      	ldr	r3, [pc, #28]	; (801a33c <vTaskPlaceOnEventList+0x44>)
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	3318      	adds	r3, #24
 801a324:	4619      	mov	r1, r3
 801a326:	6878      	ldr	r0, [r7, #4]
 801a328:	f7fe fbe3 	bl	8018af2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a32c:	2101      	movs	r1, #1
 801a32e:	6838      	ldr	r0, [r7, #0]
 801a330:	f000 fc40 	bl	801abb4 <prvAddCurrentTaskToDelayedList>
}
 801a334:	bf00      	nop
 801a336:	3710      	adds	r7, #16
 801a338:	46bd      	mov	sp, r7
 801a33a:	bd80      	pop	{r7, pc}
 801a33c:	20000d10 	.word	0x20000d10

0801a340 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801a340:	b580      	push	{r7, lr}
 801a342:	b086      	sub	sp, #24
 801a344:	af00      	add	r7, sp, #0
 801a346:	60f8      	str	r0, [r7, #12]
 801a348:	60b9      	str	r1, [r7, #8]
 801a34a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d10a      	bne.n	801a368 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a356:	f383 8811 	msr	BASEPRI, r3
 801a35a:	f3bf 8f6f 	isb	sy
 801a35e:	f3bf 8f4f 	dsb	sy
 801a362:	617b      	str	r3, [r7, #20]
}
 801a364:	bf00      	nop
 801a366:	e7fe      	b.n	801a366 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801a368:	4b11      	ldr	r3, [pc, #68]	; (801a3b0 <vTaskPlaceOnUnorderedEventList+0x70>)
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d10a      	bne.n	801a386 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801a370:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a374:	f383 8811 	msr	BASEPRI, r3
 801a378:	f3bf 8f6f 	isb	sy
 801a37c:	f3bf 8f4f 	dsb	sy
 801a380:	613b      	str	r3, [r7, #16]
}
 801a382:	bf00      	nop
 801a384:	e7fe      	b.n	801a384 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801a386:	4b0b      	ldr	r3, [pc, #44]	; (801a3b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	68ba      	ldr	r2, [r7, #8]
 801a38c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801a390:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a392:	4b08      	ldr	r3, [pc, #32]	; (801a3b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	3318      	adds	r3, #24
 801a398:	4619      	mov	r1, r3
 801a39a:	68f8      	ldr	r0, [r7, #12]
 801a39c:	f7fe fb85 	bl	8018aaa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a3a0:	2101      	movs	r1, #1
 801a3a2:	6878      	ldr	r0, [r7, #4]
 801a3a4:	f000 fc06 	bl	801abb4 <prvAddCurrentTaskToDelayedList>
}
 801a3a8:	bf00      	nop
 801a3aa:	3718      	adds	r7, #24
 801a3ac:	46bd      	mov	sp, r7
 801a3ae:	bd80      	pop	{r7, pc}
 801a3b0:	2000120c 	.word	0x2000120c
 801a3b4:	20000d10 	.word	0x20000d10

0801a3b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	b086      	sub	sp, #24
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	60f8      	str	r0, [r7, #12]
 801a3c0:	60b9      	str	r1, [r7, #8]
 801a3c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d10a      	bne.n	801a3e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3ce:	f383 8811 	msr	BASEPRI, r3
 801a3d2:	f3bf 8f6f 	isb	sy
 801a3d6:	f3bf 8f4f 	dsb	sy
 801a3da:	617b      	str	r3, [r7, #20]
}
 801a3dc:	bf00      	nop
 801a3de:	e7fe      	b.n	801a3de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a3e0:	4b0a      	ldr	r3, [pc, #40]	; (801a40c <vTaskPlaceOnEventListRestricted+0x54>)
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	3318      	adds	r3, #24
 801a3e6:	4619      	mov	r1, r3
 801a3e8:	68f8      	ldr	r0, [r7, #12]
 801a3ea:	f7fe fb5e 	bl	8018aaa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d002      	beq.n	801a3fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801a3f4:	f04f 33ff 	mov.w	r3, #4294967295
 801a3f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801a3fa:	6879      	ldr	r1, [r7, #4]
 801a3fc:	68b8      	ldr	r0, [r7, #8]
 801a3fe:	f000 fbd9 	bl	801abb4 <prvAddCurrentTaskToDelayedList>
	}
 801a402:	bf00      	nop
 801a404:	3718      	adds	r7, #24
 801a406:	46bd      	mov	sp, r7
 801a408:	bd80      	pop	{r7, pc}
 801a40a:	bf00      	nop
 801a40c:	20000d10 	.word	0x20000d10

0801a410 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a410:	b580      	push	{r7, lr}
 801a412:	b086      	sub	sp, #24
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	68db      	ldr	r3, [r3, #12]
 801a41c:	68db      	ldr	r3, [r3, #12]
 801a41e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a420:	693b      	ldr	r3, [r7, #16]
 801a422:	2b00      	cmp	r3, #0
 801a424:	d10a      	bne.n	801a43c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801a426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a42a:	f383 8811 	msr	BASEPRI, r3
 801a42e:	f3bf 8f6f 	isb	sy
 801a432:	f3bf 8f4f 	dsb	sy
 801a436:	60fb      	str	r3, [r7, #12]
}
 801a438:	bf00      	nop
 801a43a:	e7fe      	b.n	801a43a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a43c:	693b      	ldr	r3, [r7, #16]
 801a43e:	3318      	adds	r3, #24
 801a440:	4618      	mov	r0, r3
 801a442:	f7fe fb8f 	bl	8018b64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a446:	4b1e      	ldr	r3, [pc, #120]	; (801a4c0 <xTaskRemoveFromEventList+0xb0>)
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d11d      	bne.n	801a48a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a44e:	693b      	ldr	r3, [r7, #16]
 801a450:	3304      	adds	r3, #4
 801a452:	4618      	mov	r0, r3
 801a454:	f7fe fb86 	bl	8018b64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a458:	693b      	ldr	r3, [r7, #16]
 801a45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a45c:	4b19      	ldr	r3, [pc, #100]	; (801a4c4 <xTaskRemoveFromEventList+0xb4>)
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	429a      	cmp	r2, r3
 801a462:	d903      	bls.n	801a46c <xTaskRemoveFromEventList+0x5c>
 801a464:	693b      	ldr	r3, [r7, #16]
 801a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a468:	4a16      	ldr	r2, [pc, #88]	; (801a4c4 <xTaskRemoveFromEventList+0xb4>)
 801a46a:	6013      	str	r3, [r2, #0]
 801a46c:	693b      	ldr	r3, [r7, #16]
 801a46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a470:	4613      	mov	r3, r2
 801a472:	009b      	lsls	r3, r3, #2
 801a474:	4413      	add	r3, r2
 801a476:	009b      	lsls	r3, r3, #2
 801a478:	4a13      	ldr	r2, [pc, #76]	; (801a4c8 <xTaskRemoveFromEventList+0xb8>)
 801a47a:	441a      	add	r2, r3
 801a47c:	693b      	ldr	r3, [r7, #16]
 801a47e:	3304      	adds	r3, #4
 801a480:	4619      	mov	r1, r3
 801a482:	4610      	mov	r0, r2
 801a484:	f7fe fb11 	bl	8018aaa <vListInsertEnd>
 801a488:	e005      	b.n	801a496 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a48a:	693b      	ldr	r3, [r7, #16]
 801a48c:	3318      	adds	r3, #24
 801a48e:	4619      	mov	r1, r3
 801a490:	480e      	ldr	r0, [pc, #56]	; (801a4cc <xTaskRemoveFromEventList+0xbc>)
 801a492:	f7fe fb0a 	bl	8018aaa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a496:	693b      	ldr	r3, [r7, #16]
 801a498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a49a:	4b0d      	ldr	r3, [pc, #52]	; (801a4d0 <xTaskRemoveFromEventList+0xc0>)
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4a0:	429a      	cmp	r2, r3
 801a4a2:	d905      	bls.n	801a4b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a4a4:	2301      	movs	r3, #1
 801a4a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a4a8:	4b0a      	ldr	r3, [pc, #40]	; (801a4d4 <xTaskRemoveFromEventList+0xc4>)
 801a4aa:	2201      	movs	r2, #1
 801a4ac:	601a      	str	r2, [r3, #0]
 801a4ae:	e001      	b.n	801a4b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801a4b0:	2300      	movs	r3, #0
 801a4b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801a4b4:	697b      	ldr	r3, [r7, #20]
}
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	3718      	adds	r7, #24
 801a4ba:	46bd      	mov	sp, r7
 801a4bc:	bd80      	pop	{r7, pc}
 801a4be:	bf00      	nop
 801a4c0:	2000120c 	.word	0x2000120c
 801a4c4:	200011ec 	.word	0x200011ec
 801a4c8:	20000d14 	.word	0x20000d14
 801a4cc:	200011a4 	.word	0x200011a4
 801a4d0:	20000d10 	.word	0x20000d10
 801a4d4:	200011f8 	.word	0x200011f8

0801a4d8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	b086      	sub	sp, #24
 801a4dc:	af00      	add	r7, sp, #0
 801a4de:	6078      	str	r0, [r7, #4]
 801a4e0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801a4e2:	4b29      	ldr	r3, [pc, #164]	; (801a588 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d10a      	bne.n	801a500 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4ee:	f383 8811 	msr	BASEPRI, r3
 801a4f2:	f3bf 8f6f 	isb	sy
 801a4f6:	f3bf 8f4f 	dsb	sy
 801a4fa:	613b      	str	r3, [r7, #16]
}
 801a4fc:	bf00      	nop
 801a4fe:	e7fe      	b.n	801a4fe <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801a500:	683b      	ldr	r3, [r7, #0]
 801a502:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	68db      	ldr	r3, [r3, #12]
 801a50e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801a510:	697b      	ldr	r3, [r7, #20]
 801a512:	2b00      	cmp	r3, #0
 801a514:	d10a      	bne.n	801a52c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801a516:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a51a:	f383 8811 	msr	BASEPRI, r3
 801a51e:	f3bf 8f6f 	isb	sy
 801a522:	f3bf 8f4f 	dsb	sy
 801a526:	60fb      	str	r3, [r7, #12]
}
 801a528:	bf00      	nop
 801a52a:	e7fe      	b.n	801a52a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801a52c:	6878      	ldr	r0, [r7, #4]
 801a52e:	f7fe fb19 	bl	8018b64 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a532:	697b      	ldr	r3, [r7, #20]
 801a534:	3304      	adds	r3, #4
 801a536:	4618      	mov	r0, r3
 801a538:	f7fe fb14 	bl	8018b64 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801a53c:	697b      	ldr	r3, [r7, #20]
 801a53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a540:	4b12      	ldr	r3, [pc, #72]	; (801a58c <vTaskRemoveFromUnorderedEventList+0xb4>)
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	429a      	cmp	r2, r3
 801a546:	d903      	bls.n	801a550 <vTaskRemoveFromUnorderedEventList+0x78>
 801a548:	697b      	ldr	r3, [r7, #20]
 801a54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a54c:	4a0f      	ldr	r2, [pc, #60]	; (801a58c <vTaskRemoveFromUnorderedEventList+0xb4>)
 801a54e:	6013      	str	r3, [r2, #0]
 801a550:	697b      	ldr	r3, [r7, #20]
 801a552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a554:	4613      	mov	r3, r2
 801a556:	009b      	lsls	r3, r3, #2
 801a558:	4413      	add	r3, r2
 801a55a:	009b      	lsls	r3, r3, #2
 801a55c:	4a0c      	ldr	r2, [pc, #48]	; (801a590 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801a55e:	441a      	add	r2, r3
 801a560:	697b      	ldr	r3, [r7, #20]
 801a562:	3304      	adds	r3, #4
 801a564:	4619      	mov	r1, r3
 801a566:	4610      	mov	r0, r2
 801a568:	f7fe fa9f 	bl	8018aaa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a56c:	697b      	ldr	r3, [r7, #20]
 801a56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a570:	4b08      	ldr	r3, [pc, #32]	; (801a594 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a576:	429a      	cmp	r2, r3
 801a578:	d902      	bls.n	801a580 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801a57a:	4b07      	ldr	r3, [pc, #28]	; (801a598 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801a57c:	2201      	movs	r2, #1
 801a57e:	601a      	str	r2, [r3, #0]
	}
}
 801a580:	bf00      	nop
 801a582:	3718      	adds	r7, #24
 801a584:	46bd      	mov	sp, r7
 801a586:	bd80      	pop	{r7, pc}
 801a588:	2000120c 	.word	0x2000120c
 801a58c:	200011ec 	.word	0x200011ec
 801a590:	20000d14 	.word	0x20000d14
 801a594:	20000d10 	.word	0x20000d10
 801a598:	200011f8 	.word	0x200011f8

0801a59c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a59c:	b480      	push	{r7}
 801a59e:	b083      	sub	sp, #12
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a5a4:	4b06      	ldr	r3, [pc, #24]	; (801a5c0 <vTaskInternalSetTimeOutState+0x24>)
 801a5a6:	681a      	ldr	r2, [r3, #0]
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a5ac:	4b05      	ldr	r3, [pc, #20]	; (801a5c4 <vTaskInternalSetTimeOutState+0x28>)
 801a5ae:	681a      	ldr	r2, [r3, #0]
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	605a      	str	r2, [r3, #4]
}
 801a5b4:	bf00      	nop
 801a5b6:	370c      	adds	r7, #12
 801a5b8:	46bd      	mov	sp, r7
 801a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5be:	4770      	bx	lr
 801a5c0:	200011fc 	.word	0x200011fc
 801a5c4:	200011e8 	.word	0x200011e8

0801a5c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b088      	sub	sp, #32
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	6078      	str	r0, [r7, #4]
 801a5d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d10a      	bne.n	801a5ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801a5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5dc:	f383 8811 	msr	BASEPRI, r3
 801a5e0:	f3bf 8f6f 	isb	sy
 801a5e4:	f3bf 8f4f 	dsb	sy
 801a5e8:	613b      	str	r3, [r7, #16]
}
 801a5ea:	bf00      	nop
 801a5ec:	e7fe      	b.n	801a5ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801a5ee:	683b      	ldr	r3, [r7, #0]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d10a      	bne.n	801a60a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801a5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5f8:	f383 8811 	msr	BASEPRI, r3
 801a5fc:	f3bf 8f6f 	isb	sy
 801a600:	f3bf 8f4f 	dsb	sy
 801a604:	60fb      	str	r3, [r7, #12]
}
 801a606:	bf00      	nop
 801a608:	e7fe      	b.n	801a608 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801a60a:	f000 ffc3 	bl	801b594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a60e:	4b1d      	ldr	r3, [pc, #116]	; (801a684 <xTaskCheckForTimeOut+0xbc>)
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	685b      	ldr	r3, [r3, #4]
 801a618:	69ba      	ldr	r2, [r7, #24]
 801a61a:	1ad3      	subs	r3, r2, r3
 801a61c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a61e:	683b      	ldr	r3, [r7, #0]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a626:	d102      	bne.n	801a62e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a628:	2300      	movs	r3, #0
 801a62a:	61fb      	str	r3, [r7, #28]
 801a62c:	e023      	b.n	801a676 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	681a      	ldr	r2, [r3, #0]
 801a632:	4b15      	ldr	r3, [pc, #84]	; (801a688 <xTaskCheckForTimeOut+0xc0>)
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	429a      	cmp	r2, r3
 801a638:	d007      	beq.n	801a64a <xTaskCheckForTimeOut+0x82>
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	685b      	ldr	r3, [r3, #4]
 801a63e:	69ba      	ldr	r2, [r7, #24]
 801a640:	429a      	cmp	r2, r3
 801a642:	d302      	bcc.n	801a64a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a644:	2301      	movs	r3, #1
 801a646:	61fb      	str	r3, [r7, #28]
 801a648:	e015      	b.n	801a676 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a64a:	683b      	ldr	r3, [r7, #0]
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	697a      	ldr	r2, [r7, #20]
 801a650:	429a      	cmp	r2, r3
 801a652:	d20b      	bcs.n	801a66c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a654:	683b      	ldr	r3, [r7, #0]
 801a656:	681a      	ldr	r2, [r3, #0]
 801a658:	697b      	ldr	r3, [r7, #20]
 801a65a:	1ad2      	subs	r2, r2, r3
 801a65c:	683b      	ldr	r3, [r7, #0]
 801a65e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a660:	6878      	ldr	r0, [r7, #4]
 801a662:	f7ff ff9b 	bl	801a59c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a666:	2300      	movs	r3, #0
 801a668:	61fb      	str	r3, [r7, #28]
 801a66a:	e004      	b.n	801a676 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801a66c:	683b      	ldr	r3, [r7, #0]
 801a66e:	2200      	movs	r2, #0
 801a670:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a672:	2301      	movs	r3, #1
 801a674:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801a676:	f000 ffbd 	bl	801b5f4 <vPortExitCritical>

	return xReturn;
 801a67a:	69fb      	ldr	r3, [r7, #28]
}
 801a67c:	4618      	mov	r0, r3
 801a67e:	3720      	adds	r7, #32
 801a680:	46bd      	mov	sp, r7
 801a682:	bd80      	pop	{r7, pc}
 801a684:	200011e8 	.word	0x200011e8
 801a688:	200011fc 	.word	0x200011fc

0801a68c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a68c:	b480      	push	{r7}
 801a68e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a690:	4b03      	ldr	r3, [pc, #12]	; (801a6a0 <vTaskMissedYield+0x14>)
 801a692:	2201      	movs	r2, #1
 801a694:	601a      	str	r2, [r3, #0]
}
 801a696:	bf00      	nop
 801a698:	46bd      	mov	sp, r7
 801a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a69e:	4770      	bx	lr
 801a6a0:	200011f8 	.word	0x200011f8

0801a6a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a6a4:	b580      	push	{r7, lr}
 801a6a6:	b082      	sub	sp, #8
 801a6a8:	af00      	add	r7, sp, #0
 801a6aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a6ac:	f000 f852 	bl	801a754 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a6b0:	4b06      	ldr	r3, [pc, #24]	; (801a6cc <prvIdleTask+0x28>)
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	2b01      	cmp	r3, #1
 801a6b6:	d9f9      	bls.n	801a6ac <prvIdleTask+0x8>
			{
				taskYIELD();
 801a6b8:	4b05      	ldr	r3, [pc, #20]	; (801a6d0 <prvIdleTask+0x2c>)
 801a6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a6be:	601a      	str	r2, [r3, #0]
 801a6c0:	f3bf 8f4f 	dsb	sy
 801a6c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801a6c8:	e7f0      	b.n	801a6ac <prvIdleTask+0x8>
 801a6ca:	bf00      	nop
 801a6cc:	20000d14 	.word	0x20000d14
 801a6d0:	e000ed04 	.word	0xe000ed04

0801a6d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	b082      	sub	sp, #8
 801a6d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a6da:	2300      	movs	r3, #0
 801a6dc:	607b      	str	r3, [r7, #4]
 801a6de:	e00c      	b.n	801a6fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a6e0:	687a      	ldr	r2, [r7, #4]
 801a6e2:	4613      	mov	r3, r2
 801a6e4:	009b      	lsls	r3, r3, #2
 801a6e6:	4413      	add	r3, r2
 801a6e8:	009b      	lsls	r3, r3, #2
 801a6ea:	4a12      	ldr	r2, [pc, #72]	; (801a734 <prvInitialiseTaskLists+0x60>)
 801a6ec:	4413      	add	r3, r2
 801a6ee:	4618      	mov	r0, r3
 801a6f0:	f7fe f9ae 	bl	8018a50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	3301      	adds	r3, #1
 801a6f8:	607b      	str	r3, [r7, #4]
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	2b37      	cmp	r3, #55	; 0x37
 801a6fe:	d9ef      	bls.n	801a6e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a700:	480d      	ldr	r0, [pc, #52]	; (801a738 <prvInitialiseTaskLists+0x64>)
 801a702:	f7fe f9a5 	bl	8018a50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a706:	480d      	ldr	r0, [pc, #52]	; (801a73c <prvInitialiseTaskLists+0x68>)
 801a708:	f7fe f9a2 	bl	8018a50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a70c:	480c      	ldr	r0, [pc, #48]	; (801a740 <prvInitialiseTaskLists+0x6c>)
 801a70e:	f7fe f99f 	bl	8018a50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a712:	480c      	ldr	r0, [pc, #48]	; (801a744 <prvInitialiseTaskLists+0x70>)
 801a714:	f7fe f99c 	bl	8018a50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a718:	480b      	ldr	r0, [pc, #44]	; (801a748 <prvInitialiseTaskLists+0x74>)
 801a71a:	f7fe f999 	bl	8018a50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a71e:	4b0b      	ldr	r3, [pc, #44]	; (801a74c <prvInitialiseTaskLists+0x78>)
 801a720:	4a05      	ldr	r2, [pc, #20]	; (801a738 <prvInitialiseTaskLists+0x64>)
 801a722:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a724:	4b0a      	ldr	r3, [pc, #40]	; (801a750 <prvInitialiseTaskLists+0x7c>)
 801a726:	4a05      	ldr	r2, [pc, #20]	; (801a73c <prvInitialiseTaskLists+0x68>)
 801a728:	601a      	str	r2, [r3, #0]
}
 801a72a:	bf00      	nop
 801a72c:	3708      	adds	r7, #8
 801a72e:	46bd      	mov	sp, r7
 801a730:	bd80      	pop	{r7, pc}
 801a732:	bf00      	nop
 801a734:	20000d14 	.word	0x20000d14
 801a738:	20001174 	.word	0x20001174
 801a73c:	20001188 	.word	0x20001188
 801a740:	200011a4 	.word	0x200011a4
 801a744:	200011b8 	.word	0x200011b8
 801a748:	200011d0 	.word	0x200011d0
 801a74c:	2000119c 	.word	0x2000119c
 801a750:	200011a0 	.word	0x200011a0

0801a754 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a754:	b580      	push	{r7, lr}
 801a756:	b082      	sub	sp, #8
 801a758:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a75a:	e019      	b.n	801a790 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a75c:	f000 ff1a 	bl	801b594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a760:	4b10      	ldr	r3, [pc, #64]	; (801a7a4 <prvCheckTasksWaitingTermination+0x50>)
 801a762:	68db      	ldr	r3, [r3, #12]
 801a764:	68db      	ldr	r3, [r3, #12]
 801a766:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	3304      	adds	r3, #4
 801a76c:	4618      	mov	r0, r3
 801a76e:	f7fe f9f9 	bl	8018b64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a772:	4b0d      	ldr	r3, [pc, #52]	; (801a7a8 <prvCheckTasksWaitingTermination+0x54>)
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	3b01      	subs	r3, #1
 801a778:	4a0b      	ldr	r2, [pc, #44]	; (801a7a8 <prvCheckTasksWaitingTermination+0x54>)
 801a77a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a77c:	4b0b      	ldr	r3, [pc, #44]	; (801a7ac <prvCheckTasksWaitingTermination+0x58>)
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	3b01      	subs	r3, #1
 801a782:	4a0a      	ldr	r2, [pc, #40]	; (801a7ac <prvCheckTasksWaitingTermination+0x58>)
 801a784:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a786:	f000 ff35 	bl	801b5f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a78a:	6878      	ldr	r0, [r7, #4]
 801a78c:	f000 f810 	bl	801a7b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a790:	4b06      	ldr	r3, [pc, #24]	; (801a7ac <prvCheckTasksWaitingTermination+0x58>)
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	2b00      	cmp	r3, #0
 801a796:	d1e1      	bne.n	801a75c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a798:	bf00      	nop
 801a79a:	bf00      	nop
 801a79c:	3708      	adds	r7, #8
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	bd80      	pop	{r7, pc}
 801a7a2:	bf00      	nop
 801a7a4:	200011b8 	.word	0x200011b8
 801a7a8:	200011e4 	.word	0x200011e4
 801a7ac:	200011cc 	.word	0x200011cc

0801a7b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a7b0:	b580      	push	{r7, lr}
 801a7b2:	b084      	sub	sp, #16
 801a7b4:	af00      	add	r7, sp, #0
 801a7b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d108      	bne.n	801a7d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	f001 f8d2 	bl	801b970 <vPortFree>
				vPortFree( pxTCB );
 801a7cc:	6878      	ldr	r0, [r7, #4]
 801a7ce:	f001 f8cf 	bl	801b970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a7d2:	e018      	b.n	801a806 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a7da:	2b01      	cmp	r3, #1
 801a7dc:	d103      	bne.n	801a7e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801a7de:	6878      	ldr	r0, [r7, #4]
 801a7e0:	f001 f8c6 	bl	801b970 <vPortFree>
	}
 801a7e4:	e00f      	b.n	801a806 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a7ec:	2b02      	cmp	r3, #2
 801a7ee:	d00a      	beq.n	801a806 <prvDeleteTCB+0x56>
	__asm volatile
 801a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7f4:	f383 8811 	msr	BASEPRI, r3
 801a7f8:	f3bf 8f6f 	isb	sy
 801a7fc:	f3bf 8f4f 	dsb	sy
 801a800:	60fb      	str	r3, [r7, #12]
}
 801a802:	bf00      	nop
 801a804:	e7fe      	b.n	801a804 <prvDeleteTCB+0x54>
	}
 801a806:	bf00      	nop
 801a808:	3710      	adds	r7, #16
 801a80a:	46bd      	mov	sp, r7
 801a80c:	bd80      	pop	{r7, pc}
	...

0801a810 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a810:	b480      	push	{r7}
 801a812:	b083      	sub	sp, #12
 801a814:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a816:	4b0c      	ldr	r3, [pc, #48]	; (801a848 <prvResetNextTaskUnblockTime+0x38>)
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d104      	bne.n	801a82a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a820:	4b0a      	ldr	r3, [pc, #40]	; (801a84c <prvResetNextTaskUnblockTime+0x3c>)
 801a822:	f04f 32ff 	mov.w	r2, #4294967295
 801a826:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a828:	e008      	b.n	801a83c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a82a:	4b07      	ldr	r3, [pc, #28]	; (801a848 <prvResetNextTaskUnblockTime+0x38>)
 801a82c:	681b      	ldr	r3, [r3, #0]
 801a82e:	68db      	ldr	r3, [r3, #12]
 801a830:	68db      	ldr	r3, [r3, #12]
 801a832:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	685b      	ldr	r3, [r3, #4]
 801a838:	4a04      	ldr	r2, [pc, #16]	; (801a84c <prvResetNextTaskUnblockTime+0x3c>)
 801a83a:	6013      	str	r3, [r2, #0]
}
 801a83c:	bf00      	nop
 801a83e:	370c      	adds	r7, #12
 801a840:	46bd      	mov	sp, r7
 801a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a846:	4770      	bx	lr
 801a848:	2000119c 	.word	0x2000119c
 801a84c:	20001204 	.word	0x20001204

0801a850 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801a850:	b480      	push	{r7}
 801a852:	b083      	sub	sp, #12
 801a854:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801a856:	4b05      	ldr	r3, [pc, #20]	; (801a86c <xTaskGetCurrentTaskHandle+0x1c>)
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801a85c:	687b      	ldr	r3, [r7, #4]
	}
 801a85e:	4618      	mov	r0, r3
 801a860:	370c      	adds	r7, #12
 801a862:	46bd      	mov	sp, r7
 801a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a868:	4770      	bx	lr
 801a86a:	bf00      	nop
 801a86c:	20000d10 	.word	0x20000d10

0801a870 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a870:	b480      	push	{r7}
 801a872:	b083      	sub	sp, #12
 801a874:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a876:	4b0b      	ldr	r3, [pc, #44]	; (801a8a4 <xTaskGetSchedulerState+0x34>)
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d102      	bne.n	801a884 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a87e:	2301      	movs	r3, #1
 801a880:	607b      	str	r3, [r7, #4]
 801a882:	e008      	b.n	801a896 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a884:	4b08      	ldr	r3, [pc, #32]	; (801a8a8 <xTaskGetSchedulerState+0x38>)
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d102      	bne.n	801a892 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a88c:	2302      	movs	r3, #2
 801a88e:	607b      	str	r3, [r7, #4]
 801a890:	e001      	b.n	801a896 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a892:	2300      	movs	r3, #0
 801a894:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a896:	687b      	ldr	r3, [r7, #4]
	}
 801a898:	4618      	mov	r0, r3
 801a89a:	370c      	adds	r7, #12
 801a89c:	46bd      	mov	sp, r7
 801a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8a2:	4770      	bx	lr
 801a8a4:	200011f0 	.word	0x200011f0
 801a8a8:	2000120c 	.word	0x2000120c

0801a8ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a8ac:	b580      	push	{r7, lr}
 801a8ae:	b084      	sub	sp, #16
 801a8b0:	af00      	add	r7, sp, #0
 801a8b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a8b8:	2300      	movs	r3, #0
 801a8ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d051      	beq.n	801a966 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a8c2:	68bb      	ldr	r3, [r7, #8]
 801a8c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a8c6:	4b2a      	ldr	r3, [pc, #168]	; (801a970 <xTaskPriorityInherit+0xc4>)
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8cc:	429a      	cmp	r2, r3
 801a8ce:	d241      	bcs.n	801a954 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a8d0:	68bb      	ldr	r3, [r7, #8]
 801a8d2:	699b      	ldr	r3, [r3, #24]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	db06      	blt.n	801a8e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a8d8:	4b25      	ldr	r3, [pc, #148]	; (801a970 <xTaskPriorityInherit+0xc4>)
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a8e2:	68bb      	ldr	r3, [r7, #8]
 801a8e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a8e6:	68bb      	ldr	r3, [r7, #8]
 801a8e8:	6959      	ldr	r1, [r3, #20]
 801a8ea:	68bb      	ldr	r3, [r7, #8]
 801a8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a8ee:	4613      	mov	r3, r2
 801a8f0:	009b      	lsls	r3, r3, #2
 801a8f2:	4413      	add	r3, r2
 801a8f4:	009b      	lsls	r3, r3, #2
 801a8f6:	4a1f      	ldr	r2, [pc, #124]	; (801a974 <xTaskPriorityInherit+0xc8>)
 801a8f8:	4413      	add	r3, r2
 801a8fa:	4299      	cmp	r1, r3
 801a8fc:	d122      	bne.n	801a944 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a8fe:	68bb      	ldr	r3, [r7, #8]
 801a900:	3304      	adds	r3, #4
 801a902:	4618      	mov	r0, r3
 801a904:	f7fe f92e 	bl	8018b64 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a908:	4b19      	ldr	r3, [pc, #100]	; (801a970 <xTaskPriorityInherit+0xc4>)
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a90e:	68bb      	ldr	r3, [r7, #8]
 801a910:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a912:	68bb      	ldr	r3, [r7, #8]
 801a914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a916:	4b18      	ldr	r3, [pc, #96]	; (801a978 <xTaskPriorityInherit+0xcc>)
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	429a      	cmp	r2, r3
 801a91c:	d903      	bls.n	801a926 <xTaskPriorityInherit+0x7a>
 801a91e:	68bb      	ldr	r3, [r7, #8]
 801a920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a922:	4a15      	ldr	r2, [pc, #84]	; (801a978 <xTaskPriorityInherit+0xcc>)
 801a924:	6013      	str	r3, [r2, #0]
 801a926:	68bb      	ldr	r3, [r7, #8]
 801a928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a92a:	4613      	mov	r3, r2
 801a92c:	009b      	lsls	r3, r3, #2
 801a92e:	4413      	add	r3, r2
 801a930:	009b      	lsls	r3, r3, #2
 801a932:	4a10      	ldr	r2, [pc, #64]	; (801a974 <xTaskPriorityInherit+0xc8>)
 801a934:	441a      	add	r2, r3
 801a936:	68bb      	ldr	r3, [r7, #8]
 801a938:	3304      	adds	r3, #4
 801a93a:	4619      	mov	r1, r3
 801a93c:	4610      	mov	r0, r2
 801a93e:	f7fe f8b4 	bl	8018aaa <vListInsertEnd>
 801a942:	e004      	b.n	801a94e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a944:	4b0a      	ldr	r3, [pc, #40]	; (801a970 <xTaskPriorityInherit+0xc4>)
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a94a:	68bb      	ldr	r3, [r7, #8]
 801a94c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801a94e:	2301      	movs	r3, #1
 801a950:	60fb      	str	r3, [r7, #12]
 801a952:	e008      	b.n	801a966 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a954:	68bb      	ldr	r3, [r7, #8]
 801a956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a958:	4b05      	ldr	r3, [pc, #20]	; (801a970 <xTaskPriorityInherit+0xc4>)
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a95e:	429a      	cmp	r2, r3
 801a960:	d201      	bcs.n	801a966 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801a962:	2301      	movs	r3, #1
 801a964:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a966:	68fb      	ldr	r3, [r7, #12]
	}
 801a968:	4618      	mov	r0, r3
 801a96a:	3710      	adds	r7, #16
 801a96c:	46bd      	mov	sp, r7
 801a96e:	bd80      	pop	{r7, pc}
 801a970:	20000d10 	.word	0x20000d10
 801a974:	20000d14 	.word	0x20000d14
 801a978:	200011ec 	.word	0x200011ec

0801a97c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a97c:	b580      	push	{r7, lr}
 801a97e:	b086      	sub	sp, #24
 801a980:	af00      	add	r7, sp, #0
 801a982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801a988:	2300      	movs	r3, #0
 801a98a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d056      	beq.n	801aa40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a992:	4b2e      	ldr	r3, [pc, #184]	; (801aa4c <xTaskPriorityDisinherit+0xd0>)
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	693a      	ldr	r2, [r7, #16]
 801a998:	429a      	cmp	r2, r3
 801a99a:	d00a      	beq.n	801a9b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801a99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9a0:	f383 8811 	msr	BASEPRI, r3
 801a9a4:	f3bf 8f6f 	isb	sy
 801a9a8:	f3bf 8f4f 	dsb	sy
 801a9ac:	60fb      	str	r3, [r7, #12]
}
 801a9ae:	bf00      	nop
 801a9b0:	e7fe      	b.n	801a9b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801a9b2:	693b      	ldr	r3, [r7, #16]
 801a9b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d10a      	bne.n	801a9d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801a9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9be:	f383 8811 	msr	BASEPRI, r3
 801a9c2:	f3bf 8f6f 	isb	sy
 801a9c6:	f3bf 8f4f 	dsb	sy
 801a9ca:	60bb      	str	r3, [r7, #8]
}
 801a9cc:	bf00      	nop
 801a9ce:	e7fe      	b.n	801a9ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801a9d0:	693b      	ldr	r3, [r7, #16]
 801a9d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a9d4:	1e5a      	subs	r2, r3, #1
 801a9d6:	693b      	ldr	r3, [r7, #16]
 801a9d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a9da:	693b      	ldr	r3, [r7, #16]
 801a9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9de:	693b      	ldr	r3, [r7, #16]
 801a9e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a9e2:	429a      	cmp	r2, r3
 801a9e4:	d02c      	beq.n	801aa40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a9e6:	693b      	ldr	r3, [r7, #16]
 801a9e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d128      	bne.n	801aa40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a9ee:	693b      	ldr	r3, [r7, #16]
 801a9f0:	3304      	adds	r3, #4
 801a9f2:	4618      	mov	r0, r3
 801a9f4:	f7fe f8b6 	bl	8018b64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a9f8:	693b      	ldr	r3, [r7, #16]
 801a9fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a9fc:	693b      	ldr	r3, [r7, #16]
 801a9fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801aa00:	693b      	ldr	r3, [r7, #16]
 801aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801aa08:	693b      	ldr	r3, [r7, #16]
 801aa0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801aa0c:	693b      	ldr	r3, [r7, #16]
 801aa0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa10:	4b0f      	ldr	r3, [pc, #60]	; (801aa50 <xTaskPriorityDisinherit+0xd4>)
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	429a      	cmp	r2, r3
 801aa16:	d903      	bls.n	801aa20 <xTaskPriorityDisinherit+0xa4>
 801aa18:	693b      	ldr	r3, [r7, #16]
 801aa1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa1c:	4a0c      	ldr	r2, [pc, #48]	; (801aa50 <xTaskPriorityDisinherit+0xd4>)
 801aa1e:	6013      	str	r3, [r2, #0]
 801aa20:	693b      	ldr	r3, [r7, #16]
 801aa22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa24:	4613      	mov	r3, r2
 801aa26:	009b      	lsls	r3, r3, #2
 801aa28:	4413      	add	r3, r2
 801aa2a:	009b      	lsls	r3, r3, #2
 801aa2c:	4a09      	ldr	r2, [pc, #36]	; (801aa54 <xTaskPriorityDisinherit+0xd8>)
 801aa2e:	441a      	add	r2, r3
 801aa30:	693b      	ldr	r3, [r7, #16]
 801aa32:	3304      	adds	r3, #4
 801aa34:	4619      	mov	r1, r3
 801aa36:	4610      	mov	r0, r2
 801aa38:	f7fe f837 	bl	8018aaa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801aa3c:	2301      	movs	r3, #1
 801aa3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801aa40:	697b      	ldr	r3, [r7, #20]
	}
 801aa42:	4618      	mov	r0, r3
 801aa44:	3718      	adds	r7, #24
 801aa46:	46bd      	mov	sp, r7
 801aa48:	bd80      	pop	{r7, pc}
 801aa4a:	bf00      	nop
 801aa4c:	20000d10 	.word	0x20000d10
 801aa50:	200011ec 	.word	0x200011ec
 801aa54:	20000d14 	.word	0x20000d14

0801aa58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801aa58:	b580      	push	{r7, lr}
 801aa5a:	b088      	sub	sp, #32
 801aa5c:	af00      	add	r7, sp, #0
 801aa5e:	6078      	str	r0, [r7, #4]
 801aa60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801aa66:	2301      	movs	r3, #1
 801aa68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d06a      	beq.n	801ab46 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801aa70:	69bb      	ldr	r3, [r7, #24]
 801aa72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d10a      	bne.n	801aa8e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801aa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa7c:	f383 8811 	msr	BASEPRI, r3
 801aa80:	f3bf 8f6f 	isb	sy
 801aa84:	f3bf 8f4f 	dsb	sy
 801aa88:	60fb      	str	r3, [r7, #12]
}
 801aa8a:	bf00      	nop
 801aa8c:	e7fe      	b.n	801aa8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801aa8e:	69bb      	ldr	r3, [r7, #24]
 801aa90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aa92:	683a      	ldr	r2, [r7, #0]
 801aa94:	429a      	cmp	r2, r3
 801aa96:	d902      	bls.n	801aa9e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801aa98:	683b      	ldr	r3, [r7, #0]
 801aa9a:	61fb      	str	r3, [r7, #28]
 801aa9c:	e002      	b.n	801aaa4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801aa9e:	69bb      	ldr	r3, [r7, #24]
 801aaa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aaa2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801aaa4:	69bb      	ldr	r3, [r7, #24]
 801aaa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aaa8:	69fa      	ldr	r2, [r7, #28]
 801aaaa:	429a      	cmp	r2, r3
 801aaac:	d04b      	beq.n	801ab46 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801aaae:	69bb      	ldr	r3, [r7, #24]
 801aab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aab2:	697a      	ldr	r2, [r7, #20]
 801aab4:	429a      	cmp	r2, r3
 801aab6:	d146      	bne.n	801ab46 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801aab8:	4b25      	ldr	r3, [pc, #148]	; (801ab50 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801aaba:	681b      	ldr	r3, [r3, #0]
 801aabc:	69ba      	ldr	r2, [r7, #24]
 801aabe:	429a      	cmp	r2, r3
 801aac0:	d10a      	bne.n	801aad8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aac6:	f383 8811 	msr	BASEPRI, r3
 801aaca:	f3bf 8f6f 	isb	sy
 801aace:	f3bf 8f4f 	dsb	sy
 801aad2:	60bb      	str	r3, [r7, #8]
}
 801aad4:	bf00      	nop
 801aad6:	e7fe      	b.n	801aad6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801aad8:	69bb      	ldr	r3, [r7, #24]
 801aada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aadc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801aade:	69bb      	ldr	r3, [r7, #24]
 801aae0:	69fa      	ldr	r2, [r7, #28]
 801aae2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801aae4:	69bb      	ldr	r3, [r7, #24]
 801aae6:	699b      	ldr	r3, [r3, #24]
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	db04      	blt.n	801aaf6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801aaec:	69fb      	ldr	r3, [r7, #28]
 801aaee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801aaf2:	69bb      	ldr	r3, [r7, #24]
 801aaf4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801aaf6:	69bb      	ldr	r3, [r7, #24]
 801aaf8:	6959      	ldr	r1, [r3, #20]
 801aafa:	693a      	ldr	r2, [r7, #16]
 801aafc:	4613      	mov	r3, r2
 801aafe:	009b      	lsls	r3, r3, #2
 801ab00:	4413      	add	r3, r2
 801ab02:	009b      	lsls	r3, r3, #2
 801ab04:	4a13      	ldr	r2, [pc, #76]	; (801ab54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801ab06:	4413      	add	r3, r2
 801ab08:	4299      	cmp	r1, r3
 801ab0a:	d11c      	bne.n	801ab46 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ab0c:	69bb      	ldr	r3, [r7, #24]
 801ab0e:	3304      	adds	r3, #4
 801ab10:	4618      	mov	r0, r3
 801ab12:	f7fe f827 	bl	8018b64 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801ab16:	69bb      	ldr	r3, [r7, #24]
 801ab18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab1a:	4b0f      	ldr	r3, [pc, #60]	; (801ab58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	429a      	cmp	r2, r3
 801ab20:	d903      	bls.n	801ab2a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801ab22:	69bb      	ldr	r3, [r7, #24]
 801ab24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab26:	4a0c      	ldr	r2, [pc, #48]	; (801ab58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801ab28:	6013      	str	r3, [r2, #0]
 801ab2a:	69bb      	ldr	r3, [r7, #24]
 801ab2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab2e:	4613      	mov	r3, r2
 801ab30:	009b      	lsls	r3, r3, #2
 801ab32:	4413      	add	r3, r2
 801ab34:	009b      	lsls	r3, r3, #2
 801ab36:	4a07      	ldr	r2, [pc, #28]	; (801ab54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801ab38:	441a      	add	r2, r3
 801ab3a:	69bb      	ldr	r3, [r7, #24]
 801ab3c:	3304      	adds	r3, #4
 801ab3e:	4619      	mov	r1, r3
 801ab40:	4610      	mov	r0, r2
 801ab42:	f7fd ffb2 	bl	8018aaa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ab46:	bf00      	nop
 801ab48:	3720      	adds	r7, #32
 801ab4a:	46bd      	mov	sp, r7
 801ab4c:	bd80      	pop	{r7, pc}
 801ab4e:	bf00      	nop
 801ab50:	20000d10 	.word	0x20000d10
 801ab54:	20000d14 	.word	0x20000d14
 801ab58:	200011ec 	.word	0x200011ec

0801ab5c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801ab5c:	b480      	push	{r7}
 801ab5e:	b083      	sub	sp, #12
 801ab60:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801ab62:	4b09      	ldr	r3, [pc, #36]	; (801ab88 <uxTaskResetEventItemValue+0x2c>)
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	699b      	ldr	r3, [r3, #24]
 801ab68:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ab6a:	4b07      	ldr	r3, [pc, #28]	; (801ab88 <uxTaskResetEventItemValue+0x2c>)
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab70:	4b05      	ldr	r3, [pc, #20]	; (801ab88 <uxTaskResetEventItemValue+0x2c>)
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801ab78:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801ab7a:	687b      	ldr	r3, [r7, #4]
}
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	370c      	adds	r7, #12
 801ab80:	46bd      	mov	sp, r7
 801ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab86:	4770      	bx	lr
 801ab88:	20000d10 	.word	0x20000d10

0801ab8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801ab8c:	b480      	push	{r7}
 801ab8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801ab90:	4b07      	ldr	r3, [pc, #28]	; (801abb0 <pvTaskIncrementMutexHeldCount+0x24>)
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d004      	beq.n	801aba2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801ab98:	4b05      	ldr	r3, [pc, #20]	; (801abb0 <pvTaskIncrementMutexHeldCount+0x24>)
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ab9e:	3201      	adds	r2, #1
 801aba0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801aba2:	4b03      	ldr	r3, [pc, #12]	; (801abb0 <pvTaskIncrementMutexHeldCount+0x24>)
 801aba4:	681b      	ldr	r3, [r3, #0]
	}
 801aba6:	4618      	mov	r0, r3
 801aba8:	46bd      	mov	sp, r7
 801abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abae:	4770      	bx	lr
 801abb0:	20000d10 	.word	0x20000d10

0801abb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b084      	sub	sp, #16
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
 801abbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801abbe:	4b21      	ldr	r3, [pc, #132]	; (801ac44 <prvAddCurrentTaskToDelayedList+0x90>)
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801abc4:	4b20      	ldr	r3, [pc, #128]	; (801ac48 <prvAddCurrentTaskToDelayedList+0x94>)
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	3304      	adds	r3, #4
 801abca:	4618      	mov	r0, r3
 801abcc:	f7fd ffca 	bl	8018b64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801abd6:	d10a      	bne.n	801abee <prvAddCurrentTaskToDelayedList+0x3a>
 801abd8:	683b      	ldr	r3, [r7, #0]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d007      	beq.n	801abee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801abde:	4b1a      	ldr	r3, [pc, #104]	; (801ac48 <prvAddCurrentTaskToDelayedList+0x94>)
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	3304      	adds	r3, #4
 801abe4:	4619      	mov	r1, r3
 801abe6:	4819      	ldr	r0, [pc, #100]	; (801ac4c <prvAddCurrentTaskToDelayedList+0x98>)
 801abe8:	f7fd ff5f 	bl	8018aaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801abec:	e026      	b.n	801ac3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801abee:	68fa      	ldr	r2, [r7, #12]
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	4413      	add	r3, r2
 801abf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801abf6:	4b14      	ldr	r3, [pc, #80]	; (801ac48 <prvAddCurrentTaskToDelayedList+0x94>)
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	68ba      	ldr	r2, [r7, #8]
 801abfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801abfe:	68ba      	ldr	r2, [r7, #8]
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	429a      	cmp	r2, r3
 801ac04:	d209      	bcs.n	801ac1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ac06:	4b12      	ldr	r3, [pc, #72]	; (801ac50 <prvAddCurrentTaskToDelayedList+0x9c>)
 801ac08:	681a      	ldr	r2, [r3, #0]
 801ac0a:	4b0f      	ldr	r3, [pc, #60]	; (801ac48 <prvAddCurrentTaskToDelayedList+0x94>)
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	3304      	adds	r3, #4
 801ac10:	4619      	mov	r1, r3
 801ac12:	4610      	mov	r0, r2
 801ac14:	f7fd ff6d 	bl	8018af2 <vListInsert>
}
 801ac18:	e010      	b.n	801ac3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ac1a:	4b0e      	ldr	r3, [pc, #56]	; (801ac54 <prvAddCurrentTaskToDelayedList+0xa0>)
 801ac1c:	681a      	ldr	r2, [r3, #0]
 801ac1e:	4b0a      	ldr	r3, [pc, #40]	; (801ac48 <prvAddCurrentTaskToDelayedList+0x94>)
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	3304      	adds	r3, #4
 801ac24:	4619      	mov	r1, r3
 801ac26:	4610      	mov	r0, r2
 801ac28:	f7fd ff63 	bl	8018af2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801ac2c:	4b0a      	ldr	r3, [pc, #40]	; (801ac58 <prvAddCurrentTaskToDelayedList+0xa4>)
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	68ba      	ldr	r2, [r7, #8]
 801ac32:	429a      	cmp	r2, r3
 801ac34:	d202      	bcs.n	801ac3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801ac36:	4a08      	ldr	r2, [pc, #32]	; (801ac58 <prvAddCurrentTaskToDelayedList+0xa4>)
 801ac38:	68bb      	ldr	r3, [r7, #8]
 801ac3a:	6013      	str	r3, [r2, #0]
}
 801ac3c:	bf00      	nop
 801ac3e:	3710      	adds	r7, #16
 801ac40:	46bd      	mov	sp, r7
 801ac42:	bd80      	pop	{r7, pc}
 801ac44:	200011e8 	.word	0x200011e8
 801ac48:	20000d10 	.word	0x20000d10
 801ac4c:	200011d0 	.word	0x200011d0
 801ac50:	200011a0 	.word	0x200011a0
 801ac54:	2000119c 	.word	0x2000119c
 801ac58:	20001204 	.word	0x20001204

0801ac5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801ac5c:	b580      	push	{r7, lr}
 801ac5e:	b08a      	sub	sp, #40	; 0x28
 801ac60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801ac62:	2300      	movs	r3, #0
 801ac64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801ac66:	f000 fb07 	bl	801b278 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801ac6a:	4b1c      	ldr	r3, [pc, #112]	; (801acdc <xTimerCreateTimerTask+0x80>)
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d021      	beq.n	801acb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801ac72:	2300      	movs	r3, #0
 801ac74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801ac76:	2300      	movs	r3, #0
 801ac78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801ac7a:	1d3a      	adds	r2, r7, #4
 801ac7c:	f107 0108 	add.w	r1, r7, #8
 801ac80:	f107 030c 	add.w	r3, r7, #12
 801ac84:	4618      	mov	r0, r3
 801ac86:	f7fd fc5d 	bl	8018544 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801ac8a:	6879      	ldr	r1, [r7, #4]
 801ac8c:	68bb      	ldr	r3, [r7, #8]
 801ac8e:	68fa      	ldr	r2, [r7, #12]
 801ac90:	9202      	str	r2, [sp, #8]
 801ac92:	9301      	str	r3, [sp, #4]
 801ac94:	2302      	movs	r3, #2
 801ac96:	9300      	str	r3, [sp, #0]
 801ac98:	2300      	movs	r3, #0
 801ac9a:	460a      	mov	r2, r1
 801ac9c:	4910      	ldr	r1, [pc, #64]	; (801ace0 <xTimerCreateTimerTask+0x84>)
 801ac9e:	4811      	ldr	r0, [pc, #68]	; (801ace4 <xTimerCreateTimerTask+0x88>)
 801aca0:	f7fe fe8a 	bl	80199b8 <xTaskCreateStatic>
 801aca4:	4603      	mov	r3, r0
 801aca6:	4a10      	ldr	r2, [pc, #64]	; (801ace8 <xTimerCreateTimerTask+0x8c>)
 801aca8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801acaa:	4b0f      	ldr	r3, [pc, #60]	; (801ace8 <xTimerCreateTimerTask+0x8c>)
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d001      	beq.n	801acb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801acb2:	2301      	movs	r3, #1
 801acb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801acb6:	697b      	ldr	r3, [r7, #20]
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d10a      	bne.n	801acd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801acbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801acc0:	f383 8811 	msr	BASEPRI, r3
 801acc4:	f3bf 8f6f 	isb	sy
 801acc8:	f3bf 8f4f 	dsb	sy
 801accc:	613b      	str	r3, [r7, #16]
}
 801acce:	bf00      	nop
 801acd0:	e7fe      	b.n	801acd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801acd2:	697b      	ldr	r3, [r7, #20]
}
 801acd4:	4618      	mov	r0, r3
 801acd6:	3718      	adds	r7, #24
 801acd8:	46bd      	mov	sp, r7
 801acda:	bd80      	pop	{r7, pc}
 801acdc:	20001240 	.word	0x20001240
 801ace0:	0801daf8 	.word	0x0801daf8
 801ace4:	0801ae21 	.word	0x0801ae21
 801ace8:	20001244 	.word	0x20001244

0801acec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801acec:	b580      	push	{r7, lr}
 801acee:	b08a      	sub	sp, #40	; 0x28
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	60f8      	str	r0, [r7, #12]
 801acf4:	60b9      	str	r1, [r7, #8]
 801acf6:	607a      	str	r2, [r7, #4]
 801acf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801acfa:	2300      	movs	r3, #0
 801acfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801acfe:	68fb      	ldr	r3, [r7, #12]
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d10a      	bne.n	801ad1a <xTimerGenericCommand+0x2e>
	__asm volatile
 801ad04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad08:	f383 8811 	msr	BASEPRI, r3
 801ad0c:	f3bf 8f6f 	isb	sy
 801ad10:	f3bf 8f4f 	dsb	sy
 801ad14:	623b      	str	r3, [r7, #32]
}
 801ad16:	bf00      	nop
 801ad18:	e7fe      	b.n	801ad18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801ad1a:	4b1a      	ldr	r3, [pc, #104]	; (801ad84 <xTimerGenericCommand+0x98>)
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d02a      	beq.n	801ad78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801ad22:	68bb      	ldr	r3, [r7, #8]
 801ad24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801ad2e:	68bb      	ldr	r3, [r7, #8]
 801ad30:	2b05      	cmp	r3, #5
 801ad32:	dc18      	bgt.n	801ad66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801ad34:	f7ff fd9c 	bl	801a870 <xTaskGetSchedulerState>
 801ad38:	4603      	mov	r3, r0
 801ad3a:	2b02      	cmp	r3, #2
 801ad3c:	d109      	bne.n	801ad52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801ad3e:	4b11      	ldr	r3, [pc, #68]	; (801ad84 <xTimerGenericCommand+0x98>)
 801ad40:	6818      	ldr	r0, [r3, #0]
 801ad42:	f107 0110 	add.w	r1, r7, #16
 801ad46:	2300      	movs	r3, #0
 801ad48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ad4a:	f7fe f929 	bl	8018fa0 <xQueueGenericSend>
 801ad4e:	6278      	str	r0, [r7, #36]	; 0x24
 801ad50:	e012      	b.n	801ad78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801ad52:	4b0c      	ldr	r3, [pc, #48]	; (801ad84 <xTimerGenericCommand+0x98>)
 801ad54:	6818      	ldr	r0, [r3, #0]
 801ad56:	f107 0110 	add.w	r1, r7, #16
 801ad5a:	2300      	movs	r3, #0
 801ad5c:	2200      	movs	r2, #0
 801ad5e:	f7fe f91f 	bl	8018fa0 <xQueueGenericSend>
 801ad62:	6278      	str	r0, [r7, #36]	; 0x24
 801ad64:	e008      	b.n	801ad78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801ad66:	4b07      	ldr	r3, [pc, #28]	; (801ad84 <xTimerGenericCommand+0x98>)
 801ad68:	6818      	ldr	r0, [r3, #0]
 801ad6a:	f107 0110 	add.w	r1, r7, #16
 801ad6e:	2300      	movs	r3, #0
 801ad70:	683a      	ldr	r2, [r7, #0]
 801ad72:	f7fe fa13 	bl	801919c <xQueueGenericSendFromISR>
 801ad76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	3728      	adds	r7, #40	; 0x28
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bd80      	pop	{r7, pc}
 801ad82:	bf00      	nop
 801ad84:	20001240 	.word	0x20001240

0801ad88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b088      	sub	sp, #32
 801ad8c:	af02      	add	r7, sp, #8
 801ad8e:	6078      	str	r0, [r7, #4]
 801ad90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ad92:	4b22      	ldr	r3, [pc, #136]	; (801ae1c <prvProcessExpiredTimer+0x94>)
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	68db      	ldr	r3, [r3, #12]
 801ad98:	68db      	ldr	r3, [r3, #12]
 801ad9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ad9c:	697b      	ldr	r3, [r7, #20]
 801ad9e:	3304      	adds	r3, #4
 801ada0:	4618      	mov	r0, r3
 801ada2:	f7fd fedf 	bl	8018b64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ada6:	697b      	ldr	r3, [r7, #20]
 801ada8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801adac:	f003 0304 	and.w	r3, r3, #4
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d022      	beq.n	801adfa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801adb4:	697b      	ldr	r3, [r7, #20]
 801adb6:	699a      	ldr	r2, [r3, #24]
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	18d1      	adds	r1, r2, r3
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	683a      	ldr	r2, [r7, #0]
 801adc0:	6978      	ldr	r0, [r7, #20]
 801adc2:	f000 f8d1 	bl	801af68 <prvInsertTimerInActiveList>
 801adc6:	4603      	mov	r3, r0
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d01f      	beq.n	801ae0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801adcc:	2300      	movs	r3, #0
 801adce:	9300      	str	r3, [sp, #0]
 801add0:	2300      	movs	r3, #0
 801add2:	687a      	ldr	r2, [r7, #4]
 801add4:	2100      	movs	r1, #0
 801add6:	6978      	ldr	r0, [r7, #20]
 801add8:	f7ff ff88 	bl	801acec <xTimerGenericCommand>
 801addc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801adde:	693b      	ldr	r3, [r7, #16]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d113      	bne.n	801ae0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 801ade4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ade8:	f383 8811 	msr	BASEPRI, r3
 801adec:	f3bf 8f6f 	isb	sy
 801adf0:	f3bf 8f4f 	dsb	sy
 801adf4:	60fb      	str	r3, [r7, #12]
}
 801adf6:	bf00      	nop
 801adf8:	e7fe      	b.n	801adf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801adfa:	697b      	ldr	r3, [r7, #20]
 801adfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ae00:	f023 0301 	bic.w	r3, r3, #1
 801ae04:	b2da      	uxtb	r2, r3
 801ae06:	697b      	ldr	r3, [r7, #20]
 801ae08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ae0c:	697b      	ldr	r3, [r7, #20]
 801ae0e:	6a1b      	ldr	r3, [r3, #32]
 801ae10:	6978      	ldr	r0, [r7, #20]
 801ae12:	4798      	blx	r3
}
 801ae14:	bf00      	nop
 801ae16:	3718      	adds	r7, #24
 801ae18:	46bd      	mov	sp, r7
 801ae1a:	bd80      	pop	{r7, pc}
 801ae1c:	20001238 	.word	0x20001238

0801ae20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b084      	sub	sp, #16
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801ae28:	f107 0308 	add.w	r3, r7, #8
 801ae2c:	4618      	mov	r0, r3
 801ae2e:	f000 f857 	bl	801aee0 <prvGetNextExpireTime>
 801ae32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801ae34:	68bb      	ldr	r3, [r7, #8]
 801ae36:	4619      	mov	r1, r3
 801ae38:	68f8      	ldr	r0, [r7, #12]
 801ae3a:	f000 f803 	bl	801ae44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801ae3e:	f000 f8d5 	bl	801afec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801ae42:	e7f1      	b.n	801ae28 <prvTimerTask+0x8>

0801ae44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801ae44:	b580      	push	{r7, lr}
 801ae46:	b084      	sub	sp, #16
 801ae48:	af00      	add	r7, sp, #0
 801ae4a:	6078      	str	r0, [r7, #4]
 801ae4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801ae4e:	f7ff f86d 	bl	8019f2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801ae52:	f107 0308 	add.w	r3, r7, #8
 801ae56:	4618      	mov	r0, r3
 801ae58:	f000 f866 	bl	801af28 <prvSampleTimeNow>
 801ae5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801ae5e:	68bb      	ldr	r3, [r7, #8]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d130      	bne.n	801aec6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801ae64:	683b      	ldr	r3, [r7, #0]
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d10a      	bne.n	801ae80 <prvProcessTimerOrBlockTask+0x3c>
 801ae6a:	687a      	ldr	r2, [r7, #4]
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	429a      	cmp	r2, r3
 801ae70:	d806      	bhi.n	801ae80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801ae72:	f7ff f869 	bl	8019f48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801ae76:	68f9      	ldr	r1, [r7, #12]
 801ae78:	6878      	ldr	r0, [r7, #4]
 801ae7a:	f7ff ff85 	bl	801ad88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801ae7e:	e024      	b.n	801aeca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801ae80:	683b      	ldr	r3, [r7, #0]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d008      	beq.n	801ae98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801ae86:	4b13      	ldr	r3, [pc, #76]	; (801aed4 <prvProcessTimerOrBlockTask+0x90>)
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d101      	bne.n	801ae94 <prvProcessTimerOrBlockTask+0x50>
 801ae90:	2301      	movs	r3, #1
 801ae92:	e000      	b.n	801ae96 <prvProcessTimerOrBlockTask+0x52>
 801ae94:	2300      	movs	r3, #0
 801ae96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801ae98:	4b0f      	ldr	r3, [pc, #60]	; (801aed8 <prvProcessTimerOrBlockTask+0x94>)
 801ae9a:	6818      	ldr	r0, [r3, #0]
 801ae9c:	687a      	ldr	r2, [r7, #4]
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	1ad3      	subs	r3, r2, r3
 801aea2:	683a      	ldr	r2, [r7, #0]
 801aea4:	4619      	mov	r1, r3
 801aea6:	f7fe fd53 	bl	8019950 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801aeaa:	f7ff f84d 	bl	8019f48 <xTaskResumeAll>
 801aeae:	4603      	mov	r3, r0
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d10a      	bne.n	801aeca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801aeb4:	4b09      	ldr	r3, [pc, #36]	; (801aedc <prvProcessTimerOrBlockTask+0x98>)
 801aeb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aeba:	601a      	str	r2, [r3, #0]
 801aebc:	f3bf 8f4f 	dsb	sy
 801aec0:	f3bf 8f6f 	isb	sy
}
 801aec4:	e001      	b.n	801aeca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801aec6:	f7ff f83f 	bl	8019f48 <xTaskResumeAll>
}
 801aeca:	bf00      	nop
 801aecc:	3710      	adds	r7, #16
 801aece:	46bd      	mov	sp, r7
 801aed0:	bd80      	pop	{r7, pc}
 801aed2:	bf00      	nop
 801aed4:	2000123c 	.word	0x2000123c
 801aed8:	20001240 	.word	0x20001240
 801aedc:	e000ed04 	.word	0xe000ed04

0801aee0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801aee0:	b480      	push	{r7}
 801aee2:	b085      	sub	sp, #20
 801aee4:	af00      	add	r7, sp, #0
 801aee6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801aee8:	4b0e      	ldr	r3, [pc, #56]	; (801af24 <prvGetNextExpireTime+0x44>)
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d101      	bne.n	801aef6 <prvGetNextExpireTime+0x16>
 801aef2:	2201      	movs	r2, #1
 801aef4:	e000      	b.n	801aef8 <prvGetNextExpireTime+0x18>
 801aef6:	2200      	movs	r2, #0
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d105      	bne.n	801af10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801af04:	4b07      	ldr	r3, [pc, #28]	; (801af24 <prvGetNextExpireTime+0x44>)
 801af06:	681b      	ldr	r3, [r3, #0]
 801af08:	68db      	ldr	r3, [r3, #12]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	60fb      	str	r3, [r7, #12]
 801af0e:	e001      	b.n	801af14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801af10:	2300      	movs	r3, #0
 801af12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801af14:	68fb      	ldr	r3, [r7, #12]
}
 801af16:	4618      	mov	r0, r3
 801af18:	3714      	adds	r7, #20
 801af1a:	46bd      	mov	sp, r7
 801af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af20:	4770      	bx	lr
 801af22:	bf00      	nop
 801af24:	20001238 	.word	0x20001238

0801af28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801af28:	b580      	push	{r7, lr}
 801af2a:	b084      	sub	sp, #16
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801af30:	f7ff f8a8 	bl	801a084 <xTaskGetTickCount>
 801af34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801af36:	4b0b      	ldr	r3, [pc, #44]	; (801af64 <prvSampleTimeNow+0x3c>)
 801af38:	681b      	ldr	r3, [r3, #0]
 801af3a:	68fa      	ldr	r2, [r7, #12]
 801af3c:	429a      	cmp	r2, r3
 801af3e:	d205      	bcs.n	801af4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801af40:	f000 f936 	bl	801b1b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	2201      	movs	r2, #1
 801af48:	601a      	str	r2, [r3, #0]
 801af4a:	e002      	b.n	801af52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	2200      	movs	r2, #0
 801af50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801af52:	4a04      	ldr	r2, [pc, #16]	; (801af64 <prvSampleTimeNow+0x3c>)
 801af54:	68fb      	ldr	r3, [r7, #12]
 801af56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801af58:	68fb      	ldr	r3, [r7, #12]
}
 801af5a:	4618      	mov	r0, r3
 801af5c:	3710      	adds	r7, #16
 801af5e:	46bd      	mov	sp, r7
 801af60:	bd80      	pop	{r7, pc}
 801af62:	bf00      	nop
 801af64:	20001248 	.word	0x20001248

0801af68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b086      	sub	sp, #24
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	60f8      	str	r0, [r7, #12]
 801af70:	60b9      	str	r1, [r7, #8]
 801af72:	607a      	str	r2, [r7, #4]
 801af74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801af76:	2300      	movs	r3, #0
 801af78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	68ba      	ldr	r2, [r7, #8]
 801af7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801af80:	68fb      	ldr	r3, [r7, #12]
 801af82:	68fa      	ldr	r2, [r7, #12]
 801af84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801af86:	68ba      	ldr	r2, [r7, #8]
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	429a      	cmp	r2, r3
 801af8c:	d812      	bhi.n	801afb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801af8e:	687a      	ldr	r2, [r7, #4]
 801af90:	683b      	ldr	r3, [r7, #0]
 801af92:	1ad2      	subs	r2, r2, r3
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	699b      	ldr	r3, [r3, #24]
 801af98:	429a      	cmp	r2, r3
 801af9a:	d302      	bcc.n	801afa2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801af9c:	2301      	movs	r3, #1
 801af9e:	617b      	str	r3, [r7, #20]
 801afa0:	e01b      	b.n	801afda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801afa2:	4b10      	ldr	r3, [pc, #64]	; (801afe4 <prvInsertTimerInActiveList+0x7c>)
 801afa4:	681a      	ldr	r2, [r3, #0]
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	3304      	adds	r3, #4
 801afaa:	4619      	mov	r1, r3
 801afac:	4610      	mov	r0, r2
 801afae:	f7fd fda0 	bl	8018af2 <vListInsert>
 801afb2:	e012      	b.n	801afda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801afb4:	687a      	ldr	r2, [r7, #4]
 801afb6:	683b      	ldr	r3, [r7, #0]
 801afb8:	429a      	cmp	r2, r3
 801afba:	d206      	bcs.n	801afca <prvInsertTimerInActiveList+0x62>
 801afbc:	68ba      	ldr	r2, [r7, #8]
 801afbe:	683b      	ldr	r3, [r7, #0]
 801afc0:	429a      	cmp	r2, r3
 801afc2:	d302      	bcc.n	801afca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801afc4:	2301      	movs	r3, #1
 801afc6:	617b      	str	r3, [r7, #20]
 801afc8:	e007      	b.n	801afda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801afca:	4b07      	ldr	r3, [pc, #28]	; (801afe8 <prvInsertTimerInActiveList+0x80>)
 801afcc:	681a      	ldr	r2, [r3, #0]
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	3304      	adds	r3, #4
 801afd2:	4619      	mov	r1, r3
 801afd4:	4610      	mov	r0, r2
 801afd6:	f7fd fd8c 	bl	8018af2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801afda:	697b      	ldr	r3, [r7, #20]
}
 801afdc:	4618      	mov	r0, r3
 801afde:	3718      	adds	r7, #24
 801afe0:	46bd      	mov	sp, r7
 801afe2:	bd80      	pop	{r7, pc}
 801afe4:	2000123c 	.word	0x2000123c
 801afe8:	20001238 	.word	0x20001238

0801afec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801afec:	b580      	push	{r7, lr}
 801afee:	b08e      	sub	sp, #56	; 0x38
 801aff0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801aff2:	e0ca      	b.n	801b18a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	da18      	bge.n	801b02c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801affa:	1d3b      	adds	r3, r7, #4
 801affc:	3304      	adds	r3, #4
 801affe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801b000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b002:	2b00      	cmp	r3, #0
 801b004:	d10a      	bne.n	801b01c <prvProcessReceivedCommands+0x30>
	__asm volatile
 801b006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b00a:	f383 8811 	msr	BASEPRI, r3
 801b00e:	f3bf 8f6f 	isb	sy
 801b012:	f3bf 8f4f 	dsb	sy
 801b016:	61fb      	str	r3, [r7, #28]
}
 801b018:	bf00      	nop
 801b01a:	e7fe      	b.n	801b01a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b022:	6850      	ldr	r0, [r2, #4]
 801b024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b026:	6892      	ldr	r2, [r2, #8]
 801b028:	4611      	mov	r1, r2
 801b02a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	f2c0 80aa 	blt.w	801b188 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801b038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b03a:	695b      	ldr	r3, [r3, #20]
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d004      	beq.n	801b04a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b042:	3304      	adds	r3, #4
 801b044:	4618      	mov	r0, r3
 801b046:	f7fd fd8d 	bl	8018b64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b04a:	463b      	mov	r3, r7
 801b04c:	4618      	mov	r0, r3
 801b04e:	f7ff ff6b 	bl	801af28 <prvSampleTimeNow>
 801b052:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	2b09      	cmp	r3, #9
 801b058:	f200 8097 	bhi.w	801b18a <prvProcessReceivedCommands+0x19e>
 801b05c:	a201      	add	r2, pc, #4	; (adr r2, 801b064 <prvProcessReceivedCommands+0x78>)
 801b05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b062:	bf00      	nop
 801b064:	0801b08d 	.word	0x0801b08d
 801b068:	0801b08d 	.word	0x0801b08d
 801b06c:	0801b08d 	.word	0x0801b08d
 801b070:	0801b101 	.word	0x0801b101
 801b074:	0801b115 	.word	0x0801b115
 801b078:	0801b15f 	.word	0x0801b15f
 801b07c:	0801b08d 	.word	0x0801b08d
 801b080:	0801b08d 	.word	0x0801b08d
 801b084:	0801b101 	.word	0x0801b101
 801b088:	0801b115 	.word	0x0801b115
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b08e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b092:	f043 0301 	orr.w	r3, r3, #1
 801b096:	b2da      	uxtb	r2, r3
 801b098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b09a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801b09e:	68ba      	ldr	r2, [r7, #8]
 801b0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0a2:	699b      	ldr	r3, [r3, #24]
 801b0a4:	18d1      	adds	r1, r2, r3
 801b0a6:	68bb      	ldr	r3, [r7, #8]
 801b0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b0aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b0ac:	f7ff ff5c 	bl	801af68 <prvInsertTimerInActiveList>
 801b0b0:	4603      	mov	r3, r0
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d069      	beq.n	801b18a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0b8:	6a1b      	ldr	r3, [r3, #32]
 801b0ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b0bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b0c4:	f003 0304 	and.w	r3, r3, #4
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d05e      	beq.n	801b18a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801b0cc:	68ba      	ldr	r2, [r7, #8]
 801b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0d0:	699b      	ldr	r3, [r3, #24]
 801b0d2:	441a      	add	r2, r3
 801b0d4:	2300      	movs	r3, #0
 801b0d6:	9300      	str	r3, [sp, #0]
 801b0d8:	2300      	movs	r3, #0
 801b0da:	2100      	movs	r1, #0
 801b0dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b0de:	f7ff fe05 	bl	801acec <xTimerGenericCommand>
 801b0e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801b0e4:	6a3b      	ldr	r3, [r7, #32]
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d14f      	bne.n	801b18a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0ee:	f383 8811 	msr	BASEPRI, r3
 801b0f2:	f3bf 8f6f 	isb	sy
 801b0f6:	f3bf 8f4f 	dsb	sy
 801b0fa:	61bb      	str	r3, [r7, #24]
}
 801b0fc:	bf00      	nop
 801b0fe:	e7fe      	b.n	801b0fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b106:	f023 0301 	bic.w	r3, r3, #1
 801b10a:	b2da      	uxtb	r2, r3
 801b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b10e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801b112:	e03a      	b.n	801b18a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b11a:	f043 0301 	orr.w	r3, r3, #1
 801b11e:	b2da      	uxtb	r2, r3
 801b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801b126:	68ba      	ldr	r2, [r7, #8]
 801b128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b12a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801b12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b12e:	699b      	ldr	r3, [r3, #24]
 801b130:	2b00      	cmp	r3, #0
 801b132:	d10a      	bne.n	801b14a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801b134:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b138:	f383 8811 	msr	BASEPRI, r3
 801b13c:	f3bf 8f6f 	isb	sy
 801b140:	f3bf 8f4f 	dsb	sy
 801b144:	617b      	str	r3, [r7, #20]
}
 801b146:	bf00      	nop
 801b148:	e7fe      	b.n	801b148 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801b14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b14c:	699a      	ldr	r2, [r3, #24]
 801b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b150:	18d1      	adds	r1, r2, r3
 801b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b158:	f7ff ff06 	bl	801af68 <prvInsertTimerInActiveList>
					break;
 801b15c:	e015      	b.n	801b18a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801b15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b164:	f003 0302 	and.w	r3, r3, #2
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d103      	bne.n	801b174 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801b16c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b16e:	f000 fbff 	bl	801b970 <vPortFree>
 801b172:	e00a      	b.n	801b18a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b17a:	f023 0301 	bic.w	r3, r3, #1
 801b17e:	b2da      	uxtb	r2, r3
 801b180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801b186:	e000      	b.n	801b18a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801b188:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b18a:	4b08      	ldr	r3, [pc, #32]	; (801b1ac <prvProcessReceivedCommands+0x1c0>)
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	1d39      	adds	r1, r7, #4
 801b190:	2200      	movs	r2, #0
 801b192:	4618      	mov	r0, r3
 801b194:	f7fe f89e 	bl	80192d4 <xQueueReceive>
 801b198:	4603      	mov	r3, r0
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	f47f af2a 	bne.w	801aff4 <prvProcessReceivedCommands+0x8>
	}
}
 801b1a0:	bf00      	nop
 801b1a2:	bf00      	nop
 801b1a4:	3730      	adds	r7, #48	; 0x30
 801b1a6:	46bd      	mov	sp, r7
 801b1a8:	bd80      	pop	{r7, pc}
 801b1aa:	bf00      	nop
 801b1ac:	20001240 	.word	0x20001240

0801b1b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801b1b0:	b580      	push	{r7, lr}
 801b1b2:	b088      	sub	sp, #32
 801b1b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b1b6:	e048      	b.n	801b24a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b1b8:	4b2d      	ldr	r3, [pc, #180]	; (801b270 <prvSwitchTimerLists+0xc0>)
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	68db      	ldr	r3, [r3, #12]
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b1c2:	4b2b      	ldr	r3, [pc, #172]	; (801b270 <prvSwitchTimerLists+0xc0>)
 801b1c4:	681b      	ldr	r3, [r3, #0]
 801b1c6:	68db      	ldr	r3, [r3, #12]
 801b1c8:	68db      	ldr	r3, [r3, #12]
 801b1ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b1cc:	68fb      	ldr	r3, [r7, #12]
 801b1ce:	3304      	adds	r3, #4
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	f7fd fcc7 	bl	8018b64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b1d6:	68fb      	ldr	r3, [r7, #12]
 801b1d8:	6a1b      	ldr	r3, [r3, #32]
 801b1da:	68f8      	ldr	r0, [r7, #12]
 801b1dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b1de:	68fb      	ldr	r3, [r7, #12]
 801b1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b1e4:	f003 0304 	and.w	r3, r3, #4
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d02e      	beq.n	801b24a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801b1ec:	68fb      	ldr	r3, [r7, #12]
 801b1ee:	699b      	ldr	r3, [r3, #24]
 801b1f0:	693a      	ldr	r2, [r7, #16]
 801b1f2:	4413      	add	r3, r2
 801b1f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801b1f6:	68ba      	ldr	r2, [r7, #8]
 801b1f8:	693b      	ldr	r3, [r7, #16]
 801b1fa:	429a      	cmp	r2, r3
 801b1fc:	d90e      	bls.n	801b21c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801b1fe:	68fb      	ldr	r3, [r7, #12]
 801b200:	68ba      	ldr	r2, [r7, #8]
 801b202:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b204:	68fb      	ldr	r3, [r7, #12]
 801b206:	68fa      	ldr	r2, [r7, #12]
 801b208:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b20a:	4b19      	ldr	r3, [pc, #100]	; (801b270 <prvSwitchTimerLists+0xc0>)
 801b20c:	681a      	ldr	r2, [r3, #0]
 801b20e:	68fb      	ldr	r3, [r7, #12]
 801b210:	3304      	adds	r3, #4
 801b212:	4619      	mov	r1, r3
 801b214:	4610      	mov	r0, r2
 801b216:	f7fd fc6c 	bl	8018af2 <vListInsert>
 801b21a:	e016      	b.n	801b24a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b21c:	2300      	movs	r3, #0
 801b21e:	9300      	str	r3, [sp, #0]
 801b220:	2300      	movs	r3, #0
 801b222:	693a      	ldr	r2, [r7, #16]
 801b224:	2100      	movs	r1, #0
 801b226:	68f8      	ldr	r0, [r7, #12]
 801b228:	f7ff fd60 	bl	801acec <xTimerGenericCommand>
 801b22c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	2b00      	cmp	r3, #0
 801b232:	d10a      	bne.n	801b24a <prvSwitchTimerLists+0x9a>
	__asm volatile
 801b234:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b238:	f383 8811 	msr	BASEPRI, r3
 801b23c:	f3bf 8f6f 	isb	sy
 801b240:	f3bf 8f4f 	dsb	sy
 801b244:	603b      	str	r3, [r7, #0]
}
 801b246:	bf00      	nop
 801b248:	e7fe      	b.n	801b248 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b24a:	4b09      	ldr	r3, [pc, #36]	; (801b270 <prvSwitchTimerLists+0xc0>)
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	2b00      	cmp	r3, #0
 801b252:	d1b1      	bne.n	801b1b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801b254:	4b06      	ldr	r3, [pc, #24]	; (801b270 <prvSwitchTimerLists+0xc0>)
 801b256:	681b      	ldr	r3, [r3, #0]
 801b258:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801b25a:	4b06      	ldr	r3, [pc, #24]	; (801b274 <prvSwitchTimerLists+0xc4>)
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	4a04      	ldr	r2, [pc, #16]	; (801b270 <prvSwitchTimerLists+0xc0>)
 801b260:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801b262:	4a04      	ldr	r2, [pc, #16]	; (801b274 <prvSwitchTimerLists+0xc4>)
 801b264:	697b      	ldr	r3, [r7, #20]
 801b266:	6013      	str	r3, [r2, #0]
}
 801b268:	bf00      	nop
 801b26a:	3718      	adds	r7, #24
 801b26c:	46bd      	mov	sp, r7
 801b26e:	bd80      	pop	{r7, pc}
 801b270:	20001238 	.word	0x20001238
 801b274:	2000123c 	.word	0x2000123c

0801b278 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801b278:	b580      	push	{r7, lr}
 801b27a:	b082      	sub	sp, #8
 801b27c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801b27e:	f000 f989 	bl	801b594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801b282:	4b15      	ldr	r3, [pc, #84]	; (801b2d8 <prvCheckForValidListAndQueue+0x60>)
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	2b00      	cmp	r3, #0
 801b288:	d120      	bne.n	801b2cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801b28a:	4814      	ldr	r0, [pc, #80]	; (801b2dc <prvCheckForValidListAndQueue+0x64>)
 801b28c:	f7fd fbe0 	bl	8018a50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801b290:	4813      	ldr	r0, [pc, #76]	; (801b2e0 <prvCheckForValidListAndQueue+0x68>)
 801b292:	f7fd fbdd 	bl	8018a50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801b296:	4b13      	ldr	r3, [pc, #76]	; (801b2e4 <prvCheckForValidListAndQueue+0x6c>)
 801b298:	4a10      	ldr	r2, [pc, #64]	; (801b2dc <prvCheckForValidListAndQueue+0x64>)
 801b29a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801b29c:	4b12      	ldr	r3, [pc, #72]	; (801b2e8 <prvCheckForValidListAndQueue+0x70>)
 801b29e:	4a10      	ldr	r2, [pc, #64]	; (801b2e0 <prvCheckForValidListAndQueue+0x68>)
 801b2a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	9300      	str	r3, [sp, #0]
 801b2a6:	4b11      	ldr	r3, [pc, #68]	; (801b2ec <prvCheckForValidListAndQueue+0x74>)
 801b2a8:	4a11      	ldr	r2, [pc, #68]	; (801b2f0 <prvCheckForValidListAndQueue+0x78>)
 801b2aa:	2110      	movs	r1, #16
 801b2ac:	200a      	movs	r0, #10
 801b2ae:	f7fd fceb 	bl	8018c88 <xQueueGenericCreateStatic>
 801b2b2:	4603      	mov	r3, r0
 801b2b4:	4a08      	ldr	r2, [pc, #32]	; (801b2d8 <prvCheckForValidListAndQueue+0x60>)
 801b2b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801b2b8:	4b07      	ldr	r3, [pc, #28]	; (801b2d8 <prvCheckForValidListAndQueue+0x60>)
 801b2ba:	681b      	ldr	r3, [r3, #0]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d005      	beq.n	801b2cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801b2c0:	4b05      	ldr	r3, [pc, #20]	; (801b2d8 <prvCheckForValidListAndQueue+0x60>)
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	490b      	ldr	r1, [pc, #44]	; (801b2f4 <prvCheckForValidListAndQueue+0x7c>)
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	f7fe fb18 	bl	80198fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b2cc:	f000 f992 	bl	801b5f4 <vPortExitCritical>
}
 801b2d0:	bf00      	nop
 801b2d2:	46bd      	mov	sp, r7
 801b2d4:	bd80      	pop	{r7, pc}
 801b2d6:	bf00      	nop
 801b2d8:	20001240 	.word	0x20001240
 801b2dc:	20001210 	.word	0x20001210
 801b2e0:	20001224 	.word	0x20001224
 801b2e4:	20001238 	.word	0x20001238
 801b2e8:	2000123c 	.word	0x2000123c
 801b2ec:	200012ec 	.word	0x200012ec
 801b2f0:	2000124c 	.word	0x2000124c
 801b2f4:	0801db00 	.word	0x0801db00

0801b2f8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801b2f8:	b580      	push	{r7, lr}
 801b2fa:	b08a      	sub	sp, #40	; 0x28
 801b2fc:	af00      	add	r7, sp, #0
 801b2fe:	60f8      	str	r0, [r7, #12]
 801b300:	60b9      	str	r1, [r7, #8]
 801b302:	607a      	str	r2, [r7, #4]
 801b304:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801b306:	f06f 0301 	mvn.w	r3, #1
 801b30a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801b310:	68bb      	ldr	r3, [r7, #8]
 801b312:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b318:	4b06      	ldr	r3, [pc, #24]	; (801b334 <xTimerPendFunctionCallFromISR+0x3c>)
 801b31a:	6818      	ldr	r0, [r3, #0]
 801b31c:	f107 0114 	add.w	r1, r7, #20
 801b320:	2300      	movs	r3, #0
 801b322:	683a      	ldr	r2, [r7, #0]
 801b324:	f7fd ff3a 	bl	801919c <xQueueGenericSendFromISR>
 801b328:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801b32c:	4618      	mov	r0, r3
 801b32e:	3728      	adds	r7, #40	; 0x28
 801b330:	46bd      	mov	sp, r7
 801b332:	bd80      	pop	{r7, pc}
 801b334:	20001240 	.word	0x20001240

0801b338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801b338:	b480      	push	{r7}
 801b33a:	b085      	sub	sp, #20
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	60f8      	str	r0, [r7, #12]
 801b340:	60b9      	str	r1, [r7, #8]
 801b342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801b344:	68fb      	ldr	r3, [r7, #12]
 801b346:	3b04      	subs	r3, #4
 801b348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801b350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	3b04      	subs	r3, #4
 801b356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801b358:	68bb      	ldr	r3, [r7, #8]
 801b35a:	f023 0201 	bic.w	r2, r3, #1
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b362:	68fb      	ldr	r3, [r7, #12]
 801b364:	3b04      	subs	r3, #4
 801b366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801b368:	4a0c      	ldr	r2, [pc, #48]	; (801b39c <pxPortInitialiseStack+0x64>)
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801b36e:	68fb      	ldr	r3, [r7, #12]
 801b370:	3b14      	subs	r3, #20
 801b372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801b374:	687a      	ldr	r2, [r7, #4]
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801b37a:	68fb      	ldr	r3, [r7, #12]
 801b37c:	3b04      	subs	r3, #4
 801b37e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801b380:	68fb      	ldr	r3, [r7, #12]
 801b382:	f06f 0202 	mvn.w	r2, #2
 801b386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	3b20      	subs	r3, #32
 801b38c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801b38e:	68fb      	ldr	r3, [r7, #12]
}
 801b390:	4618      	mov	r0, r3
 801b392:	3714      	adds	r7, #20
 801b394:	46bd      	mov	sp, r7
 801b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b39a:	4770      	bx	lr
 801b39c:	0801b3a1 	.word	0x0801b3a1

0801b3a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b3a0:	b480      	push	{r7}
 801b3a2:	b085      	sub	sp, #20
 801b3a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801b3a6:	2300      	movs	r3, #0
 801b3a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801b3aa:	4b12      	ldr	r3, [pc, #72]	; (801b3f4 <prvTaskExitError+0x54>)
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b3b2:	d00a      	beq.n	801b3ca <prvTaskExitError+0x2a>
	__asm volatile
 801b3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b3b8:	f383 8811 	msr	BASEPRI, r3
 801b3bc:	f3bf 8f6f 	isb	sy
 801b3c0:	f3bf 8f4f 	dsb	sy
 801b3c4:	60fb      	str	r3, [r7, #12]
}
 801b3c6:	bf00      	nop
 801b3c8:	e7fe      	b.n	801b3c8 <prvTaskExitError+0x28>
	__asm volatile
 801b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b3ce:	f383 8811 	msr	BASEPRI, r3
 801b3d2:	f3bf 8f6f 	isb	sy
 801b3d6:	f3bf 8f4f 	dsb	sy
 801b3da:	60bb      	str	r3, [r7, #8]
}
 801b3dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801b3de:	bf00      	nop
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d0fc      	beq.n	801b3e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801b3e6:	bf00      	nop
 801b3e8:	bf00      	nop
 801b3ea:	3714      	adds	r7, #20
 801b3ec:	46bd      	mov	sp, r7
 801b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3f2:	4770      	bx	lr
 801b3f4:	20000160 	.word	0x20000160
	...

0801b400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801b400:	4b07      	ldr	r3, [pc, #28]	; (801b420 <pxCurrentTCBConst2>)
 801b402:	6819      	ldr	r1, [r3, #0]
 801b404:	6808      	ldr	r0, [r1, #0]
 801b406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b40a:	f380 8809 	msr	PSP, r0
 801b40e:	f3bf 8f6f 	isb	sy
 801b412:	f04f 0000 	mov.w	r0, #0
 801b416:	f380 8811 	msr	BASEPRI, r0
 801b41a:	4770      	bx	lr
 801b41c:	f3af 8000 	nop.w

0801b420 <pxCurrentTCBConst2>:
 801b420:	20000d10 	.word	0x20000d10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801b424:	bf00      	nop
 801b426:	bf00      	nop

0801b428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b428:	4808      	ldr	r0, [pc, #32]	; (801b44c <prvPortStartFirstTask+0x24>)
 801b42a:	6800      	ldr	r0, [r0, #0]
 801b42c:	6800      	ldr	r0, [r0, #0]
 801b42e:	f380 8808 	msr	MSP, r0
 801b432:	f04f 0000 	mov.w	r0, #0
 801b436:	f380 8814 	msr	CONTROL, r0
 801b43a:	b662      	cpsie	i
 801b43c:	b661      	cpsie	f
 801b43e:	f3bf 8f4f 	dsb	sy
 801b442:	f3bf 8f6f 	isb	sy
 801b446:	df00      	svc	0
 801b448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b44a:	bf00      	nop
 801b44c:	e000ed08 	.word	0xe000ed08

0801b450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801b450:	b580      	push	{r7, lr}
 801b452:	b086      	sub	sp, #24
 801b454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801b456:	4b46      	ldr	r3, [pc, #280]	; (801b570 <xPortStartScheduler+0x120>)
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	4a46      	ldr	r2, [pc, #280]	; (801b574 <xPortStartScheduler+0x124>)
 801b45c:	4293      	cmp	r3, r2
 801b45e:	d10a      	bne.n	801b476 <xPortStartScheduler+0x26>
	__asm volatile
 801b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b464:	f383 8811 	msr	BASEPRI, r3
 801b468:	f3bf 8f6f 	isb	sy
 801b46c:	f3bf 8f4f 	dsb	sy
 801b470:	613b      	str	r3, [r7, #16]
}
 801b472:	bf00      	nop
 801b474:	e7fe      	b.n	801b474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801b476:	4b3e      	ldr	r3, [pc, #248]	; (801b570 <xPortStartScheduler+0x120>)
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	4a3f      	ldr	r2, [pc, #252]	; (801b578 <xPortStartScheduler+0x128>)
 801b47c:	4293      	cmp	r3, r2
 801b47e:	d10a      	bne.n	801b496 <xPortStartScheduler+0x46>
	__asm volatile
 801b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b484:	f383 8811 	msr	BASEPRI, r3
 801b488:	f3bf 8f6f 	isb	sy
 801b48c:	f3bf 8f4f 	dsb	sy
 801b490:	60fb      	str	r3, [r7, #12]
}
 801b492:	bf00      	nop
 801b494:	e7fe      	b.n	801b494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801b496:	4b39      	ldr	r3, [pc, #228]	; (801b57c <xPortStartScheduler+0x12c>)
 801b498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b49a:	697b      	ldr	r3, [r7, #20]
 801b49c:	781b      	ldrb	r3, [r3, #0]
 801b49e:	b2db      	uxtb	r3, r3
 801b4a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b4a2:	697b      	ldr	r3, [r7, #20]
 801b4a4:	22ff      	movs	r2, #255	; 0xff
 801b4a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b4a8:	697b      	ldr	r3, [r7, #20]
 801b4aa:	781b      	ldrb	r3, [r3, #0]
 801b4ac:	b2db      	uxtb	r3, r3
 801b4ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b4b0:	78fb      	ldrb	r3, [r7, #3]
 801b4b2:	b2db      	uxtb	r3, r3
 801b4b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b4b8:	b2da      	uxtb	r2, r3
 801b4ba:	4b31      	ldr	r3, [pc, #196]	; (801b580 <xPortStartScheduler+0x130>)
 801b4bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b4be:	4b31      	ldr	r3, [pc, #196]	; (801b584 <xPortStartScheduler+0x134>)
 801b4c0:	2207      	movs	r2, #7
 801b4c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b4c4:	e009      	b.n	801b4da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801b4c6:	4b2f      	ldr	r3, [pc, #188]	; (801b584 <xPortStartScheduler+0x134>)
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	3b01      	subs	r3, #1
 801b4cc:	4a2d      	ldr	r2, [pc, #180]	; (801b584 <xPortStartScheduler+0x134>)
 801b4ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b4d0:	78fb      	ldrb	r3, [r7, #3]
 801b4d2:	b2db      	uxtb	r3, r3
 801b4d4:	005b      	lsls	r3, r3, #1
 801b4d6:	b2db      	uxtb	r3, r3
 801b4d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b4da:	78fb      	ldrb	r3, [r7, #3]
 801b4dc:	b2db      	uxtb	r3, r3
 801b4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b4e2:	2b80      	cmp	r3, #128	; 0x80
 801b4e4:	d0ef      	beq.n	801b4c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b4e6:	4b27      	ldr	r3, [pc, #156]	; (801b584 <xPortStartScheduler+0x134>)
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	f1c3 0307 	rsb	r3, r3, #7
 801b4ee:	2b04      	cmp	r3, #4
 801b4f0:	d00a      	beq.n	801b508 <xPortStartScheduler+0xb8>
	__asm volatile
 801b4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4f6:	f383 8811 	msr	BASEPRI, r3
 801b4fa:	f3bf 8f6f 	isb	sy
 801b4fe:	f3bf 8f4f 	dsb	sy
 801b502:	60bb      	str	r3, [r7, #8]
}
 801b504:	bf00      	nop
 801b506:	e7fe      	b.n	801b506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b508:	4b1e      	ldr	r3, [pc, #120]	; (801b584 <xPortStartScheduler+0x134>)
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	021b      	lsls	r3, r3, #8
 801b50e:	4a1d      	ldr	r2, [pc, #116]	; (801b584 <xPortStartScheduler+0x134>)
 801b510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b512:	4b1c      	ldr	r3, [pc, #112]	; (801b584 <xPortStartScheduler+0x134>)
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b51a:	4a1a      	ldr	r2, [pc, #104]	; (801b584 <xPortStartScheduler+0x134>)
 801b51c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	b2da      	uxtb	r2, r3
 801b522:	697b      	ldr	r3, [r7, #20]
 801b524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b526:	4b18      	ldr	r3, [pc, #96]	; (801b588 <xPortStartScheduler+0x138>)
 801b528:	681b      	ldr	r3, [r3, #0]
 801b52a:	4a17      	ldr	r2, [pc, #92]	; (801b588 <xPortStartScheduler+0x138>)
 801b52c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801b530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b532:	4b15      	ldr	r3, [pc, #84]	; (801b588 <xPortStartScheduler+0x138>)
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	4a14      	ldr	r2, [pc, #80]	; (801b588 <xPortStartScheduler+0x138>)
 801b538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801b53c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b53e:	f000 f8dd 	bl	801b6fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b542:	4b12      	ldr	r3, [pc, #72]	; (801b58c <xPortStartScheduler+0x13c>)
 801b544:	2200      	movs	r2, #0
 801b546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b548:	f000 f8fc 	bl	801b744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b54c:	4b10      	ldr	r3, [pc, #64]	; (801b590 <xPortStartScheduler+0x140>)
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	4a0f      	ldr	r2, [pc, #60]	; (801b590 <xPortStartScheduler+0x140>)
 801b552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801b556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b558:	f7ff ff66 	bl	801b428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b55c:	f7fe fe6e 	bl	801a23c <vTaskSwitchContext>
	prvTaskExitError();
 801b560:	f7ff ff1e 	bl	801b3a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b564:	2300      	movs	r3, #0
}
 801b566:	4618      	mov	r0, r3
 801b568:	3718      	adds	r7, #24
 801b56a:	46bd      	mov	sp, r7
 801b56c:	bd80      	pop	{r7, pc}
 801b56e:	bf00      	nop
 801b570:	e000ed00 	.word	0xe000ed00
 801b574:	410fc271 	.word	0x410fc271
 801b578:	410fc270 	.word	0x410fc270
 801b57c:	e000e400 	.word	0xe000e400
 801b580:	2000133c 	.word	0x2000133c
 801b584:	20001340 	.word	0x20001340
 801b588:	e000ed20 	.word	0xe000ed20
 801b58c:	20000160 	.word	0x20000160
 801b590:	e000ef34 	.word	0xe000ef34

0801b594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b594:	b480      	push	{r7}
 801b596:	b083      	sub	sp, #12
 801b598:	af00      	add	r7, sp, #0
	__asm volatile
 801b59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b59e:	f383 8811 	msr	BASEPRI, r3
 801b5a2:	f3bf 8f6f 	isb	sy
 801b5a6:	f3bf 8f4f 	dsb	sy
 801b5aa:	607b      	str	r3, [r7, #4]
}
 801b5ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b5ae:	4b0f      	ldr	r3, [pc, #60]	; (801b5ec <vPortEnterCritical+0x58>)
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	3301      	adds	r3, #1
 801b5b4:	4a0d      	ldr	r2, [pc, #52]	; (801b5ec <vPortEnterCritical+0x58>)
 801b5b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b5b8:	4b0c      	ldr	r3, [pc, #48]	; (801b5ec <vPortEnterCritical+0x58>)
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	2b01      	cmp	r3, #1
 801b5be:	d10f      	bne.n	801b5e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b5c0:	4b0b      	ldr	r3, [pc, #44]	; (801b5f0 <vPortEnterCritical+0x5c>)
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	b2db      	uxtb	r3, r3
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d00a      	beq.n	801b5e0 <vPortEnterCritical+0x4c>
	__asm volatile
 801b5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b5ce:	f383 8811 	msr	BASEPRI, r3
 801b5d2:	f3bf 8f6f 	isb	sy
 801b5d6:	f3bf 8f4f 	dsb	sy
 801b5da:	603b      	str	r3, [r7, #0]
}
 801b5dc:	bf00      	nop
 801b5de:	e7fe      	b.n	801b5de <vPortEnterCritical+0x4a>
	}
}
 801b5e0:	bf00      	nop
 801b5e2:	370c      	adds	r7, #12
 801b5e4:	46bd      	mov	sp, r7
 801b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ea:	4770      	bx	lr
 801b5ec:	20000160 	.word	0x20000160
 801b5f0:	e000ed04 	.word	0xe000ed04

0801b5f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b5f4:	b480      	push	{r7}
 801b5f6:	b083      	sub	sp, #12
 801b5f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b5fa:	4b12      	ldr	r3, [pc, #72]	; (801b644 <vPortExitCritical+0x50>)
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d10a      	bne.n	801b618 <vPortExitCritical+0x24>
	__asm volatile
 801b602:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b606:	f383 8811 	msr	BASEPRI, r3
 801b60a:	f3bf 8f6f 	isb	sy
 801b60e:	f3bf 8f4f 	dsb	sy
 801b612:	607b      	str	r3, [r7, #4]
}
 801b614:	bf00      	nop
 801b616:	e7fe      	b.n	801b616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801b618:	4b0a      	ldr	r3, [pc, #40]	; (801b644 <vPortExitCritical+0x50>)
 801b61a:	681b      	ldr	r3, [r3, #0]
 801b61c:	3b01      	subs	r3, #1
 801b61e:	4a09      	ldr	r2, [pc, #36]	; (801b644 <vPortExitCritical+0x50>)
 801b620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b622:	4b08      	ldr	r3, [pc, #32]	; (801b644 <vPortExitCritical+0x50>)
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	2b00      	cmp	r3, #0
 801b628:	d105      	bne.n	801b636 <vPortExitCritical+0x42>
 801b62a:	2300      	movs	r3, #0
 801b62c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b62e:	683b      	ldr	r3, [r7, #0]
 801b630:	f383 8811 	msr	BASEPRI, r3
}
 801b634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b636:	bf00      	nop
 801b638:	370c      	adds	r7, #12
 801b63a:	46bd      	mov	sp, r7
 801b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b640:	4770      	bx	lr
 801b642:	bf00      	nop
 801b644:	20000160 	.word	0x20000160
	...

0801b650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b650:	f3ef 8009 	mrs	r0, PSP
 801b654:	f3bf 8f6f 	isb	sy
 801b658:	4b15      	ldr	r3, [pc, #84]	; (801b6b0 <pxCurrentTCBConst>)
 801b65a:	681a      	ldr	r2, [r3, #0]
 801b65c:	f01e 0f10 	tst.w	lr, #16
 801b660:	bf08      	it	eq
 801b662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b66a:	6010      	str	r0, [r2, #0]
 801b66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b670:	f04f 0050 	mov.w	r0, #80	; 0x50
 801b674:	f380 8811 	msr	BASEPRI, r0
 801b678:	f3bf 8f4f 	dsb	sy
 801b67c:	f3bf 8f6f 	isb	sy
 801b680:	f7fe fddc 	bl	801a23c <vTaskSwitchContext>
 801b684:	f04f 0000 	mov.w	r0, #0
 801b688:	f380 8811 	msr	BASEPRI, r0
 801b68c:	bc09      	pop	{r0, r3}
 801b68e:	6819      	ldr	r1, [r3, #0]
 801b690:	6808      	ldr	r0, [r1, #0]
 801b692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b696:	f01e 0f10 	tst.w	lr, #16
 801b69a:	bf08      	it	eq
 801b69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b6a0:	f380 8809 	msr	PSP, r0
 801b6a4:	f3bf 8f6f 	isb	sy
 801b6a8:	4770      	bx	lr
 801b6aa:	bf00      	nop
 801b6ac:	f3af 8000 	nop.w

0801b6b0 <pxCurrentTCBConst>:
 801b6b0:	20000d10 	.word	0x20000d10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b6b4:	bf00      	nop
 801b6b6:	bf00      	nop

0801b6b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b6b8:	b580      	push	{r7, lr}
 801b6ba:	b082      	sub	sp, #8
 801b6bc:	af00      	add	r7, sp, #0
	__asm volatile
 801b6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b6c2:	f383 8811 	msr	BASEPRI, r3
 801b6c6:	f3bf 8f6f 	isb	sy
 801b6ca:	f3bf 8f4f 	dsb	sy
 801b6ce:	607b      	str	r3, [r7, #4]
}
 801b6d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b6d2:	f7fe fcf9 	bl	801a0c8 <xTaskIncrementTick>
 801b6d6:	4603      	mov	r3, r0
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d003      	beq.n	801b6e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b6dc:	4b06      	ldr	r3, [pc, #24]	; (801b6f8 <xPortSysTickHandler+0x40>)
 801b6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b6e2:	601a      	str	r2, [r3, #0]
 801b6e4:	2300      	movs	r3, #0
 801b6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b6e8:	683b      	ldr	r3, [r7, #0]
 801b6ea:	f383 8811 	msr	BASEPRI, r3
}
 801b6ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b6f0:	bf00      	nop
 801b6f2:	3708      	adds	r7, #8
 801b6f4:	46bd      	mov	sp, r7
 801b6f6:	bd80      	pop	{r7, pc}
 801b6f8:	e000ed04 	.word	0xe000ed04

0801b6fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b6fc:	b480      	push	{r7}
 801b6fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b700:	4b0b      	ldr	r3, [pc, #44]	; (801b730 <vPortSetupTimerInterrupt+0x34>)
 801b702:	2200      	movs	r2, #0
 801b704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b706:	4b0b      	ldr	r3, [pc, #44]	; (801b734 <vPortSetupTimerInterrupt+0x38>)
 801b708:	2200      	movs	r2, #0
 801b70a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b70c:	4b0a      	ldr	r3, [pc, #40]	; (801b738 <vPortSetupTimerInterrupt+0x3c>)
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	4a0a      	ldr	r2, [pc, #40]	; (801b73c <vPortSetupTimerInterrupt+0x40>)
 801b712:	fba2 2303 	umull	r2, r3, r2, r3
 801b716:	099b      	lsrs	r3, r3, #6
 801b718:	4a09      	ldr	r2, [pc, #36]	; (801b740 <vPortSetupTimerInterrupt+0x44>)
 801b71a:	3b01      	subs	r3, #1
 801b71c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b71e:	4b04      	ldr	r3, [pc, #16]	; (801b730 <vPortSetupTimerInterrupt+0x34>)
 801b720:	2207      	movs	r2, #7
 801b722:	601a      	str	r2, [r3, #0]
}
 801b724:	bf00      	nop
 801b726:	46bd      	mov	sp, r7
 801b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b72c:	4770      	bx	lr
 801b72e:	bf00      	nop
 801b730:	e000e010 	.word	0xe000e010
 801b734:	e000e018 	.word	0xe000e018
 801b738:	20000014 	.word	0x20000014
 801b73c:	10624dd3 	.word	0x10624dd3
 801b740:	e000e014 	.word	0xe000e014

0801b744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801b754 <vPortEnableVFP+0x10>
 801b748:	6801      	ldr	r1, [r0, #0]
 801b74a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b74e:	6001      	str	r1, [r0, #0]
 801b750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b752:	bf00      	nop
 801b754:	e000ed88 	.word	0xe000ed88

0801b758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801b758:	b480      	push	{r7}
 801b75a:	b085      	sub	sp, #20
 801b75c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b75e:	f3ef 8305 	mrs	r3, IPSR
 801b762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b764:	68fb      	ldr	r3, [r7, #12]
 801b766:	2b0f      	cmp	r3, #15
 801b768:	d914      	bls.n	801b794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b76a:	4a17      	ldr	r2, [pc, #92]	; (801b7c8 <vPortValidateInterruptPriority+0x70>)
 801b76c:	68fb      	ldr	r3, [r7, #12]
 801b76e:	4413      	add	r3, r2
 801b770:	781b      	ldrb	r3, [r3, #0]
 801b772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b774:	4b15      	ldr	r3, [pc, #84]	; (801b7cc <vPortValidateInterruptPriority+0x74>)
 801b776:	781b      	ldrb	r3, [r3, #0]
 801b778:	7afa      	ldrb	r2, [r7, #11]
 801b77a:	429a      	cmp	r2, r3
 801b77c:	d20a      	bcs.n	801b794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801b77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b782:	f383 8811 	msr	BASEPRI, r3
 801b786:	f3bf 8f6f 	isb	sy
 801b78a:	f3bf 8f4f 	dsb	sy
 801b78e:	607b      	str	r3, [r7, #4]
}
 801b790:	bf00      	nop
 801b792:	e7fe      	b.n	801b792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b794:	4b0e      	ldr	r3, [pc, #56]	; (801b7d0 <vPortValidateInterruptPriority+0x78>)
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801b79c:	4b0d      	ldr	r3, [pc, #52]	; (801b7d4 <vPortValidateInterruptPriority+0x7c>)
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	429a      	cmp	r2, r3
 801b7a2:	d90a      	bls.n	801b7ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801b7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b7a8:	f383 8811 	msr	BASEPRI, r3
 801b7ac:	f3bf 8f6f 	isb	sy
 801b7b0:	f3bf 8f4f 	dsb	sy
 801b7b4:	603b      	str	r3, [r7, #0]
}
 801b7b6:	bf00      	nop
 801b7b8:	e7fe      	b.n	801b7b8 <vPortValidateInterruptPriority+0x60>
	}
 801b7ba:	bf00      	nop
 801b7bc:	3714      	adds	r7, #20
 801b7be:	46bd      	mov	sp, r7
 801b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7c4:	4770      	bx	lr
 801b7c6:	bf00      	nop
 801b7c8:	e000e3f0 	.word	0xe000e3f0
 801b7cc:	2000133c 	.word	0x2000133c
 801b7d0:	e000ed0c 	.word	0xe000ed0c
 801b7d4:	20001340 	.word	0x20001340

0801b7d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b7d8:	b580      	push	{r7, lr}
 801b7da:	b08a      	sub	sp, #40	; 0x28
 801b7dc:	af00      	add	r7, sp, #0
 801b7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b7e0:	2300      	movs	r3, #0
 801b7e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801b7e4:	f7fe fba2 	bl	8019f2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b7e8:	4b5b      	ldr	r3, [pc, #364]	; (801b958 <pvPortMalloc+0x180>)
 801b7ea:	681b      	ldr	r3, [r3, #0]
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	d101      	bne.n	801b7f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b7f0:	f000 f920 	bl	801ba34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b7f4:	4b59      	ldr	r3, [pc, #356]	; (801b95c <pvPortMalloc+0x184>)
 801b7f6:	681a      	ldr	r2, [r3, #0]
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	4013      	ands	r3, r2
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	f040 8093 	bne.w	801b928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	2b00      	cmp	r3, #0
 801b806:	d01d      	beq.n	801b844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801b808:	2208      	movs	r2, #8
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	4413      	add	r3, r2
 801b80e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	f003 0307 	and.w	r3, r3, #7
 801b816:	2b00      	cmp	r3, #0
 801b818:	d014      	beq.n	801b844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	f023 0307 	bic.w	r3, r3, #7
 801b820:	3308      	adds	r3, #8
 801b822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	f003 0307 	and.w	r3, r3, #7
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	d00a      	beq.n	801b844 <pvPortMalloc+0x6c>
	__asm volatile
 801b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b832:	f383 8811 	msr	BASEPRI, r3
 801b836:	f3bf 8f6f 	isb	sy
 801b83a:	f3bf 8f4f 	dsb	sy
 801b83e:	617b      	str	r3, [r7, #20]
}
 801b840:	bf00      	nop
 801b842:	e7fe      	b.n	801b842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	2b00      	cmp	r3, #0
 801b848:	d06e      	beq.n	801b928 <pvPortMalloc+0x150>
 801b84a:	4b45      	ldr	r3, [pc, #276]	; (801b960 <pvPortMalloc+0x188>)
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	687a      	ldr	r2, [r7, #4]
 801b850:	429a      	cmp	r2, r3
 801b852:	d869      	bhi.n	801b928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b854:	4b43      	ldr	r3, [pc, #268]	; (801b964 <pvPortMalloc+0x18c>)
 801b856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801b858:	4b42      	ldr	r3, [pc, #264]	; (801b964 <pvPortMalloc+0x18c>)
 801b85a:	681b      	ldr	r3, [r3, #0]
 801b85c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b85e:	e004      	b.n	801b86a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b86c:	685b      	ldr	r3, [r3, #4]
 801b86e:	687a      	ldr	r2, [r7, #4]
 801b870:	429a      	cmp	r2, r3
 801b872:	d903      	bls.n	801b87c <pvPortMalloc+0xa4>
 801b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b876:	681b      	ldr	r3, [r3, #0]
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d1f1      	bne.n	801b860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b87c:	4b36      	ldr	r3, [pc, #216]	; (801b958 <pvPortMalloc+0x180>)
 801b87e:	681b      	ldr	r3, [r3, #0]
 801b880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b882:	429a      	cmp	r2, r3
 801b884:	d050      	beq.n	801b928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b886:	6a3b      	ldr	r3, [r7, #32]
 801b888:	681b      	ldr	r3, [r3, #0]
 801b88a:	2208      	movs	r2, #8
 801b88c:	4413      	add	r3, r2
 801b88e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b892:	681a      	ldr	r2, [r3, #0]
 801b894:	6a3b      	ldr	r3, [r7, #32]
 801b896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b89a:	685a      	ldr	r2, [r3, #4]
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	1ad2      	subs	r2, r2, r3
 801b8a0:	2308      	movs	r3, #8
 801b8a2:	005b      	lsls	r3, r3, #1
 801b8a4:	429a      	cmp	r2, r3
 801b8a6:	d91f      	bls.n	801b8e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	4413      	add	r3, r2
 801b8ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b8b0:	69bb      	ldr	r3, [r7, #24]
 801b8b2:	f003 0307 	and.w	r3, r3, #7
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d00a      	beq.n	801b8d0 <pvPortMalloc+0xf8>
	__asm volatile
 801b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b8be:	f383 8811 	msr	BASEPRI, r3
 801b8c2:	f3bf 8f6f 	isb	sy
 801b8c6:	f3bf 8f4f 	dsb	sy
 801b8ca:	613b      	str	r3, [r7, #16]
}
 801b8cc:	bf00      	nop
 801b8ce:	e7fe      	b.n	801b8ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8d2:	685a      	ldr	r2, [r3, #4]
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	1ad2      	subs	r2, r2, r3
 801b8d8:	69bb      	ldr	r3, [r7, #24]
 801b8da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8de:	687a      	ldr	r2, [r7, #4]
 801b8e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b8e2:	69b8      	ldr	r0, [r7, #24]
 801b8e4:	f000 f908 	bl	801baf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b8e8:	4b1d      	ldr	r3, [pc, #116]	; (801b960 <pvPortMalloc+0x188>)
 801b8ea:	681a      	ldr	r2, [r3, #0]
 801b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8ee:	685b      	ldr	r3, [r3, #4]
 801b8f0:	1ad3      	subs	r3, r2, r3
 801b8f2:	4a1b      	ldr	r2, [pc, #108]	; (801b960 <pvPortMalloc+0x188>)
 801b8f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b8f6:	4b1a      	ldr	r3, [pc, #104]	; (801b960 <pvPortMalloc+0x188>)
 801b8f8:	681a      	ldr	r2, [r3, #0]
 801b8fa:	4b1b      	ldr	r3, [pc, #108]	; (801b968 <pvPortMalloc+0x190>)
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	429a      	cmp	r2, r3
 801b900:	d203      	bcs.n	801b90a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b902:	4b17      	ldr	r3, [pc, #92]	; (801b960 <pvPortMalloc+0x188>)
 801b904:	681b      	ldr	r3, [r3, #0]
 801b906:	4a18      	ldr	r2, [pc, #96]	; (801b968 <pvPortMalloc+0x190>)
 801b908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b90c:	685a      	ldr	r2, [r3, #4]
 801b90e:	4b13      	ldr	r3, [pc, #76]	; (801b95c <pvPortMalloc+0x184>)
 801b910:	681b      	ldr	r3, [r3, #0]
 801b912:	431a      	orrs	r2, r3
 801b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b91a:	2200      	movs	r2, #0
 801b91c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801b91e:	4b13      	ldr	r3, [pc, #76]	; (801b96c <pvPortMalloc+0x194>)
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	3301      	adds	r3, #1
 801b924:	4a11      	ldr	r2, [pc, #68]	; (801b96c <pvPortMalloc+0x194>)
 801b926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b928:	f7fe fb0e 	bl	8019f48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b92c:	69fb      	ldr	r3, [r7, #28]
 801b92e:	f003 0307 	and.w	r3, r3, #7
 801b932:	2b00      	cmp	r3, #0
 801b934:	d00a      	beq.n	801b94c <pvPortMalloc+0x174>
	__asm volatile
 801b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b93a:	f383 8811 	msr	BASEPRI, r3
 801b93e:	f3bf 8f6f 	isb	sy
 801b942:	f3bf 8f4f 	dsb	sy
 801b946:	60fb      	str	r3, [r7, #12]
}
 801b948:	bf00      	nop
 801b94a:	e7fe      	b.n	801b94a <pvPortMalloc+0x172>
	return pvReturn;
 801b94c:	69fb      	ldr	r3, [r7, #28]
}
 801b94e:	4618      	mov	r0, r3
 801b950:	3728      	adds	r7, #40	; 0x28
 801b952:	46bd      	mov	sp, r7
 801b954:	bd80      	pop	{r7, pc}
 801b956:	bf00      	nop
 801b958:	20004f4c 	.word	0x20004f4c
 801b95c:	20004f60 	.word	0x20004f60
 801b960:	20004f50 	.word	0x20004f50
 801b964:	20004f44 	.word	0x20004f44
 801b968:	20004f54 	.word	0x20004f54
 801b96c:	20004f58 	.word	0x20004f58

0801b970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801b970:	b580      	push	{r7, lr}
 801b972:	b086      	sub	sp, #24
 801b974:	af00      	add	r7, sp, #0
 801b976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d04d      	beq.n	801ba1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801b982:	2308      	movs	r3, #8
 801b984:	425b      	negs	r3, r3
 801b986:	697a      	ldr	r2, [r7, #20]
 801b988:	4413      	add	r3, r2
 801b98a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801b98c:	697b      	ldr	r3, [r7, #20]
 801b98e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b990:	693b      	ldr	r3, [r7, #16]
 801b992:	685a      	ldr	r2, [r3, #4]
 801b994:	4b24      	ldr	r3, [pc, #144]	; (801ba28 <vPortFree+0xb8>)
 801b996:	681b      	ldr	r3, [r3, #0]
 801b998:	4013      	ands	r3, r2
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	d10a      	bne.n	801b9b4 <vPortFree+0x44>
	__asm volatile
 801b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9a2:	f383 8811 	msr	BASEPRI, r3
 801b9a6:	f3bf 8f6f 	isb	sy
 801b9aa:	f3bf 8f4f 	dsb	sy
 801b9ae:	60fb      	str	r3, [r7, #12]
}
 801b9b0:	bf00      	nop
 801b9b2:	e7fe      	b.n	801b9b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b9b4:	693b      	ldr	r3, [r7, #16]
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d00a      	beq.n	801b9d2 <vPortFree+0x62>
	__asm volatile
 801b9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9c0:	f383 8811 	msr	BASEPRI, r3
 801b9c4:	f3bf 8f6f 	isb	sy
 801b9c8:	f3bf 8f4f 	dsb	sy
 801b9cc:	60bb      	str	r3, [r7, #8]
}
 801b9ce:	bf00      	nop
 801b9d0:	e7fe      	b.n	801b9d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801b9d2:	693b      	ldr	r3, [r7, #16]
 801b9d4:	685a      	ldr	r2, [r3, #4]
 801b9d6:	4b14      	ldr	r3, [pc, #80]	; (801ba28 <vPortFree+0xb8>)
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	4013      	ands	r3, r2
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d01e      	beq.n	801ba1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801b9e0:	693b      	ldr	r3, [r7, #16]
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d11a      	bne.n	801ba1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b9e8:	693b      	ldr	r3, [r7, #16]
 801b9ea:	685a      	ldr	r2, [r3, #4]
 801b9ec:	4b0e      	ldr	r3, [pc, #56]	; (801ba28 <vPortFree+0xb8>)
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	43db      	mvns	r3, r3
 801b9f2:	401a      	ands	r2, r3
 801b9f4:	693b      	ldr	r3, [r7, #16]
 801b9f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801b9f8:	f7fe fa98 	bl	8019f2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b9fc:	693b      	ldr	r3, [r7, #16]
 801b9fe:	685a      	ldr	r2, [r3, #4]
 801ba00:	4b0a      	ldr	r3, [pc, #40]	; (801ba2c <vPortFree+0xbc>)
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	4413      	add	r3, r2
 801ba06:	4a09      	ldr	r2, [pc, #36]	; (801ba2c <vPortFree+0xbc>)
 801ba08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801ba0a:	6938      	ldr	r0, [r7, #16]
 801ba0c:	f000 f874 	bl	801baf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801ba10:	4b07      	ldr	r3, [pc, #28]	; (801ba30 <vPortFree+0xc0>)
 801ba12:	681b      	ldr	r3, [r3, #0]
 801ba14:	3301      	adds	r3, #1
 801ba16:	4a06      	ldr	r2, [pc, #24]	; (801ba30 <vPortFree+0xc0>)
 801ba18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801ba1a:	f7fe fa95 	bl	8019f48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801ba1e:	bf00      	nop
 801ba20:	3718      	adds	r7, #24
 801ba22:	46bd      	mov	sp, r7
 801ba24:	bd80      	pop	{r7, pc}
 801ba26:	bf00      	nop
 801ba28:	20004f60 	.word	0x20004f60
 801ba2c:	20004f50 	.word	0x20004f50
 801ba30:	20004f5c 	.word	0x20004f5c

0801ba34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801ba34:	b480      	push	{r7}
 801ba36:	b085      	sub	sp, #20
 801ba38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801ba3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801ba3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801ba40:	4b27      	ldr	r3, [pc, #156]	; (801bae0 <prvHeapInit+0xac>)
 801ba42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801ba44:	68fb      	ldr	r3, [r7, #12]
 801ba46:	f003 0307 	and.w	r3, r3, #7
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	d00c      	beq.n	801ba68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801ba4e:	68fb      	ldr	r3, [r7, #12]
 801ba50:	3307      	adds	r3, #7
 801ba52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ba54:	68fb      	ldr	r3, [r7, #12]
 801ba56:	f023 0307 	bic.w	r3, r3, #7
 801ba5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801ba5c:	68ba      	ldr	r2, [r7, #8]
 801ba5e:	68fb      	ldr	r3, [r7, #12]
 801ba60:	1ad3      	subs	r3, r2, r3
 801ba62:	4a1f      	ldr	r2, [pc, #124]	; (801bae0 <prvHeapInit+0xac>)
 801ba64:	4413      	add	r3, r2
 801ba66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801ba68:	68fb      	ldr	r3, [r7, #12]
 801ba6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801ba6c:	4a1d      	ldr	r2, [pc, #116]	; (801bae4 <prvHeapInit+0xb0>)
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801ba72:	4b1c      	ldr	r3, [pc, #112]	; (801bae4 <prvHeapInit+0xb0>)
 801ba74:	2200      	movs	r2, #0
 801ba76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	68ba      	ldr	r2, [r7, #8]
 801ba7c:	4413      	add	r3, r2
 801ba7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801ba80:	2208      	movs	r2, #8
 801ba82:	68fb      	ldr	r3, [r7, #12]
 801ba84:	1a9b      	subs	r3, r3, r2
 801ba86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	f023 0307 	bic.w	r3, r3, #7
 801ba8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	4a15      	ldr	r2, [pc, #84]	; (801bae8 <prvHeapInit+0xb4>)
 801ba94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801ba96:	4b14      	ldr	r3, [pc, #80]	; (801bae8 <prvHeapInit+0xb4>)
 801ba98:	681b      	ldr	r3, [r3, #0]
 801ba9a:	2200      	movs	r2, #0
 801ba9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801ba9e:	4b12      	ldr	r3, [pc, #72]	; (801bae8 <prvHeapInit+0xb4>)
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	2200      	movs	r2, #0
 801baa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801baaa:	683b      	ldr	r3, [r7, #0]
 801baac:	68fa      	ldr	r2, [r7, #12]
 801baae:	1ad2      	subs	r2, r2, r3
 801bab0:	683b      	ldr	r3, [r7, #0]
 801bab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801bab4:	4b0c      	ldr	r3, [pc, #48]	; (801bae8 <prvHeapInit+0xb4>)
 801bab6:	681a      	ldr	r2, [r3, #0]
 801bab8:	683b      	ldr	r3, [r7, #0]
 801baba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801babc:	683b      	ldr	r3, [r7, #0]
 801babe:	685b      	ldr	r3, [r3, #4]
 801bac0:	4a0a      	ldr	r2, [pc, #40]	; (801baec <prvHeapInit+0xb8>)
 801bac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801bac4:	683b      	ldr	r3, [r7, #0]
 801bac6:	685b      	ldr	r3, [r3, #4]
 801bac8:	4a09      	ldr	r2, [pc, #36]	; (801baf0 <prvHeapInit+0xbc>)
 801baca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801bacc:	4b09      	ldr	r3, [pc, #36]	; (801baf4 <prvHeapInit+0xc0>)
 801bace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801bad2:	601a      	str	r2, [r3, #0]
}
 801bad4:	bf00      	nop
 801bad6:	3714      	adds	r7, #20
 801bad8:	46bd      	mov	sp, r7
 801bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bade:	4770      	bx	lr
 801bae0:	20001344 	.word	0x20001344
 801bae4:	20004f44 	.word	0x20004f44
 801bae8:	20004f4c 	.word	0x20004f4c
 801baec:	20004f54 	.word	0x20004f54
 801baf0:	20004f50 	.word	0x20004f50
 801baf4:	20004f60 	.word	0x20004f60

0801baf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801baf8:	b480      	push	{r7}
 801bafa:	b085      	sub	sp, #20
 801bafc:	af00      	add	r7, sp, #0
 801bafe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801bb00:	4b28      	ldr	r3, [pc, #160]	; (801bba4 <prvInsertBlockIntoFreeList+0xac>)
 801bb02:	60fb      	str	r3, [r7, #12]
 801bb04:	e002      	b.n	801bb0c <prvInsertBlockIntoFreeList+0x14>
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	60fb      	str	r3, [r7, #12]
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	687a      	ldr	r2, [r7, #4]
 801bb12:	429a      	cmp	r2, r3
 801bb14:	d8f7      	bhi.n	801bb06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801bb1a:	68fb      	ldr	r3, [r7, #12]
 801bb1c:	685b      	ldr	r3, [r3, #4]
 801bb1e:	68ba      	ldr	r2, [r7, #8]
 801bb20:	4413      	add	r3, r2
 801bb22:	687a      	ldr	r2, [r7, #4]
 801bb24:	429a      	cmp	r2, r3
 801bb26:	d108      	bne.n	801bb3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	685a      	ldr	r2, [r3, #4]
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	685b      	ldr	r3, [r3, #4]
 801bb30:	441a      	add	r2, r3
 801bb32:	68fb      	ldr	r3, [r7, #12]
 801bb34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801bb36:	68fb      	ldr	r3, [r7, #12]
 801bb38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	685b      	ldr	r3, [r3, #4]
 801bb42:	68ba      	ldr	r2, [r7, #8]
 801bb44:	441a      	add	r2, r3
 801bb46:	68fb      	ldr	r3, [r7, #12]
 801bb48:	681b      	ldr	r3, [r3, #0]
 801bb4a:	429a      	cmp	r2, r3
 801bb4c:	d118      	bne.n	801bb80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801bb4e:	68fb      	ldr	r3, [r7, #12]
 801bb50:	681a      	ldr	r2, [r3, #0]
 801bb52:	4b15      	ldr	r3, [pc, #84]	; (801bba8 <prvInsertBlockIntoFreeList+0xb0>)
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	429a      	cmp	r2, r3
 801bb58:	d00d      	beq.n	801bb76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	685a      	ldr	r2, [r3, #4]
 801bb5e:	68fb      	ldr	r3, [r7, #12]
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	685b      	ldr	r3, [r3, #4]
 801bb64:	441a      	add	r2, r3
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801bb6a:	68fb      	ldr	r3, [r7, #12]
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	681a      	ldr	r2, [r3, #0]
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	601a      	str	r2, [r3, #0]
 801bb74:	e008      	b.n	801bb88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801bb76:	4b0c      	ldr	r3, [pc, #48]	; (801bba8 <prvInsertBlockIntoFreeList+0xb0>)
 801bb78:	681a      	ldr	r2, [r3, #0]
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	601a      	str	r2, [r3, #0]
 801bb7e:	e003      	b.n	801bb88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801bb80:	68fb      	ldr	r3, [r7, #12]
 801bb82:	681a      	ldr	r2, [r3, #0]
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801bb88:	68fa      	ldr	r2, [r7, #12]
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	429a      	cmp	r2, r3
 801bb8e:	d002      	beq.n	801bb96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801bb90:	68fb      	ldr	r3, [r7, #12]
 801bb92:	687a      	ldr	r2, [r7, #4]
 801bb94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801bb96:	bf00      	nop
 801bb98:	3714      	adds	r7, #20
 801bb9a:	46bd      	mov	sp, r7
 801bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bba0:	4770      	bx	lr
 801bba2:	bf00      	nop
 801bba4:	20004f44 	.word	0x20004f44
 801bba8:	20004f4c 	.word	0x20004f4c

0801bbac <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 801bbac:	b580      	push	{r7, lr}
 801bbae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 801bbb0:	2200      	movs	r2, #0
 801bbb2:	4912      	ldr	r1, [pc, #72]	; (801bbfc <MX_USB_DEVICE_Init+0x50>)
 801bbb4:	4812      	ldr	r0, [pc, #72]	; (801bc00 <MX_USB_DEVICE_Init+0x54>)
 801bbb6:	f7fa ff91 	bl	8016adc <USBD_Init>
 801bbba:	4603      	mov	r3, r0
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d001      	beq.n	801bbc4 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 801bbc0:	f7f2 fc7e 	bl	800e4c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801bbc4:	490f      	ldr	r1, [pc, #60]	; (801bc04 <MX_USB_DEVICE_Init+0x58>)
 801bbc6:	480e      	ldr	r0, [pc, #56]	; (801bc00 <MX_USB_DEVICE_Init+0x54>)
 801bbc8:	f7fa ffb8 	bl	8016b3c <USBD_RegisterClass>
 801bbcc:	4603      	mov	r3, r0
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	d001      	beq.n	801bbd6 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 801bbd2:	f7f2 fc75 	bl	800e4c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801bbd6:	490c      	ldr	r1, [pc, #48]	; (801bc08 <MX_USB_DEVICE_Init+0x5c>)
 801bbd8:	4809      	ldr	r0, [pc, #36]	; (801bc00 <MX_USB_DEVICE_Init+0x54>)
 801bbda:	f7fa fed9 	bl	8016990 <USBD_CDC_RegisterInterface>
 801bbde:	4603      	mov	r3, r0
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d001      	beq.n	801bbe8 <MX_USB_DEVICE_Init+0x3c>
    Error_Handler();
 801bbe4:	f7f2 fc6c 	bl	800e4c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801bbe8:	4805      	ldr	r0, [pc, #20]	; (801bc00 <MX_USB_DEVICE_Init+0x54>)
 801bbea:	f7fa ffce 	bl	8016b8a <USBD_Start>
 801bbee:	4603      	mov	r3, r0
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	d001      	beq.n	801bbf8 <MX_USB_DEVICE_Init+0x4c>
    Error_Handler();
 801bbf4:	f7f2 fc64 	bl	800e4c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801bbf8:	bf00      	nop
 801bbfa:	bd80      	pop	{r7, pc}
 801bbfc:	20000178 	.word	0x20000178
 801bc00:	200079c8 	.word	0x200079c8
 801bc04:	2000005c 	.word	0x2000005c
 801bc08:	20000164 	.word	0x20000164

0801bc0c <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 801bc0c:	b580      	push	{r7, lr}
 801bc0e:	af00      	add	r7, sp, #0
  TIM_Config();
 801bc10:	f000 f91a 	bl	801be48 <TIM_Config>

  if (HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK) {
 801bc14:	480b      	ldr	r0, [pc, #44]	; (801bc44 <CDC_Init_FS+0x38>)
 801bc16:	f7f8 f83f 	bl	8013c98 <HAL_TIM_Base_Start_IT>
 801bc1a:	4603      	mov	r3, r0
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d001      	beq.n	801bc24 <CDC_Init_FS+0x18>
    /* Starting Error */
    Error_Handler();
 801bc20:	f7f2 fc4e 	bl	800e4c0 <Error_Handler>
  }
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 512);
 801bc24:	f44f 7200 	mov.w	r2, #512	; 0x200
 801bc28:	4907      	ldr	r1, [pc, #28]	; (801bc48 <CDC_Init_FS+0x3c>)
 801bc2a:	4808      	ldr	r0, [pc, #32]	; (801bc4c <CDC_Init_FS+0x40>)
 801bc2c:	f7fa fec5 	bl	80169ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801bc30:	4907      	ldr	r1, [pc, #28]	; (801bc50 <CDC_Init_FS+0x44>)
 801bc32:	4806      	ldr	r0, [pc, #24]	; (801bc4c <CDC_Init_FS+0x40>)
 801bc34:	f7fa fedf 	bl	80169f6 <USBD_CDC_SetRxBuffer>

  usb_initialized = true;
 801bc38:	4b06      	ldr	r3, [pc, #24]	; (801bc54 <CDC_Init_FS+0x48>)
 801bc3a:	2201      	movs	r2, #1
 801bc3c:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 801bc3e:	2300      	movs	r3, #0
}
 801bc40:	4618      	mov	r0, r3
 801bc42:	bd80      	pop	{r7, pc}
 801bc44:	20007f1c 	.word	0x20007f1c
 801bc48:	20007cd8 	.word	0x20007cd8
 801bc4c:	200079c8 	.word	0x200079c8
 801bc50:	20007c98 	.word	0x20007c98
 801bc54:	20004f64 	.word	0x20004f64

0801bc58 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 801bc58:	b480      	push	{r7}
 801bc5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801bc5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801bc5e:	4618      	mov	r0, r3
 801bc60:	46bd      	mov	sp, r7
 801bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc66:	4770      	bx	lr

0801bc68 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 801bc68:	b480      	push	{r7}
 801bc6a:	b085      	sub	sp, #20
 801bc6c:	af00      	add	r7, sp, #0
 801bc6e:	4603      	mov	r3, r0
 801bc70:	6039      	str	r1, [r7, #0]
 801bc72:	71fb      	strb	r3, [r7, #7]
 801bc74:	4613      	mov	r3, r2
 801bc76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  UNUSED(length);
  uint32_t speed = 115200;
 801bc78:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 801bc7c:	60fb      	str	r3, [r7, #12]
  switch (cmd) {
 801bc7e:	79fb      	ldrb	r3, [r7, #7]
 801bc80:	2b23      	cmp	r3, #35	; 0x23
 801bc82:	d86e      	bhi.n	801bd62 <CDC_Control_FS+0xfa>
 801bc84:	a201      	add	r2, pc, #4	; (adr r2, 801bc8c <CDC_Control_FS+0x24>)
 801bc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bc8a:	bf00      	nop
 801bc8c:	0801bd63 	.word	0x0801bd63
 801bc90:	0801bd63 	.word	0x0801bd63
 801bc94:	0801bd63 	.word	0x0801bd63
 801bc98:	0801bd63 	.word	0x0801bd63
 801bc9c:	0801bd63 	.word	0x0801bd63
 801bca0:	0801bd63 	.word	0x0801bd63
 801bca4:	0801bd63 	.word	0x0801bd63
 801bca8:	0801bd63 	.word	0x0801bd63
 801bcac:	0801bd63 	.word	0x0801bd63
 801bcb0:	0801bd63 	.word	0x0801bd63
 801bcb4:	0801bd63 	.word	0x0801bd63
 801bcb8:	0801bd63 	.word	0x0801bd63
 801bcbc:	0801bd63 	.word	0x0801bd63
 801bcc0:	0801bd63 	.word	0x0801bd63
 801bcc4:	0801bd63 	.word	0x0801bd63
 801bcc8:	0801bd63 	.word	0x0801bd63
 801bccc:	0801bd63 	.word	0x0801bd63
 801bcd0:	0801bd63 	.word	0x0801bd63
 801bcd4:	0801bd63 	.word	0x0801bd63
 801bcd8:	0801bd63 	.word	0x0801bd63
 801bcdc:	0801bd63 	.word	0x0801bd63
 801bce0:	0801bd63 	.word	0x0801bd63
 801bce4:	0801bd63 	.word	0x0801bd63
 801bce8:	0801bd63 	.word	0x0801bd63
 801bcec:	0801bd63 	.word	0x0801bd63
 801bcf0:	0801bd63 	.word	0x0801bd63
 801bcf4:	0801bd63 	.word	0x0801bd63
 801bcf8:	0801bd63 	.word	0x0801bd63
 801bcfc:	0801bd63 	.word	0x0801bd63
 801bd00:	0801bd63 	.word	0x0801bd63
 801bd04:	0801bd63 	.word	0x0801bd63
 801bd08:	0801bd63 	.word	0x0801bd63
 801bd0c:	0801bd63 	.word	0x0801bd63
 801bd10:	0801bd1d 	.word	0x0801bd1d
 801bd14:	0801bd63 	.word	0x0801bd63
 801bd18:	0801bd63 	.word	0x0801bd63
    case CDC_SET_LINE_CODING:

      break;

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(speed);
 801bd1c:	68fb      	ldr	r3, [r7, #12]
 801bd1e:	b2da      	uxtb	r2, r3
 801bd20:	683b      	ldr	r3, [r7, #0]
 801bd22:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(speed >> 8);
 801bd24:	68fb      	ldr	r3, [r7, #12]
 801bd26:	0a1a      	lsrs	r2, r3, #8
 801bd28:	683b      	ldr	r3, [r7, #0]
 801bd2a:	3301      	adds	r3, #1
 801bd2c:	b2d2      	uxtb	r2, r2
 801bd2e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(speed >> 16);
 801bd30:	68fb      	ldr	r3, [r7, #12]
 801bd32:	0c1a      	lsrs	r2, r3, #16
 801bd34:	683b      	ldr	r3, [r7, #0]
 801bd36:	3302      	adds	r3, #2
 801bd38:	b2d2      	uxtb	r2, r2
 801bd3a:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(speed >> 24);
 801bd3c:	68fb      	ldr	r3, [r7, #12]
 801bd3e:	0e1a      	lsrs	r2, r3, #24
 801bd40:	683b      	ldr	r3, [r7, #0]
 801bd42:	3303      	adds	r3, #3
 801bd44:	b2d2      	uxtb	r2, r2
 801bd46:	701a      	strb	r2, [r3, #0]
      pbuf[4] = 0;
 801bd48:	683b      	ldr	r3, [r7, #0]
 801bd4a:	3304      	adds	r3, #4
 801bd4c:	2200      	movs	r2, #0
 801bd4e:	701a      	strb	r2, [r3, #0]
      pbuf[5] = 0;
 801bd50:	683b      	ldr	r3, [r7, #0]
 801bd52:	3305      	adds	r3, #5
 801bd54:	2200      	movs	r2, #0
 801bd56:	701a      	strb	r2, [r3, #0]
      pbuf[6] = 8;
 801bd58:	683b      	ldr	r3, [r7, #0]
 801bd5a:	3306      	adds	r3, #6
 801bd5c:	2208      	movs	r2, #8
 801bd5e:	701a      	strb	r2, [r3, #0]
      break;
 801bd60:	e000      	b.n	801bd64 <CDC_Control_FS+0xfc>
    case CDC_SEND_BREAK:

      break;

    default:
      break;
 801bd62:	bf00      	nop
  }

  return (USBD_OK);
 801bd64:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801bd66:	4618      	mov	r0, r3
 801bd68:	3714      	adds	r7, #20
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd70:	4770      	bx	lr
 801bd72:	bf00      	nop

0801bd74 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 801bd74:	b580      	push	{r7, lr}
 801bd76:	b084      	sub	sp, #16
 801bd78:	af00      	add	r7, sp, #0
 801bd7a:	6078      	str	r0, [r7, #4]
 801bd7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t buf_length = *Len;
 801bd7e:	683b      	ldr	r3, [r7, #0]
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	60fb      	str	r3, [r7, #12]
  if (buf_length != 0) {
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d004      	beq.n	801bd94 <CDC_Receive_FS+0x20>
    fifo_write_bytes(&usb_input_fifo, Buf, buf_length);
 801bd8a:	68fa      	ldr	r2, [r7, #12]
 801bd8c:	6879      	ldr	r1, [r7, #4]
 801bd8e:	4807      	ldr	r0, [pc, #28]	; (801bdac <CDC_Receive_FS+0x38>)
 801bd90:	f7f3 ff71 	bl	800fc76 <fifo_write_bytes>
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801bd94:	6879      	ldr	r1, [r7, #4]
 801bd96:	4806      	ldr	r0, [pc, #24]	; (801bdb0 <CDC_Receive_FS+0x3c>)
 801bd98:	f7fa fe2d 	bl	80169f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801bd9c:	4804      	ldr	r0, [pc, #16]	; (801bdb0 <CDC_Receive_FS+0x3c>)
 801bd9e:	f7fa fe73 	bl	8016a88 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801bda2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801bda4:	4618      	mov	r0, r3
 801bda6:	3710      	adds	r7, #16
 801bda8:	46bd      	mov	sp, r7
 801bdaa:	bd80      	pop	{r7, pc}
 801bdac:	20005390 	.word	0x20005390
 801bdb0:	200079c8 	.word	0x200079c8

0801bdb4 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 801bdb4:	b480      	push	{r7}
 801bdb6:	b087      	sub	sp, #28
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	60f8      	str	r0, [r7, #12]
 801bdbc:	60b9      	str	r1, [r7, #8]
 801bdbe:	4613      	mov	r3, r2
 801bdc0:	71fb      	strb	r3, [r7, #7]
  int8_t result = USBD_OK;
 801bdc2:	2300      	movs	r3, #0
 801bdc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801bdc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bdca:	4618      	mov	r0, r3
 801bdcc:	371c      	adds	r7, #28
 801bdce:	46bd      	mov	sp, r7
 801bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdd4:	4770      	bx	lr
	...

0801bdd8 <TIM5_IRQHandler>:

void TIMUsb_IRQHandler(void) {
 801bdd8:	b580      	push	{r7, lr}
 801bdda:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 801bddc:	4802      	ldr	r0, [pc, #8]	; (801bde8 <TIM5_IRQHandler+0x10>)
 801bdde:	f7f8 f921 	bl	8014024 <HAL_TIM_IRQHandler>
}
 801bde2:	bf00      	nop
 801bde4:	bd80      	pop	{r7, pc}
 801bde6:	bf00      	nop
 801bde8:	20007f1c 	.word	0x20007f1c

0801bdec <CDC_Transmit_Elapsed>:

void CDC_Transmit_Elapsed() {
 801bdec:	b580      	push	{r7, lr}
 801bdee:	b082      	sub	sp, #8
 801bdf0:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 801bdf2:	4b12      	ldr	r3, [pc, #72]	; (801be3c <CDC_Transmit_Elapsed+0x50>)
 801bdf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bdf8:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState == 0) {
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801be00:	2b00      	cmp	r3, #0
 801be02:	d116      	bne.n	801be32 <CDC_Transmit_Elapsed+0x46>
    // Check usb fifo and print out to usb
    uint32_t len = fifo_get_length(&usb_output_fifo);
 801be04:	480e      	ldr	r0, [pc, #56]	; (801be40 <CDC_Transmit_Elapsed+0x54>)
 801be06:	f7f3 fe40 	bl	800fa8a <fifo_get_length>
 801be0a:	6038      	str	r0, [r7, #0]
    if (len) {
 801be0c:	683b      	ldr	r3, [r7, #0]
 801be0e:	2b00      	cmp	r3, #0
 801be10:	d00f      	beq.n	801be32 <CDC_Transmit_Elapsed+0x46>
      if (fifo_read_bytes(&usb_output_fifo, UserTxBufferFS, len)) {
 801be12:	683a      	ldr	r2, [r7, #0]
 801be14:	490b      	ldr	r1, [pc, #44]	; (801be44 <CDC_Transmit_Elapsed+0x58>)
 801be16:	480a      	ldr	r0, [pc, #40]	; (801be40 <CDC_Transmit_Elapsed+0x54>)
 801be18:	f7f3 febf 	bl	800fb9a <fifo_read_bytes>
 801be1c:	4603      	mov	r3, r0
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d007      	beq.n	801be32 <CDC_Transmit_Elapsed+0x46>
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, len);
 801be22:	683a      	ldr	r2, [r7, #0]
 801be24:	4907      	ldr	r1, [pc, #28]	; (801be44 <CDC_Transmit_Elapsed+0x58>)
 801be26:	4805      	ldr	r0, [pc, #20]	; (801be3c <CDC_Transmit_Elapsed+0x50>)
 801be28:	f7fa fdc7 	bl	80169ba <USBD_CDC_SetTxBuffer>
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801be2c:	4803      	ldr	r0, [pc, #12]	; (801be3c <CDC_Transmit_Elapsed+0x50>)
 801be2e:	f7fa fdfb 	bl	8016a28 <USBD_CDC_TransmitPacket>
      }
    }
  }
}
 801be32:	bf00      	nop
 801be34:	3708      	adds	r7, #8
 801be36:	46bd      	mov	sp, r7
 801be38:	bd80      	pop	{r7, pc}
 801be3a:	bf00      	nop
 801be3c:	200079c8 	.word	0x200079c8
 801be40:	200055ac 	.word	0x200055ac
 801be44:	20007cd8 	.word	0x20007cd8

0801be48 <TIM_Config>:

static void TIM_Config(void) {
 801be48:	b580      	push	{r7, lr}
 801be4a:	b082      	sub	sp, #8
 801be4c:	af00      	add	r7, sp, #0
   /* Enable TIM peripherals Clock */
  TIMUsb_CLK_ENABLE();
 801be4e:	2300      	movs	r3, #0
 801be50:	607b      	str	r3, [r7, #4]
 801be52:	4b1b      	ldr	r3, [pc, #108]	; (801bec0 <TIM_Config+0x78>)
 801be54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be56:	4a1a      	ldr	r2, [pc, #104]	; (801bec0 <TIM_Config+0x78>)
 801be58:	f043 0308 	orr.w	r3, r3, #8
 801be5c:	6413      	str	r3, [r2, #64]	; 0x40
 801be5e:	4b18      	ldr	r3, [pc, #96]	; (801bec0 <TIM_Config+0x78>)
 801be60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be62:	f003 0308 	and.w	r3, r3, #8
 801be66:	607b      	str	r3, [r7, #4]
 801be68:	687b      	ldr	r3, [r7, #4]

  /* Set TIMUsb instance */
  TimHandle.Instance = TIMUsb;
 801be6a:	4b16      	ldr	r3, [pc, #88]	; (801bec4 <TIM_Config+0x7c>)
 801be6c:	4a16      	ldr	r2, [pc, #88]	; (801bec8 <TIM_Config+0x80>)
 801be6e:	601a      	str	r2, [r3, #0]

  TimHandle.Init.Period = (CDC_POLLING_INTERVAL * 1000) - 1;
 801be70:	4b14      	ldr	r3, [pc, #80]	; (801bec4 <TIM_Config+0x7c>)
 801be72:	f240 72cf 	movw	r2, #1999	; 0x7cf
 801be76:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = (SystemCoreClock / 2 / (1000000)) - 1;
 801be78:	4b14      	ldr	r3, [pc, #80]	; (801becc <TIM_Config+0x84>)
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	4a14      	ldr	r2, [pc, #80]	; (801bed0 <TIM_Config+0x88>)
 801be7e:	fba2 2303 	umull	r2, r3, r2, r3
 801be82:	0cdb      	lsrs	r3, r3, #19
 801be84:	3b01      	subs	r3, #1
 801be86:	4a0f      	ldr	r2, [pc, #60]	; (801bec4 <TIM_Config+0x7c>)
 801be88:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 801be8a:	4b0e      	ldr	r3, [pc, #56]	; (801bec4 <TIM_Config+0x7c>)
 801be8c:	2200      	movs	r2, #0
 801be8e:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 801be90:	4b0c      	ldr	r3, [pc, #48]	; (801bec4 <TIM_Config+0x7c>)
 801be92:	2200      	movs	r2, #0
 801be94:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK) {
 801be96:	480b      	ldr	r0, [pc, #44]	; (801bec4 <TIM_Config+0x7c>)
 801be98:	f7f7 fea4 	bl	8013be4 <HAL_TIM_Base_Init>
 801be9c:	4603      	mov	r3, r0
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d001      	beq.n	801bea6 <TIM_Config+0x5e>
    /* Initialization Error */
    Error_Handler();
 801bea2:	f7f2 fb0d 	bl	800e4c0 <Error_Handler>
  }


  /* Configure the NVIC for TIMx */
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMUsb_IRQn, 0, 0);
 801bea6:	2200      	movs	r2, #0
 801bea8:	2100      	movs	r1, #0
 801beaa:	2032      	movs	r0, #50	; 0x32
 801beac:	f7f4 fdae 	bl	8010a0c <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMUsb_IRQn);
 801beb0:	2032      	movs	r0, #50	; 0x32
 801beb2:	f7f4 fdc7 	bl	8010a44 <HAL_NVIC_EnableIRQ>
}
 801beb6:	bf00      	nop
 801beb8:	3708      	adds	r7, #8
 801beba:	46bd      	mov	sp, r7
 801bebc:	bd80      	pop	{r7, pc}
 801bebe:	bf00      	nop
 801bec0:	40023800 	.word	0x40023800
 801bec4:	20007f1c 	.word	0x20007f1c
 801bec8:	40000c00 	.word	0x40000c00
 801becc:	20000014 	.word	0x20000014
 801bed0:	431bde83 	.word	0x431bde83

0801bed4 <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801bed4:	b480      	push	{r7}
 801bed6:	b083      	sub	sp, #12
 801bed8:	af00      	add	r7, sp, #0
 801beda:	4603      	mov	r3, r0
 801bedc:	6039      	str	r1, [r7, #0]
 801bede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801bee0:	683b      	ldr	r3, [r7, #0]
 801bee2:	2212      	movs	r2, #18
 801bee4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801bee6:	4b03      	ldr	r3, [pc, #12]	; (801bef4 <USBD_FS_DeviceDescriptor+0x20>)
}
 801bee8:	4618      	mov	r0, r3
 801beea:	370c      	adds	r7, #12
 801beec:	46bd      	mov	sp, r7
 801beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bef2:	4770      	bx	lr
 801bef4:	20000194 	.word	0x20000194

0801bef8 <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801bef8:	b480      	push	{r7}
 801befa:	b083      	sub	sp, #12
 801befc:	af00      	add	r7, sp, #0
 801befe:	4603      	mov	r3, r0
 801bf00:	6039      	str	r1, [r7, #0]
 801bf02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801bf04:	683b      	ldr	r3, [r7, #0]
 801bf06:	2204      	movs	r2, #4
 801bf08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801bf0a:	4b03      	ldr	r3, [pc, #12]	; (801bf18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801bf0c:	4618      	mov	r0, r3
 801bf0e:	370c      	adds	r7, #12
 801bf10:	46bd      	mov	sp, r7
 801bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf16:	4770      	bx	lr
 801bf18:	200001a8 	.word	0x200001a8

0801bf1c <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801bf1c:	b580      	push	{r7, lr}
 801bf1e:	b082      	sub	sp, #8
 801bf20:	af00      	add	r7, sp, #0
 801bf22:	4603      	mov	r3, r0
 801bf24:	6039      	str	r1, [r7, #0]
 801bf26:	71fb      	strb	r3, [r7, #7]
  if (speed == 0) {
 801bf28:	79fb      	ldrb	r3, [r7, #7]
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d105      	bne.n	801bf3a <USBD_FS_ProductStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801bf2e:	683a      	ldr	r2, [r7, #0]
 801bf30:	4907      	ldr	r1, [pc, #28]	; (801bf50 <USBD_FS_ProductStrDescriptor+0x34>)
 801bf32:	4808      	ldr	r0, [pc, #32]	; (801bf54 <USBD_FS_ProductStrDescriptor+0x38>)
 801bf34:	f7fb fe5b 	bl	8017bee <USBD_GetString>
 801bf38:	e004      	b.n	801bf44 <USBD_FS_ProductStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801bf3a:	683a      	ldr	r2, [r7, #0]
 801bf3c:	4904      	ldr	r1, [pc, #16]	; (801bf50 <USBD_FS_ProductStrDescriptor+0x34>)
 801bf3e:	4805      	ldr	r0, [pc, #20]	; (801bf54 <USBD_FS_ProductStrDescriptor+0x38>)
 801bf40:	f7fb fe55 	bl	8017bee <USBD_GetString>
  }
  return USBD_StrDesc;
 801bf44:	4b02      	ldr	r3, [pc, #8]	; (801bf50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801bf46:	4618      	mov	r0, r3
 801bf48:	3708      	adds	r7, #8
 801bf4a:	46bd      	mov	sp, r7
 801bf4c:	bd80      	pop	{r7, pc}
 801bf4e:	bf00      	nop
 801bf50:	20007f64 	.word	0x20007f64
 801bf54:	0801db08 	.word	0x0801db08

0801bf58 <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801bf58:	b580      	push	{r7, lr}
 801bf5a:	b082      	sub	sp, #8
 801bf5c:	af00      	add	r7, sp, #0
 801bf5e:	4603      	mov	r3, r0
 801bf60:	6039      	str	r1, [r7, #0]
 801bf62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801bf64:	683a      	ldr	r2, [r7, #0]
 801bf66:	4904      	ldr	r1, [pc, #16]	; (801bf78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801bf68:	4804      	ldr	r0, [pc, #16]	; (801bf7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801bf6a:	f7fb fe40 	bl	8017bee <USBD_GetString>
  return USBD_StrDesc;
 801bf6e:	4b02      	ldr	r3, [pc, #8]	; (801bf78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801bf70:	4618      	mov	r0, r3
 801bf72:	3708      	adds	r7, #8
 801bf74:	46bd      	mov	sp, r7
 801bf76:	bd80      	pop	{r7, pc}
 801bf78:	20007f64 	.word	0x20007f64
 801bf7c:	0801db18 	.word	0x0801db18

0801bf80 <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801bf80:	b580      	push	{r7, lr}
 801bf82:	b082      	sub	sp, #8
 801bf84:	af00      	add	r7, sp, #0
 801bf86:	4603      	mov	r3, r0
 801bf88:	6039      	str	r1, [r7, #0]
 801bf8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801bf8c:	683b      	ldr	r3, [r7, #0]
 801bf8e:	221a      	movs	r2, #26
 801bf90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801bf92:	f000 f843 	bl	801c01c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *)USBD_StringSerial;
 801bf96:	4b02      	ldr	r3, [pc, #8]	; (801bfa0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801bf98:	4618      	mov	r0, r3
 801bf9a:	3708      	adds	r7, #8
 801bf9c:	46bd      	mov	sp, r7
 801bf9e:	bd80      	pop	{r7, pc}
 801bfa0:	200001ac 	.word	0x200001ac

0801bfa4 <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801bfa4:	b580      	push	{r7, lr}
 801bfa6:	b082      	sub	sp, #8
 801bfa8:	af00      	add	r7, sp, #0
 801bfaa:	4603      	mov	r3, r0
 801bfac:	6039      	str	r1, [r7, #0]
 801bfae:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH) {
 801bfb0:	79fb      	ldrb	r3, [r7, #7]
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d105      	bne.n	801bfc2 <USBD_FS_ConfigStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801bfb6:	683a      	ldr	r2, [r7, #0]
 801bfb8:	4907      	ldr	r1, [pc, #28]	; (801bfd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801bfba:	4808      	ldr	r0, [pc, #32]	; (801bfdc <USBD_FS_ConfigStrDescriptor+0x38>)
 801bfbc:	f7fb fe17 	bl	8017bee <USBD_GetString>
 801bfc0:	e004      	b.n	801bfcc <USBD_FS_ConfigStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801bfc2:	683a      	ldr	r2, [r7, #0]
 801bfc4:	4904      	ldr	r1, [pc, #16]	; (801bfd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801bfc6:	4805      	ldr	r0, [pc, #20]	; (801bfdc <USBD_FS_ConfigStrDescriptor+0x38>)
 801bfc8:	f7fb fe11 	bl	8017bee <USBD_GetString>
  }
  return USBD_StrDesc;
 801bfcc:	4b02      	ldr	r3, [pc, #8]	; (801bfd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801bfce:	4618      	mov	r0, r3
 801bfd0:	3708      	adds	r7, #8
 801bfd2:	46bd      	mov	sp, r7
 801bfd4:	bd80      	pop	{r7, pc}
 801bfd6:	bf00      	nop
 801bfd8:	20007f64 	.word	0x20007f64
 801bfdc:	0801db20 	.word	0x0801db20

0801bfe0 <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801bfe0:	b580      	push	{r7, lr}
 801bfe2:	b082      	sub	sp, #8
 801bfe4:	af00      	add	r7, sp, #0
 801bfe6:	4603      	mov	r3, r0
 801bfe8:	6039      	str	r1, [r7, #0]
 801bfea:	71fb      	strb	r3, [r7, #7]
  if (speed == 0) {
 801bfec:	79fb      	ldrb	r3, [r7, #7]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	d105      	bne.n	801bffe <USBD_FS_InterfaceStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801bff2:	683a      	ldr	r2, [r7, #0]
 801bff4:	4907      	ldr	r1, [pc, #28]	; (801c014 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801bff6:	4808      	ldr	r0, [pc, #32]	; (801c018 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801bff8:	f7fb fdf9 	bl	8017bee <USBD_GetString>
 801bffc:	e004      	b.n	801c008 <USBD_FS_InterfaceStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801bffe:	683a      	ldr	r2, [r7, #0]
 801c000:	4904      	ldr	r1, [pc, #16]	; (801c014 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c002:	4805      	ldr	r0, [pc, #20]	; (801c018 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c004:	f7fb fdf3 	bl	8017bee <USBD_GetString>
  }
  return USBD_StrDesc;
 801c008:	4b02      	ldr	r3, [pc, #8]	; (801c014 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801c00a:	4618      	mov	r0, r3
 801c00c:	3708      	adds	r7, #8
 801c00e:	46bd      	mov	sp, r7
 801c010:	bd80      	pop	{r7, pc}
 801c012:	bf00      	nop
 801c014:	20007f64 	.word	0x20007f64
 801c018:	0801db2c 	.word	0x0801db2c

0801c01c <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 801c01c:	b580      	push	{r7, lr}
 801c01e:	b084      	sub	sp, #16
 801c020:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 801c022:	4b0f      	ldr	r3, [pc, #60]	; (801c060 <Get_SerialNum+0x44>)
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 801c028:	4b0e      	ldr	r3, [pc, #56]	; (801c064 <Get_SerialNum+0x48>)
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 801c02e:	4b0e      	ldr	r3, [pc, #56]	; (801c068 <Get_SerialNum+0x4c>)
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c034:	68fa      	ldr	r2, [r7, #12]
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	4413      	add	r3, r2
 801c03a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0) {
 801c03c:	68fb      	ldr	r3, [r7, #12]
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d009      	beq.n	801c056 <Get_SerialNum+0x3a>
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c042:	2208      	movs	r2, #8
 801c044:	4909      	ldr	r1, [pc, #36]	; (801c06c <Get_SerialNum+0x50>)
 801c046:	68f8      	ldr	r0, [r7, #12]
 801c048:	f000 f814 	bl	801c074 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c04c:	2204      	movs	r2, #4
 801c04e:	4908      	ldr	r1, [pc, #32]	; (801c070 <Get_SerialNum+0x54>)
 801c050:	68b8      	ldr	r0, [r7, #8]
 801c052:	f000 f80f 	bl	801c074 <IntToUnicode>
  }
}
 801c056:	bf00      	nop
 801c058:	3710      	adds	r7, #16
 801c05a:	46bd      	mov	sp, r7
 801c05c:	bd80      	pop	{r7, pc}
 801c05e:	bf00      	nop
 801c060:	1fff7a10 	.word	0x1fff7a10
 801c064:	1fff7a14 	.word	0x1fff7a14
 801c068:	1fff7a18 	.word	0x1fff7a18
 801c06c:	200001ae 	.word	0x200001ae
 801c070:	200001be 	.word	0x200001be

0801c074 <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len) {
 801c074:	b480      	push	{r7}
 801c076:	b087      	sub	sp, #28
 801c078:	af00      	add	r7, sp, #0
 801c07a:	60f8      	str	r0, [r7, #12]
 801c07c:	60b9      	str	r1, [r7, #8]
 801c07e:	4613      	mov	r3, r2
 801c080:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801c082:	2300      	movs	r3, #0
 801c084:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++) {
 801c086:	2300      	movs	r3, #0
 801c088:	75fb      	strb	r3, [r7, #23]
 801c08a:	e027      	b.n	801c0dc <IntToUnicode+0x68>
    if (((value >> 28)) < 0xA) {
 801c08c:	68fb      	ldr	r3, [r7, #12]
 801c08e:	0f1b      	lsrs	r3, r3, #28
 801c090:	2b09      	cmp	r3, #9
 801c092:	d80b      	bhi.n	801c0ac <IntToUnicode+0x38>
      pbuf[2 * idx] = (value >> 28) + '0';
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	0f1b      	lsrs	r3, r3, #28
 801c098:	b2da      	uxtb	r2, r3
 801c09a:	7dfb      	ldrb	r3, [r7, #23]
 801c09c:	005b      	lsls	r3, r3, #1
 801c09e:	4619      	mov	r1, r3
 801c0a0:	68bb      	ldr	r3, [r7, #8]
 801c0a2:	440b      	add	r3, r1
 801c0a4:	3230      	adds	r2, #48	; 0x30
 801c0a6:	b2d2      	uxtb	r2, r2
 801c0a8:	701a      	strb	r2, [r3, #0]
 801c0aa:	e00a      	b.n	801c0c2 <IntToUnicode+0x4e>
    } else {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c0ac:	68fb      	ldr	r3, [r7, #12]
 801c0ae:	0f1b      	lsrs	r3, r3, #28
 801c0b0:	b2da      	uxtb	r2, r3
 801c0b2:	7dfb      	ldrb	r3, [r7, #23]
 801c0b4:	005b      	lsls	r3, r3, #1
 801c0b6:	4619      	mov	r1, r3
 801c0b8:	68bb      	ldr	r3, [r7, #8]
 801c0ba:	440b      	add	r3, r1
 801c0bc:	3237      	adds	r2, #55	; 0x37
 801c0be:	b2d2      	uxtb	r2, r2
 801c0c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c0c2:	68fb      	ldr	r3, [r7, #12]
 801c0c4:	011b      	lsls	r3, r3, #4
 801c0c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c0c8:	7dfb      	ldrb	r3, [r7, #23]
 801c0ca:	005b      	lsls	r3, r3, #1
 801c0cc:	3301      	adds	r3, #1
 801c0ce:	68ba      	ldr	r2, [r7, #8]
 801c0d0:	4413      	add	r3, r2
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++) {
 801c0d6:	7dfb      	ldrb	r3, [r7, #23]
 801c0d8:	3301      	adds	r3, #1
 801c0da:	75fb      	strb	r3, [r7, #23]
 801c0dc:	7dfa      	ldrb	r2, [r7, #23]
 801c0de:	79fb      	ldrb	r3, [r7, #7]
 801c0e0:	429a      	cmp	r2, r3
 801c0e2:	d3d3      	bcc.n	801c08c <IntToUnicode+0x18>
  }
}
 801c0e4:	bf00      	nop
 801c0e6:	bf00      	nop
 801c0e8:	371c      	adds	r7, #28
 801c0ea:	46bd      	mov	sp, r7
 801c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0f0:	4770      	bx	lr
	...

0801c0f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c0f4:	b580      	push	{r7, lr}
 801c0f6:	b08a      	sub	sp, #40	; 0x28
 801c0f8:	af00      	add	r7, sp, #0
 801c0fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c0fc:	f107 0314 	add.w	r3, r7, #20
 801c100:	2200      	movs	r2, #0
 801c102:	601a      	str	r2, [r3, #0]
 801c104:	605a      	str	r2, [r3, #4]
 801c106:	609a      	str	r2, [r3, #8]
 801c108:	60da      	str	r2, [r3, #12]
 801c10a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c114:	d13a      	bne.n	801c18c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c116:	2300      	movs	r3, #0
 801c118:	613b      	str	r3, [r7, #16]
 801c11a:	4b1e      	ldr	r3, [pc, #120]	; (801c194 <HAL_PCD_MspInit+0xa0>)
 801c11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c11e:	4a1d      	ldr	r2, [pc, #116]	; (801c194 <HAL_PCD_MspInit+0xa0>)
 801c120:	f043 0301 	orr.w	r3, r3, #1
 801c124:	6313      	str	r3, [r2, #48]	; 0x30
 801c126:	4b1b      	ldr	r3, [pc, #108]	; (801c194 <HAL_PCD_MspInit+0xa0>)
 801c128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c12a:	f003 0301 	and.w	r3, r3, #1
 801c12e:	613b      	str	r3, [r7, #16]
 801c130:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801c132:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801c136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c138:	2302      	movs	r3, #2
 801c13a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c13c:	2300      	movs	r3, #0
 801c13e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c140:	2303      	movs	r3, #3
 801c142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801c144:	230a      	movs	r3, #10
 801c146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c148:	f107 0314 	add.w	r3, r7, #20
 801c14c:	4619      	mov	r1, r3
 801c14e:	4812      	ldr	r0, [pc, #72]	; (801c198 <HAL_PCD_MspInit+0xa4>)
 801c150:	f7f4 ff7c 	bl	801104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801c154:	4b0f      	ldr	r3, [pc, #60]	; (801c194 <HAL_PCD_MspInit+0xa0>)
 801c156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c158:	4a0e      	ldr	r2, [pc, #56]	; (801c194 <HAL_PCD_MspInit+0xa0>)
 801c15a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c15e:	6353      	str	r3, [r2, #52]	; 0x34
 801c160:	2300      	movs	r3, #0
 801c162:	60fb      	str	r3, [r7, #12]
 801c164:	4b0b      	ldr	r3, [pc, #44]	; (801c194 <HAL_PCD_MspInit+0xa0>)
 801c166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c168:	4a0a      	ldr	r2, [pc, #40]	; (801c194 <HAL_PCD_MspInit+0xa0>)
 801c16a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801c16e:	6453      	str	r3, [r2, #68]	; 0x44
 801c170:	4b08      	ldr	r3, [pc, #32]	; (801c194 <HAL_PCD_MspInit+0xa0>)
 801c172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c178:	60fb      	str	r3, [r7, #12]
 801c17a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801c17c:	2200      	movs	r2, #0
 801c17e:	2100      	movs	r1, #0
 801c180:	2043      	movs	r0, #67	; 0x43
 801c182:	f7f4 fc43 	bl	8010a0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801c186:	2043      	movs	r0, #67	; 0x43
 801c188:	f7f4 fc5c 	bl	8010a44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801c18c:	bf00      	nop
 801c18e:	3728      	adds	r7, #40	; 0x28
 801c190:	46bd      	mov	sp, r7
 801c192:	bd80      	pop	{r7, pc}
 801c194:	40023800 	.word	0x40023800
 801c198:	40020000 	.word	0x40020000

0801c19c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c19c:	b580      	push	{r7, lr}
 801c19e:	b082      	sub	sp, #8
 801c1a0:	af00      	add	r7, sp, #0
 801c1a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801c1b0:	4619      	mov	r1, r3
 801c1b2:	4610      	mov	r0, r2
 801c1b4:	f7fa fd34 	bl	8016c20 <USBD_LL_SetupStage>
}
 801c1b8:	bf00      	nop
 801c1ba:	3708      	adds	r7, #8
 801c1bc:	46bd      	mov	sp, r7
 801c1be:	bd80      	pop	{r7, pc}

0801c1c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c1c0:	b580      	push	{r7, lr}
 801c1c2:	b082      	sub	sp, #8
 801c1c4:	af00      	add	r7, sp, #0
 801c1c6:	6078      	str	r0, [r7, #4]
 801c1c8:	460b      	mov	r3, r1
 801c1ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801c1d2:	78fa      	ldrb	r2, [r7, #3]
 801c1d4:	6879      	ldr	r1, [r7, #4]
 801c1d6:	4613      	mov	r3, r2
 801c1d8:	00db      	lsls	r3, r3, #3
 801c1da:	1a9b      	subs	r3, r3, r2
 801c1dc:	009b      	lsls	r3, r3, #2
 801c1de:	440b      	add	r3, r1
 801c1e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801c1e4:	681a      	ldr	r2, [r3, #0]
 801c1e6:	78fb      	ldrb	r3, [r7, #3]
 801c1e8:	4619      	mov	r1, r3
 801c1ea:	f7fa fd6e 	bl	8016cca <USBD_LL_DataOutStage>
}
 801c1ee:	bf00      	nop
 801c1f0:	3708      	adds	r7, #8
 801c1f2:	46bd      	mov	sp, r7
 801c1f4:	bd80      	pop	{r7, pc}

0801c1f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c1f6:	b580      	push	{r7, lr}
 801c1f8:	b082      	sub	sp, #8
 801c1fa:	af00      	add	r7, sp, #0
 801c1fc:	6078      	str	r0, [r7, #4]
 801c1fe:	460b      	mov	r3, r1
 801c200:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801c208:	78fa      	ldrb	r2, [r7, #3]
 801c20a:	6879      	ldr	r1, [r7, #4]
 801c20c:	4613      	mov	r3, r2
 801c20e:	00db      	lsls	r3, r3, #3
 801c210:	1a9b      	subs	r3, r3, r2
 801c212:	009b      	lsls	r3, r3, #2
 801c214:	440b      	add	r3, r1
 801c216:	3348      	adds	r3, #72	; 0x48
 801c218:	681a      	ldr	r2, [r3, #0]
 801c21a:	78fb      	ldrb	r3, [r7, #3]
 801c21c:	4619      	mov	r1, r3
 801c21e:	f7fa fdb7 	bl	8016d90 <USBD_LL_DataInStage>
}
 801c222:	bf00      	nop
 801c224:	3708      	adds	r7, #8
 801c226:	46bd      	mov	sp, r7
 801c228:	bd80      	pop	{r7, pc}

0801c22a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c22a:	b580      	push	{r7, lr}
 801c22c:	b082      	sub	sp, #8
 801c22e:	af00      	add	r7, sp, #0
 801c230:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801c238:	4618      	mov	r0, r3
 801c23a:	f7fa fecb 	bl	8016fd4 <USBD_LL_SOF>
}
 801c23e:	bf00      	nop
 801c240:	3708      	adds	r7, #8
 801c242:	46bd      	mov	sp, r7
 801c244:	bd80      	pop	{r7, pc}

0801c246 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c246:	b580      	push	{r7, lr}
 801c248:	b084      	sub	sp, #16
 801c24a:	af00      	add	r7, sp, #0
 801c24c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801c24e:	2301      	movs	r3, #1
 801c250:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	68db      	ldr	r3, [r3, #12]
 801c256:	2b02      	cmp	r3, #2
 801c258:	d001      	beq.n	801c25e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801c25a:	f7f2 f931 	bl	800e4c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801c264:	7bfa      	ldrb	r2, [r7, #15]
 801c266:	4611      	mov	r1, r2
 801c268:	4618      	mov	r0, r3
 801c26a:	f7fa fe75 	bl	8016f58 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801c274:	4618      	mov	r0, r3
 801c276:	f7fa fe21 	bl	8016ebc <USBD_LL_Reset>
}
 801c27a:	bf00      	nop
 801c27c:	3710      	adds	r7, #16
 801c27e:	46bd      	mov	sp, r7
 801c280:	bd80      	pop	{r7, pc}
	...

0801c284 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c284:	b580      	push	{r7, lr}
 801c286:	b082      	sub	sp, #8
 801c288:	af00      	add	r7, sp, #0
 801c28a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801c292:	4618      	mov	r0, r3
 801c294:	f7fa fe70 	bl	8016f78 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	681b      	ldr	r3, [r3, #0]
 801c29c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	687a      	ldr	r2, [r7, #4]
 801c2a4:	6812      	ldr	r2, [r2, #0]
 801c2a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c2aa:	f043 0301 	orr.w	r3, r3, #1
 801c2ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	6a1b      	ldr	r3, [r3, #32]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d005      	beq.n	801c2c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c2b8:	4b04      	ldr	r3, [pc, #16]	; (801c2cc <HAL_PCD_SuspendCallback+0x48>)
 801c2ba:	691b      	ldr	r3, [r3, #16]
 801c2bc:	4a03      	ldr	r2, [pc, #12]	; (801c2cc <HAL_PCD_SuspendCallback+0x48>)
 801c2be:	f043 0306 	orr.w	r3, r3, #6
 801c2c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801c2c4:	bf00      	nop
 801c2c6:	3708      	adds	r7, #8
 801c2c8:	46bd      	mov	sp, r7
 801c2ca:	bd80      	pop	{r7, pc}
 801c2cc:	e000ed00 	.word	0xe000ed00

0801c2d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c2d0:	b580      	push	{r7, lr}
 801c2d2:	b082      	sub	sp, #8
 801c2d4:	af00      	add	r7, sp, #0
 801c2d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801c2de:	4618      	mov	r0, r3
 801c2e0:	f7fa fe60 	bl	8016fa4 <USBD_LL_Resume>
}
 801c2e4:	bf00      	nop
 801c2e6:	3708      	adds	r7, #8
 801c2e8:	46bd      	mov	sp, r7
 801c2ea:	bd80      	pop	{r7, pc}

0801c2ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c2ec:	b580      	push	{r7, lr}
 801c2ee:	b082      	sub	sp, #8
 801c2f0:	af00      	add	r7, sp, #0
 801c2f2:	6078      	str	r0, [r7, #4]
 801c2f4:	460b      	mov	r3, r1
 801c2f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801c2f8:	687b      	ldr	r3, [r7, #4]
 801c2fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801c2fe:	78fa      	ldrb	r2, [r7, #3]
 801c300:	4611      	mov	r1, r2
 801c302:	4618      	mov	r0, r3
 801c304:	f7fa feae 	bl	8017064 <USBD_LL_IsoOUTIncomplete>
}
 801c308:	bf00      	nop
 801c30a:	3708      	adds	r7, #8
 801c30c:	46bd      	mov	sp, r7
 801c30e:	bd80      	pop	{r7, pc}

0801c310 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c310:	b580      	push	{r7, lr}
 801c312:	b082      	sub	sp, #8
 801c314:	af00      	add	r7, sp, #0
 801c316:	6078      	str	r0, [r7, #4]
 801c318:	460b      	mov	r3, r1
 801c31a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801c322:	78fa      	ldrb	r2, [r7, #3]
 801c324:	4611      	mov	r1, r2
 801c326:	4618      	mov	r0, r3
 801c328:	f7fa fe76 	bl	8017018 <USBD_LL_IsoINIncomplete>
}
 801c32c:	bf00      	nop
 801c32e:	3708      	adds	r7, #8
 801c330:	46bd      	mov	sp, r7
 801c332:	bd80      	pop	{r7, pc}

0801c334 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c334:	b580      	push	{r7, lr}
 801c336:	b082      	sub	sp, #8
 801c338:	af00      	add	r7, sp, #0
 801c33a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801c342:	4618      	mov	r0, r3
 801c344:	f7fa feb4 	bl	80170b0 <USBD_LL_DevConnected>
}
 801c348:	bf00      	nop
 801c34a:	3708      	adds	r7, #8
 801c34c:	46bd      	mov	sp, r7
 801c34e:	bd80      	pop	{r7, pc}

0801c350 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c350:	b580      	push	{r7, lr}
 801c352:	b082      	sub	sp, #8
 801c354:	af00      	add	r7, sp, #0
 801c356:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801c35e:	4618      	mov	r0, r3
 801c360:	f7fa feb1 	bl	80170c6 <USBD_LL_DevDisconnected>
}
 801c364:	bf00      	nop
 801c366:	3708      	adds	r7, #8
 801c368:	46bd      	mov	sp, r7
 801c36a:	bd80      	pop	{r7, pc}

0801c36c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c36c:	b580      	push	{r7, lr}
 801c36e:	b082      	sub	sp, #8
 801c370:	af00      	add	r7, sp, #0
 801c372:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	781b      	ldrb	r3, [r3, #0]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d13c      	bne.n	801c3f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801c37c:	4a20      	ldr	r2, [pc, #128]	; (801c400 <USBD_LL_Init+0x94>)
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	4a1e      	ldr	r2, [pc, #120]	; (801c400 <USBD_LL_Init+0x94>)
 801c388:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801c38c:	4b1c      	ldr	r3, [pc, #112]	; (801c400 <USBD_LL_Init+0x94>)
 801c38e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801c392:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801c394:	4b1a      	ldr	r3, [pc, #104]	; (801c400 <USBD_LL_Init+0x94>)
 801c396:	2204      	movs	r2, #4
 801c398:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801c39a:	4b19      	ldr	r3, [pc, #100]	; (801c400 <USBD_LL_Init+0x94>)
 801c39c:	2202      	movs	r2, #2
 801c39e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801c3a0:	4b17      	ldr	r3, [pc, #92]	; (801c400 <USBD_LL_Init+0x94>)
 801c3a2:	2200      	movs	r2, #0
 801c3a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c3a6:	4b16      	ldr	r3, [pc, #88]	; (801c400 <USBD_LL_Init+0x94>)
 801c3a8:	2202      	movs	r2, #2
 801c3aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801c3ac:	4b14      	ldr	r3, [pc, #80]	; (801c400 <USBD_LL_Init+0x94>)
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801c3b2:	4b13      	ldr	r3, [pc, #76]	; (801c400 <USBD_LL_Init+0x94>)
 801c3b4:	2200      	movs	r2, #0
 801c3b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801c3b8:	4b11      	ldr	r3, [pc, #68]	; (801c400 <USBD_LL_Init+0x94>)
 801c3ba:	2200      	movs	r2, #0
 801c3bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801c3be:	4b10      	ldr	r3, [pc, #64]	; (801c400 <USBD_LL_Init+0x94>)
 801c3c0:	2200      	movs	r2, #0
 801c3c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801c3c4:	4b0e      	ldr	r3, [pc, #56]	; (801c400 <USBD_LL_Init+0x94>)
 801c3c6:	2200      	movs	r2, #0
 801c3c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801c3ca:	480d      	ldr	r0, [pc, #52]	; (801c400 <USBD_LL_Init+0x94>)
 801c3cc:	f7f5 f80c 	bl	80113e8 <HAL_PCD_Init>
 801c3d0:	4603      	mov	r3, r0
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d001      	beq.n	801c3da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801c3d6:	f7f2 f873 	bl	800e4c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801c3da:	2180      	movs	r1, #128	; 0x80
 801c3dc:	4808      	ldr	r0, [pc, #32]	; (801c400 <USBD_LL_Init+0x94>)
 801c3de:	f7f6 f96a 	bl	80126b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801c3e2:	2240      	movs	r2, #64	; 0x40
 801c3e4:	2100      	movs	r1, #0
 801c3e6:	4806      	ldr	r0, [pc, #24]	; (801c400 <USBD_LL_Init+0x94>)
 801c3e8:	f7f6 f91e 	bl	8012628 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801c3ec:	2280      	movs	r2, #128	; 0x80
 801c3ee:	2101      	movs	r1, #1
 801c3f0:	4803      	ldr	r0, [pc, #12]	; (801c400 <USBD_LL_Init+0x94>)
 801c3f2:	f7f6 f919 	bl	8012628 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801c3f6:	2300      	movs	r3, #0
}
 801c3f8:	4618      	mov	r0, r3
 801c3fa:	3708      	adds	r7, #8
 801c3fc:	46bd      	mov	sp, r7
 801c3fe:	bd80      	pop	{r7, pc}
 801c400:	20008164 	.word	0x20008164

0801c404 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801c404:	b580      	push	{r7, lr}
 801c406:	b084      	sub	sp, #16
 801c408:	af00      	add	r7, sp, #0
 801c40a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c40c:	2300      	movs	r3, #0
 801c40e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c410:	2300      	movs	r3, #0
 801c412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c41a:	4618      	mov	r0, r3
 801c41c:	f7f5 f901 	bl	8011622 <HAL_PCD_Start>
 801c420:	4603      	mov	r3, r0
 801c422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c424:	7bfb      	ldrb	r3, [r7, #15]
 801c426:	4618      	mov	r0, r3
 801c428:	f000 f942 	bl	801c6b0 <USBD_Get_USB_Status>
 801c42c:	4603      	mov	r3, r0
 801c42e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c430:	7bbb      	ldrb	r3, [r7, #14]
}
 801c432:	4618      	mov	r0, r3
 801c434:	3710      	adds	r7, #16
 801c436:	46bd      	mov	sp, r7
 801c438:	bd80      	pop	{r7, pc}

0801c43a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801c43a:	b580      	push	{r7, lr}
 801c43c:	b084      	sub	sp, #16
 801c43e:	af00      	add	r7, sp, #0
 801c440:	6078      	str	r0, [r7, #4]
 801c442:	4608      	mov	r0, r1
 801c444:	4611      	mov	r1, r2
 801c446:	461a      	mov	r2, r3
 801c448:	4603      	mov	r3, r0
 801c44a:	70fb      	strb	r3, [r7, #3]
 801c44c:	460b      	mov	r3, r1
 801c44e:	70bb      	strb	r3, [r7, #2]
 801c450:	4613      	mov	r3, r2
 801c452:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c454:	2300      	movs	r3, #0
 801c456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c458:	2300      	movs	r3, #0
 801c45a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801c462:	78bb      	ldrb	r3, [r7, #2]
 801c464:	883a      	ldrh	r2, [r7, #0]
 801c466:	78f9      	ldrb	r1, [r7, #3]
 801c468:	f7f5 fce5 	bl	8011e36 <HAL_PCD_EP_Open>
 801c46c:	4603      	mov	r3, r0
 801c46e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c470:	7bfb      	ldrb	r3, [r7, #15]
 801c472:	4618      	mov	r0, r3
 801c474:	f000 f91c 	bl	801c6b0 <USBD_Get_USB_Status>
 801c478:	4603      	mov	r3, r0
 801c47a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c47c:	7bbb      	ldrb	r3, [r7, #14]
}
 801c47e:	4618      	mov	r0, r3
 801c480:	3710      	adds	r7, #16
 801c482:	46bd      	mov	sp, r7
 801c484:	bd80      	pop	{r7, pc}

0801c486 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c486:	b580      	push	{r7, lr}
 801c488:	b084      	sub	sp, #16
 801c48a:	af00      	add	r7, sp, #0
 801c48c:	6078      	str	r0, [r7, #4]
 801c48e:	460b      	mov	r3, r1
 801c490:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c492:	2300      	movs	r3, #0
 801c494:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c496:	2300      	movs	r3, #0
 801c498:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c4a0:	78fa      	ldrb	r2, [r7, #3]
 801c4a2:	4611      	mov	r1, r2
 801c4a4:	4618      	mov	r0, r3
 801c4a6:	f7f5 fd2e 	bl	8011f06 <HAL_PCD_EP_Close>
 801c4aa:	4603      	mov	r3, r0
 801c4ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c4ae:	7bfb      	ldrb	r3, [r7, #15]
 801c4b0:	4618      	mov	r0, r3
 801c4b2:	f000 f8fd 	bl	801c6b0 <USBD_Get_USB_Status>
 801c4b6:	4603      	mov	r3, r0
 801c4b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c4ba:	7bbb      	ldrb	r3, [r7, #14]
}
 801c4bc:	4618      	mov	r0, r3
 801c4be:	3710      	adds	r7, #16
 801c4c0:	46bd      	mov	sp, r7
 801c4c2:	bd80      	pop	{r7, pc}

0801c4c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	b084      	sub	sp, #16
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	6078      	str	r0, [r7, #4]
 801c4cc:	460b      	mov	r3, r1
 801c4ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c4d0:	2300      	movs	r3, #0
 801c4d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c4d4:	2300      	movs	r3, #0
 801c4d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c4de:	78fa      	ldrb	r2, [r7, #3]
 801c4e0:	4611      	mov	r1, r2
 801c4e2:	4618      	mov	r0, r3
 801c4e4:	f7f5 fe06 	bl	80120f4 <HAL_PCD_EP_SetStall>
 801c4e8:	4603      	mov	r3, r0
 801c4ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c4ec:	7bfb      	ldrb	r3, [r7, #15]
 801c4ee:	4618      	mov	r0, r3
 801c4f0:	f000 f8de 	bl	801c6b0 <USBD_Get_USB_Status>
 801c4f4:	4603      	mov	r3, r0
 801c4f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c4f8:	7bbb      	ldrb	r3, [r7, #14]
}
 801c4fa:	4618      	mov	r0, r3
 801c4fc:	3710      	adds	r7, #16
 801c4fe:	46bd      	mov	sp, r7
 801c500:	bd80      	pop	{r7, pc}

0801c502 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c502:	b580      	push	{r7, lr}
 801c504:	b084      	sub	sp, #16
 801c506:	af00      	add	r7, sp, #0
 801c508:	6078      	str	r0, [r7, #4]
 801c50a:	460b      	mov	r3, r1
 801c50c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c50e:	2300      	movs	r3, #0
 801c510:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c512:	2300      	movs	r3, #0
 801c514:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c51c:	78fa      	ldrb	r2, [r7, #3]
 801c51e:	4611      	mov	r1, r2
 801c520:	4618      	mov	r0, r3
 801c522:	f7f5 fe4b 	bl	80121bc <HAL_PCD_EP_ClrStall>
 801c526:	4603      	mov	r3, r0
 801c528:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c52a:	7bfb      	ldrb	r3, [r7, #15]
 801c52c:	4618      	mov	r0, r3
 801c52e:	f000 f8bf 	bl	801c6b0 <USBD_Get_USB_Status>
 801c532:	4603      	mov	r3, r0
 801c534:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c536:	7bbb      	ldrb	r3, [r7, #14]
}
 801c538:	4618      	mov	r0, r3
 801c53a:	3710      	adds	r7, #16
 801c53c:	46bd      	mov	sp, r7
 801c53e:	bd80      	pop	{r7, pc}

0801c540 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c540:	b480      	push	{r7}
 801c542:	b085      	sub	sp, #20
 801c544:	af00      	add	r7, sp, #0
 801c546:	6078      	str	r0, [r7, #4]
 801c548:	460b      	mov	r3, r1
 801c54a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c552:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801c554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c558:	2b00      	cmp	r3, #0
 801c55a:	da0b      	bge.n	801c574 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801c55c:	78fb      	ldrb	r3, [r7, #3]
 801c55e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c562:	68f9      	ldr	r1, [r7, #12]
 801c564:	4613      	mov	r3, r2
 801c566:	00db      	lsls	r3, r3, #3
 801c568:	1a9b      	subs	r3, r3, r2
 801c56a:	009b      	lsls	r3, r3, #2
 801c56c:	440b      	add	r3, r1
 801c56e:	333e      	adds	r3, #62	; 0x3e
 801c570:	781b      	ldrb	r3, [r3, #0]
 801c572:	e00b      	b.n	801c58c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801c574:	78fb      	ldrb	r3, [r7, #3]
 801c576:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c57a:	68f9      	ldr	r1, [r7, #12]
 801c57c:	4613      	mov	r3, r2
 801c57e:	00db      	lsls	r3, r3, #3
 801c580:	1a9b      	subs	r3, r3, r2
 801c582:	009b      	lsls	r3, r3, #2
 801c584:	440b      	add	r3, r1
 801c586:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801c58a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c58c:	4618      	mov	r0, r3
 801c58e:	3714      	adds	r7, #20
 801c590:	46bd      	mov	sp, r7
 801c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c596:	4770      	bx	lr

0801c598 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801c598:	b580      	push	{r7, lr}
 801c59a:	b084      	sub	sp, #16
 801c59c:	af00      	add	r7, sp, #0
 801c59e:	6078      	str	r0, [r7, #4]
 801c5a0:	460b      	mov	r3, r1
 801c5a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c5a4:	2300      	movs	r3, #0
 801c5a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c5a8:	2300      	movs	r3, #0
 801c5aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c5b2:	78fa      	ldrb	r2, [r7, #3]
 801c5b4:	4611      	mov	r1, r2
 801c5b6:	4618      	mov	r0, r3
 801c5b8:	f7f5 fc18 	bl	8011dec <HAL_PCD_SetAddress>
 801c5bc:	4603      	mov	r3, r0
 801c5be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c5c0:	7bfb      	ldrb	r3, [r7, #15]
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	f000 f874 	bl	801c6b0 <USBD_Get_USB_Status>
 801c5c8:	4603      	mov	r3, r0
 801c5ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c5cc:	7bbb      	ldrb	r3, [r7, #14]
}
 801c5ce:	4618      	mov	r0, r3
 801c5d0:	3710      	adds	r7, #16
 801c5d2:	46bd      	mov	sp, r7
 801c5d4:	bd80      	pop	{r7, pc}

0801c5d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c5d6:	b580      	push	{r7, lr}
 801c5d8:	b086      	sub	sp, #24
 801c5da:	af00      	add	r7, sp, #0
 801c5dc:	60f8      	str	r0, [r7, #12]
 801c5de:	607a      	str	r2, [r7, #4]
 801c5e0:	603b      	str	r3, [r7, #0]
 801c5e2:	460b      	mov	r3, r1
 801c5e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c5e6:	2300      	movs	r3, #0
 801c5e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c5ea:	2300      	movs	r3, #0
 801c5ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801c5ee:	68fb      	ldr	r3, [r7, #12]
 801c5f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801c5f4:	7af9      	ldrb	r1, [r7, #11]
 801c5f6:	683b      	ldr	r3, [r7, #0]
 801c5f8:	687a      	ldr	r2, [r7, #4]
 801c5fa:	f7f5 fd31 	bl	8012060 <HAL_PCD_EP_Transmit>
 801c5fe:	4603      	mov	r3, r0
 801c600:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c602:	7dfb      	ldrb	r3, [r7, #23]
 801c604:	4618      	mov	r0, r3
 801c606:	f000 f853 	bl	801c6b0 <USBD_Get_USB_Status>
 801c60a:	4603      	mov	r3, r0
 801c60c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c60e:	7dbb      	ldrb	r3, [r7, #22]
}
 801c610:	4618      	mov	r0, r3
 801c612:	3718      	adds	r7, #24
 801c614:	46bd      	mov	sp, r7
 801c616:	bd80      	pop	{r7, pc}

0801c618 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c618:	b580      	push	{r7, lr}
 801c61a:	b086      	sub	sp, #24
 801c61c:	af00      	add	r7, sp, #0
 801c61e:	60f8      	str	r0, [r7, #12]
 801c620:	607a      	str	r2, [r7, #4]
 801c622:	603b      	str	r3, [r7, #0]
 801c624:	460b      	mov	r3, r1
 801c626:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c628:	2300      	movs	r3, #0
 801c62a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c62c:	2300      	movs	r3, #0
 801c62e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801c636:	7af9      	ldrb	r1, [r7, #11]
 801c638:	683b      	ldr	r3, [r7, #0]
 801c63a:	687a      	ldr	r2, [r7, #4]
 801c63c:	f7f5 fcad 	bl	8011f9a <HAL_PCD_EP_Receive>
 801c640:	4603      	mov	r3, r0
 801c642:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c644:	7dfb      	ldrb	r3, [r7, #23]
 801c646:	4618      	mov	r0, r3
 801c648:	f000 f832 	bl	801c6b0 <USBD_Get_USB_Status>
 801c64c:	4603      	mov	r3, r0
 801c64e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c650:	7dbb      	ldrb	r3, [r7, #22]
}
 801c652:	4618      	mov	r0, r3
 801c654:	3718      	adds	r7, #24
 801c656:	46bd      	mov	sp, r7
 801c658:	bd80      	pop	{r7, pc}

0801c65a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c65a:	b580      	push	{r7, lr}
 801c65c:	b082      	sub	sp, #8
 801c65e:	af00      	add	r7, sp, #0
 801c660:	6078      	str	r0, [r7, #4]
 801c662:	460b      	mov	r3, r1
 801c664:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801c66c:	78fa      	ldrb	r2, [r7, #3]
 801c66e:	4611      	mov	r1, r2
 801c670:	4618      	mov	r0, r3
 801c672:	f7f5 fcdd 	bl	8012030 <HAL_PCD_EP_GetRxCount>
 801c676:	4603      	mov	r3, r0
}
 801c678:	4618      	mov	r0, r3
 801c67a:	3708      	adds	r7, #8
 801c67c:	46bd      	mov	sp, r7
 801c67e:	bd80      	pop	{r7, pc}

0801c680 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801c680:	b480      	push	{r7}
 801c682:	b083      	sub	sp, #12
 801c684:	af00      	add	r7, sp, #0
 801c686:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801c688:	4b03      	ldr	r3, [pc, #12]	; (801c698 <USBD_static_malloc+0x18>)
}
 801c68a:	4618      	mov	r0, r3
 801c68c:	370c      	adds	r7, #12
 801c68e:	46bd      	mov	sp, r7
 801c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c694:	4770      	bx	lr
 801c696:	bf00      	nop
 801c698:	20004f68 	.word	0x20004f68

0801c69c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801c69c:	b480      	push	{r7}
 801c69e:	b083      	sub	sp, #12
 801c6a0:	af00      	add	r7, sp, #0
 801c6a2:	6078      	str	r0, [r7, #4]

}
 801c6a4:	bf00      	nop
 801c6a6:	370c      	adds	r7, #12
 801c6a8:	46bd      	mov	sp, r7
 801c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6ae:	4770      	bx	lr

0801c6b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c6b0:	b480      	push	{r7}
 801c6b2:	b085      	sub	sp, #20
 801c6b4:	af00      	add	r7, sp, #0
 801c6b6:	4603      	mov	r3, r0
 801c6b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c6ba:	2300      	movs	r3, #0
 801c6bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801c6be:	79fb      	ldrb	r3, [r7, #7]
 801c6c0:	2b03      	cmp	r3, #3
 801c6c2:	d817      	bhi.n	801c6f4 <USBD_Get_USB_Status+0x44>
 801c6c4:	a201      	add	r2, pc, #4	; (adr r2, 801c6cc <USBD_Get_USB_Status+0x1c>)
 801c6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c6ca:	bf00      	nop
 801c6cc:	0801c6dd 	.word	0x0801c6dd
 801c6d0:	0801c6e3 	.word	0x0801c6e3
 801c6d4:	0801c6e9 	.word	0x0801c6e9
 801c6d8:	0801c6ef 	.word	0x0801c6ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801c6dc:	2300      	movs	r3, #0
 801c6de:	73fb      	strb	r3, [r7, #15]
    break;
 801c6e0:	e00b      	b.n	801c6fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801c6e2:	2303      	movs	r3, #3
 801c6e4:	73fb      	strb	r3, [r7, #15]
    break;
 801c6e6:	e008      	b.n	801c6fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801c6e8:	2301      	movs	r3, #1
 801c6ea:	73fb      	strb	r3, [r7, #15]
    break;
 801c6ec:	e005      	b.n	801c6fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801c6ee:	2303      	movs	r3, #3
 801c6f0:	73fb      	strb	r3, [r7, #15]
    break;
 801c6f2:	e002      	b.n	801c6fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801c6f4:	2303      	movs	r3, #3
 801c6f6:	73fb      	strb	r3, [r7, #15]
    break;
 801c6f8:	bf00      	nop
  }
  return usb_status;
 801c6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 801c6fc:	4618      	mov	r0, r3
 801c6fe:	3714      	adds	r7, #20
 801c700:	46bd      	mov	sp, r7
 801c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c706:	4770      	bx	lr

0801c708 <atoi>:
 801c708:	220a      	movs	r2, #10
 801c70a:	2100      	movs	r1, #0
 801c70c:	f000 b96e 	b.w	801c9ec <strtol>

0801c710 <__errno>:
 801c710:	4b01      	ldr	r3, [pc, #4]	; (801c718 <__errno+0x8>)
 801c712:	6818      	ldr	r0, [r3, #0]
 801c714:	4770      	bx	lr
 801c716:	bf00      	nop
 801c718:	200001c8 	.word	0x200001c8

0801c71c <__libc_init_array>:
 801c71c:	b570      	push	{r4, r5, r6, lr}
 801c71e:	4d0d      	ldr	r5, [pc, #52]	; (801c754 <__libc_init_array+0x38>)
 801c720:	4c0d      	ldr	r4, [pc, #52]	; (801c758 <__libc_init_array+0x3c>)
 801c722:	1b64      	subs	r4, r4, r5
 801c724:	10a4      	asrs	r4, r4, #2
 801c726:	2600      	movs	r6, #0
 801c728:	42a6      	cmp	r6, r4
 801c72a:	d109      	bne.n	801c740 <__libc_init_array+0x24>
 801c72c:	4d0b      	ldr	r5, [pc, #44]	; (801c75c <__libc_init_array+0x40>)
 801c72e:	4c0c      	ldr	r4, [pc, #48]	; (801c760 <__libc_init_array+0x44>)
 801c730:	f000 fe26 	bl	801d380 <_init>
 801c734:	1b64      	subs	r4, r4, r5
 801c736:	10a4      	asrs	r4, r4, #2
 801c738:	2600      	movs	r6, #0
 801c73a:	42a6      	cmp	r6, r4
 801c73c:	d105      	bne.n	801c74a <__libc_init_array+0x2e>
 801c73e:	bd70      	pop	{r4, r5, r6, pc}
 801c740:	f855 3b04 	ldr.w	r3, [r5], #4
 801c744:	4798      	blx	r3
 801c746:	3601      	adds	r6, #1
 801c748:	e7ee      	b.n	801c728 <__libc_init_array+0xc>
 801c74a:	f855 3b04 	ldr.w	r3, [r5], #4
 801c74e:	4798      	blx	r3
 801c750:	3601      	adds	r6, #1
 801c752:	e7f2      	b.n	801c73a <__libc_init_array+0x1e>
 801c754:	0801df38 	.word	0x0801df38
 801c758:	0801df38 	.word	0x0801df38
 801c75c:	0801df38 	.word	0x0801df38
 801c760:	0801df3c 	.word	0x0801df3c

0801c764 <memcpy>:
 801c764:	440a      	add	r2, r1
 801c766:	4291      	cmp	r1, r2
 801c768:	f100 33ff 	add.w	r3, r0, #4294967295
 801c76c:	d100      	bne.n	801c770 <memcpy+0xc>
 801c76e:	4770      	bx	lr
 801c770:	b510      	push	{r4, lr}
 801c772:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c776:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c77a:	4291      	cmp	r1, r2
 801c77c:	d1f9      	bne.n	801c772 <memcpy+0xe>
 801c77e:	bd10      	pop	{r4, pc}

0801c780 <memset>:
 801c780:	4402      	add	r2, r0
 801c782:	4603      	mov	r3, r0
 801c784:	4293      	cmp	r3, r2
 801c786:	d100      	bne.n	801c78a <memset+0xa>
 801c788:	4770      	bx	lr
 801c78a:	f803 1b01 	strb.w	r1, [r3], #1
 801c78e:	e7f9      	b.n	801c784 <memset+0x4>

0801c790 <sniprintf>:
 801c790:	b40c      	push	{r2, r3}
 801c792:	b530      	push	{r4, r5, lr}
 801c794:	4b17      	ldr	r3, [pc, #92]	; (801c7f4 <sniprintf+0x64>)
 801c796:	1e0c      	subs	r4, r1, #0
 801c798:	681d      	ldr	r5, [r3, #0]
 801c79a:	b09d      	sub	sp, #116	; 0x74
 801c79c:	da08      	bge.n	801c7b0 <sniprintf+0x20>
 801c79e:	238b      	movs	r3, #139	; 0x8b
 801c7a0:	602b      	str	r3, [r5, #0]
 801c7a2:	f04f 30ff 	mov.w	r0, #4294967295
 801c7a6:	b01d      	add	sp, #116	; 0x74
 801c7a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c7ac:	b002      	add	sp, #8
 801c7ae:	4770      	bx	lr
 801c7b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c7b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c7b8:	bf14      	ite	ne
 801c7ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 801c7be:	4623      	moveq	r3, r4
 801c7c0:	9304      	str	r3, [sp, #16]
 801c7c2:	9307      	str	r3, [sp, #28]
 801c7c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c7c8:	9002      	str	r0, [sp, #8]
 801c7ca:	9006      	str	r0, [sp, #24]
 801c7cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c7d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c7d2:	ab21      	add	r3, sp, #132	; 0x84
 801c7d4:	a902      	add	r1, sp, #8
 801c7d6:	4628      	mov	r0, r5
 801c7d8:	9301      	str	r3, [sp, #4]
 801c7da:	f000 fa2d 	bl	801cc38 <_svfiprintf_r>
 801c7de:	1c43      	adds	r3, r0, #1
 801c7e0:	bfbc      	itt	lt
 801c7e2:	238b      	movlt	r3, #139	; 0x8b
 801c7e4:	602b      	strlt	r3, [r5, #0]
 801c7e6:	2c00      	cmp	r4, #0
 801c7e8:	d0dd      	beq.n	801c7a6 <sniprintf+0x16>
 801c7ea:	9b02      	ldr	r3, [sp, #8]
 801c7ec:	2200      	movs	r2, #0
 801c7ee:	701a      	strb	r2, [r3, #0]
 801c7f0:	e7d9      	b.n	801c7a6 <sniprintf+0x16>
 801c7f2:	bf00      	nop
 801c7f4:	200001c8 	.word	0x200001c8

0801c7f8 <strcasecmp>:
 801c7f8:	b570      	push	{r4, r5, r6, lr}
 801c7fa:	4d0c      	ldr	r5, [pc, #48]	; (801c82c <strcasecmp+0x34>)
 801c7fc:	4604      	mov	r4, r0
 801c7fe:	462e      	mov	r6, r5
 801c800:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c804:	5d5a      	ldrb	r2, [r3, r5]
 801c806:	f002 0203 	and.w	r2, r2, #3
 801c80a:	2a01      	cmp	r2, #1
 801c80c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c810:	5cb0      	ldrb	r0, [r6, r2]
 801c812:	f000 0003 	and.w	r0, r0, #3
 801c816:	bf08      	it	eq
 801c818:	3320      	addeq	r3, #32
 801c81a:	2801      	cmp	r0, #1
 801c81c:	bf08      	it	eq
 801c81e:	3220      	addeq	r2, #32
 801c820:	1a98      	subs	r0, r3, r2
 801c822:	d101      	bne.n	801c828 <strcasecmp+0x30>
 801c824:	2a00      	cmp	r2, #0
 801c826:	d1eb      	bne.n	801c800 <strcasecmp+0x8>
 801c828:	bd70      	pop	{r4, r5, r6, pc}
 801c82a:	bf00      	nop
 801c82c:	0801ddfb 	.word	0x0801ddfb

0801c830 <strchr>:
 801c830:	b2c9      	uxtb	r1, r1
 801c832:	4603      	mov	r3, r0
 801c834:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c838:	b11a      	cbz	r2, 801c842 <strchr+0x12>
 801c83a:	428a      	cmp	r2, r1
 801c83c:	d1f9      	bne.n	801c832 <strchr+0x2>
 801c83e:	4618      	mov	r0, r3
 801c840:	4770      	bx	lr
 801c842:	2900      	cmp	r1, #0
 801c844:	bf18      	it	ne
 801c846:	2300      	movne	r3, #0
 801c848:	e7f9      	b.n	801c83e <strchr+0xe>
	...

0801c84c <strncasecmp>:
 801c84c:	b570      	push	{r4, r5, r6, lr}
 801c84e:	4e0f      	ldr	r6, [pc, #60]	; (801c88c <strncasecmp+0x40>)
 801c850:	4604      	mov	r4, r0
 801c852:	440a      	add	r2, r1
 801c854:	428a      	cmp	r2, r1
 801c856:	d101      	bne.n	801c85c <strncasecmp+0x10>
 801c858:	2000      	movs	r0, #0
 801c85a:	e013      	b.n	801c884 <strncasecmp+0x38>
 801c85c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c860:	5d98      	ldrb	r0, [r3, r6]
 801c862:	f000 0003 	and.w	r0, r0, #3
 801c866:	2801      	cmp	r0, #1
 801c868:	f811 0b01 	ldrb.w	r0, [r1], #1
 801c86c:	5c35      	ldrb	r5, [r6, r0]
 801c86e:	f005 0503 	and.w	r5, r5, #3
 801c872:	bf08      	it	eq
 801c874:	3320      	addeq	r3, #32
 801c876:	2d01      	cmp	r5, #1
 801c878:	bf08      	it	eq
 801c87a:	3020      	addeq	r0, #32
 801c87c:	1a1b      	subs	r3, r3, r0
 801c87e:	d102      	bne.n	801c886 <strncasecmp+0x3a>
 801c880:	2800      	cmp	r0, #0
 801c882:	d1e7      	bne.n	801c854 <strncasecmp+0x8>
 801c884:	bd70      	pop	{r4, r5, r6, pc}
 801c886:	4618      	mov	r0, r3
 801c888:	e7fc      	b.n	801c884 <strncasecmp+0x38>
 801c88a:	bf00      	nop
 801c88c:	0801ddfb 	.word	0x0801ddfb

0801c890 <strncpy>:
 801c890:	b510      	push	{r4, lr}
 801c892:	3901      	subs	r1, #1
 801c894:	4603      	mov	r3, r0
 801c896:	b132      	cbz	r2, 801c8a6 <strncpy+0x16>
 801c898:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c89c:	f803 4b01 	strb.w	r4, [r3], #1
 801c8a0:	3a01      	subs	r2, #1
 801c8a2:	2c00      	cmp	r4, #0
 801c8a4:	d1f7      	bne.n	801c896 <strncpy+0x6>
 801c8a6:	441a      	add	r2, r3
 801c8a8:	2100      	movs	r1, #0
 801c8aa:	4293      	cmp	r3, r2
 801c8ac:	d100      	bne.n	801c8b0 <strncpy+0x20>
 801c8ae:	bd10      	pop	{r4, pc}
 801c8b0:	f803 1b01 	strb.w	r1, [r3], #1
 801c8b4:	e7f9      	b.n	801c8aa <strncpy+0x1a>

0801c8b6 <strstr>:
 801c8b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8b8:	780c      	ldrb	r4, [r1, #0]
 801c8ba:	b164      	cbz	r4, 801c8d6 <strstr+0x20>
 801c8bc:	4603      	mov	r3, r0
 801c8be:	781a      	ldrb	r2, [r3, #0]
 801c8c0:	4618      	mov	r0, r3
 801c8c2:	1c5e      	adds	r6, r3, #1
 801c8c4:	b90a      	cbnz	r2, 801c8ca <strstr+0x14>
 801c8c6:	4610      	mov	r0, r2
 801c8c8:	e005      	b.n	801c8d6 <strstr+0x20>
 801c8ca:	4294      	cmp	r4, r2
 801c8cc:	d108      	bne.n	801c8e0 <strstr+0x2a>
 801c8ce:	460d      	mov	r5, r1
 801c8d0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801c8d4:	b902      	cbnz	r2, 801c8d8 <strstr+0x22>
 801c8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c8d8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801c8dc:	4297      	cmp	r7, r2
 801c8de:	d0f7      	beq.n	801c8d0 <strstr+0x1a>
 801c8e0:	4633      	mov	r3, r6
 801c8e2:	e7ec      	b.n	801c8be <strstr+0x8>

0801c8e4 <_strtol_l.isra.0>:
 801c8e4:	2b01      	cmp	r3, #1
 801c8e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8ea:	d001      	beq.n	801c8f0 <_strtol_l.isra.0+0xc>
 801c8ec:	2b24      	cmp	r3, #36	; 0x24
 801c8ee:	d906      	bls.n	801c8fe <_strtol_l.isra.0+0x1a>
 801c8f0:	f7ff ff0e 	bl	801c710 <__errno>
 801c8f4:	2316      	movs	r3, #22
 801c8f6:	6003      	str	r3, [r0, #0]
 801c8f8:	2000      	movs	r0, #0
 801c8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8fe:	4f3a      	ldr	r7, [pc, #232]	; (801c9e8 <_strtol_l.isra.0+0x104>)
 801c900:	468e      	mov	lr, r1
 801c902:	4676      	mov	r6, lr
 801c904:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c908:	5de5      	ldrb	r5, [r4, r7]
 801c90a:	f015 0508 	ands.w	r5, r5, #8
 801c90e:	d1f8      	bne.n	801c902 <_strtol_l.isra.0+0x1e>
 801c910:	2c2d      	cmp	r4, #45	; 0x2d
 801c912:	d134      	bne.n	801c97e <_strtol_l.isra.0+0x9a>
 801c914:	f89e 4000 	ldrb.w	r4, [lr]
 801c918:	f04f 0801 	mov.w	r8, #1
 801c91c:	f106 0e02 	add.w	lr, r6, #2
 801c920:	2b00      	cmp	r3, #0
 801c922:	d05c      	beq.n	801c9de <_strtol_l.isra.0+0xfa>
 801c924:	2b10      	cmp	r3, #16
 801c926:	d10c      	bne.n	801c942 <_strtol_l.isra.0+0x5e>
 801c928:	2c30      	cmp	r4, #48	; 0x30
 801c92a:	d10a      	bne.n	801c942 <_strtol_l.isra.0+0x5e>
 801c92c:	f89e 4000 	ldrb.w	r4, [lr]
 801c930:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c934:	2c58      	cmp	r4, #88	; 0x58
 801c936:	d14d      	bne.n	801c9d4 <_strtol_l.isra.0+0xf0>
 801c938:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801c93c:	2310      	movs	r3, #16
 801c93e:	f10e 0e02 	add.w	lr, lr, #2
 801c942:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801c946:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c94a:	2600      	movs	r6, #0
 801c94c:	fbbc f9f3 	udiv	r9, ip, r3
 801c950:	4635      	mov	r5, r6
 801c952:	fb03 ca19 	mls	sl, r3, r9, ip
 801c956:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801c95a:	2f09      	cmp	r7, #9
 801c95c:	d818      	bhi.n	801c990 <_strtol_l.isra.0+0xac>
 801c95e:	463c      	mov	r4, r7
 801c960:	42a3      	cmp	r3, r4
 801c962:	dd24      	ble.n	801c9ae <_strtol_l.isra.0+0xca>
 801c964:	2e00      	cmp	r6, #0
 801c966:	db1f      	blt.n	801c9a8 <_strtol_l.isra.0+0xc4>
 801c968:	45a9      	cmp	r9, r5
 801c96a:	d31d      	bcc.n	801c9a8 <_strtol_l.isra.0+0xc4>
 801c96c:	d101      	bne.n	801c972 <_strtol_l.isra.0+0x8e>
 801c96e:	45a2      	cmp	sl, r4
 801c970:	db1a      	blt.n	801c9a8 <_strtol_l.isra.0+0xc4>
 801c972:	fb05 4503 	mla	r5, r5, r3, r4
 801c976:	2601      	movs	r6, #1
 801c978:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c97c:	e7eb      	b.n	801c956 <_strtol_l.isra.0+0x72>
 801c97e:	2c2b      	cmp	r4, #43	; 0x2b
 801c980:	bf08      	it	eq
 801c982:	f89e 4000 	ldrbeq.w	r4, [lr]
 801c986:	46a8      	mov	r8, r5
 801c988:	bf08      	it	eq
 801c98a:	f106 0e02 	addeq.w	lr, r6, #2
 801c98e:	e7c7      	b.n	801c920 <_strtol_l.isra.0+0x3c>
 801c990:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801c994:	2f19      	cmp	r7, #25
 801c996:	d801      	bhi.n	801c99c <_strtol_l.isra.0+0xb8>
 801c998:	3c37      	subs	r4, #55	; 0x37
 801c99a:	e7e1      	b.n	801c960 <_strtol_l.isra.0+0x7c>
 801c99c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801c9a0:	2f19      	cmp	r7, #25
 801c9a2:	d804      	bhi.n	801c9ae <_strtol_l.isra.0+0xca>
 801c9a4:	3c57      	subs	r4, #87	; 0x57
 801c9a6:	e7db      	b.n	801c960 <_strtol_l.isra.0+0x7c>
 801c9a8:	f04f 36ff 	mov.w	r6, #4294967295
 801c9ac:	e7e4      	b.n	801c978 <_strtol_l.isra.0+0x94>
 801c9ae:	2e00      	cmp	r6, #0
 801c9b0:	da05      	bge.n	801c9be <_strtol_l.isra.0+0xda>
 801c9b2:	2322      	movs	r3, #34	; 0x22
 801c9b4:	6003      	str	r3, [r0, #0]
 801c9b6:	4665      	mov	r5, ip
 801c9b8:	b942      	cbnz	r2, 801c9cc <_strtol_l.isra.0+0xe8>
 801c9ba:	4628      	mov	r0, r5
 801c9bc:	e79d      	b.n	801c8fa <_strtol_l.isra.0+0x16>
 801c9be:	f1b8 0f00 	cmp.w	r8, #0
 801c9c2:	d000      	beq.n	801c9c6 <_strtol_l.isra.0+0xe2>
 801c9c4:	426d      	negs	r5, r5
 801c9c6:	2a00      	cmp	r2, #0
 801c9c8:	d0f7      	beq.n	801c9ba <_strtol_l.isra.0+0xd6>
 801c9ca:	b10e      	cbz	r6, 801c9d0 <_strtol_l.isra.0+0xec>
 801c9cc:	f10e 31ff 	add.w	r1, lr, #4294967295
 801c9d0:	6011      	str	r1, [r2, #0]
 801c9d2:	e7f2      	b.n	801c9ba <_strtol_l.isra.0+0xd6>
 801c9d4:	2430      	movs	r4, #48	; 0x30
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d1b3      	bne.n	801c942 <_strtol_l.isra.0+0x5e>
 801c9da:	2308      	movs	r3, #8
 801c9dc:	e7b1      	b.n	801c942 <_strtol_l.isra.0+0x5e>
 801c9de:	2c30      	cmp	r4, #48	; 0x30
 801c9e0:	d0a4      	beq.n	801c92c <_strtol_l.isra.0+0x48>
 801c9e2:	230a      	movs	r3, #10
 801c9e4:	e7ad      	b.n	801c942 <_strtol_l.isra.0+0x5e>
 801c9e6:	bf00      	nop
 801c9e8:	0801ddfb 	.word	0x0801ddfb

0801c9ec <strtol>:
 801c9ec:	4613      	mov	r3, r2
 801c9ee:	460a      	mov	r2, r1
 801c9f0:	4601      	mov	r1, r0
 801c9f2:	4802      	ldr	r0, [pc, #8]	; (801c9fc <strtol+0x10>)
 801c9f4:	6800      	ldr	r0, [r0, #0]
 801c9f6:	f7ff bf75 	b.w	801c8e4 <_strtol_l.isra.0>
 801c9fa:	bf00      	nop
 801c9fc:	200001c8 	.word	0x200001c8

0801ca00 <_strtoul_l.isra.0>:
 801ca00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ca04:	4e3b      	ldr	r6, [pc, #236]	; (801caf4 <_strtoul_l.isra.0+0xf4>)
 801ca06:	4686      	mov	lr, r0
 801ca08:	468c      	mov	ip, r1
 801ca0a:	4660      	mov	r0, ip
 801ca0c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801ca10:	5da5      	ldrb	r5, [r4, r6]
 801ca12:	f015 0508 	ands.w	r5, r5, #8
 801ca16:	d1f8      	bne.n	801ca0a <_strtoul_l.isra.0+0xa>
 801ca18:	2c2d      	cmp	r4, #45	; 0x2d
 801ca1a:	d134      	bne.n	801ca86 <_strtoul_l.isra.0+0x86>
 801ca1c:	f89c 4000 	ldrb.w	r4, [ip]
 801ca20:	f04f 0801 	mov.w	r8, #1
 801ca24:	f100 0c02 	add.w	ip, r0, #2
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d05e      	beq.n	801caea <_strtoul_l.isra.0+0xea>
 801ca2c:	2b10      	cmp	r3, #16
 801ca2e:	d10c      	bne.n	801ca4a <_strtoul_l.isra.0+0x4a>
 801ca30:	2c30      	cmp	r4, #48	; 0x30
 801ca32:	d10a      	bne.n	801ca4a <_strtoul_l.isra.0+0x4a>
 801ca34:	f89c 0000 	ldrb.w	r0, [ip]
 801ca38:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801ca3c:	2858      	cmp	r0, #88	; 0x58
 801ca3e:	d14f      	bne.n	801cae0 <_strtoul_l.isra.0+0xe0>
 801ca40:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801ca44:	2310      	movs	r3, #16
 801ca46:	f10c 0c02 	add.w	ip, ip, #2
 801ca4a:	f04f 37ff 	mov.w	r7, #4294967295
 801ca4e:	2500      	movs	r5, #0
 801ca50:	fbb7 f7f3 	udiv	r7, r7, r3
 801ca54:	fb03 f907 	mul.w	r9, r3, r7
 801ca58:	ea6f 0909 	mvn.w	r9, r9
 801ca5c:	4628      	mov	r0, r5
 801ca5e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801ca62:	2e09      	cmp	r6, #9
 801ca64:	d818      	bhi.n	801ca98 <_strtoul_l.isra.0+0x98>
 801ca66:	4634      	mov	r4, r6
 801ca68:	42a3      	cmp	r3, r4
 801ca6a:	dd24      	ble.n	801cab6 <_strtoul_l.isra.0+0xb6>
 801ca6c:	2d00      	cmp	r5, #0
 801ca6e:	db1f      	blt.n	801cab0 <_strtoul_l.isra.0+0xb0>
 801ca70:	4287      	cmp	r7, r0
 801ca72:	d31d      	bcc.n	801cab0 <_strtoul_l.isra.0+0xb0>
 801ca74:	d101      	bne.n	801ca7a <_strtoul_l.isra.0+0x7a>
 801ca76:	45a1      	cmp	r9, r4
 801ca78:	db1a      	blt.n	801cab0 <_strtoul_l.isra.0+0xb0>
 801ca7a:	fb00 4003 	mla	r0, r0, r3, r4
 801ca7e:	2501      	movs	r5, #1
 801ca80:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801ca84:	e7eb      	b.n	801ca5e <_strtoul_l.isra.0+0x5e>
 801ca86:	2c2b      	cmp	r4, #43	; 0x2b
 801ca88:	bf08      	it	eq
 801ca8a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801ca8e:	46a8      	mov	r8, r5
 801ca90:	bf08      	it	eq
 801ca92:	f100 0c02 	addeq.w	ip, r0, #2
 801ca96:	e7c7      	b.n	801ca28 <_strtoul_l.isra.0+0x28>
 801ca98:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801ca9c:	2e19      	cmp	r6, #25
 801ca9e:	d801      	bhi.n	801caa4 <_strtoul_l.isra.0+0xa4>
 801caa0:	3c37      	subs	r4, #55	; 0x37
 801caa2:	e7e1      	b.n	801ca68 <_strtoul_l.isra.0+0x68>
 801caa4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801caa8:	2e19      	cmp	r6, #25
 801caaa:	d804      	bhi.n	801cab6 <_strtoul_l.isra.0+0xb6>
 801caac:	3c57      	subs	r4, #87	; 0x57
 801caae:	e7db      	b.n	801ca68 <_strtoul_l.isra.0+0x68>
 801cab0:	f04f 35ff 	mov.w	r5, #4294967295
 801cab4:	e7e4      	b.n	801ca80 <_strtoul_l.isra.0+0x80>
 801cab6:	2d00      	cmp	r5, #0
 801cab8:	da07      	bge.n	801caca <_strtoul_l.isra.0+0xca>
 801caba:	2322      	movs	r3, #34	; 0x22
 801cabc:	f8ce 3000 	str.w	r3, [lr]
 801cac0:	f04f 30ff 	mov.w	r0, #4294967295
 801cac4:	b942      	cbnz	r2, 801cad8 <_strtoul_l.isra.0+0xd8>
 801cac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801caca:	f1b8 0f00 	cmp.w	r8, #0
 801cace:	d000      	beq.n	801cad2 <_strtoul_l.isra.0+0xd2>
 801cad0:	4240      	negs	r0, r0
 801cad2:	2a00      	cmp	r2, #0
 801cad4:	d0f7      	beq.n	801cac6 <_strtoul_l.isra.0+0xc6>
 801cad6:	b10d      	cbz	r5, 801cadc <_strtoul_l.isra.0+0xdc>
 801cad8:	f10c 31ff 	add.w	r1, ip, #4294967295
 801cadc:	6011      	str	r1, [r2, #0]
 801cade:	e7f2      	b.n	801cac6 <_strtoul_l.isra.0+0xc6>
 801cae0:	2430      	movs	r4, #48	; 0x30
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	d1b1      	bne.n	801ca4a <_strtoul_l.isra.0+0x4a>
 801cae6:	2308      	movs	r3, #8
 801cae8:	e7af      	b.n	801ca4a <_strtoul_l.isra.0+0x4a>
 801caea:	2c30      	cmp	r4, #48	; 0x30
 801caec:	d0a2      	beq.n	801ca34 <_strtoul_l.isra.0+0x34>
 801caee:	230a      	movs	r3, #10
 801caf0:	e7ab      	b.n	801ca4a <_strtoul_l.isra.0+0x4a>
 801caf2:	bf00      	nop
 801caf4:	0801ddfb 	.word	0x0801ddfb

0801caf8 <strtoul>:
 801caf8:	4613      	mov	r3, r2
 801cafa:	460a      	mov	r2, r1
 801cafc:	4601      	mov	r1, r0
 801cafe:	4802      	ldr	r0, [pc, #8]	; (801cb08 <strtoul+0x10>)
 801cb00:	6800      	ldr	r0, [r0, #0]
 801cb02:	f7ff bf7d 	b.w	801ca00 <_strtoul_l.isra.0>
 801cb06:	bf00      	nop
 801cb08:	200001c8 	.word	0x200001c8

0801cb0c <_vsniprintf_r>:
 801cb0c:	b530      	push	{r4, r5, lr}
 801cb0e:	1e14      	subs	r4, r2, #0
 801cb10:	4605      	mov	r5, r0
 801cb12:	b09b      	sub	sp, #108	; 0x6c
 801cb14:	4618      	mov	r0, r3
 801cb16:	da05      	bge.n	801cb24 <_vsniprintf_r+0x18>
 801cb18:	238b      	movs	r3, #139	; 0x8b
 801cb1a:	602b      	str	r3, [r5, #0]
 801cb1c:	f04f 30ff 	mov.w	r0, #4294967295
 801cb20:	b01b      	add	sp, #108	; 0x6c
 801cb22:	bd30      	pop	{r4, r5, pc}
 801cb24:	f44f 7302 	mov.w	r3, #520	; 0x208
 801cb28:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cb2c:	bf14      	ite	ne
 801cb2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801cb32:	4623      	moveq	r3, r4
 801cb34:	9302      	str	r3, [sp, #8]
 801cb36:	9305      	str	r3, [sp, #20]
 801cb38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cb3c:	9100      	str	r1, [sp, #0]
 801cb3e:	9104      	str	r1, [sp, #16]
 801cb40:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cb44:	4602      	mov	r2, r0
 801cb46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cb48:	4669      	mov	r1, sp
 801cb4a:	4628      	mov	r0, r5
 801cb4c:	f000 f874 	bl	801cc38 <_svfiprintf_r>
 801cb50:	1c43      	adds	r3, r0, #1
 801cb52:	bfbc      	itt	lt
 801cb54:	238b      	movlt	r3, #139	; 0x8b
 801cb56:	602b      	strlt	r3, [r5, #0]
 801cb58:	2c00      	cmp	r4, #0
 801cb5a:	d0e1      	beq.n	801cb20 <_vsniprintf_r+0x14>
 801cb5c:	9b00      	ldr	r3, [sp, #0]
 801cb5e:	2200      	movs	r2, #0
 801cb60:	701a      	strb	r2, [r3, #0]
 801cb62:	e7dd      	b.n	801cb20 <_vsniprintf_r+0x14>

0801cb64 <vsniprintf>:
 801cb64:	b507      	push	{r0, r1, r2, lr}
 801cb66:	9300      	str	r3, [sp, #0]
 801cb68:	4613      	mov	r3, r2
 801cb6a:	460a      	mov	r2, r1
 801cb6c:	4601      	mov	r1, r0
 801cb6e:	4803      	ldr	r0, [pc, #12]	; (801cb7c <vsniprintf+0x18>)
 801cb70:	6800      	ldr	r0, [r0, #0]
 801cb72:	f7ff ffcb 	bl	801cb0c <_vsniprintf_r>
 801cb76:	b003      	add	sp, #12
 801cb78:	f85d fb04 	ldr.w	pc, [sp], #4
 801cb7c:	200001c8 	.word	0x200001c8

0801cb80 <__ssputs_r>:
 801cb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb84:	688e      	ldr	r6, [r1, #8]
 801cb86:	429e      	cmp	r6, r3
 801cb88:	4682      	mov	sl, r0
 801cb8a:	460c      	mov	r4, r1
 801cb8c:	4690      	mov	r8, r2
 801cb8e:	461f      	mov	r7, r3
 801cb90:	d838      	bhi.n	801cc04 <__ssputs_r+0x84>
 801cb92:	898a      	ldrh	r2, [r1, #12]
 801cb94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cb98:	d032      	beq.n	801cc00 <__ssputs_r+0x80>
 801cb9a:	6825      	ldr	r5, [r4, #0]
 801cb9c:	6909      	ldr	r1, [r1, #16]
 801cb9e:	eba5 0901 	sub.w	r9, r5, r1
 801cba2:	6965      	ldr	r5, [r4, #20]
 801cba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cba8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cbac:	3301      	adds	r3, #1
 801cbae:	444b      	add	r3, r9
 801cbb0:	106d      	asrs	r5, r5, #1
 801cbb2:	429d      	cmp	r5, r3
 801cbb4:	bf38      	it	cc
 801cbb6:	461d      	movcc	r5, r3
 801cbb8:	0553      	lsls	r3, r2, #21
 801cbba:	d531      	bpl.n	801cc20 <__ssputs_r+0xa0>
 801cbbc:	4629      	mov	r1, r5
 801cbbe:	f000 fb39 	bl	801d234 <_malloc_r>
 801cbc2:	4606      	mov	r6, r0
 801cbc4:	b950      	cbnz	r0, 801cbdc <__ssputs_r+0x5c>
 801cbc6:	230c      	movs	r3, #12
 801cbc8:	f8ca 3000 	str.w	r3, [sl]
 801cbcc:	89a3      	ldrh	r3, [r4, #12]
 801cbce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cbd2:	81a3      	strh	r3, [r4, #12]
 801cbd4:	f04f 30ff 	mov.w	r0, #4294967295
 801cbd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbdc:	6921      	ldr	r1, [r4, #16]
 801cbde:	464a      	mov	r2, r9
 801cbe0:	f7ff fdc0 	bl	801c764 <memcpy>
 801cbe4:	89a3      	ldrh	r3, [r4, #12]
 801cbe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cbea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cbee:	81a3      	strh	r3, [r4, #12]
 801cbf0:	6126      	str	r6, [r4, #16]
 801cbf2:	6165      	str	r5, [r4, #20]
 801cbf4:	444e      	add	r6, r9
 801cbf6:	eba5 0509 	sub.w	r5, r5, r9
 801cbfa:	6026      	str	r6, [r4, #0]
 801cbfc:	60a5      	str	r5, [r4, #8]
 801cbfe:	463e      	mov	r6, r7
 801cc00:	42be      	cmp	r6, r7
 801cc02:	d900      	bls.n	801cc06 <__ssputs_r+0x86>
 801cc04:	463e      	mov	r6, r7
 801cc06:	4632      	mov	r2, r6
 801cc08:	6820      	ldr	r0, [r4, #0]
 801cc0a:	4641      	mov	r1, r8
 801cc0c:	f000 faa8 	bl	801d160 <memmove>
 801cc10:	68a3      	ldr	r3, [r4, #8]
 801cc12:	6822      	ldr	r2, [r4, #0]
 801cc14:	1b9b      	subs	r3, r3, r6
 801cc16:	4432      	add	r2, r6
 801cc18:	60a3      	str	r3, [r4, #8]
 801cc1a:	6022      	str	r2, [r4, #0]
 801cc1c:	2000      	movs	r0, #0
 801cc1e:	e7db      	b.n	801cbd8 <__ssputs_r+0x58>
 801cc20:	462a      	mov	r2, r5
 801cc22:	f000 fb61 	bl	801d2e8 <_realloc_r>
 801cc26:	4606      	mov	r6, r0
 801cc28:	2800      	cmp	r0, #0
 801cc2a:	d1e1      	bne.n	801cbf0 <__ssputs_r+0x70>
 801cc2c:	6921      	ldr	r1, [r4, #16]
 801cc2e:	4650      	mov	r0, sl
 801cc30:	f000 fab0 	bl	801d194 <_free_r>
 801cc34:	e7c7      	b.n	801cbc6 <__ssputs_r+0x46>
	...

0801cc38 <_svfiprintf_r>:
 801cc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc3c:	4698      	mov	r8, r3
 801cc3e:	898b      	ldrh	r3, [r1, #12]
 801cc40:	061b      	lsls	r3, r3, #24
 801cc42:	b09d      	sub	sp, #116	; 0x74
 801cc44:	4607      	mov	r7, r0
 801cc46:	460d      	mov	r5, r1
 801cc48:	4614      	mov	r4, r2
 801cc4a:	d50e      	bpl.n	801cc6a <_svfiprintf_r+0x32>
 801cc4c:	690b      	ldr	r3, [r1, #16]
 801cc4e:	b963      	cbnz	r3, 801cc6a <_svfiprintf_r+0x32>
 801cc50:	2140      	movs	r1, #64	; 0x40
 801cc52:	f000 faef 	bl	801d234 <_malloc_r>
 801cc56:	6028      	str	r0, [r5, #0]
 801cc58:	6128      	str	r0, [r5, #16]
 801cc5a:	b920      	cbnz	r0, 801cc66 <_svfiprintf_r+0x2e>
 801cc5c:	230c      	movs	r3, #12
 801cc5e:	603b      	str	r3, [r7, #0]
 801cc60:	f04f 30ff 	mov.w	r0, #4294967295
 801cc64:	e0d1      	b.n	801ce0a <_svfiprintf_r+0x1d2>
 801cc66:	2340      	movs	r3, #64	; 0x40
 801cc68:	616b      	str	r3, [r5, #20]
 801cc6a:	2300      	movs	r3, #0
 801cc6c:	9309      	str	r3, [sp, #36]	; 0x24
 801cc6e:	2320      	movs	r3, #32
 801cc70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cc74:	f8cd 800c 	str.w	r8, [sp, #12]
 801cc78:	2330      	movs	r3, #48	; 0x30
 801cc7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ce24 <_svfiprintf_r+0x1ec>
 801cc7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cc82:	f04f 0901 	mov.w	r9, #1
 801cc86:	4623      	mov	r3, r4
 801cc88:	469a      	mov	sl, r3
 801cc8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cc8e:	b10a      	cbz	r2, 801cc94 <_svfiprintf_r+0x5c>
 801cc90:	2a25      	cmp	r2, #37	; 0x25
 801cc92:	d1f9      	bne.n	801cc88 <_svfiprintf_r+0x50>
 801cc94:	ebba 0b04 	subs.w	fp, sl, r4
 801cc98:	d00b      	beq.n	801ccb2 <_svfiprintf_r+0x7a>
 801cc9a:	465b      	mov	r3, fp
 801cc9c:	4622      	mov	r2, r4
 801cc9e:	4629      	mov	r1, r5
 801cca0:	4638      	mov	r0, r7
 801cca2:	f7ff ff6d 	bl	801cb80 <__ssputs_r>
 801cca6:	3001      	adds	r0, #1
 801cca8:	f000 80aa 	beq.w	801ce00 <_svfiprintf_r+0x1c8>
 801ccac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ccae:	445a      	add	r2, fp
 801ccb0:	9209      	str	r2, [sp, #36]	; 0x24
 801ccb2:	f89a 3000 	ldrb.w	r3, [sl]
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	f000 80a2 	beq.w	801ce00 <_svfiprintf_r+0x1c8>
 801ccbc:	2300      	movs	r3, #0
 801ccbe:	f04f 32ff 	mov.w	r2, #4294967295
 801ccc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ccc6:	f10a 0a01 	add.w	sl, sl, #1
 801ccca:	9304      	str	r3, [sp, #16]
 801cccc:	9307      	str	r3, [sp, #28]
 801ccce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ccd2:	931a      	str	r3, [sp, #104]	; 0x68
 801ccd4:	4654      	mov	r4, sl
 801ccd6:	2205      	movs	r2, #5
 801ccd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ccdc:	4851      	ldr	r0, [pc, #324]	; (801ce24 <_svfiprintf_r+0x1ec>)
 801ccde:	f7ef f9b7 	bl	800c050 <memchr>
 801cce2:	9a04      	ldr	r2, [sp, #16]
 801cce4:	b9d8      	cbnz	r0, 801cd1e <_svfiprintf_r+0xe6>
 801cce6:	06d0      	lsls	r0, r2, #27
 801cce8:	bf44      	itt	mi
 801ccea:	2320      	movmi	r3, #32
 801ccec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ccf0:	0711      	lsls	r1, r2, #28
 801ccf2:	bf44      	itt	mi
 801ccf4:	232b      	movmi	r3, #43	; 0x2b
 801ccf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ccfa:	f89a 3000 	ldrb.w	r3, [sl]
 801ccfe:	2b2a      	cmp	r3, #42	; 0x2a
 801cd00:	d015      	beq.n	801cd2e <_svfiprintf_r+0xf6>
 801cd02:	9a07      	ldr	r2, [sp, #28]
 801cd04:	4654      	mov	r4, sl
 801cd06:	2000      	movs	r0, #0
 801cd08:	f04f 0c0a 	mov.w	ip, #10
 801cd0c:	4621      	mov	r1, r4
 801cd0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cd12:	3b30      	subs	r3, #48	; 0x30
 801cd14:	2b09      	cmp	r3, #9
 801cd16:	d94e      	bls.n	801cdb6 <_svfiprintf_r+0x17e>
 801cd18:	b1b0      	cbz	r0, 801cd48 <_svfiprintf_r+0x110>
 801cd1a:	9207      	str	r2, [sp, #28]
 801cd1c:	e014      	b.n	801cd48 <_svfiprintf_r+0x110>
 801cd1e:	eba0 0308 	sub.w	r3, r0, r8
 801cd22:	fa09 f303 	lsl.w	r3, r9, r3
 801cd26:	4313      	orrs	r3, r2
 801cd28:	9304      	str	r3, [sp, #16]
 801cd2a:	46a2      	mov	sl, r4
 801cd2c:	e7d2      	b.n	801ccd4 <_svfiprintf_r+0x9c>
 801cd2e:	9b03      	ldr	r3, [sp, #12]
 801cd30:	1d19      	adds	r1, r3, #4
 801cd32:	681b      	ldr	r3, [r3, #0]
 801cd34:	9103      	str	r1, [sp, #12]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	bfbb      	ittet	lt
 801cd3a:	425b      	neglt	r3, r3
 801cd3c:	f042 0202 	orrlt.w	r2, r2, #2
 801cd40:	9307      	strge	r3, [sp, #28]
 801cd42:	9307      	strlt	r3, [sp, #28]
 801cd44:	bfb8      	it	lt
 801cd46:	9204      	strlt	r2, [sp, #16]
 801cd48:	7823      	ldrb	r3, [r4, #0]
 801cd4a:	2b2e      	cmp	r3, #46	; 0x2e
 801cd4c:	d10c      	bne.n	801cd68 <_svfiprintf_r+0x130>
 801cd4e:	7863      	ldrb	r3, [r4, #1]
 801cd50:	2b2a      	cmp	r3, #42	; 0x2a
 801cd52:	d135      	bne.n	801cdc0 <_svfiprintf_r+0x188>
 801cd54:	9b03      	ldr	r3, [sp, #12]
 801cd56:	1d1a      	adds	r2, r3, #4
 801cd58:	681b      	ldr	r3, [r3, #0]
 801cd5a:	9203      	str	r2, [sp, #12]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	bfb8      	it	lt
 801cd60:	f04f 33ff 	movlt.w	r3, #4294967295
 801cd64:	3402      	adds	r4, #2
 801cd66:	9305      	str	r3, [sp, #20]
 801cd68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ce34 <_svfiprintf_r+0x1fc>
 801cd6c:	7821      	ldrb	r1, [r4, #0]
 801cd6e:	2203      	movs	r2, #3
 801cd70:	4650      	mov	r0, sl
 801cd72:	f7ef f96d 	bl	800c050 <memchr>
 801cd76:	b140      	cbz	r0, 801cd8a <_svfiprintf_r+0x152>
 801cd78:	2340      	movs	r3, #64	; 0x40
 801cd7a:	eba0 000a 	sub.w	r0, r0, sl
 801cd7e:	fa03 f000 	lsl.w	r0, r3, r0
 801cd82:	9b04      	ldr	r3, [sp, #16]
 801cd84:	4303      	orrs	r3, r0
 801cd86:	3401      	adds	r4, #1
 801cd88:	9304      	str	r3, [sp, #16]
 801cd8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd8e:	4826      	ldr	r0, [pc, #152]	; (801ce28 <_svfiprintf_r+0x1f0>)
 801cd90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cd94:	2206      	movs	r2, #6
 801cd96:	f7ef f95b 	bl	800c050 <memchr>
 801cd9a:	2800      	cmp	r0, #0
 801cd9c:	d038      	beq.n	801ce10 <_svfiprintf_r+0x1d8>
 801cd9e:	4b23      	ldr	r3, [pc, #140]	; (801ce2c <_svfiprintf_r+0x1f4>)
 801cda0:	bb1b      	cbnz	r3, 801cdea <_svfiprintf_r+0x1b2>
 801cda2:	9b03      	ldr	r3, [sp, #12]
 801cda4:	3307      	adds	r3, #7
 801cda6:	f023 0307 	bic.w	r3, r3, #7
 801cdaa:	3308      	adds	r3, #8
 801cdac:	9303      	str	r3, [sp, #12]
 801cdae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cdb0:	4433      	add	r3, r6
 801cdb2:	9309      	str	r3, [sp, #36]	; 0x24
 801cdb4:	e767      	b.n	801cc86 <_svfiprintf_r+0x4e>
 801cdb6:	fb0c 3202 	mla	r2, ip, r2, r3
 801cdba:	460c      	mov	r4, r1
 801cdbc:	2001      	movs	r0, #1
 801cdbe:	e7a5      	b.n	801cd0c <_svfiprintf_r+0xd4>
 801cdc0:	2300      	movs	r3, #0
 801cdc2:	3401      	adds	r4, #1
 801cdc4:	9305      	str	r3, [sp, #20]
 801cdc6:	4619      	mov	r1, r3
 801cdc8:	f04f 0c0a 	mov.w	ip, #10
 801cdcc:	4620      	mov	r0, r4
 801cdce:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cdd2:	3a30      	subs	r2, #48	; 0x30
 801cdd4:	2a09      	cmp	r2, #9
 801cdd6:	d903      	bls.n	801cde0 <_svfiprintf_r+0x1a8>
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	d0c5      	beq.n	801cd68 <_svfiprintf_r+0x130>
 801cddc:	9105      	str	r1, [sp, #20]
 801cdde:	e7c3      	b.n	801cd68 <_svfiprintf_r+0x130>
 801cde0:	fb0c 2101 	mla	r1, ip, r1, r2
 801cde4:	4604      	mov	r4, r0
 801cde6:	2301      	movs	r3, #1
 801cde8:	e7f0      	b.n	801cdcc <_svfiprintf_r+0x194>
 801cdea:	ab03      	add	r3, sp, #12
 801cdec:	9300      	str	r3, [sp, #0]
 801cdee:	462a      	mov	r2, r5
 801cdf0:	4b0f      	ldr	r3, [pc, #60]	; (801ce30 <_svfiprintf_r+0x1f8>)
 801cdf2:	a904      	add	r1, sp, #16
 801cdf4:	4638      	mov	r0, r7
 801cdf6:	f3af 8000 	nop.w
 801cdfa:	1c42      	adds	r2, r0, #1
 801cdfc:	4606      	mov	r6, r0
 801cdfe:	d1d6      	bne.n	801cdae <_svfiprintf_r+0x176>
 801ce00:	89ab      	ldrh	r3, [r5, #12]
 801ce02:	065b      	lsls	r3, r3, #25
 801ce04:	f53f af2c 	bmi.w	801cc60 <_svfiprintf_r+0x28>
 801ce08:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ce0a:	b01d      	add	sp, #116	; 0x74
 801ce0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce10:	ab03      	add	r3, sp, #12
 801ce12:	9300      	str	r3, [sp, #0]
 801ce14:	462a      	mov	r2, r5
 801ce16:	4b06      	ldr	r3, [pc, #24]	; (801ce30 <_svfiprintf_r+0x1f8>)
 801ce18:	a904      	add	r1, sp, #16
 801ce1a:	4638      	mov	r0, r7
 801ce1c:	f000 f87a 	bl	801cf14 <_printf_i>
 801ce20:	e7eb      	b.n	801cdfa <_svfiprintf_r+0x1c2>
 801ce22:	bf00      	nop
 801ce24:	0801defb 	.word	0x0801defb
 801ce28:	0801df05 	.word	0x0801df05
 801ce2c:	00000000 	.word	0x00000000
 801ce30:	0801cb81 	.word	0x0801cb81
 801ce34:	0801df01 	.word	0x0801df01

0801ce38 <_printf_common>:
 801ce38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce3c:	4616      	mov	r6, r2
 801ce3e:	4699      	mov	r9, r3
 801ce40:	688a      	ldr	r2, [r1, #8]
 801ce42:	690b      	ldr	r3, [r1, #16]
 801ce44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ce48:	4293      	cmp	r3, r2
 801ce4a:	bfb8      	it	lt
 801ce4c:	4613      	movlt	r3, r2
 801ce4e:	6033      	str	r3, [r6, #0]
 801ce50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ce54:	4607      	mov	r7, r0
 801ce56:	460c      	mov	r4, r1
 801ce58:	b10a      	cbz	r2, 801ce5e <_printf_common+0x26>
 801ce5a:	3301      	adds	r3, #1
 801ce5c:	6033      	str	r3, [r6, #0]
 801ce5e:	6823      	ldr	r3, [r4, #0]
 801ce60:	0699      	lsls	r1, r3, #26
 801ce62:	bf42      	ittt	mi
 801ce64:	6833      	ldrmi	r3, [r6, #0]
 801ce66:	3302      	addmi	r3, #2
 801ce68:	6033      	strmi	r3, [r6, #0]
 801ce6a:	6825      	ldr	r5, [r4, #0]
 801ce6c:	f015 0506 	ands.w	r5, r5, #6
 801ce70:	d106      	bne.n	801ce80 <_printf_common+0x48>
 801ce72:	f104 0a19 	add.w	sl, r4, #25
 801ce76:	68e3      	ldr	r3, [r4, #12]
 801ce78:	6832      	ldr	r2, [r6, #0]
 801ce7a:	1a9b      	subs	r3, r3, r2
 801ce7c:	42ab      	cmp	r3, r5
 801ce7e:	dc26      	bgt.n	801cece <_printf_common+0x96>
 801ce80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ce84:	1e13      	subs	r3, r2, #0
 801ce86:	6822      	ldr	r2, [r4, #0]
 801ce88:	bf18      	it	ne
 801ce8a:	2301      	movne	r3, #1
 801ce8c:	0692      	lsls	r2, r2, #26
 801ce8e:	d42b      	bmi.n	801cee8 <_printf_common+0xb0>
 801ce90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ce94:	4649      	mov	r1, r9
 801ce96:	4638      	mov	r0, r7
 801ce98:	47c0      	blx	r8
 801ce9a:	3001      	adds	r0, #1
 801ce9c:	d01e      	beq.n	801cedc <_printf_common+0xa4>
 801ce9e:	6823      	ldr	r3, [r4, #0]
 801cea0:	68e5      	ldr	r5, [r4, #12]
 801cea2:	6832      	ldr	r2, [r6, #0]
 801cea4:	f003 0306 	and.w	r3, r3, #6
 801cea8:	2b04      	cmp	r3, #4
 801ceaa:	bf08      	it	eq
 801ceac:	1aad      	subeq	r5, r5, r2
 801ceae:	68a3      	ldr	r3, [r4, #8]
 801ceb0:	6922      	ldr	r2, [r4, #16]
 801ceb2:	bf0c      	ite	eq
 801ceb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ceb8:	2500      	movne	r5, #0
 801ceba:	4293      	cmp	r3, r2
 801cebc:	bfc4      	itt	gt
 801cebe:	1a9b      	subgt	r3, r3, r2
 801cec0:	18ed      	addgt	r5, r5, r3
 801cec2:	2600      	movs	r6, #0
 801cec4:	341a      	adds	r4, #26
 801cec6:	42b5      	cmp	r5, r6
 801cec8:	d11a      	bne.n	801cf00 <_printf_common+0xc8>
 801ceca:	2000      	movs	r0, #0
 801cecc:	e008      	b.n	801cee0 <_printf_common+0xa8>
 801cece:	2301      	movs	r3, #1
 801ced0:	4652      	mov	r2, sl
 801ced2:	4649      	mov	r1, r9
 801ced4:	4638      	mov	r0, r7
 801ced6:	47c0      	blx	r8
 801ced8:	3001      	adds	r0, #1
 801ceda:	d103      	bne.n	801cee4 <_printf_common+0xac>
 801cedc:	f04f 30ff 	mov.w	r0, #4294967295
 801cee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cee4:	3501      	adds	r5, #1
 801cee6:	e7c6      	b.n	801ce76 <_printf_common+0x3e>
 801cee8:	18e1      	adds	r1, r4, r3
 801ceea:	1c5a      	adds	r2, r3, #1
 801ceec:	2030      	movs	r0, #48	; 0x30
 801ceee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801cef2:	4422      	add	r2, r4
 801cef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801cef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801cefc:	3302      	adds	r3, #2
 801cefe:	e7c7      	b.n	801ce90 <_printf_common+0x58>
 801cf00:	2301      	movs	r3, #1
 801cf02:	4622      	mov	r2, r4
 801cf04:	4649      	mov	r1, r9
 801cf06:	4638      	mov	r0, r7
 801cf08:	47c0      	blx	r8
 801cf0a:	3001      	adds	r0, #1
 801cf0c:	d0e6      	beq.n	801cedc <_printf_common+0xa4>
 801cf0e:	3601      	adds	r6, #1
 801cf10:	e7d9      	b.n	801cec6 <_printf_common+0x8e>
	...

0801cf14 <_printf_i>:
 801cf14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cf18:	460c      	mov	r4, r1
 801cf1a:	4691      	mov	r9, r2
 801cf1c:	7e27      	ldrb	r7, [r4, #24]
 801cf1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801cf20:	2f78      	cmp	r7, #120	; 0x78
 801cf22:	4680      	mov	r8, r0
 801cf24:	469a      	mov	sl, r3
 801cf26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cf2a:	d807      	bhi.n	801cf3c <_printf_i+0x28>
 801cf2c:	2f62      	cmp	r7, #98	; 0x62
 801cf2e:	d80a      	bhi.n	801cf46 <_printf_i+0x32>
 801cf30:	2f00      	cmp	r7, #0
 801cf32:	f000 80d8 	beq.w	801d0e6 <_printf_i+0x1d2>
 801cf36:	2f58      	cmp	r7, #88	; 0x58
 801cf38:	f000 80a3 	beq.w	801d082 <_printf_i+0x16e>
 801cf3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801cf40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801cf44:	e03a      	b.n	801cfbc <_printf_i+0xa8>
 801cf46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801cf4a:	2b15      	cmp	r3, #21
 801cf4c:	d8f6      	bhi.n	801cf3c <_printf_i+0x28>
 801cf4e:	a001      	add	r0, pc, #4	; (adr r0, 801cf54 <_printf_i+0x40>)
 801cf50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801cf54:	0801cfad 	.word	0x0801cfad
 801cf58:	0801cfc1 	.word	0x0801cfc1
 801cf5c:	0801cf3d 	.word	0x0801cf3d
 801cf60:	0801cf3d 	.word	0x0801cf3d
 801cf64:	0801cf3d 	.word	0x0801cf3d
 801cf68:	0801cf3d 	.word	0x0801cf3d
 801cf6c:	0801cfc1 	.word	0x0801cfc1
 801cf70:	0801cf3d 	.word	0x0801cf3d
 801cf74:	0801cf3d 	.word	0x0801cf3d
 801cf78:	0801cf3d 	.word	0x0801cf3d
 801cf7c:	0801cf3d 	.word	0x0801cf3d
 801cf80:	0801d0cd 	.word	0x0801d0cd
 801cf84:	0801cff1 	.word	0x0801cff1
 801cf88:	0801d0af 	.word	0x0801d0af
 801cf8c:	0801cf3d 	.word	0x0801cf3d
 801cf90:	0801cf3d 	.word	0x0801cf3d
 801cf94:	0801d0ef 	.word	0x0801d0ef
 801cf98:	0801cf3d 	.word	0x0801cf3d
 801cf9c:	0801cff1 	.word	0x0801cff1
 801cfa0:	0801cf3d 	.word	0x0801cf3d
 801cfa4:	0801cf3d 	.word	0x0801cf3d
 801cfa8:	0801d0b7 	.word	0x0801d0b7
 801cfac:	680b      	ldr	r3, [r1, #0]
 801cfae:	1d1a      	adds	r2, r3, #4
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	600a      	str	r2, [r1, #0]
 801cfb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801cfb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cfbc:	2301      	movs	r3, #1
 801cfbe:	e0a3      	b.n	801d108 <_printf_i+0x1f4>
 801cfc0:	6825      	ldr	r5, [r4, #0]
 801cfc2:	6808      	ldr	r0, [r1, #0]
 801cfc4:	062e      	lsls	r6, r5, #24
 801cfc6:	f100 0304 	add.w	r3, r0, #4
 801cfca:	d50a      	bpl.n	801cfe2 <_printf_i+0xce>
 801cfcc:	6805      	ldr	r5, [r0, #0]
 801cfce:	600b      	str	r3, [r1, #0]
 801cfd0:	2d00      	cmp	r5, #0
 801cfd2:	da03      	bge.n	801cfdc <_printf_i+0xc8>
 801cfd4:	232d      	movs	r3, #45	; 0x2d
 801cfd6:	426d      	negs	r5, r5
 801cfd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cfdc:	485e      	ldr	r0, [pc, #376]	; (801d158 <_printf_i+0x244>)
 801cfde:	230a      	movs	r3, #10
 801cfe0:	e019      	b.n	801d016 <_printf_i+0x102>
 801cfe2:	f015 0f40 	tst.w	r5, #64	; 0x40
 801cfe6:	6805      	ldr	r5, [r0, #0]
 801cfe8:	600b      	str	r3, [r1, #0]
 801cfea:	bf18      	it	ne
 801cfec:	b22d      	sxthne	r5, r5
 801cfee:	e7ef      	b.n	801cfd0 <_printf_i+0xbc>
 801cff0:	680b      	ldr	r3, [r1, #0]
 801cff2:	6825      	ldr	r5, [r4, #0]
 801cff4:	1d18      	adds	r0, r3, #4
 801cff6:	6008      	str	r0, [r1, #0]
 801cff8:	0628      	lsls	r0, r5, #24
 801cffa:	d501      	bpl.n	801d000 <_printf_i+0xec>
 801cffc:	681d      	ldr	r5, [r3, #0]
 801cffe:	e002      	b.n	801d006 <_printf_i+0xf2>
 801d000:	0669      	lsls	r1, r5, #25
 801d002:	d5fb      	bpl.n	801cffc <_printf_i+0xe8>
 801d004:	881d      	ldrh	r5, [r3, #0]
 801d006:	4854      	ldr	r0, [pc, #336]	; (801d158 <_printf_i+0x244>)
 801d008:	2f6f      	cmp	r7, #111	; 0x6f
 801d00a:	bf0c      	ite	eq
 801d00c:	2308      	moveq	r3, #8
 801d00e:	230a      	movne	r3, #10
 801d010:	2100      	movs	r1, #0
 801d012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d016:	6866      	ldr	r6, [r4, #4]
 801d018:	60a6      	str	r6, [r4, #8]
 801d01a:	2e00      	cmp	r6, #0
 801d01c:	bfa2      	ittt	ge
 801d01e:	6821      	ldrge	r1, [r4, #0]
 801d020:	f021 0104 	bicge.w	r1, r1, #4
 801d024:	6021      	strge	r1, [r4, #0]
 801d026:	b90d      	cbnz	r5, 801d02c <_printf_i+0x118>
 801d028:	2e00      	cmp	r6, #0
 801d02a:	d04d      	beq.n	801d0c8 <_printf_i+0x1b4>
 801d02c:	4616      	mov	r6, r2
 801d02e:	fbb5 f1f3 	udiv	r1, r5, r3
 801d032:	fb03 5711 	mls	r7, r3, r1, r5
 801d036:	5dc7      	ldrb	r7, [r0, r7]
 801d038:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d03c:	462f      	mov	r7, r5
 801d03e:	42bb      	cmp	r3, r7
 801d040:	460d      	mov	r5, r1
 801d042:	d9f4      	bls.n	801d02e <_printf_i+0x11a>
 801d044:	2b08      	cmp	r3, #8
 801d046:	d10b      	bne.n	801d060 <_printf_i+0x14c>
 801d048:	6823      	ldr	r3, [r4, #0]
 801d04a:	07df      	lsls	r7, r3, #31
 801d04c:	d508      	bpl.n	801d060 <_printf_i+0x14c>
 801d04e:	6923      	ldr	r3, [r4, #16]
 801d050:	6861      	ldr	r1, [r4, #4]
 801d052:	4299      	cmp	r1, r3
 801d054:	bfde      	ittt	le
 801d056:	2330      	movle	r3, #48	; 0x30
 801d058:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d05c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d060:	1b92      	subs	r2, r2, r6
 801d062:	6122      	str	r2, [r4, #16]
 801d064:	f8cd a000 	str.w	sl, [sp]
 801d068:	464b      	mov	r3, r9
 801d06a:	aa03      	add	r2, sp, #12
 801d06c:	4621      	mov	r1, r4
 801d06e:	4640      	mov	r0, r8
 801d070:	f7ff fee2 	bl	801ce38 <_printf_common>
 801d074:	3001      	adds	r0, #1
 801d076:	d14c      	bne.n	801d112 <_printf_i+0x1fe>
 801d078:	f04f 30ff 	mov.w	r0, #4294967295
 801d07c:	b004      	add	sp, #16
 801d07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d082:	4835      	ldr	r0, [pc, #212]	; (801d158 <_printf_i+0x244>)
 801d084:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d088:	6823      	ldr	r3, [r4, #0]
 801d08a:	680e      	ldr	r6, [r1, #0]
 801d08c:	061f      	lsls	r7, r3, #24
 801d08e:	f856 5b04 	ldr.w	r5, [r6], #4
 801d092:	600e      	str	r6, [r1, #0]
 801d094:	d514      	bpl.n	801d0c0 <_printf_i+0x1ac>
 801d096:	07d9      	lsls	r1, r3, #31
 801d098:	bf44      	itt	mi
 801d09a:	f043 0320 	orrmi.w	r3, r3, #32
 801d09e:	6023      	strmi	r3, [r4, #0]
 801d0a0:	b91d      	cbnz	r5, 801d0aa <_printf_i+0x196>
 801d0a2:	6823      	ldr	r3, [r4, #0]
 801d0a4:	f023 0320 	bic.w	r3, r3, #32
 801d0a8:	6023      	str	r3, [r4, #0]
 801d0aa:	2310      	movs	r3, #16
 801d0ac:	e7b0      	b.n	801d010 <_printf_i+0xfc>
 801d0ae:	6823      	ldr	r3, [r4, #0]
 801d0b0:	f043 0320 	orr.w	r3, r3, #32
 801d0b4:	6023      	str	r3, [r4, #0]
 801d0b6:	2378      	movs	r3, #120	; 0x78
 801d0b8:	4828      	ldr	r0, [pc, #160]	; (801d15c <_printf_i+0x248>)
 801d0ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d0be:	e7e3      	b.n	801d088 <_printf_i+0x174>
 801d0c0:	065e      	lsls	r6, r3, #25
 801d0c2:	bf48      	it	mi
 801d0c4:	b2ad      	uxthmi	r5, r5
 801d0c6:	e7e6      	b.n	801d096 <_printf_i+0x182>
 801d0c8:	4616      	mov	r6, r2
 801d0ca:	e7bb      	b.n	801d044 <_printf_i+0x130>
 801d0cc:	680b      	ldr	r3, [r1, #0]
 801d0ce:	6826      	ldr	r6, [r4, #0]
 801d0d0:	6960      	ldr	r0, [r4, #20]
 801d0d2:	1d1d      	adds	r5, r3, #4
 801d0d4:	600d      	str	r5, [r1, #0]
 801d0d6:	0635      	lsls	r5, r6, #24
 801d0d8:	681b      	ldr	r3, [r3, #0]
 801d0da:	d501      	bpl.n	801d0e0 <_printf_i+0x1cc>
 801d0dc:	6018      	str	r0, [r3, #0]
 801d0de:	e002      	b.n	801d0e6 <_printf_i+0x1d2>
 801d0e0:	0671      	lsls	r1, r6, #25
 801d0e2:	d5fb      	bpl.n	801d0dc <_printf_i+0x1c8>
 801d0e4:	8018      	strh	r0, [r3, #0]
 801d0e6:	2300      	movs	r3, #0
 801d0e8:	6123      	str	r3, [r4, #16]
 801d0ea:	4616      	mov	r6, r2
 801d0ec:	e7ba      	b.n	801d064 <_printf_i+0x150>
 801d0ee:	680b      	ldr	r3, [r1, #0]
 801d0f0:	1d1a      	adds	r2, r3, #4
 801d0f2:	600a      	str	r2, [r1, #0]
 801d0f4:	681e      	ldr	r6, [r3, #0]
 801d0f6:	6862      	ldr	r2, [r4, #4]
 801d0f8:	2100      	movs	r1, #0
 801d0fa:	4630      	mov	r0, r6
 801d0fc:	f7ee ffa8 	bl	800c050 <memchr>
 801d100:	b108      	cbz	r0, 801d106 <_printf_i+0x1f2>
 801d102:	1b80      	subs	r0, r0, r6
 801d104:	6060      	str	r0, [r4, #4]
 801d106:	6863      	ldr	r3, [r4, #4]
 801d108:	6123      	str	r3, [r4, #16]
 801d10a:	2300      	movs	r3, #0
 801d10c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d110:	e7a8      	b.n	801d064 <_printf_i+0x150>
 801d112:	6923      	ldr	r3, [r4, #16]
 801d114:	4632      	mov	r2, r6
 801d116:	4649      	mov	r1, r9
 801d118:	4640      	mov	r0, r8
 801d11a:	47d0      	blx	sl
 801d11c:	3001      	adds	r0, #1
 801d11e:	d0ab      	beq.n	801d078 <_printf_i+0x164>
 801d120:	6823      	ldr	r3, [r4, #0]
 801d122:	079b      	lsls	r3, r3, #30
 801d124:	d413      	bmi.n	801d14e <_printf_i+0x23a>
 801d126:	68e0      	ldr	r0, [r4, #12]
 801d128:	9b03      	ldr	r3, [sp, #12]
 801d12a:	4298      	cmp	r0, r3
 801d12c:	bfb8      	it	lt
 801d12e:	4618      	movlt	r0, r3
 801d130:	e7a4      	b.n	801d07c <_printf_i+0x168>
 801d132:	2301      	movs	r3, #1
 801d134:	4632      	mov	r2, r6
 801d136:	4649      	mov	r1, r9
 801d138:	4640      	mov	r0, r8
 801d13a:	47d0      	blx	sl
 801d13c:	3001      	adds	r0, #1
 801d13e:	d09b      	beq.n	801d078 <_printf_i+0x164>
 801d140:	3501      	adds	r5, #1
 801d142:	68e3      	ldr	r3, [r4, #12]
 801d144:	9903      	ldr	r1, [sp, #12]
 801d146:	1a5b      	subs	r3, r3, r1
 801d148:	42ab      	cmp	r3, r5
 801d14a:	dcf2      	bgt.n	801d132 <_printf_i+0x21e>
 801d14c:	e7eb      	b.n	801d126 <_printf_i+0x212>
 801d14e:	2500      	movs	r5, #0
 801d150:	f104 0619 	add.w	r6, r4, #25
 801d154:	e7f5      	b.n	801d142 <_printf_i+0x22e>
 801d156:	bf00      	nop
 801d158:	0801df0c 	.word	0x0801df0c
 801d15c:	0801df1d 	.word	0x0801df1d

0801d160 <memmove>:
 801d160:	4288      	cmp	r0, r1
 801d162:	b510      	push	{r4, lr}
 801d164:	eb01 0402 	add.w	r4, r1, r2
 801d168:	d902      	bls.n	801d170 <memmove+0x10>
 801d16a:	4284      	cmp	r4, r0
 801d16c:	4623      	mov	r3, r4
 801d16e:	d807      	bhi.n	801d180 <memmove+0x20>
 801d170:	1e43      	subs	r3, r0, #1
 801d172:	42a1      	cmp	r1, r4
 801d174:	d008      	beq.n	801d188 <memmove+0x28>
 801d176:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d17a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d17e:	e7f8      	b.n	801d172 <memmove+0x12>
 801d180:	4402      	add	r2, r0
 801d182:	4601      	mov	r1, r0
 801d184:	428a      	cmp	r2, r1
 801d186:	d100      	bne.n	801d18a <memmove+0x2a>
 801d188:	bd10      	pop	{r4, pc}
 801d18a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d18e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d192:	e7f7      	b.n	801d184 <memmove+0x24>

0801d194 <_free_r>:
 801d194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d196:	2900      	cmp	r1, #0
 801d198:	d048      	beq.n	801d22c <_free_r+0x98>
 801d19a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d19e:	9001      	str	r0, [sp, #4]
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	f1a1 0404 	sub.w	r4, r1, #4
 801d1a6:	bfb8      	it	lt
 801d1a8:	18e4      	addlt	r4, r4, r3
 801d1aa:	f000 f8d3 	bl	801d354 <__malloc_lock>
 801d1ae:	4a20      	ldr	r2, [pc, #128]	; (801d230 <_free_r+0x9c>)
 801d1b0:	9801      	ldr	r0, [sp, #4]
 801d1b2:	6813      	ldr	r3, [r2, #0]
 801d1b4:	4615      	mov	r5, r2
 801d1b6:	b933      	cbnz	r3, 801d1c6 <_free_r+0x32>
 801d1b8:	6063      	str	r3, [r4, #4]
 801d1ba:	6014      	str	r4, [r2, #0]
 801d1bc:	b003      	add	sp, #12
 801d1be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d1c2:	f000 b8cd 	b.w	801d360 <__malloc_unlock>
 801d1c6:	42a3      	cmp	r3, r4
 801d1c8:	d90b      	bls.n	801d1e2 <_free_r+0x4e>
 801d1ca:	6821      	ldr	r1, [r4, #0]
 801d1cc:	1862      	adds	r2, r4, r1
 801d1ce:	4293      	cmp	r3, r2
 801d1d0:	bf04      	itt	eq
 801d1d2:	681a      	ldreq	r2, [r3, #0]
 801d1d4:	685b      	ldreq	r3, [r3, #4]
 801d1d6:	6063      	str	r3, [r4, #4]
 801d1d8:	bf04      	itt	eq
 801d1da:	1852      	addeq	r2, r2, r1
 801d1dc:	6022      	streq	r2, [r4, #0]
 801d1de:	602c      	str	r4, [r5, #0]
 801d1e0:	e7ec      	b.n	801d1bc <_free_r+0x28>
 801d1e2:	461a      	mov	r2, r3
 801d1e4:	685b      	ldr	r3, [r3, #4]
 801d1e6:	b10b      	cbz	r3, 801d1ec <_free_r+0x58>
 801d1e8:	42a3      	cmp	r3, r4
 801d1ea:	d9fa      	bls.n	801d1e2 <_free_r+0x4e>
 801d1ec:	6811      	ldr	r1, [r2, #0]
 801d1ee:	1855      	adds	r5, r2, r1
 801d1f0:	42a5      	cmp	r5, r4
 801d1f2:	d10b      	bne.n	801d20c <_free_r+0x78>
 801d1f4:	6824      	ldr	r4, [r4, #0]
 801d1f6:	4421      	add	r1, r4
 801d1f8:	1854      	adds	r4, r2, r1
 801d1fa:	42a3      	cmp	r3, r4
 801d1fc:	6011      	str	r1, [r2, #0]
 801d1fe:	d1dd      	bne.n	801d1bc <_free_r+0x28>
 801d200:	681c      	ldr	r4, [r3, #0]
 801d202:	685b      	ldr	r3, [r3, #4]
 801d204:	6053      	str	r3, [r2, #4]
 801d206:	4421      	add	r1, r4
 801d208:	6011      	str	r1, [r2, #0]
 801d20a:	e7d7      	b.n	801d1bc <_free_r+0x28>
 801d20c:	d902      	bls.n	801d214 <_free_r+0x80>
 801d20e:	230c      	movs	r3, #12
 801d210:	6003      	str	r3, [r0, #0]
 801d212:	e7d3      	b.n	801d1bc <_free_r+0x28>
 801d214:	6825      	ldr	r5, [r4, #0]
 801d216:	1961      	adds	r1, r4, r5
 801d218:	428b      	cmp	r3, r1
 801d21a:	bf04      	itt	eq
 801d21c:	6819      	ldreq	r1, [r3, #0]
 801d21e:	685b      	ldreq	r3, [r3, #4]
 801d220:	6063      	str	r3, [r4, #4]
 801d222:	bf04      	itt	eq
 801d224:	1949      	addeq	r1, r1, r5
 801d226:	6021      	streq	r1, [r4, #0]
 801d228:	6054      	str	r4, [r2, #4]
 801d22a:	e7c7      	b.n	801d1bc <_free_r+0x28>
 801d22c:	b003      	add	sp, #12
 801d22e:	bd30      	pop	{r4, r5, pc}
 801d230:	20005188 	.word	0x20005188

0801d234 <_malloc_r>:
 801d234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d236:	1ccd      	adds	r5, r1, #3
 801d238:	f025 0503 	bic.w	r5, r5, #3
 801d23c:	3508      	adds	r5, #8
 801d23e:	2d0c      	cmp	r5, #12
 801d240:	bf38      	it	cc
 801d242:	250c      	movcc	r5, #12
 801d244:	2d00      	cmp	r5, #0
 801d246:	4606      	mov	r6, r0
 801d248:	db01      	blt.n	801d24e <_malloc_r+0x1a>
 801d24a:	42a9      	cmp	r1, r5
 801d24c:	d903      	bls.n	801d256 <_malloc_r+0x22>
 801d24e:	230c      	movs	r3, #12
 801d250:	6033      	str	r3, [r6, #0]
 801d252:	2000      	movs	r0, #0
 801d254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d256:	f000 f87d 	bl	801d354 <__malloc_lock>
 801d25a:	4921      	ldr	r1, [pc, #132]	; (801d2e0 <_malloc_r+0xac>)
 801d25c:	680a      	ldr	r2, [r1, #0]
 801d25e:	4614      	mov	r4, r2
 801d260:	b99c      	cbnz	r4, 801d28a <_malloc_r+0x56>
 801d262:	4f20      	ldr	r7, [pc, #128]	; (801d2e4 <_malloc_r+0xb0>)
 801d264:	683b      	ldr	r3, [r7, #0]
 801d266:	b923      	cbnz	r3, 801d272 <_malloc_r+0x3e>
 801d268:	4621      	mov	r1, r4
 801d26a:	4630      	mov	r0, r6
 801d26c:	f000 f862 	bl	801d334 <_sbrk_r>
 801d270:	6038      	str	r0, [r7, #0]
 801d272:	4629      	mov	r1, r5
 801d274:	4630      	mov	r0, r6
 801d276:	f000 f85d 	bl	801d334 <_sbrk_r>
 801d27a:	1c43      	adds	r3, r0, #1
 801d27c:	d123      	bne.n	801d2c6 <_malloc_r+0x92>
 801d27e:	230c      	movs	r3, #12
 801d280:	6033      	str	r3, [r6, #0]
 801d282:	4630      	mov	r0, r6
 801d284:	f000 f86c 	bl	801d360 <__malloc_unlock>
 801d288:	e7e3      	b.n	801d252 <_malloc_r+0x1e>
 801d28a:	6823      	ldr	r3, [r4, #0]
 801d28c:	1b5b      	subs	r3, r3, r5
 801d28e:	d417      	bmi.n	801d2c0 <_malloc_r+0x8c>
 801d290:	2b0b      	cmp	r3, #11
 801d292:	d903      	bls.n	801d29c <_malloc_r+0x68>
 801d294:	6023      	str	r3, [r4, #0]
 801d296:	441c      	add	r4, r3
 801d298:	6025      	str	r5, [r4, #0]
 801d29a:	e004      	b.n	801d2a6 <_malloc_r+0x72>
 801d29c:	6863      	ldr	r3, [r4, #4]
 801d29e:	42a2      	cmp	r2, r4
 801d2a0:	bf0c      	ite	eq
 801d2a2:	600b      	streq	r3, [r1, #0]
 801d2a4:	6053      	strne	r3, [r2, #4]
 801d2a6:	4630      	mov	r0, r6
 801d2a8:	f000 f85a 	bl	801d360 <__malloc_unlock>
 801d2ac:	f104 000b 	add.w	r0, r4, #11
 801d2b0:	1d23      	adds	r3, r4, #4
 801d2b2:	f020 0007 	bic.w	r0, r0, #7
 801d2b6:	1ac2      	subs	r2, r0, r3
 801d2b8:	d0cc      	beq.n	801d254 <_malloc_r+0x20>
 801d2ba:	1a1b      	subs	r3, r3, r0
 801d2bc:	50a3      	str	r3, [r4, r2]
 801d2be:	e7c9      	b.n	801d254 <_malloc_r+0x20>
 801d2c0:	4622      	mov	r2, r4
 801d2c2:	6864      	ldr	r4, [r4, #4]
 801d2c4:	e7cc      	b.n	801d260 <_malloc_r+0x2c>
 801d2c6:	1cc4      	adds	r4, r0, #3
 801d2c8:	f024 0403 	bic.w	r4, r4, #3
 801d2cc:	42a0      	cmp	r0, r4
 801d2ce:	d0e3      	beq.n	801d298 <_malloc_r+0x64>
 801d2d0:	1a21      	subs	r1, r4, r0
 801d2d2:	4630      	mov	r0, r6
 801d2d4:	f000 f82e 	bl	801d334 <_sbrk_r>
 801d2d8:	3001      	adds	r0, #1
 801d2da:	d1dd      	bne.n	801d298 <_malloc_r+0x64>
 801d2dc:	e7cf      	b.n	801d27e <_malloc_r+0x4a>
 801d2de:	bf00      	nop
 801d2e0:	20005188 	.word	0x20005188
 801d2e4:	2000518c 	.word	0x2000518c

0801d2e8 <_realloc_r>:
 801d2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2ea:	4607      	mov	r7, r0
 801d2ec:	4614      	mov	r4, r2
 801d2ee:	460e      	mov	r6, r1
 801d2f0:	b921      	cbnz	r1, 801d2fc <_realloc_r+0x14>
 801d2f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d2f6:	4611      	mov	r1, r2
 801d2f8:	f7ff bf9c 	b.w	801d234 <_malloc_r>
 801d2fc:	b922      	cbnz	r2, 801d308 <_realloc_r+0x20>
 801d2fe:	f7ff ff49 	bl	801d194 <_free_r>
 801d302:	4625      	mov	r5, r4
 801d304:	4628      	mov	r0, r5
 801d306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d308:	f000 f830 	bl	801d36c <_malloc_usable_size_r>
 801d30c:	42a0      	cmp	r0, r4
 801d30e:	d20f      	bcs.n	801d330 <_realloc_r+0x48>
 801d310:	4621      	mov	r1, r4
 801d312:	4638      	mov	r0, r7
 801d314:	f7ff ff8e 	bl	801d234 <_malloc_r>
 801d318:	4605      	mov	r5, r0
 801d31a:	2800      	cmp	r0, #0
 801d31c:	d0f2      	beq.n	801d304 <_realloc_r+0x1c>
 801d31e:	4631      	mov	r1, r6
 801d320:	4622      	mov	r2, r4
 801d322:	f7ff fa1f 	bl	801c764 <memcpy>
 801d326:	4631      	mov	r1, r6
 801d328:	4638      	mov	r0, r7
 801d32a:	f7ff ff33 	bl	801d194 <_free_r>
 801d32e:	e7e9      	b.n	801d304 <_realloc_r+0x1c>
 801d330:	4635      	mov	r5, r6
 801d332:	e7e7      	b.n	801d304 <_realloc_r+0x1c>

0801d334 <_sbrk_r>:
 801d334:	b538      	push	{r3, r4, r5, lr}
 801d336:	4d06      	ldr	r5, [pc, #24]	; (801d350 <_sbrk_r+0x1c>)
 801d338:	2300      	movs	r3, #0
 801d33a:	4604      	mov	r4, r0
 801d33c:	4608      	mov	r0, r1
 801d33e:	602b      	str	r3, [r5, #0]
 801d340:	f7f1 fb10 	bl	800e964 <_sbrk>
 801d344:	1c43      	adds	r3, r0, #1
 801d346:	d102      	bne.n	801d34e <_sbrk_r+0x1a>
 801d348:	682b      	ldr	r3, [r5, #0]
 801d34a:	b103      	cbz	r3, 801d34e <_sbrk_r+0x1a>
 801d34c:	6023      	str	r3, [r4, #0]
 801d34e:	bd38      	pop	{r3, r4, r5, pc}
 801d350:	2000856c 	.word	0x2000856c

0801d354 <__malloc_lock>:
 801d354:	4801      	ldr	r0, [pc, #4]	; (801d35c <__malloc_lock+0x8>)
 801d356:	f000 b811 	b.w	801d37c <__retarget_lock_acquire_recursive>
 801d35a:	bf00      	nop
 801d35c:	20008574 	.word	0x20008574

0801d360 <__malloc_unlock>:
 801d360:	4801      	ldr	r0, [pc, #4]	; (801d368 <__malloc_unlock+0x8>)
 801d362:	f000 b80c 	b.w	801d37e <__retarget_lock_release_recursive>
 801d366:	bf00      	nop
 801d368:	20008574 	.word	0x20008574

0801d36c <_malloc_usable_size_r>:
 801d36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d370:	1f18      	subs	r0, r3, #4
 801d372:	2b00      	cmp	r3, #0
 801d374:	bfbc      	itt	lt
 801d376:	580b      	ldrlt	r3, [r1, r0]
 801d378:	18c0      	addlt	r0, r0, r3
 801d37a:	4770      	bx	lr

0801d37c <__retarget_lock_acquire_recursive>:
 801d37c:	4770      	bx	lr

0801d37e <__retarget_lock_release_recursive>:
 801d37e:	4770      	bx	lr

0801d380 <_init>:
 801d380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d382:	bf00      	nop
 801d384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d386:	bc08      	pop	{r3}
 801d388:	469e      	mov	lr, r3
 801d38a:	4770      	bx	lr

0801d38c <_fini>:
 801d38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d38e:	bf00      	nop
 801d390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d392:	bc08      	pop	{r3}
 801d394:	469e      	mov	lr, r3
 801d396:	4770      	bx	lr
